/*! AgoraRTC|BUILD v3.6.11-0-gbdacc5f-dirty */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("AgoraRTC",[],t):"object"==typeof exports?exports.AgoraRTC=t():e.AgoraRTC=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=96)}([function(e,t,n){"use strict";n.r(t);var r,i=n(11),o=n.n(i),a=function(){var e=new Date;return e.toTimeString().split(" ")[0]+":"+e.getMilliseconds()},s=n(14),c=n(2),d=n(1),u=n(48),l=n.n(u),f=n(49),p=n.n(f),g=new Array(32).fill(void 0);function m(e){return g[e]}g.push(void 0,null,!0,!1);var h=g.length;function v(e){var t=m(e);return function(e){e<36||(g[e]=h,h=e)}(e),t}var E=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});E.decode();var S=null;function _(){return null!==S&&S.buffer===r.memory.buffer||(S=new Uint8Array(r.memory.buffer)),S}function y(e,t){return E.decode(_().subarray(e,e+t))}function R(e){h===g.length&&g.push(g.length+1);var t=h;return h=g[t],g[t]=e,t}var T=0,I=new TextEncoder("utf-8"),b="function"==typeof I.encodeInto?function(e,t){return I.encodeInto(e,t)}:function(e,t){var n=I.encode(e);return t.set(n),{read:e.length,written:n.length}};var A=null;function O(){return null!==A&&A.buffer===r.memory.buffer||(A=new Int32Array(r.memory.buffer)),A}var C=function(){function e(){l()(this,e)}return p()(e,[{key:"free",value:function(){var e=this.ptr;this.ptr=0,r.__wbg_signmanager_free(e)}},{key:"get_digest",value:function(e){return v(r.signmanager_get_digest(this.ptr,R(e)))}}],[{key:"__wrap",value:function(t){var n=Object.create(e.prototype);return n.ptr=t,n}},{key:"new",value:function(){var t=r.signmanager_new();return e.__wrap(t)}}]),e}(),N=!1,w=null;var L,D=0,k="free",M=[],P=[],x=0;(w?Promise.resolve(w):new Promise((function(e){N||r||function e(){var t={wbg:{}};t.wbg.__wbindgen_object_drop_ref=function(e){v(e)},t.wbg.__wbindgen_string_new=function(e,t){return R(y(e,t))},t.wbg.__wbindgen_string_get=function(e,t){var n=m(t),i="string"==typeof n?n:void 0,o=null==i?0:function(e,t,n){if(void 0===n){var r=I.encode(e),i=t(r.length);return _().subarray(i,i+r.length).set(r),T=r.length,i}for(var o=e.length,a=(i=t(o),_()),s=0;s<o;s++){var c=e.charCodeAt(s);if(c>127)break;a[i+s]=c}if(s!==o){0!==s&&(e=e.slice(s)),i=n(i,o,o=s+3*e.length);var d=_().subarray(i+s,i+o);s+=b(e,d).written}return T=s,i}(i,r.__wbindgen_malloc,r.__wbindgen_realloc),a=T;O()[e/4+1]=a,O()[e/4+0]=o},t.wbg.__wbindgen_throw=function(e,t){throw new Error(y(e,t))};for(var n=Uint8Array.from(atob(""),(function(e){return e.charCodeAt(0)})),i=new Uint8Array([177,156,215,89,13,111,230,1]),o=new Uint8Array(n.length),a=new Uint8Array(256),s=0;s<256;s++)a[s]=s;var c,d=0;for(s=0;s<256;s++){d=(d+a[s]+i[s%i.length])%256;var u=[a[d],a[s]];a[s]=u[0],a[d]=u[1]}s=0,d=0;for(var l=0;l<0+n.length;l++){d=(d+a[s=(s+1)%256])%256;var f=[a[d],a[s]];a[s]=f[0],a[d]=f[1],c=a[(a[s]+a[d])%256],l>=0&&(o[l-0]=n[l-0]^c)}return N=!0,new Promise((function(n){(function(e,t){return WebAssembly.instantiate(e,t)})(o.buffer,t).then((function(t){N=!1,r=t.instance.exports,e.__wbindgen_wasm_module=t.module,n()}))}))}().then((function(){w=C.new(),e(w)}))}))).then((function(e){L=e}));var U=!0;setInterval((function(){Object(c.getParameter)("UPLOAD_LOG")&&j.info("console log upload")}),9e5);var j=function(){var e,t,n,r,i,u,l=null,f=["DEBUG","INFO","WARNING","ERROR","NONE"],p=0,g=function(e,t,n){var r={};Array.isArray(e)||(e=[e]),e=e.map((function(e){return{log_item_id:D++,log_level:e.log_level,payload_str:e.payload}})),r={timestamp:Date.now(),sdk_version:c.VERSION,process_id:Object(d.getProcessId)(),payload:JSON.stringify(e)},L?r.hash=L.get_digest("".concat(r.payload).concat(r.process_id).concat(r.timestamp)):n&&n();try{var i=l,o=l||"https://".concat(Object(c.getParameter)("LOG_UPLOAD_SERVER"),"/upload/v2");Object(s.post)(o,r,(function(e){"OK"===e?t&&t(e):n&&n(e)}),(function(e){n&&n(e)}),i?{withCredentials:!0}:{withCredentials:!0,"Cache-Control":"no-cache, no-store",Pragma:"no-cache",Expires:"0"})}catch(e){n&&n(e)}},m=function(e,t){if(Object(c.getParameter)("UPLOAD_LOG"))try{t=Array.prototype.slice.call(t);var n="";if(t.forEach((function(e){"object"===o()(e)&&(e=JSON.stringify(e)),n=n+e+" "})),M.push({payload:n,log_level:e}),U)return;"free"===k&&function e(t){k="uploading",setTimeout((function(){g(t,(function(){x=0,0!==M.length?(P=M.length<10?M.splice(0,M.length):M.splice(0,10),e(P)):k="free"}),(function(){setTimeout((function(){e(P)}),x++<2?200:1e4)}))}),3e3)}(P=M.length<10?M.splice(0,M.length):M.splice(0,10))}catch(e){}};t=function(){for(var t=[0],n=0;n<arguments.length;n++)t.push(arguments[n]);e.apply(this,t)},n=function(){for(var t=[1],n=0;n<arguments.length;n++)t.push(arguments[n]);e.apply(this,t)},r=function(){for(var t=[2],n=0;n<arguments.length;n++)t.push(arguments[n]);e.apply(this,t)},i=function(){for(var t=[3],n=0;n<arguments.length;n++)t.push(arguments[n]);e.apply(this,t)};var h={};return u=function(e){h[e]||(r.apply(void 0,arguments),h[e]=!0)},{DEBUG:0,INFO:1,WARNING:2,ERROR:3,NONE:4,stopWaitJoin:function(){U=!1},enableLogUpload:function(){Object(c.setParameter)("UPLOAD_LOG",!0)},disableLogUpload:function(){Object(c.setParameter)("UPLOAD_LOG",!1)},setProxyServer:function(e){l=e?"https://".concat(e,"/ls/?h=").concat(Object(c.getParameter)("LOG_UPLOAD_SERVER"),"&p=443&d=upload/v2"):"https://".concat(Object(c.getParameter)("LOG_UPLOAD_SERVER"),"/upload/v2")},setLogLevel:function(e){e>4?e=4:e<0&&(e=0),p=e},log:e=function(){var e=arguments[0],t=arguments;if(t[0]=a()+" Agora-SDK ["+(f[e]||"DEFAULT")+"]:",m(e,t),!(e<p))switch(e){case 0:case 1:console.log.apply(console,t);break;case 2:console.warn.apply(console,t);break;case 3:console.log.apply(console,t);break;default:return void console.log.apply(console,t)}},debug:t,info:n,warning:r,deprecate:u,error:i}}();t.default=j},function(e,t,n){"use strict";n.r(t),n.d(t,"report",(function(){return A})),n.d(t,"SESSION_INIT",(function(){return v})),n.d(t,"JOIN_CHOOSE_SERVER",(function(){return E})),n.d(t,"JOIN_GATEWAY",(function(){return S})),n.d(t,"PUBLISH",(function(){return _})),n.d(t,"SUBSCRIBE",(function(){return y})),n.d(t,"getProcessId",(function(){return b}));var r=n(46),i=n.n(r),o=n(7),a=n.n(o),s=n(2),c=n(0),d=n(14),u=n(28),l=n.n(u),f=n(47);function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){i()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var m,h,v="session_init",E="join_choose_server",S="join_gateway",_="publish",y="subscribe",R=new(n.n(f).a),T={eventType:null,sid:null,lts:null,success:null,cname:null,uid:null,peer:null,cid:null,elapse:null,extend:null,vid:0},I=null,b=function(){return I||(I="process-"+l()(),c.default.info("processId: "+I)),I},A=(h=0,(m={list:{},setProxyServer:function(e){R.setProxy(e),m.proxyServerURL=e},getUrl:function(){return m.proxyServerURL?"https://".concat(m.proxyServerURL,"/rs/?h=").concat(Object(s.getParameter)("EVENT_REPORT_DOMAIN"),"&p=6443&d=events/message"):"https://".concat(Object(s.getParameter)("EVENT_REPORT_DOMAIN"),":6443/events/message")},getBackUrl:function(){return m.proxyServerURL?"https://".concat(m.proxyServerURL,"/rs/?h=").concat(Object(s.getParameter)("EVENT_REPORT_BACKUP_DOMAIN"),"&p=6443&d=events/message"):"https://".concat(Object(s.getParameter)("EVENT_REPORT_BACKUP_DOMAIN"),":6443/events/message")},getSessionStartTime:function(e){return m.list[e]?m.list[e].startTime:(c.default.DEBUG("[getSessionStartTime]: session ".concat(e," no exit")),0)},sessionInit:function(e,t){var n=a()({},T);n.startTime=+new Date,n.sid=e,n.cname=t.cname,m.list[e]=n;var r=a()({},{willUploadConsoleLog:Object(s.getParameter)("UPLOAD_LOG"),areaVersion:"global"},t.extend),i=a()({},n);i.eventType=v,i.appid=t.appid,i.browser=navigator.userAgent,i.build=s.BUILD,i.lts=+new Date,i.elapse=i.lts-i.startTime,i.extend=JSON.stringify(r),i.mode=t.mode,i.process=b(),i.success=t.succ,i.version=s.VERSION,delete i.startTime,m.send({type:"Session",data:i}),m._flushInvokeReport(e)},joinChooseServer2:function(e,t,n){if(m.list[e]){m.list[e].uid||(t.uid&&(m.list[e].uid=parseInt(t.uid)),t.cid&&(m.list[e].cid=parseInt(t.cid)),t.vid&&(m.list[e].vid=parseInt(t.vid)));var r=a()({},m.list[e]);r.eventType=E;var i=t.lts;r.lts=Date.now(),r.eventElapse=r.lts-i,r.chooseServerAddr=t.csAddr,r.errorCode=t.ec,r.elapse=r.lts-r.startTime,r.success=t.succ,r.chooseServerIp=t.chooseServerIp||"",r.chooseServerAddrList=JSON.stringify(t.serverList),delete r.startTime,m.send({type:"JoinChooseServer",data:r})}},joinChooseServer:function(e,t,n){if(m.list[e]){n&&(t.uid&&(m.list[e].uid=parseInt(t.uid)),t.cid&&(m.list[e].cid=parseInt(t.cid)),t.vid&&(m.list[e].vid=parseInt(t.vid)));var r=a()({},m.list[e]);r.eventType=E;var i=t.lts;r.lts=Date.now(),r.eventElapse=r.lts-i,r.chooseServerAddr=t.csAddr,r.errorCode=t.ec,r.elapse=r.lts-r.startTime,r.success=t.succ,r.chooseServerIp=t.chooseServerIp||"",r.chooseServerAddrList=JSON.stringify(t.serverList),delete r.startTime,m.send({type:"JoinChooseServer",data:r})}},reqUserAccount:function(e,t){t.vid&&(m.list[e].vid=parseInt(t.vid));var n=a()({},m.list[e]),r=t.lts;n.eventType="req_user_account",n.lts=Date.now(),n.success=t.success,n.serverAddress=t.serverAddress,n.stringUid=t.stringUid,n.uid=t.uid,n.errorCode=t.errorCode,n.elapse=n.lts-n.startTime,n.eventElapse=n.lts-r,n.extend="string"==typeof t.extend?t.extend:JSON.stringify(t.extend),delete n.startTime,m.send({type:"ReqUserAccount",data:n})},joinGateway:function(e,t){t.vid&&(m.list[e].vid=parseInt(t.vid)),t.uid&&(m.list[e].uid=parseInt(t.uid));var n=a()({},m.list[e]),r=t.lts;n.eventType=S,n.firstSuccess=t.firstSuccess,n.lts=Date.now(),n.gatewayAddr=t.addr,n.success=t.succ,n.errorCode=t.ec,n.elapse=n.lts-n.startTime,n.eventElapse=n.lts-r,delete n.startTime,m.send({type:"JoinGateway",data:n})},publish:function(e,t){var n=a()({},m.list[e]);n.eventType=_;var r=t.lts;n.lts=Date.now(),n.eventElapse=n.lts-r,n.elapse=n.lts-n.startTime,n.success=t.succ,n.errorCode=t.ec,n.audio=t.audio,n.video=t.video,n.screenshare=t.screenshare,n.publishRequestid=t.publishRequestid,n.p2pid=t.p2pid,t.videoName&&(n.videoName=t.videoName),t.audioName&&(n.audioName=t.audioName),t.screenName&&(n.screenName=t.screenName),delete n.startTime,m.send({type:"Publish",data:n}),m._flushInvokeReport(e)},subscribe:function(e,t){var n=a()({},m.list[e]);n.eventType=y;var r=t.lts;n.lts=Date.now(),n.eventElapse=n.lts-r,n.elapse=n.lts-n.startTime,n.errorCode=t.ec,n.success=t.succ,n.subscribeRequestid=t.subscribeRequestid,n.p2pid=t.p2pid,isFinite(t.peerid)?n.peer=t.peerid:n.peerSuid=""+t.peerid,"boolean"==typeof t.video&&(n.video=t.video),"boolean"==typeof t.audio&&(n.audio=t.audio),delete n.startTime,m.send({type:"Subscribe",data:n}),m._flushInvokeReport(e)},firstRemoteFrame:function(e,t){var n=a()({},m.list[e]);n.eventType="first_remote_frame";var r=t.lts;n.lts=Date.now(),n.eventElapse=n.lts-r,n.elapse=n.lts-n.startTime,n.width=t.width,n.height=t.height,n.success=t.succ,n.errorCode=t.ec,isFinite(t.peerid)?n.peer=t.peerid:n.peerSuid=""+t.peerid,delete n.startTime,m.send({type:"FirstFrame",data:n})},firstVideoReceived:function(e,t){var n=a()({},m.list[e]);n.eventType="first_video_received",n.lts=Date.now(),n.peer=t.peerid,n.uid=t.uid,n.elapse=t.elapse,n.subscribeElapse=t.subscribeElapse,n.subscribeRequestid=t.subscribeRequestid,n.p2pid=t.p2pid,m.send({type:"FirstVideoReceived",data:n})},firstAudioReceived:function(e,t){var n=a()({},m.list[e]);n.eventType="first_audio_received",n.lts=Date.now(),n.peer=t.peerid,n.uid=t.uid,n.elapse=t.elapse,n.subscribeElapse=t.subscribeElapse,n.subscribeRequestid=t.subscribeRequestid,n.p2pid=t.p2pid,m.send({type:"FirstAudioReceived",data:n})},firstVideoDecode:function(e,t){var n=a()({},m.list[e]);n.eventType="first_video_decode",n.lts=Date.now(),n.peer=t.peerid,n.uid=t.uid,n.elapse=t.elapse,n.videowidth=t.width,n.videoheight=t.height,n.subscribeElapse=t.subscribeElapse,n.subscribeRequestid=t.subscribeRequestid,n.p2pid=t.p2pid,m.send({type:"FirstVideoDecode",data:n})},firstAudioDecode:function(e,t){var n=a()({},m.list[e]);n.eventType="first_audio_decode",n.lts=Date.now(),n.uid=t.uid,n.peer=t.peerid,n.elapse=t.elapse,n.subscribeElapse=t.subscribeElapse,n.subscribeRequestid=t.subscribeRequestid,n.p2pid=t.p2pid,m.send({type:"FirstAudioDecode",data:n})},onAddAudioStream:function(e,t){var n=a()({},m.list[e]);n.eventType="on_add_audio_stream",n.lts=Date.now(),n.uid=t.uid,n.peer=t.peerid,m.send({type:"OnAddAudioStream",data:n})},onAddVideoStream:function(e,t){var n=a()({},m.list[e]);n.eventType="on_add_video_stream",n.lts=Date.now(),n.uid=t.uid,n.peer=t.peerid,m.send({type:"OnAddVideoStream",data:n})},onUpdateStream:function(e,t){var n=a()({},m.list[e]);n.eventType="on_update_stream",n.lts=Date.now(),n.uid=t.uid,n.peer=t.peerid,n.audio=t.audio,n.video=t.video,m.send({type:"OnUpdateStream",data:n})},onRemoveStream:function(e,t){var n=a()({},m.list[e]);n.eventType="on_remove_stream",n.lts=Date.now(),n.uid=t.uid,n.peer=t.peerid,m.send({type:"OnRemoveStream",data:n})},streamSwitch:function(e,t){var n=a()({},m.list[e]);n.eventType="stream_switch",n.lts=Date.now(),n.isDual=t.isdual,n.elapse=n.lts-n.startTime,n.success=n.succ,delete n.startTime,m.send({type:"StreamSwitch",data:n})},audioSendingStopped:function(e,t){var n=a()({},m.list[e]);n.eventType="audio_sending_stopped",n.lts=Date.now(),n.elapse=n.lts-n.startTime,n.reason=t.reason,n.success=t.succ,delete n.startTime,m.send({type:"AudioSendingStopped",data:n})},videoSendingStopped:function(e,t){var n=a()({},m.list[e]);n.eventType="video_sending_stopped",n.lts=Date.now(),n.elapse=n.lts-n.startTime,n.reson=t.reason,n.success=t.succ,delete n.startTime,m.send({type:"VideoSendingStopped",data:n})},requestProxyAppCenter:function(e,t){var n=a()({},m.list[e]),r=t.lts;n.eventType="request_proxy_appcenter",n.lts=Date.now(),n.eventElapse=n.lts-r,n.elapse=n.lts-n.startTime,n.extend=t.extend+"",n.APAddr=t.APAddr,n.workerManagerList=t.workerManagerList,n.response=t.response,n.errorCode=t.ec,n.success=t.succ,delete n.startTime,m.send({type:"RequestProxyAppCenter",data:n})},requestProxyWorkerManager:function(e,t){var n=a()({},m.list[e]),r=t.lts;n.eventType="request_proxy_worker_manager",n.lts=Date.now(),n.eventElapse=n.lts-r,n.elapse=n.lts-n.startTime,n.extend=t.extend,n.workerManagerAddr=t.workerManagerAddr,n.response=t.response,n.errorCode=t.ec,n.success=t.succ,delete n.startTime,m.send({type:"RequestProxyWorkerManager",data:n})},requestWorkerEvent:function(e,t){var n=a()({},m.list[e]),r=n.startTime,i=Date.now();delete(n=g({},n,{},t,{elapse:i-r,lts:i,productType:"WebRTC"})).startTime,m.send({type:"WorkerEvent",data:n})},requestApWorkerEvent:function(e,t){var n=a()({},m.list[e]),r=n.startTime,i=Date.now();n=g({},n,{},t,{elapse:i-r,lts:i}),m.send({type:"APWorkerEvent",data:n})},sendCustomReportMessage:function(e,t,n){var r={type:"UserAnalytics",data:g({sid:e},t)},i=m.getUrl(),o=!!m.proxyServerURL;Object(d.post)(i,r,(function(e){n&&n()}),(function(e){var t=m.getBackUrl();Object(d.post)(t,r,(function(e){n&&n()}),(function(e){n&&n("Failed")}),o?{timeout:Object(s.getParameter)("CUSTOMER_REPORT_TIMEOUT")}:{timeout:Object(s.getParameter)("CUSTOMER_REPORT_TIMEOUT"),"Cache-Control":"no-cache, no-store",Pragma:"no-cache",Expires:"0"})}),o?{timeout:Object(s.getParameter)("CUSTOMER_REPORT_TIMEOUT")}:{timeout:Object(s.getParameter)("CUSTOMER_REPORT_TIMEOUT"),"Cache-Control":"no-cache, no-store",Pragma:"no-cache",Expires:"0"})},joinChannelTimeOut:function(e){m.send({type:"JoinChannelTimeout",data:g({},e)})},peerPublishStatus:function(e){m.send({type:"PeerPublishStatus",data:g({},e)})},joinWebProxyAP:function(e){m.send({type:"JoinWebProxyAP",data:g({},e)})},webSocketQuit:function(e){m.send({type:"WebSocketQuit",data:g({},e)})}}).reportApiInvoke=function(e,t){var n=t.tag,r=t.name,i=t.getStates,o=t.options,a=t.timeout,d=void 0===a?6e4:a,u=t.callback,l=t.reportResult,f=void 0===l||l,p=Date.now(),m=0,v=h++,E=function(){return g({tag:n,invokeId:v,sid:e,name:r,apiInvokeTime:p,options:o},i&&{states:(t=i(),Object.keys(t).reduce((function(e,n){var r=e;return null!=t[n]&&(r[n]=t[n]),r}),{}))});var t},S=!!Object(s.getParameter)("SHOW_REPORT_INVOKER_LOG");S&&c.default.info("".concat(r," start"));var _=setTimeout((function(){A._sendApiInvoke(g({},E(),{error:"API_INVOKE_TIMEOUT",success:!1}))}),d);return function(e,t){if(clearTimeout(_),++m>1&&(e="EXECUTOR_INVOKE_".concat(m)),e)return A._sendApiInvoke(g({},E(),{success:!1,error:e},i&&{states:i()})),S&&c.default.info("".concat(r," onFailure"),e),u&&u(e);A._sendApiInvoke(g({},E(),{success:!0},f&&{result:t},{},i&&{states:i()})),S&&c.default.info("".concat(r," onSuccess")),u&&u(null,t)}},m._cachedItems=[],m._cacheInvokeReport=function(e){e.lts||(e.lts=Date.now()),m._cachedItems.push(e),m._cachedItems.length>50&&m._cachedItems.shift()},m._flushInvokeReport=function(e){if(m._cachedItems.length){var t=m._cachedItems;m._cachedItems=[],c.default.debug("Flush cached event reporting:",t.length),t.forEach((function(t,n){t.sid=e,setTimeout((function(){m._sendApiInvoke(t)}),5e3+500*n)}))}},m._sendApiInvoke=function(e){var t=e.tag,n=e.invokeId,r=e.sid,i=e.name,o=e.result,a=e.states,c=e.options,d=e.error,u=e.success,l=e.apiInvokeTime,f=e.lts,p=Object(s.getParameter)("NOT_REPORT_EVENT");if(!(t&&p instanceof Array&&-1!==p.indexOf(t)))if(m.list[r]){var h=m.list[r],v=h.startTime,E=h.cname,S=h.uid,_=h.cid,y=(f=f||Date.now())-v,R=f-l,T="";if(c)try{T=JSON.stringify(c)}catch(e){T=c.toString()}var I=g({invokeId:n,sid:r,cname:E,cid:_,lts:f,uid:S,success:u,elapse:y,apiName:i,execElapse:R},void 0!==c&&{options:T},{},void 0!==a&&{execStates:JSON.stringify(a)},{},void 0!==d&&{errorCode:JSON.stringify(d)},{},void 0!==o&&{execResult:JSON.stringify(o)});m.send({type:"ApiInvoke",data:I})}else m._cacheInvokeReport(arguments[0])},m.sendCache=[],m.sendTimer=null,m.send=function(e){if(e.data){var t=e.data;m._lastLts&&m._lastLts>=t.lts&&(t.lts=m._lastLts+1),m._lastLts=t.lts}if(m.sendCache.push(e),null===m.sendTimer)return function e(){m.sendTimer=setTimeout((function(){if(0!==m.sendCache.length){var t=m.sendCache.length<10?m.sendCache.splice(0,m.sendCache.length):m.sendCache.splice(0,10),n=m.list[t[0].data.sid].vid;return R.sendReportList(t,n),e()}m.sendTimer=null}),Object(s.getParameter)("EVENT_REPORT_SEND_INTERVAL"))}()},m)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.BUILD="v3.6.11-0-gbdacc5f-dirty";t.VERSION="3.6.11";var r=0*Date.now()+11499+86604+5615+6547+846;t.SUPPORT_RESOLUTION_LIST={"90p_1":[160,90,null,null,null,null],"120p_1":[160,120,15,15,30,65],"120p_3":[120,120,15,15,30,50],"120p_4":[212,120,null,null,null,null],"180p_1":[320,180,15,15,30,140],"180p_3":[180,180,15,15,30,100],"180p_4":[240,180,15,15,30,120],"240p_1":[320,240,15,15,40,200],"240p_3":[240,240,15,15,40,140],"240p_4":[424,240,15,15,40,220],"360p_1":[640,360,15,15,80,400],"360p_3":[360,360,15,15,80,260],"360p_4":[640,360,30,30,80,600],"360p_6":[360,360,30,30,80,400],"360p_7":[480,360,15,15,80,320],"360p_8":[480,360,30,30,80,490],"360p_9":[640,360,15,15,80,800],"360p_10":[640,360,24,24,80,800],"360p_11":[640,360,24,24,80,1e3],"480p_1":[640,480,15,15,100,500,1,5],"480p_2":[640,480,30,30,100,1e3,25,30],"480p_3":[480,480,15,15,100,400],"480p_4":[640,480,30,30,100,750],"480p_6":[480,480,30,30,100,600],"480p_8":[848,480,15,15,100,610],"480p_9":[848,480,30,30,100,930],"480p_10":[640,480,10,10,100,400],"720p_1":[1280,720,15,15,120,1130,1,5],"720p_2":[1280,720,30,30,120,2e3,25,30],"720p_3":[1280,720,30,30,120,1710],"720p_5":[960,720,15,15,120,910],"720p_6":[960,720,30,30,120,1380],"1080p_1":[1920,1080,15,15,120,2080,1,5],"1080p_2":[1920,1080,30,30,120,3e3,25,30],"1080p_3":[1920,1080,30,30,120,3150],"1080p_5":[1920,1080,60,60,120,4780],"1440p_1":[2560,1440,30,30,120,4850],"1440p_2":[2560,1440,60,60,120,7350],"4k_1":[3840,2160,30,30,120,8910],"4k_3":[3840,2160,60,60,120,13500]};t.AUDIO_PROFILE_SETTINGS={speech_low_quality:[!1,!1,!0,!0],speech_standard:[!1,!1,!0,!1],music_standard:[!1,!1,!1,!1],standard_stereo:[!1,!0,!1,!1],high_quality:[!0,!1,!1,!1],high_quality_stereo:[!0,!0,!1,!1],default:[!1,!1,!1,!1]};var i={AREA_SETTING:["NORTH_AMERICA","OVERSEA"],WEBCS_DOMAIN:["ap-web-1-oversea.agora.io","ap-web-1-north-america.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-oversea.agora.io","ap-web-2-north-america.agora.io"],PROXY_CS:["proxy-ap-web-oversea.agora.io","proxy-ap-web-america.agora.io"],CDS_AP:["cds-ap-web-oversea.agora.io","cds-ap-web-america.agora.io","cds-ap-web-america2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-oversea.agora.io","sua-ap-web-america.agora.io","sua-ap-web-america2.agora.io"],UAP_AP:["uap-ap-web-oversea.agora.io","uap-ap-web-america.agora.io","uap-ap-web-america2.agora.io"],LOG_UPLOAD_SERVER:"logservice-oversea.agora.io",EVENT_REPORT_DOMAIN:"statscollector-1-oversea.agora.io",EVENT_REPORT_BACKUP_DOMAIN:"statscollector-2-oversea.agora.io",ENABLE_LIVE_SERVER_LIST:!1,LIVE_SERVER_LIST:[],ACCOUNT_REGISTER_RETRY_TIMEOUT:1,ACCOUNT_REGISTER_RETRY_RATIO:2,ACCOUNT_REGISTER_RETRY_TIMEOUT_MAX:6e4,ACCOUNT_REGISTER_RETRY_COUNT_MAX:1e5,AUDIO_CONTEXT:null,GATEWAY_DOMAINS:["edge.agora.io"],WEBCS_BACKUP_CONNECT_TIMEOUT:6e3,LIVESTREAMING_ALIGN:!0,HTTP_CONNECT_TIMEOUT:5e3,PLAYER_STATE_DEFER:2e3,SIGNAL_REQUEST_TIMEOUT:1e7,SIGNAL_REQUEST_WATCH_INTERVAL:1e3,REPORT_STATS:!0,REPORT_STATS_TIMEOUT:3e3,UPLOAD_LOG:!1,NOT_REPORT_EVENT:[],FILEPATH_LENMAX:255,SUBSCRIBE_TCC:!1,PING_PONG_TIME_OUT:10,DUALSTREAM_OPERATION_CHECK:!0,WEBSOCKET_TIMEOUT_MIN:1e4,EVENT_REPORT_SEND_INTERVAL:1e3,MEDIA_ELEMENT_EXISTS_DEPTH:3,CANDIDATE_TIMEOUT:2e3,SHIM_CANDIDATE:!1,LEAVE_MSG_TIMEOUT:2e3,TICKET_RENEW_TIMEOUT:828e5,LIVE_STREAMING_TIMEOUT:12e4,SHOW_REPORT_INVOKER_LOG:!1,STATS_FILTER:{transportId:!0,googTrackId:!0},FORCE_TURN:!1,TURN_ENABLE_TCP:!0,TURN_ENABLE_UDP:!0,FORCE_CHANGED_GATEWAY_FLAG:!1,JOIN_EXTEND:"",PUB_EXTEND:"",SUB_EXTEND:"",CHROME_NEW_STATS:!1,AP_BACKOFF_MAX_TIME:8,SET_DEFAULT_TURNSERVER:!0,TURN_SERVER_PASSWORD:r.toString(),PROXY_SERVER_TYPE2:"webnginx-proxy.agora.io",NGINX:"webrtc-cloud-proxy.agora.io",PROXY_SERVER_TYPE3:["webrtc-cloud-proxy.sd-rtn.com","webrtc-cloud-proxy.agora.io"],CR:!0,CRL:10,CRI:6,CUSTOMER_REPORT_TIMEOUT:5e3,LIVE_STREAMING_ADDRESS:"",CHOOSE_SERVER_FRAGEMENT_LENGTH:4,PLAN:"plan-b"};i.AREA_SETTING=["CHINA","GLOBAL"],i.WEBCS_DOMAIN=["webrtc2-ap-web-1.agora.io","webrtc2-2.ap.sd-rtn.com"],i.WEBCS_DOMAIN_BACKUP_LIST=["webrtc2-ap-web-3.agora.io","webrtc2-4.ap.sd-rtn.com"],i.PROXY_CS=["ap-proxy-1.agora.io","ap-proxy-2.agora.io"],i.CDS_AP=["cds-ap-web-1.agora.io","cds-web-2.ap.sd-rtn.com","cds-ap-web-3.agora.io","cds-web-4.ap.sd-rtn.com"],i.ACCOUNT_REGISTER=["sua-ap-web-1.agora.io","sua-web-2.ap.sd-rtn.com","sua-ap-web-3.agora.io","sua-web-4.ap.sd-rtn.com"],i.UAP_AP=["uap-ap-web-1.agora.io","uap-web-2.ap.sd-rtn.com","uap-ap-web-3.agora.io","uap-web-4.ap.sd-rtn.com"],i.LOG_UPLOAD_SERVER="logservice.agora.io",i.EVENT_REPORT_DOMAIN="web-2.statscollector.sd-rtn.com",i.EVENT_REPORT_BACKUP_DOMAIN="web-3.statscollector.sd-rtn.com",i.GATEWAY_DOMAINS=["edge.agora.io","edge.sd-rtn.com"],i.NGINX="webrtc-cloud-proxy.sd-rtn.com",i.PROXY_SERVER_TYPE3=["webrtc-cloud-proxy.sd-rtn.com","webrtc-cloud-proxy.agora.io"];t.setParameter=function(e,t){return void 0!==i[e]&&(i[e]=t,!0)};t.getParameter=function(e){return void 0!==i[e]?i[e]:null}},function(e,t,n){"use strict";n.r(t),n.d(t,"checkValidObject",(function(){return c})),n.d(t,"checkValidString",(function(){return d})),n.d(t,"checkValidNumber",(function(){return u})),n.d(t,"checkValidArray",(function(){return l})),n.d(t,"checkValidFloatNumber",(function(){return f})),n.d(t,"checkValidBoolean",(function(){return p})),n.d(t,"checkValidEnum",(function(){return s})),n.d(t,"checkValidUID",(function(){return g})),n.d(t,"isValidString",(function(){return m})),n.d(t,"isValidNumber",(function(){return h})),n.d(t,"isValidBoolean",(function(){return E})),n.d(t,"isASCII",(function(){return y})),n.d(t,"isInteger",(function(){return R})),n.d(t,"isNumber",(function(){return T})),n.d(t,"isString",(function(){return I})),n.d(t,"isArray",(function(){return b})),n.d(t,"isEmpty",(function(){return A})),n.d(t,"isValidToken",(function(){return S})),n.d(t,"isValidChannelName",(function(){return _}));var r=n(11),i=n.n(r),o=n(10),a=n(0),s=function(e,t,n){for(var r=0;r<n.length;r++)if(e===n[r])return!0;throw new Error("".concat(t," can only be set as ").concat(JSON.stringify(n)))},c=function(e,t){if(!e)throw new Error("Invalid param: ".concat(t||"param"," cannot be empty"));if("object"!==i()(e))throw new Error("".concat(t||"This paramter"," is of the object type"));return!0},d=function(e,t,n,r,i){if(A(n)&&(n=1),r=r||255,A(i)&&(i=!0),A(e))throw new Error("".concat(t||"param"," cannot be empty"));if(!m(e,n,r,i))throw new Error("Invalid ".concat(t||"string param",": Length of the string: [").concat(n,",").concat(r,"].").concat(i?" ASCII characters only.":""))},u=function(e,t,n,r){if(A(n)&&(n=1),r=r||1e4,A(e))throw new Error("".concat(t||"param"," cannot be empty"));if(!h(e,n,r))throw new Error("Invalid ".concat(t||"number param",": The value range is [").concat(n,",").concat(r,"]. integer only"))},l=function(e,t){if(!Array.isArray(e))throw new Error("".concat(t," should be an array"))},f=function(e,t,n,r){if(null==e)throw new Error("".concat(t||"param"," cannot be null"));if(A(n)&&(n=0),r=r||1e4,A(e))throw new Error("".concat(t||"param"," cannot be empty"));if(!v(e,n,r))throw new Error("Invalid ".concat(t||"number param",": The value range is [").concat(n,",").concat(r,"]."))},p=function(e,t){if(A(e))throw new Error("".concat(t||"param"," cannot be empty"));if(!E(e))throw new Error("Invalid ".concat(t||"boolean param",": The value is of the boolean type."))},g=function(e){if(!Object(o.is32Uint)(e)&&!m(e,1,255))throw a.default.error("Invalid UID ".concat(e," ").concat(i()(e))),new Error("[String uid] Length of the string: [1,255]. ASCII characters only. [Number uid] The value range is [0,10000]")},m=function(e,t,n,r){return t||(t=0),n||(n=Number.MAX_SAFE_INTEGER),A(r)&&(r=!0),I(e)&&(!r||y(e))&&e.length>=t&&e.length<=n},h=function(e,t,n){return R(e)&&e>=t&&e<=n},v=function(e,t,n){return T(e)&&e>=t&&e<=n},E=function(e){return"boolean"==typeof e},S=function(e){return m(e,1,2047)},_=function(e){return I(e)&&/^[a-zA-Z0-9 \!\#\$\%\&\(\)\+\-\:\;\<\=\.\>\?\@\[\]\^\_\{\}\|\~\,]{1,64}$/.test(e)},y=function(e){if("string"==typeof e){for(var t=0;t<e.length;t++){var n=e.charCodeAt(t);if(n<0||n>255)return!1}return!0}},R=function(e){return"number"==typeof e&&e%1==0},T=function(e){return"number"==typeof e},I=function(e){return"string"==typeof e},b=function(e){return e instanceof Array},A=function(e){return null==e}},function(e,t,n){"use strict";n.r(t),n.d(t,"getBrowserInfo",(function(){return E})),n.d(t,"getBrowserVersion",(function(){return f})),n.d(t,"getBrowserOS",(function(){return p})),n.d(t,"isChrome",(function(){return r})),n.d(t,"isSafari",(function(){return i})),n.d(t,"isFireFox",(function(){return a})),n.d(t,"isOpera",(function(){return s})),n.d(t,"isEdge",(function(){return o})),n.d(t,"isQQBrowser",(function(){return c})),n.d(t,"isWeChatBrowser",(function(){return d})),n.d(t,"isLegacyChrome",(function(){return m})),n.d(t,"isSupportedPC",(function(){return u})),n.d(t,"isSupportedMobile",(function(){return l})),n.d(t,"getChromeKernelVersion",(function(){return v})),n.d(t,"isChromeKernel",(function(){return g}));var r=function(){var e=E();return e.name&&"Chrome"===e.name},i=function(){var e=E();return e.name&&"Safari"===e.name},o=function(){var e=E();return e.name&&"Edge"===e.name},a=function(){var e=E();return e.name&&"Firefox"===e.name},s=function(){var e=E();return e.name&&"OPR"===e.name},c=function(){var e=E();return e.name&&"QQBrowser"===e.name},d=function(){var e=E();return e.name&&"MicroMessenger"===e.name},u=function(){var e=p();return"Linux"===e||"Mac OS X"===e||"Mac OS"===e||-1!==e.indexOf("Windows")},l=function(){var e=p();return"Android"===e||"iOS"===e},f=function(){return E().version},p=function(){return E().os},g=function(){return!!navigator.userAgent.match(/chrome\/[\d]+/i)};function m(){return window.navigator.appVersion&&null!==window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./)&&window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./)[1]<=35}var h,v=function(){var e=navigator.userAgent.match(/chrome\/[\d]+/i);return e&&e[0]&&e[0].split("/")[1]},E=(h=function(){var e,t=navigator.userAgent,n=t.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];"Chrome"===n[1]&&null!=(e=t.match(/(OPR(?=\/))\/?(\d+)/i))&&(n=e),"Safari"===n[1]&&null!=(e=t.match(/version\/(\d+)/i))&&(n[2]=e[1]),~t.toLowerCase().indexOf("qqbrowser")&&null!=(e=t.match(/(qqbrowser(?=\/))\/?(\d+)/i))&&(n=e),~t.toLowerCase().indexOf("micromessenger")&&null!=(e=t.match(/(micromessenger(?=\/))\/?(\d+)/i))&&(n=e),~t.toLowerCase().indexOf("edge")&&null!=(e=t.match(/(edge(?=\/))\/?(\d+)/i))&&(n=e),~t.toLowerCase().indexOf("trident")&&null!=(e=/\brv[ :]+(\d+)/g.exec(t)||[])&&(n=[null,"IE",e[1]]);var r=void 0,i=[{s:"Windows 10",r:/(Windows 10.0|Windows NT 10.0)/},{s:"Windows 8.1",r:/(Windows 8.1|Windows NT 6.3)/},{s:"Windows 8",r:/(Windows 8|Windows NT 6.2)/},{s:"Windows 7",r:/(Windows 7|Windows NT 6.1)/},{s:"Windows Vista",r:/Windows NT 6.0/},{s:"Windows Server 2003",r:/Windows NT 5.2/},{s:"Windows XP",r:/(Windows NT 5.1|Windows XP)/},{s:"Windows 2000",r:/(Windows NT 5.0|Windows 2000)/},{s:"Windows ME",r:/(Win 9x 4.90|Windows ME)/},{s:"Windows 98",r:/(Windows 98|Win98)/},{s:"Windows 95",r:/(Windows 95|Win95|Windows_95)/},{s:"Windows NT 4.0",r:/(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/},{s:"Windows CE",r:/Windows CE/},{s:"Windows 3.11",r:/Win16/},{s:"Android",r:/Android/},{s:"Open BSD",r:/OpenBSD/},{s:"Sun OS",r:/SunOS/},{s:"Linux",r:/(Linux|X11)/},{s:"iOS",r:/(iPhone|iPad|iPod)/},{s:"Mac OS X",r:/Mac OS X/},{s:"Mac OS",r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/},{s:"QNX",r:/QNX/},{s:"UNIX",r:/UNIX/},{s:"BeOS",r:/BeOS/},{s:"OS/2",r:/OS\/2/},{s:"Search Bot",r:/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/}];for(var o in i){var a=i[o];if(a.r.test(navigator.userAgent)){r=a.s;break}}return{name:n[1],version:n[2],os:r}}(),function(){return h})},function(e,t,n){"use strict";n.r(t),n.d(t,"APErrorCode",(function(){return r})),n.d(t,"GatewayErrorCode",(function(){return i})),n.d(t,"StringUidErrorCode",(function(){return o})),n.d(t,"JOIN_GS_TRYNEXT_LIST",(function(){return a})),n.d(t,"JOIN_CS_RETRY_LIST",(function(){return s})),n.d(t,"JOIN_PROXY_RETRY_LIST",(function(){return c})),n.d(t,"INJECT_STREAM_STATUS",(function(){return d})),n.d(t,"WEBSOCKET_CLOSE_REASON",(function(){return u}));var r={1010100:"NO_FLAG_SET",1010101:"FLAG_SET_BUT_EMPTY",1010102:"INVALID_FALG_SET",2010005:"INVALID_VENDOR_KEY",2010007:"INVALID_CHANNEL_NAME",2010008:"INTERNAL_ERROR",2010009:"NO_AUTHORIZED",2010010:"DYNAMIC_KEY_TIMEOUT",2010011:"NO_ACTIVE_STATUS",2010013:"DYNAMIC_KEY_EXPIRED",2010014:"STATIC_USE_DYANMIC_KEY",2010015:"DYNAMIC_USE_STATIC_KEY",2010016:"USER_OVERLOAD",2010018:"FORBIDDEN_REGION",2010019:"CANNOT_MEET_AREA_DEMAND"},i={2e3:"ERR_NO_VOCS_AVAILABLE",2001:"ERR_NO_VOS_AVAILABLE",2002:"ERR_JOIN_CHANNEL_TIMEOUT",2003:"WARN_REPEAT_JOIN",2004:"ERR_JOIN_BY_MULTI_IP",2011:"ERR_NOT_JOINED",2012:"WARN_REPEAT_JOIN",2013:"ERR_INVALID_VENDOR_KEY",2014:"ERR_INVALID_CHANNEL_NAME",2015:"ERR_INVALID_STRINGUID",2016:"ERR_TOO_MANY_USERS",2017:"ERR_SET_CLIENT_ROLE_TIMEOUT",2018:"ERR_SET_CLIENT_ROLE_NO_PERMISSION",2019:"ERR_SET_CLIENT_ROLE_ALREADY_IN_USE",2020:"ERR_PUBLISH_REQUEST_INVALID",2021:"ERR_SUBSCRIBE_REQUEST_INVALID",2022:"ERR_NOT_SUPPORTED_MESSAGE",2023:"ERR_ILLEAGAL_PLUGIN",2028:"ILLEGAL_AES_PASSWORD",101:"ERR_INVALID_VENDOR_KEY",102:"ERR_INVALID_CHANNEL_NAME",103:"WARN_NO_AVAILABLE_CHANNEL",104:"WARN_LOOKUP_CHANNEL_TIMEOUT",105:"WARN_LOOKUP_CHANNEL_REJECTED",106:"WARN_OPEN_CHANNEL_TIMEOUT",107:"WARN_OPEN_CHANNEL_REJECTED",108:"WARN_REQUEST_DEFERRED",109:"ERR_DYNAMIC_KEY_TIMEOUT",110:"ERR_NO_AUTHORIZED",111:"ERR_VOM_SERVICE_UNAVAILABLE",112:"ERR_NO_CHANNEL_AVAILABLE_CODE",113:"ERR_TOO_MANY_USERS",114:"ERR_MASTER_VOCS_UNAVAILABLE",115:"ERR_INTERNAL_ERROR",116:"ERR_NO_ACTIVE_STATUS",117:"ERR_INVALID_UID",118:"ERR_DYNAMIC_KEY_EXPIRED",119:"ERR_STATIC_USE_DYANMIC_KE",120:"ERR_DYNAMIC_USE_STATIC_KE",2:"K_TIMESTAMP_EXPIRED",3:"K_CHANNEL_PERMISSION_INVALID",4:"K_CERTIFICATE_INVALID",5:"K_CHANNEL_NAME_EMPTY",6:"K_CHANNEL_NOT_FOUND",7:"K_TICKET_INVALID",8:"K_CHANNEL_CONFLICTED",9:"K_SERVICE_NOT_READY",10:"K_SERVICE_TOO_HEAVY",14:"K_UID_BANNED",15:"K_IP_BANNED",16:"K_CHANNEL_BANNED"},o={1:"ERROR_ILLEAGAL_APPID",2:"ERROR_ILLEAGAL_UID",3:"INTERNAL_SERVER_ERROR"},a=["ERR_NO_VOCS_AVAILABLE","ERR_NO_VOS_AVAILABLE","ERR_JOIN_CHANNEL_TIMEOUT","WARN_LOOKUP_CHANNEL_TIMEOUT","WARN_OPEN_CHANNEL_TIMEOUT","ERR_VOM_SERVICE_UNAVAILABLE","ERR_TOO_MANY_USERS","ERR_MASTER_VOCS_UNAVAILABLE","ERR_INTERNAL_ERROR"],s=["NO_SERVICE_AVAILABLE"],c=["NO_SERVICE_AVAILABLE","REQUEST_PROXY_SERVER_FAILED","REQUEST_PROXY_SERVER_TIME_OUT"],d={INJECT_STREAM_STATUS_START_SUCCESS:0,INJECT_STREAM_STATUS_START_ALREADY_EXISTS:1,INJECT_STREAM_STATUS_START_UNAUTHORIZED:2,INJECT_STREAM_STATUS_START_TIMEDOUT:3,INJECT_STREAM_STATUS_START_FAILED:4,INJECT_STREAM_STATUS_STOP_SUCCESS:5,INJECT_STREAM_STATUS_STOP_NOT_FOUND:6,INJECT_STREAM_STATUS_STOP_UNAUTHORIZED:7,INJECT_STREAM_STATUS_STOP_TIMEDOUT:8,INJECT_STREAM_STATUS_STOP_FAILED:9,INJECT_STREAM_STATUS_BROKEN:10},u={WS_DISCONNECT:"WS_DISCONNECT"};t.default={FAILED:"FAILED",INVALID_KEY:"INVALID_KEY",INVALID_CLIENT_MODE:"INVALID_CLIENT_MODE",INVALID_CLIENT_CODEC:"INVALID_CLIENT_CODEC",CLIENT_MODE_CODEC_MISMATCH:"CLIENT_MODE_CODEC_MISMATCH",WEB_API_NOT_SUPPORTED:"WEB_API_NOT_SUPPORTED",INVALID_PARAMETER:"INVALID_PARAMETER",NO_TRACK_IN_STREAM:"NO_TRACK_IN_STREAM",INVALID_OPERATION:"INVALID_OPERATION",INVALID_LOCAL_STREAM:"INVALID_LOCAL_STREAM",INVALID_REMOTE_STREAM:"INVALID_REMOTE_STREAM",INVALID_DYNAMIC_KEY:"INVALID_DYNAMIC_KEY",DYNAMIC_KEY_TIMEOUT:"DYNAMIC_KEY_TIMEOUT",NO_VOCS_AVAILABLE:"NO_VOCS_AVAILABLE",NO_VOS_AVAILABLE:"ERR_NO_VOS_AVAILABLE",JOIN_CHANNEL_TIMEOUT:"ERR_JOIN_CHANNEL_TIMEOUT",NO_AVAILABLE_CHANNEL:"NO_AVAILABLE_CHANNEL",LOOKUP_CHANNEL_TIMEOUT:"LOOKUP_CHANNEL_TIMEOUT",LOOKUP_CHANNEL_REJECTED:"LOOKUP_CHANNEL_REJECTED",OPEN_CHANNEL_TIMEOUT:"OPEN_CHANNEL_TIMEOUT",OPEN_CHANNEL_REJECTED:"OPEN_CHANNEL_REJECTED",REQUEST_DEFERRED:"REQUEST_DEFERRED",STREAM_ALREADY_PUBLISHED:"STREAM_ALREADY_PUBLISHED",STREAM_NOT_YET_PUBLISHED:"STREAM_NOT_YET_PUBLISHED",JOIN_TOO_FREQUENT:"JOIN_TOO_FREQUENT",SOCKET_ERROR:"SOCKET_ERROR",SOCKET_DISCONNECTED:"SOCKET_DISCONNECTED",PEERCONNECTION_FAILED:"PEERCONNECTION_FAILED",CONNECT_GATEWAY_ERROR:"CONNECT_GATEWAY_ERROR",SERVICE_NOT_AVAILABLE:"SERVICE_NOT_AVAILABLE",JOIN_CHANNEL_FAILED:"JOIN_CHANNEL_FAILED",PUBLISH_STREAM_FAILED:"PUBLISH_STREAM_FAILED",UNPUBLISH_STREAM_FAILED:"UNPUBLISH_STREAM_FAILED",SUBSCRIBE_STREAM_FAILED:"SUBSCRIBE_STREAM_FAILED",UNSUBSCRIBE_STREAM_FAILED:"UNSUBSCRIBE_STREAM_FAILED",NO_SUCH_REMOTE_STREAM:"NO_SUCH_REMOTE_STREAM",ERR_FAILED:"1",ERR_INVALID_VENDOR_KEY:"101",ERR_INVALID_CHANNEL_NAME:"102",WARN_NO_AVAILABLE_CHANNEL:"103",WARN_LOOKUP_CHANNEL_TIMEOUT:"104",WARN_LOOKUP_CHANNEL_REJECTED:"105",WARN_OPEN_CHANNEL_TIMEOUT:"106",WARN_OPEN_CHANNEL_REJECTED:"107",WARN_REQUEST_DEFERRED:"108",ERR_DYNAMIC_KEY_TIMEOUT:"109",ERR_INVALID_DYNAMIC_KEY:"110",ERR_NO_VOCS_AVAILABLE:"2000",ERR_NO_VOS_AVAILABLE:"2001",ERR_JOIN_CHANNEL_TIMEOUT:"2002",IOS_NOT_SUPPORT:"IOS_NOT_SUPPORT",WECHAT_NOT_SUPPORT:"WECHAT_NOT_SUPPORT",SHARING_SCREEN_NOT_SUPPORT:"SHARING_SCREEN_NOT_SUPPORT",STILL_ON_PUBLISHING:"STILL_ON_PUBLISHING",LOW_STREAM_ALREADY_PUBLISHED:"LOW_STREAM_ALREADY_PUBLISHED",LOW_STREAM_NOT_YET_PUBLISHED:"LOW_STREAM_ALREADY_PUBLISHED",HIGH_STREAM_NOT_VIDEO_TRACE:"HIGH_STREAM_NOT_VIDEO_TRACE",NOT_FIND_DEVICE_BY_LABEL:"NOT_FIND_DEVICE_BY_LABEL",ENABLE_DUALSTREAM_FAILED:"ENABLE_DUALSTREAM_FAILED",DISABLE_DUALSTREAM_FAILED:"DISABLE_DUALSTREAM_FAILED",PLAYER_NOT_FOUND:"PLAYER_NOT_FOUND",ELECTRON_NOT_SUPPORT_SHARING_SCREEN:"ELECTRON_NOT_SUPPORT_SHARING_SCREEN",BAD_ENVIRONMENT:"BAD_ENVIRONMENT",LOAD_AUDIO_FAILED:"LOAD_AUDIO_FAILED"}},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return o}));n(0);var r=function(e,t,n){if(["End2EndDelay","TransportDelay","PacketLossRate","RecvLevel","RecvBitrate","CodecType","MuteState","TotalFreezeTime","TotalPlayDuration","RecordingLevel","SendLevel","SamplingRate","SendBitrate","CodecType","MuteState","End2EndDelay","TransportDelay","PacketLossRate","RecvBitrate","RecvResolutionWidth","RecvResolutionHeight","RenderResolutionHeight","RenderResolutionWidth","RenderFrameRate","TotalFreezeTime","TotalPlayDuration","TargetSendBitrate","SendFrameRate","SendFrameRate","SendBitrate","SendResolutionWidth","SendResolutionHeight","CaptureResolutionHeight","CaptureResolutionWidth","EncodeDelay","MuteState","TotalFreezeTime","TotalDuration","CaptureFrameRate","RTT","OutgoingAvailableBandwidth","Duration","UserCount","SendBytes","RecvBytes","SendBitrate","RecvBitrate","accessDelay","audioSendBytes","audioSendPackets","videoSendBytes","videoSendPackets","videoSendPacketsLost","videoSendFrameRate","audioSendPacketsLost","videoSendResolutionWidth","videoSendResolutionHeight","accessDelay","audioReceiveBytes","audioReceivePackets","audioReceivePacketsLost","videoReceiveBytes","videoReceivePackets","videoReceivePacketsLost","videoReceiveFrameRate","videoReceiveDecodeFrameRate","videoReceiveResolutionWidth","videoReceiveResolutionHeight","endToEndDelay","videoReceiveDelay","audioReceiveDelay","FirstFrameTime","VideoFreezeRate","AudioFreezeRate","RenderResolutionWidth","RenderResolutionHeight","VideoPublishDuration","AudioPublishDuration"].indexOf(t)>-1&&("string"==typeof n||isFinite(n)))return e[t]=""+n},i=function(e){var t={};return e.forEach((function(e){e.id&&e.type&&(-1===e.id.indexOf("send")&&-1===e.type.toLowerCase().indexOf("outbound")&&-1===e.id.indexOf("outbound_rtp")&&-1===e.id.indexOf("OutboundRTP")||("audio"===e.mediaType?(r(t,"audioSendBytes",e.bytesSent),r(t,"audioSendPackets",e.packetsSent),r(t,"audioSendPacketsLost",e.packetsLost)):(r(t,"videoSendBytes",e.bytesSent),r(t,"videoSendPackets",e.packetsSent),r(t,"videoSendPacketsLost",e.packetsLost),r(t,"videoSendFrameRate",e.googFrameRateSent),r(t,"videoSendResolutionWidth",e.googFrameWidthSent),r(t,"videoSendResolutionHeight",e.googFrameHeightSent))))})),t},o=function(e){var t={};return e.forEach((function(e){e.id&&e.type&&(-1===e.id.indexOf("recv")&&-1===e.type.toLowerCase().indexOf("inbound")&&-1===e.id.indexOf("inbound_rtp")&&-1===e.id.indexOf("inbound-rtp")&&-1===e.id.indexOf("InboundRTP")||("audio"===e.mediaType?(r(t,"audioReceiveBytes",e.bytesReceived),r(t,"audioReceivePackets",e.packetsReceived),r(t,"audioReceivePacketsLost",e.packetsLost)):(r(t,"videoReceiveBytes",e.bytesReceived),r(t,"videoReceivePacketsLost",e.packetsLost),r(t,"videoReceivePackets",e.packetsReceived),r(t,"videoReceiveFrameRate",e.googFrameRateReceived),r(t,"videoReceiveDecodeFrameRate",e.googFrameRateDecoded),r(t,"videoReceiveResolutionWidth",e.googFrameWidthReceived),r(t,"videoReceiveResolutionHeight",e.googFrameHeightReceived))))})),t}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"e",(function(){return a})),n.d(t,"a",(function(){return s})),n.d(t,"d",(function(){return c})),n.d(t,"c",(function(){return d}));var r=n(0),i=function(){var e={dispatcher:{}};return e.dispatcher.eventListeners={},e.addEventListener=function(t,n){void 0===e.dispatcher.eventListeners[t]&&(e.dispatcher.eventListeners[t]=[]),e.dispatcher.eventListeners[t].push(n)},e.hasListeners=function(t){return!(!e.dispatcher.eventListeners[t]||!e.dispatcher.eventListeners[t].length)},e.on=e.addEventListener,e.removeEventListener=function(t,n){var r;e.dispatcher.eventListeners[t]&&-1!==(r=e.dispatcher.eventListeners[t].indexOf(n))&&e.dispatcher.eventListeners[t].splice(r,1)},e.dispatchEvent=function(t){var n;for(n in e.dispatcher.eventListeners[t.type])if(e.dispatcher.eventListeners[t.type]&&e.dispatcher.eventListeners[t.type].hasOwnProperty(n)&&"function"==typeof e.dispatcher.eventListeners[t.type][n])try{e.dispatcher.eventListeners[t.type][n](t)}catch(n){r.default.debug("[".concat(e.clientId,"] Error in ").concat(t.type," event"),n)}},e.dispatchSocketEvent=function(t){var n;for(n in e.dispatcher.eventListeners[t.type])e.dispatcher.eventListeners[t.type]&&e.dispatcher.eventListeners[t.type].hasOwnProperty(n)&&"function"==typeof e.dispatcher.eventListeners[t.type][n]&&e.dispatcher.eventListeners[t.type][n](t.msg)},e},o=function(e){var t={};return t.type=e.type,t},a=function(e){var t=o(e);return t.stream=e.stream,t.reason=e.reason,t.msg=e.msg,t},s=function(e){var t=o(e);return t.uid=e.uid,t.attr=e.attr,t.stream=e.stream,t},c=function(e){var t=o(e);return t.msg=e.msg,t},d=function(e){var t=o(e);return t.url=e.url,t.uid=e.uid,t.status=e.status,t.reason=e.reason,t}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=s(n(69)),d=n(2),u=s(n(0)),l=n(3),f=n(14),p=n(10),g=function(e){function t(t,n){var r=e.call(this)||this;return r._state=S.RELAY_STATE_IDLE,r._onStatus=function(e){u.default.debug("["+r.clientId+"] ChannelMediaStatus: "+JSON.stringify(e)),e&&e.command&&("onAudioPacketReceived"===e.command&&r.emit("event",E.PACKET_RECEIVED_AUDIO_FROM_SRC),"onVideoPacketReceived"===e.command&&r.emit("event",E.PACKET_RECEIVED_VIDEO_FROM_SRC),"onSrcTokenPrivilegeDidExpire"===e.command&&(r._state=S.RELAY_STATE_FAILURE,r.emit("state",S.RELAY_STATE_FAILURE,_.SRC_TOKEN_EXPIRED)),"onDestTokenPrivilegeDidExpire"===e.command&&(r._state=S.RELAY_STATE_FAILURE,r.emit("state",S.RELAY_STATE_FAILURE,_.DEST_TOKEN_EXPIRED,e.channelName?{came:e.channelName}:null)))},r._onClose=function(){return o(r,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:if(u.default.debug("["+this.clientId+"] ChannelMediaSocket onClose"),this.emit("event",E.NETWORK_DISCONNECTED),this.state=S.RELAY_STATE_IDLE,!this._prevChannelMediaConfig)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.startChannelMediaRelay(this._prevChannelMediaConfig)];case 2:return t.sent(),[3,4];case 3:return(e=t.sent())instanceof R&&(e.message===h.WS_ABORT||e.message===h.AP_REQUEST_ABORT)?[2]:(this.emit("state",S.RELAY_STATE_FAILURE,_.SERVER_CONNECTION_LOST),[3,4]);case 4:return[2]}}))}))},r.token=t.appId,r.appId=t.appId,r.cname=t.cname,r.uid=t.uid,r.sid=t.sid,r.clientId=n,r}return i(t,e),Object.defineProperty(t.prototype,"state",{get:function(){return this._state},set:function(e){var t=this._state;this._state=e,t!==e&&this.emit("state",e)},enumerable:!0,configurable:!0}),t.prototype.startChannelMediaRelay=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:if(this.state!==S.RELAY_STATE_IDLE)throw new R(h.BAD_STATE);return this.state=S.RELAY_STATE_CONNECTING,[4,this._connect()];case 1:return t.sent(),u.default.debug("["+this.clientId+"] startChannelMediaRelay: connect success"),[4,this._sendStartRelayMessage(e)];case 2:return t.sent(),this._prevChannelMediaConfig=e,[2]}}))}))},t.prototype.updateChannelMediaRelay=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:if(this.state!==S.RELAY_STATE_RUNNING)throw new R(h.BAD_STATE);return[4,this._sendUpdateMessage(e)];case 1:return t.sent(),this._prevChannelMediaConfig=e,[2]}}))}))},t.prototype.stopChannelMediaRelay=function(){return o(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this._sendStopRelayMessage()];case 1:return e.sent(),u.default.debug("["+this.clientId+"] stopChannelMediaRelay: send stop message success"),this.state=S.RELAY_STATE_IDLE,this.dispose(),[2]}}))}))},t.prototype.dispose=function(){u.default.debug("["+this.clientId+"] disposeChannelMediaRelay"),this.state=S.RELAY_STATE_IDLE,this.emit("dispose"),this._signal&&this._signal.dispose(),this._prevChannelMediaConfig=null,this.removeEvent()},t.prototype._requestOneAP=function(e){var t=this;return new Promise((function(n,r){var i={command:"convergeAllocateEdge",sid:t.sid,appId:t.appId,token:"",ts:+new Date,version:d.VERSION,cname:t.cname,uid:t.uid+"",seq:1,requestId:1},o={service_name:"tele_channel",json_body:JSON.stringify(i)},a="https://"+e;f.post(a,o,(function(e){var t=null,i=null;try{t=JSON.parse(e)}catch(e){r(new R(h.AP_JSON_PARSE_ERROR,e))}0!==t.code&&r(new R(h.AP_REQUEST_ERROR,t));try{i=JSON.parse(t.json_body)}catch(e){r(new R(h.AP_JSON_PARSE_ERROR,e))}200!==i.code&&r(new R(h.AP_REQUEST_ERROR,i)),i.servers?n(i.servers):r(new R(h.AP_JSON_PARSE_ERROR,i))}),(function(e){return r(e)}),{"X-Packet-Service-Type":0,"X-Packet-URI":61})}))},t.prototype._requestAP=function(){var e=this,t=d.getParameter("UAP_AP");return new Promise((function(n,r){setTimeout((function(){r(new R(h.AP_REQUEST_TIMEOUT))}),5e3),e.on("dispose",(function(){r(new R(h.AP_REQUEST_ABORT))})),t.forEach((function(t){t+="/api/v1",e._requestOneAP(t).then((function(r){u.default.debug("["+e.clientId+"] startChannelMediaRelay request AP "+t+" success: "+JSON.stringify(r));var i=r[0],o="wss://"+i.address.replace(/\./g,"-")+".edge.agora.io:"+i.wss;n(o)})).catch((function(n){u.default.debug("["+e.clientId+"] startChannelMediaRelay request AP "+t+" failed: "+JSON.stringify(n))}))}))}))},t.prototype._connectWebsocket=function(e){return this._signal=new y(this.appId,this.cname,this.uid,this.sid),this._signal.connect(e)},t.prototype._connect=function(){return o(this,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return[4,this._requestAP()];case 1:return e=t.sent(),[4,this._connectWebsocket(e)];case 2:return t.sent(),this._signal.on("close",this._onClose.bind(this)),this._signal.on("status",this._onStatus.bind(this)),this.emit("event",E.NETWORK_CONNECTED),[2]}}))}))},t.prototype._sendStartRelayMessage=function(e){return o(this,void 0,void 0,(function(){var t,n,r,i,o,s;return a(this,(function(a){switch(a.label){case 0:return this._checkSignal(),t=this._genMessage(v.StopPacketTransfer),[4,this._signal.request(t)];case 1:return a.sent(),[4,this._signal.waitStatus("Normal Quit")];case 2:return a.sent(),u.default.debug("["+this.clientId+"] startChannelMediaRelay: StopPacketTransfer success"),n=this._genMessage(v.SetSdkProfile,e),[4,this._signal.request(n)];case 3:return a.sent(),u.default.debug("["+this.clientId+"] startChannelMediaRelay: SetSdkProfile success"),r=this._genMessage(v.SetSourceChannel,e),[4,this._signal.request(r)];case 4:return a.sent(),[4,this._signal.waitStatus("SetSourceChannelStatus")];case 5:return a.sent(),this.emit("event",E.PACKET_JOINED_SRC_CHANNEL),u.default.debug("["+this.clientId+"] startChannelMediaRelay: SetSourceChannel success"),i=this._genMessage(v.SetSourceUserId,e),[4,this._signal.request(i)];case 6:return a.sent(),u.default.debug("["+this.clientId+"] startChannelMediaRelay: SetSourceUserId success"),o=this._genMessage(v.SetDestChannel,e),[4,this._signal.request(o)];case 7:return a.sent(),[4,this._signal.waitStatus("SetDestChannelStatus")];case 8:return a.sent(),this.emit("event",E.PACKET_JOINED_DEST_CHANNEL),u.default.debug("["+this.clientId+"] startChannelMediaRelay: SetDestChannel success"),s=this._genMessage(v.StartPacketTransfer,e),[4,this._signal.request(s)];case 9:return a.sent(),this.emit("event",E.PACKET_SENT_TO_DEST_CHANNEL),this.state=S.RELAY_STATE_RUNNING,u.default.debug("["+this.clientId+"] startChannelMediaRelay: StartPacketTransfer success"),[2]}}))}))},t.prototype._sendReconnectMessage=function(e){return o(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this._checkSignal(),t=this._genMessage(v.Reconnect,e),[4,this._signal.request(t)];case 1:return n.sent(),[2]}}))}))},t.prototype._sendUpdateMessage=function(e){return o(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:return this._checkSignal(),t=this._genMessage(v.UpdateDestChannel,e),[4,this._signal.request(t)];case 1:return n.sent(),this.emit("event",E.PACKET_UPDATE_DEST_CHANNEL),u.default.debug("["+this.clientId+"] sendUpdateMessage: UpdateDestChannel success"),[2]}}))}))},t.prototype._sendStopRelayMessage=function(){return o(this,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return this._checkSignal(),e=this._genMessage(v.StopPacketTransfer),[4,this._signal.request(e)];case 1:return t.sent(),u.default.debug("["+this.clientId+"] sendStopRelayMessage: StopPacketTransfer success"),[2]}}))}))},t.prototype._genMessage=function(e,t){var n=this,r=[],i=[],o=[],a={appId:this.appId,cname:this.cname,uid:this.uid+"",sdkVersion:d.VERSION,sid:this.sid,ts:+new Date,requestId:0,seq:0,allocate:!0,clientRequest:{}},s=null;switch(e){case v.SetSdkProfile:return a.clientRequest={command:"SetSdkProfile",type:"multi_channel"},a;case v.SetSourceChannel:return s=t.getSrcChannelMediaInfo(),a.clientRequest={command:"SetSourceChannel",uid:s.uid+"",channelName:s.channelName,token:s.token||this.appId},a;case v.SetSourceUserId:return s=t.getSrcChannelMediaInfo(),a.clientRequest={command:"SetSourceUserId",uid:this.uid+""},a;case v.SetDestChannel:return t.getDestChannelMediaInfos().forEach((function(e){r.push(e.channelName),i.push(e.uid+""),o.push(e.token||n.appId)})),a.clientRequest={command:"SetDestChannel",channelName:r,uid:i,token:o},a;case v.StartPacketTransfer:return a.clientRequest={command:"StartPacketTransfer"},a;case v.Reconnect:return a.clientRequest={command:"Reconnect"},a;case v.StopPacketTransfer:return a.clientRequest={command:"StopPacketTransfer"},a;case v.UpdateDestChannel:return t.getDestChannelMediaInfos().forEach((function(e){r.push(e.channelName),i.push(e.uid+""),o.push(e.token||n.appId)})),a.clientRequest={command:"UpdateDestChannel",channelName:r,uid:i,token:o},a}},t.prototype._checkSignal=function(){if(!this._signal||!this._signal.isConnect())throw new R(h.WS_DISCONNECTED)},t}(c.default);t.default=g;var m=function(){function e(){this.destChannelMediaInfos=new Map}return e.prototype.setSrcChannelInfo=function(e){l.checkValidObject(e,"srcInfo");var t=e.uid,n=e.channelName,r=e.token;if(r&&!l.isValidToken(r))throw new Error("Invalid token in SrcChannelInfo");if(!l.isValidChannelName(n))throw new Error("Invalid channelName in SrcChannelInfo");if(!p.is32Uint(t))throw new Error("Invalid uid in SrcChannelInfo");this.srcChannelMediaInfo=e},e.prototype.setDestChannelInfo=function(e,t){if(!l.isValidChannelName(e))throw new Error("Invalid channelName in DestChannelInfo");l.checkValidObject(t,"destInfo");var n=t.uid,r=t.token,i=t.channelName;if(r&&!l.isValidToken(r))throw new Error("Invalid token in DestChannelInfo");if(!l.isValidChannelName(i))throw new Error("Invalid channelName in DestChannelInfo");if(!p.is32Uint(n))throw new Error("Invalid uid in DestChannelInfo");this.destChannelMediaInfos.set(e,t)},e.prototype.removeDestChannelInfo=function(e){if(!l.isValidChannelName(e))throw new Error("Invalid channelName when invoke removeDestChannelInfo");this.destChannelMediaInfos.delete(e)},e.prototype.getSrcChannelMediaInfo=function(){return this.srcChannelMediaInfo},e.prototype.getDestChannelMediaInfos=function(){return this.destChannelMediaInfos},e}();t.ChannelMediaRelayConfiguration=m;var h,v,E,S,_,y=function(e){function t(t,n,r,i){var o=e.call(this)||this;return o._onOpen=function(){o.emit("open")},o._onClose=function(e){o.emit("close"),o.dispose()},o._onMessage=function(e){var t=JSON.parse(e.data);if(!t||"serverResponse"!==t.command||!t.requestId)return t&&"serverStatus"===t.command&&t.serverStatus&&t.serverStatus.command?(o.emit("status",t.serverStatus),void o.emit(t.serverStatus.command,t.serverStatus)):void 0;o.emit("req_"+t.requestId,t)},o._requestId=1,o.appId=t,o.cname=n,o.uid=r,o.sid=i,o}return i(t,e),t.prototype.isConnect=function(){return this._ws&&this._ws.readyState===WebSocket.OPEN},t.prototype.sendMessage=function(e){if(!this._ws||this._ws.readyState!==WebSocket.OPEN)throw new R(h.WS_DISCONNECTED);var t=this._requestId++;return e.requestId=t,e.seq=t,this._ws.send(JSON.stringify(e)),t},t.prototype.waitStatus=function(e){var t=this;return new Promise((function(n,r){var i=window.setTimeout((function(){r(new R(h.WAIT_STATUS_TIMEOUT,e))}),5e3);t.once(e,(function(t){clearTimeout(i),t.state&&0!==t.state?r(new R(h.WAIT_STATUS_ERROR,e)):n()})),t.once("dispose",(function(){clearTimeout(i),r(new R(h.WS_ABORT))}))}))},t.prototype.request=function(e){var t=this;return new Promise((function(n,r){var i=t.sendMessage(e),o=window.setTimeout((function(){t.removeAllListeners("req_"+i),r(new R(h.REQUEST_TIMEOUT))}),3e3);t.once("req_"+i,(function(e){clearTimeout(o),e&&200===e.code?n(e):r(new R(h.REQUEST_FAILED,e))})),t.once("dispose",(function(){clearTimeout(o),r(new R(h.WS_ABORT))}))}))},t.prototype.connect=function(e){var t=this;return new Promise((function(n,r){t._ws=new WebSocket(e),t._ws.onopen=function(){t._onOpen(),t._prvUrl=e,t._ws.onmessage=t._onMessage,t._ws.onclose=t._onClose,t._startHeartBeatCheck(),n()},t._ws.onclose=function(e){t._ws=null,r(new R(h.CONNECT_FAILED,"websocket error code: "+e.code))},setTimeout((function(){t._ws&&t._ws.readyState!==WebSocket.OPEN&&(t._ws.onopen=null,t._ws.onclose=null,t._ws.close(),t._ws=null,r(new R(h.CONNECT_TIMEOUT)))}),5e3),t.once("dispose",(function(){r(new R(h.WS_ABORT))}))}))},t.prototype.dispose=function(){this._clearHeartBeatCheck(),this.emit("dispose"),this.removeEvent(),this._ws&&(this._ws.onopen=null,this._ws.onclose=null,this._ws.onmessage=null,this._ws.close()),this._ws=null},t.prototype._sendPing=function(e){if(!this._ws||this._ws.readyState!==WebSocket.OPEN)throw new R(h.WS_DISCONNECTED);var t=this._requestId++;return e.requestId=t,this._ws.send(JSON.stringify(e)),t},t.prototype._startHeartBeatCheck=function(){var e=this;this._heartBeatTimer=window.setInterval((function(){e._sendPing({command:"ping",appId:e.appId,cname:e.cname,uid:e.uid+"",sid:e.sid,ts:+new Date,requestId:0})}),3e3)},t.prototype._clearHeartBeatCheck=function(){window.clearInterval(this._heartBeatTimer)},t}(c.default),R=function(e,t,n){void 0===e&&(e=""),this.code=n,this.data=t,this.message=e};t.ChannelMediaError=R,function(e){e.CONNECT_FAILED="connect failed",e.CONNECT_TIMEOUT="connect timeout",e.WS_DISCONNECTED="websocket disconnected",e.REQUEST_TIMEOUT="request timeout",e.REQUEST_FAILED="request failed",e.WAIT_STATUS_TIMEOUT="wait status timeout",e.WAIT_STATUS_ERROR="wait status error",e.BAD_STATE="bad state",e.WS_ABORT="ws abort",e.AP_REQUEST_TIMEOUT="AP request timeout",e.AP_JSON_PARSE_ERROR="AP json parse error",e.AP_REQUEST_ERROR="AP request error",e.AP_REQUEST_ABORT="AP request abort"}(h=t.CHANNEL_MEDIA_ERROR||(t.CHANNEL_MEDIA_ERROR={})),function(e){e[e.SetSdkProfile=0]="SetSdkProfile",e[e.SetSourceChannel=1]="SetSourceChannel",e[e.SetSourceUserId=2]="SetSourceUserId",e[e.SetDestChannel=3]="SetDestChannel",e[e.StartPacketTransfer=4]="StartPacketTransfer",e[e.StopPacketTransfer=5]="StopPacketTransfer",e[e.UpdateDestChannel=6]="UpdateDestChannel",e[e.Reconnect=7]="Reconnect",e[e.SetVideoProfile=8]="SetVideoProfile"}(v||(v={})),function(e){e[e.NETWORK_DISCONNECTED=0]="NETWORK_DISCONNECTED",e[e.NETWORK_CONNECTED=1]="NETWORK_CONNECTED",e[e.PACKET_JOINED_SRC_CHANNEL=2]="PACKET_JOINED_SRC_CHANNEL",e[e.PACKET_JOINED_DEST_CHANNEL=3]="PACKET_JOINED_DEST_CHANNEL",e[e.PACKET_SENT_TO_DEST_CHANNEL=4]="PACKET_SENT_TO_DEST_CHANNEL",e[e.PACKET_RECEIVED_VIDEO_FROM_SRC=5]="PACKET_RECEIVED_VIDEO_FROM_SRC",e[e.PACKET_RECEIVED_AUDIO_FROM_SRC=6]="PACKET_RECEIVED_AUDIO_FROM_SRC",e[e.PACKET_UPDATE_DEST_CHANNEL=7]="PACKET_UPDATE_DEST_CHANNEL",e[e.PACKET_UPDATE_DEST_CHANNEL_REFUSED=8]="PACKET_UPDATE_DEST_CHANNEL_REFUSED",e[e.PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE=9]="PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE"}(E=t.CHANNEL_MEDIA_RELAY_EVENT||(t.CHANNEL_MEDIA_RELAY_EVENT={})),function(e){e[e.RELAY_STATE_IDLE=0]="RELAY_STATE_IDLE",e[e.RELAY_STATE_CONNECTING=1]="RELAY_STATE_CONNECTING",e[e.RELAY_STATE_RUNNING=2]="RELAY_STATE_RUNNING",e[e.RELAY_STATE_FAILURE=3]="RELAY_STATE_FAILURE"}(S=t.CHANNEL_MEDIA_RELAY_STATE||(t.CHANNEL_MEDIA_RELAY_STATE={})),function(e){e[e.RELAY_OK=0]="RELAY_OK",e[e.SERVER_ERROR_RESPONSE=1]="SERVER_ERROR_RESPONSE",e[e.SERVER_NO_RESPONSE=2]="SERVER_NO_RESPONSE",e[e.NO_RESOURCE_AVAILABLE=3]="NO_RESOURCE_AVAILABLE",e[e.FAILED_JOIN_SRC=4]="FAILED_JOIN_SRC",e[e.FAILED_JOIN_DEST=5]="FAILED_JOIN_DEST",e[e.FAILED_PACKET_RECEIVED_FROM_SRC=6]="FAILED_PACKET_RECEIVED_FROM_SRC",e[e.FAILED_PACKET_SENT_TO_DEST=7]="FAILED_PACKET_SENT_TO_DEST",e[e.SERVER_CONNECTION_LOST=8]="SERVER_CONNECTION_LOST",e[e.INTERNAL_ERROR=9]="INTERNAL_ERROR",e[e.SRC_TOKEN_EXPIRED=10]="SRC_TOKEN_EXPIRED",e[e.DEST_TOKEN_EXPIRED=11]="DEST_TOKEN_EXPIRED",e[e.RELAY_ALREADY_START=12]="RELAY_ALREADY_START",e[e.RELAY_NOT_START=13]="RELAY_NOT_START",e[e.OPERATION_ABORT=14]="OPERATION_ABORT"}(_=t.CHANNEL_MEDIA_RELAY_ERROR||(t.CHANNEL_MEDIA_RELAY_ERROR={}))},function(e,t,n){"use strict";n.r(t),n.d(t,"isLiveTranscodingValid",(function(){return _})),n.d(t,"generateSessionId",(function(){return v})),n.d(t,"audioLevelHelper",(function(){return g})),n.d(t,"vsResHack",(function(){return E})),n.d(t,"is32Uint",(function(){return S})),n.d(t,"safeCall",(function(){return l})),n.d(t,"random",(function(){return R})),n.d(t,"popBanTip",(function(){return b})),n.d(t,"lengthInUtf8Bytes",(function(){return T})),n.d(t,"audioTimerLoop",(function(){return I})),n.d(t,"generateId",(function(){return h})),n.d(t,"uint8ArrayToBase64",(function(){return f})),n.d(t,"base64ToUint8Array",(function(){return p}));var r=n(11),i=n.n(r),o=n(4),a=n(0),s=n(28),c=n.n(s),d=n(25),u=n(15),l=function(){var e=arguments[0];if("function"==typeof e){var t=Array.prototype.slice.call(arguments,1);e.apply(null,t)}},f=function(e){for(var t="",n=0;n<e.length;n+=1)t+=String.fromCharCode(e[n]);return window.btoa(t)},p=function(e){for(var t=window.atob(e),n=new Uint8Array(new ArrayBuffer(t.length)),r=0;r<t.length;r+=1)n[r]=t.charCodeAt(r);return n},g=function(e){return this.audioContext=Object(d.a)(),this.sourceNode=e.otWebkitAudioSource||this.audioContext.createMediaStreamSource(e),this.analyser=this.audioContext.createAnalyser(),this.timeDomainData=new Uint8Array(this.analyser.frequencyBinCount),this.sourceNode.connect(this.analyser),this.getAudioLevel=function(){if(this.analyser){this.analyser.getByteTimeDomainData(this.timeDomainData);for(var e=0,t=0;t<this.timeDomainData.length;t++)e=Math.max(e,Math.abs(this.timeDomainData[t]-128));return e/128}return a.default.warning("can't find analyser in audioLevelHelper"),0},this},m=1e4;function h(){return++m}function v(){return c()().replace(/-/g,"").toUpperCase()}var E=function(e,t,n){try{a.default.debug("start vsResHack",e);var r=document.createElement("video");r.setAttribute("autoplay",""),r.setAttribute("muted",""),r.muted=!0,r.setAttribute("playsinline",""),r.setAttribute("style","position: absolute; top: 0; left: 0; width:1px; high:1px;"),document.body.appendChild(r);var i=!1;r.addEventListener("playing",(function(n){o.isFireFox()?r.videoWidth&&(i=!0,a.default.debug("[vsResHack] get stream resolution: ","".concat(r.videoWidth," x ").concat(r.videoHeight),e),t(r.videoWidth,r.videoHeight),r.srcObject=null,r.remove()):(i=!0,a.default.debug("[vsResHack] get stream resolution: ","".concat(r.videoWidth," x ").concat(r.videoHeight),e),t(r.videoWidth,r.videoHeight),r.srcObject=null,r.remove())})),Object(u.setSrcObject)(r,e),r.play().catch((function(){})),setTimeout((function(){!i&&r&&(t(r.videoWidth,r.videoHeight),r.srcObject=null,r.remove())}),4e3)}catch(e){n(e)}},S=function(e){return"number"==typeof e&&0<=e&&e<=4294967295},_=function(e){var t=["lowLatency","userConfigExtraInfo","transcodingUsers"];for(var n in e)if("lowLatency"===n&&"boolean"!=typeof e[n]||"userConfigExtraInfo"===n&&"object"!==i()(e[n])||"transcodingUsers"===n&&!y(e[n])||!~t.indexOf(n)&&"number"!=typeof e[n])throw new Error("Param ["+n+"] is inValid");return!0},y=function(e){for(var t=0;t<e.length;t++)for(var n in e[t])if("number"!=typeof e[t][n])throw new Error("Param user["+t+"] - ["+n+"] is inValid");return!0},R=function(e){isNaN(e)&&(e=1e3);var t=+new Date,n=(t=(9301*t+49297)%233280)/233280;return Math.ceil(n*e)},T=function(e){var t=encodeURIComponent(e).match(/%[89ABab]/g);return e.length+(t?t.length:0)},I=function(e,t){var n=1/t,r=Object(d.a)(),i=r.createGain();i.gain.value=0,i.connect(r.destination);var o=!1;return function t(){var a=r.createOscillator();a.onended=t,a.connect(i),a.start(0),a.stop(r.currentTime+n),e(r.currentTime),o&&(a.onended=function(){})}(),function(){o=!0}},b=function(){if(!document.getElementById("agora-ban-tip")){var e=document.createElement("div");e.id="agora-ban-tip",e.style="position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; color: #fff;",document.querySelector("body").prepend(e);var t=document.createElement("div");t.style="background: #000; width: 346px; height: 116px; z-index: 100000; opacity: 0.6; border-radius: 10px; box-shadow: 0 2px 4px #000;",e.append(t);var n=document.createElement("div");n.style="height: 76px; display: flex; justify-content: center; align-items: center;";var r=document.createElement("span");r.style="height: 28px; width: 28px; color: #000; text-align: center; line-height: 30px; background: #fff; border-radius: 50%; font-weight: 600; font-size: 20px;margin-right: 5px;",r.innerText="!";var i=document.createElement("span");i.innerText="This browser does not support webRTC",n.append(r),n.append(i);var o=document.createElement("div");o.style="height: 38px; display: flex; border-top: #fff 1px solid; justify-content: center; align-items: center;",o.innerText="OK",t.append(n),t.append(o),o.onclick=function(){var e=document.getElementById("agora-ban-tip");e.parentNode.removeChild(e)}}}},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t,n){e.exports=n(64)},function(t,n,r){"use strict";var i=r(12),o=r.n(i),a=r(17),s=r.n(a),c=r(11),d=r.n(c),u=r(32),l=r.n(u),f=r(7),p=r.n(f),g=r(22),m=r(8),h=function(e){e&&e.apply(this,[].slice.call(arguments,1))},v=r(0),E=r(1),S=r(10),_=r(14),y=r(2),R=function(e){var t=Object(m.b)(e);t.needReconnect=!0,t.isTimeout=!1,t.isInit=!0,t.sendbytes=0,t.recvbytes=0,t.startTime=Date.now(),t.lastMsgTime=null,t.clientId=e.clientId,t.hostIndex=0,t.requestID=0,e.host instanceof Array?t.host=e.host:t.host=[e.host],t.getSendBytes=function(){return t.sendbytes},t.getRecvBytes=function(){return t.recvbytes},t.getDuration=function(){return Math.ceil((Date.now()-t.startTime)/1e3)},t.getURL=function(){return t.connection.url},t.reconnect=function(){t.isInit=!0,t.creatConnection()},t.connectNext=function(){t.isInit=!0,++t.hostIndex,v.default.debug("["+t.clientId+"] Gateway length:"+t.host.length+" current index:"+t.hostIndex),t.hostIndex>=t.host.length?t.dispatchEvent(Object(m.d)({type:"recover"})):t.creatConnection()},t.replaceHost=function(e){t.host=e||t.host,t.hostIndex=0,t.creatConnection()},t.creatConnection=function(){t.needReconnect=!0,t.lts=(new Date).getTime(),t.connection=new WebSocket("wss://"+t.host[t.hostIndex]),t.connection.binaryType="arraybuffer",t.turnConfig={};var n=e.proxyServerType;if(t.connection.url&&3!==n&&4!==n&&5!==n){var r=t.connection.url.match(/wss\:\/\/([^:]+):(\d+)/),i=t.host[t.hostIndex].split(":"),o=t.connection.url.match(/h=([^:]+)&p=(\d+)/);r?(t.turnConfig.url=r[1],Object(y.getParameter)("TURN_ENABLE_TCP")&&(t.turnConfig.tcpport=parseInt(r[2])+30),Object(y.getParameter)("TURN_ENABLE_UDP")&&(t.turnConfig.udpport=parseInt(r[2])+30)):o?(t.turnConfig.url=o[1],Object(y.getParameter)("TURN_ENABLE_TCP")&&(t.turnConfig.tcpport=parseInt(o[2])+30),Object(y.getParameter)("TURN_ENABLE_UDP")&&(t.turnConfig.udpport=parseInt(o[2])+30)):i&&(t.turnConfig.url=i[0],Object(y.getParameter)("TURN_ENABLE_TCP")&&(t.turnConfig.tcpport=parseInt(i[1])+30),Object(y.getParameter)("TURN_ENABLE_UDP")&&(t.turnConfig.udpport=parseInt(i[1])+30))}t.connection.onopen=function(e){t.needReconnect=!0,t.isTimeout=!1,t.isInit=!1,t.sendbytes=0,t.recvbytes=0,t.startTime=Date.now(),Object(_.resetHTTPByetsCount)(),clearTimeout(t.timeoutCheck),t.dispatchEvent(Object(m.d)({type:"onopen",event:e,socket:t}))},t.connection.onmessage=function(e){if(e.data instanceof ArrayBuffer)t.dispatchEvent({type:"onBinaryData",data:e.data});else{t.recvbytes+=Object(S.lengthInUtf8Bytes)(e.data);var n=JSON.parse(e.data);t.lastMsgTime=Date.now(),n.hasOwnProperty("_id")?t.dispatchEvent(Object(m.d)({type:n._id,msg:n})):n.hasOwnProperty("_type")&&t.dispatchSocketEvent(Object(m.d)({type:n._type,msg:n._message}))}},t.connection.onclose=function(n){t.needReconnect?t.isTimeout||t.isInit?(v.default.debug("["+t.clientId+"] websockect connect timeout"),E.report.joinGateway(e.sid,{lts:t.lts,succ:!1,ec:"timeout",addr:t.connection.url}),t.connectNext()):(t.dispatchEvent(Object(m.d)({type:"disconnect",event:n})),t.requests&&t.requests instanceof Array&&(t.requests.map((function(e){e.callback("REQUEST_ABORT")})),t.requests=[])):(v.default.debug("["+t.clientId+"] websockect closeed"),h(e.onFailure,n),clearTimeout(t.timeoutCheck),t.dispatchEvent(Object(m.d)({type:"close",event:n})),t.connection.onopen=void 0,t.connection.onclose=void 0,t.connection.onerror=void 0,t.connection.onmessage=void 0,t.connection=void 0)},t.connection.onerror=function(e){};setTimeout((function(){t.connection&&t.connection.readyState!=WebSocket.OPEN&&(t.isTimeout=!0,t.connection.close())}),5e3)},t.creatConnection(),t.sendMessage=function(e,n){if(t.connection&&t.connection.readyState==WebSocket.OPEN){var r=JSON.stringify(e);t.sendbytes+=Object(S.lengthInUtf8Bytes)(r),t.connection.send(r)}else n({error:"Gateway not connected"})},t.disconnect=function(){t.needReconnect=!0,t.connection.close()},t.close=function(){t.needReconnect=!1,t.connection.onclose=void 0,t.connection.close(),clearInterval(t.requestTimer),t.requests&&t.requests instanceof Array&&(t.requests.map((function(e){e.callback("REQUEST_ABORT")})),t.requests=[])},t.sendSignalCommand=function(e,n){e._id="_request_"+t.requestID,t.requestID+=1,"publish_stats"!==e._type&&"subscribe_stats"!==e._type&&"publish_stats_low"!==e._type&&t.on(e._id,(function(r){r.msg&&n&&n(r.msg._result,r.msg.message),delete t.dispatcher.eventListeners[e._id]})),t.sendMessage(e,(function(e){e.reason="NOT_CONNECTED",n&&n(e.reason,e)}))},t.requests=[];var n=function(e){var n=t.requests.findIndex((function(t){return t.id===e.type}));if(n>=0)var r=t.requests.splice(n,1)[0];r&&t.dispatcher.eventListeners[e.type]?(delete t.dispatcher.eventListeners[e.type],e.msg&&r.callback&&r.callback(e.msg._result,e.msg._message)):v.default.warning("Detached Response",e.type,e.msg)},r=function(e){var n=this,r=t.requests.findIndex((function(e){return e.id===n.id}));r>=0&&(n=t.requests.splice(r,1)[0]),n&&t.dispatcher.eventListeners[e.type]?(delete t.dispatcher.eventListeners[e.type],e.reason="NOT_CONNECTED",n.callback&&n.callback(e.reason,e)):v.default.warning("handleSendError",n)};return t.sendRequest=function(e,i){e=p()({_id:"_request_"+t.requestID},e),t.requestID+=1;var o={id:e._id,timeoutCounter:0,stalledAt:Date.now(),message:e,callback:i};t.requests.push(o),t.addEventListener(e._id,n),t.sendMessage(e,r.bind(o))},t.checkRequestTimeout=function(){for(var e=Math.ceil(Object(y.getParameter)("SIGNAL_REQUEST_TIMEOUT")/Object(y.getParameter)("SIGNAL_REQUEST_WATCH_INTERVAL")),n=t.requests.length-1;n>=0;n--){var r=t.requests[n];r.timeoutCounter>=e?(t.requests.splice(n,1),v.default.error("Request Timeout",r.timeoutCounter,r.message),r.callback&&r.callback("TIMEOUT")):r.timeoutCounter++}},clearInterval(t.requestTimer),t.requestTimer=setInterval(t.checkRequestTimeout,Object(y.getParameter)("SIGNAL_REQUEST_WATCH_INTERVAL")),t.sendReport=function(e){t.sendMessage(e,(function(){}))},t},T=function(e,t){var n={connect:function(){t.host=e,n.signal=R(t),n.on=n.signal.on,n.dispatchEvent=n.signal.dispatchEvent,n.signal.on("onopen",(function(e){n.signal.onEvent=function(e){n.dispatchEvent(Object(m.d)({type:e.event,msg:e}))},n.dispatchEvent(Object(m.d)({type:"connect",msg:e}))})),n.signal.on("onError",(function(e){var t=e.msg;onError(t.code,"error")}))},getLastMsgTime:function(){return n.signal&&n.signal.lastMsgTime},getSendBytes:function(){return n.signal.getSendBytes()},getRecvBytes:function(){return n.signal.getRecvBytes()},getDuration:function(){return n.signal.getDuration()},disconnect:function(){n.signal.disconnect()},close:function(){n.signal.close()},getURL:function(){return n.signal.getURL()},reconnect:function(){n.signal.reconnect()},connectNext:function(){n.signal.connectNext()},replaceHost:function(e){n.signal.replaceHost(e)},emitSimpleMessage:function(e,t){n.signal.sendSignalCommand(e,t)},emitRequest:function(e,t){n.signal.sendRequest(e,t)},emitReport:function(e){n.signal.sendReport(e)}};return n.connect(),n},I=r(23),b=r(5),A=r(20),O=r(4),C={ERR_NO_VOCS_AVAILABLE:"tryNext",ERR_NO_VOS_AVAILABLE:"tryNext",ERR_JOIN_CHANNEL_TIMEOUT:"tryNext",WARN_REPEAT_JOIN:"quit",ERR_JOIN_BY_MULTI_IP:"recover",WARN_LOOKUP_CHANNEL_TIMEOUT:"tryNext",WARN_OPEN_CHANNEL_TIMEOUT:"tryNext",ERR_VOM_SERVICE_UNAVAILABLE:"tryNext",ERR_TOO_MANY_USERS:"tryNext",ERR_MASTER_VOCS_UNAVAILABLE:"tryNext",ERR_INTERNAL_ERROR:"tryNext",K_SERVICE_NOT_READY:"tryNext",K_SERVICE_TOO_HEAVY:"tryNext",notification_test_recover:"recover",notification_test_tryNext:"tryNext",notification_test_retry:"retry"},N={googActualEncBitrate:"A_aeb",googAvailableSendBandwidth:"A_asb",googRetransmitBitrate:"A_rb",googAvailableReceiveBandwidth:"A_arb",googTargetEncBitrate:"A_teb",googBucketDelay:"A_bd",googTransmitBitrate:"A_tb",googCodecName:"A_cn",bytesSent:"bytesSent",packetsLost:"packetsLost",packetsSent:"packetsSent",googAdaptationChanges:"A_ac",googAvgEncodeMs:"A_aem",googEncodeUsagePercent:"A_eup",googFirsReceived:"A_fr",googFrameHeightInput:"A_fhi",googFrameHeightSent:"A_fhs",googFrameRateInput:"A_fri",googFrameRateSent:"A_frs",googFrameWidthInput:"A_fwi",googFrameWidthSent:"A_fws",googNacksReceived:"A_nr",googPlisReceived:"A_pr",googRtt:"A_rtt",aecDivergentFilterFraction:"A_adff",audioInputLevel:"A_ail",googEchoCancellationReturnLoss:"A_ecrl",googEchoCancellationReturnLossEnhancement:"A_ecrle",googResidualEchoLikelihood:"A_rel",googResidualEchoLikelihoodRecentMax:"A_relrm",googTargetDelayMs:"A_tdm",bytesReceived:"bytesReceived",packetsReceived:"packetsReceived",googDecodeMs:"A_dm",googMaxDecodeMs:"A_mdm",googRenderDelayMs:"A_rdm",googFrameWidthReceived:"A_fwr",googFrameHeightReceived:"A_fhr",googFrameRateReceived:"A_frr",googFrameRateDecoded:"A_frd",googFrameRateOutput:"A_fro",googJitterBufferMs:"A_jbm",googCurrentDelayMs:"A_cdm",googMinPlayoutDelayMs:"A_mpdm",googNacksSent:"A_ns",googPlisSent:"A_ps",googFirsSent:"A_fs",audioOutputLevel:"A_aol",googAccelerateRate:"A_ar",googDecodingCNG:"A_dcng",googDecodingCTN:"A_dctn",googDecodingCTSG:"A_dctsg",googDecodingNormal:"A_dn",googDecodingPLC:"A_dplc",googDecodingPLCCNG:"A_dplccng",googExpandRate:"A_er",googJitterReceived:"A_jr",googPreemptiveExpandRate:"A_per",googPreferredJitterBufferMs:"A_pjbm",googSecondaryDecodedRate:"A_sdr",googSpeechExpandRate:"A_ser",uplink_fraction_lost:"B_ufl",uplink_cumulative_lost:"B_ucl",uplink_available_bandwidth:"B_uab",period_fir:"B_fir",access_delay:"B_acd",uplink_network_quality:"B_unq",downlink_network_quality:"B_dnq",pub_audio_lost_ratio_400ms:"B_palr4",pub_video_lost_ratio_400ms:"B_pvlr4",e2e_delay:"B_ed",audio_delay:"B_ad",video_delay:"B_vd",stream_type:"B_st",e2e_audio_lost_ratio_400ms:"B_ealr4",e2e_video_lost_ratio_400ms:"B_evlr4",downlink_estimate_bandwidth:"B_deb",peer_publish_audio_duration:"B_ppad",peer_publish_video_duration:"B_ppvd"},w={};for(var L in N){var D=N[L];w[D]&&v.default.error("Key Conflict: ".concat(D,": ").concat(N[D],"| ").concat(L)),w[D]=L}var k=function(e){return N[e]||e},M=function(e){return w[e]||e};var P=r(9),x=r.n(P),U=r(54),j=function t(n){var r=!1,i=function(e){return{_type:"control",_message:e}},a=function(e,t){var n={};return Object.keys(t).forEach((function(e){Object(y.getParameter)("STATS_FILTER")[e]||(n[k(e)]=t[e])})),{_type:"subscribe_related_stats",_message:{stream_type:"high",stream_id:e,stats:n}}},c=function(e){return{_type:"publish",_message:e}},u=function(e,t){var n={};return Object.keys(t).forEach((function(e){Object(y.getParameter)("STATS_FILTER")[e]||(n[k(e)]=t[e])})),{_type:"subscribe_stats",_message:{stream_id:e,stats:n}}},f=t.DISCONNECTED,_=t.CONNECTING,R=t.CONNECTED,N=t.DISCONNECTING,w=f,L=Object(m.b)(n);Object.defineProperty(L,"state",{set:function(e){var n=w;w=e,Object(A._setClientConnectionStateRecord)(L.clientId,e),e!==t.CONNECTED&&e!==t.DISCONNECTING&&(L.hasJoined=!1),n!==e&&L.dispatchEvent({type:"connection-state-change",prevState:t.connetionStateMap[n],curState:t.connetionStateMap[e]})},get:function(){return w}}),L.socket=void 0,L.state=f,L.mode=n.mode,L.role=n.role,L.codec=n.codec,L.config={},L.timers={},L.timer_counter={},L.localStreams={},L.remoteStreams={},L.remoteMuteState={},L.attemps=1,L.p2p_attemps=1,L.audioLevel={},L.activeSpeaker=void 0,L.reconnectMode="tryNext",L.rejoinAttempt=0,L.hasChangeBGPAddress=!1,L.traffic_stats={},L.clientId=n.clientId,L.pingpongCounter=0,L.hasInvokeLeave=!1,L.p2ps=new Map,L.liveStreams=new Map,L.injectLiveStreams=new Map,L.remoteStreamsInChannel=new Set,L.subscribeRequestId=new Map,L.publishRequestId=0,L.hasJoined=!1,L.isFirstSuccess=!0,L.peerPublishDurationMap=new Map,function(e){var t=h;e.makeRequest=function(n,r,i){if(void 0===e.socket)return v.default.debug("[".concat(e.clientId,"] No socket available")),void t(i,b.default.INVALID_OPERATION);try{e.socket.emitRequest(n,(function(e,t){var n;"success"===e?"function"==typeof r&&r(t):"function"==typeof i&&(n=t&&t.error_code&&b.GatewayErrorCode[t.error_code]?b.GatewayErrorCode[t.error_code]:t&&t.error_str?t.error_str:t&&t.error_code?"UNKNOW_ERROR_".concat(t.error_code):e,i(n,t))}))}catch(r){v.default.debug("[".concat(e.clientId,"] Socket emit message failed ").concat(JSON.stringify(n))),v.default.debug("[".concat(e.clientId,"] "),r),t(i,b.default.SOCKET_ERROR)}},e.makeReport=function(t){void 0===e.socket&&v.default.debug("[".concat(e.clientId,"] No socket available"));try{e.socket.emitReport(t)}catch(n){v.default.debug("[".concat(e.clientId,"] Socket emit report failed ").concat(JSON.stringify(t)))}}}(L),L.inChannelInfo={joinAt:null,duration:0},L._sendMessage=function(e,t){switch(e){case"SubscribeStats":L.makeReport(u.apply(void 0,l()(t)));break;case"SubscribeRelatedStats":L.makeReport(a.apply(void 0,l()(t)))}};var D=h;L.p2pCounter=Object(S.random)(1e5),L.generateP2PId=function(){return++L.p2pCounter},L.audioVolumeIndication={enabled:!1,sortedAudioVolumes:[],smooth:3,interval:2e3},L.remoteVideoStreamTypes={REMOTE_VIDEO_STREAM_HIGH:0,REMOTE_VIDEO_STREAM_LOW:1,REMOTE_VIDEO_STREAM_MEDIUM:2},L.streamFallbackTypes={STREAM_FALLBACK_OPTION_DISABLED:0,STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW:1,STREAM_FALLBACK_OPTION_AUDIO_ONLY:2},L.configPublisher=function(e){L.config=e},L.getGatewayInfo=function(e,t){L.makeRequest({_type:"gateway_info"},e,t)},L.setClientRole=function(e,t){v.default.debug("[".concat(L.clientId,"] setClientRole to ").concat(e));var n=E.report.reportApiInvoke(L.joinInfo.sid,{name:"_setClientRole",callback:t});L.makeRequest({_type:"set_client_role",_message:{role:e}},(function(){L.role=e,L.dispatchEvent({type:"client-role-changed",role:e}),n&&n(null,{role:e})}),(function(t,r){if(r&&r.code&&(t=b.GatewayErrorCode[r.code]||"UNKNOW_ERROR_"+r.code),"ERR_SET_CLIENT_ROLE_ALREADY_IN_USE"===t)return n&&n(null);v.default.error("set Client role error to "+e+": "+t),n&&n(t)}))},L.join=function(e,t,r,i){L.hasInvokeLeave=!1,e.useProxyServer&&(L.hasChangeBGPAddress=!0);var o=(new Date).getTime(),a=e.uid;if(L.inChannelInfo.joinAt&&(L.inChannelInfo.duration+=o-L.inChannelInfo.joinAt),L.inChannelInfo.joinAt=o,L.state!==_)return v.default.error("[".concat(L.clientId,"] GatewayClient.join Failed: state "),L.state),i&&i(b.default.INVALID_OPERATION),void E.report.joinGateway(e.sid,{lts:o,succ:!1,ec:b.default.INVALID_OPERATION,addr:null});if(null!=a&&parseInt(a)!==a)return v.default.error("[".concat(L.clientId,"] Input uid is invalid")),L.state=f,i&&i(b.default.INVALID_PARAMETER),void E.report.joinGateway(e.sid,{lts:o,succ:!1,ec:b.default.INVALID_PARAMETER,addr:null});var s=V.register(L,{uid:a,cname:e&&e.cname});if(s)return L.state=f,i&&i(s),void E.report.joinGateway(e.sid,{lts:o,succ:!1,ec:s,addr:null});L.joinInfo=p()({},e),L.uid=a,L.key=t,L.pingpongCounter=0,W(e,(function(t){if(e.useLocalAccessPoint)try{var s=L.socket.signal.connection.url.match(/wss\:\/\/([^:]+):(\d+)/)[1];Object(y.setParameter)("EVENT_REPORT_DOMAIN",s),Object(y.setParameter)("EVENT_REPORT_BACKUP_DOMAIN",s),Object(y.setParameter)("LOG_UPLOAD_SERVER","".concat(s,":6444"))}catch(e){v.default.debug("[".concat(L.clientId,"] LocalAccessPoint error: ").concat(e))}if(L.state===N||L.state===f)return i&&i("LEAVE_BEFORE_JOIN_SUCCESS");L.state=R,v.default.debug("[".concat(L.clientId,"] Connected to gateway server")),clearInterval(L.pingTimer),L.pingTimer=setInterval((function(){var e=Object(y.getParameter)("PING_PONG_TIME_OUT");if(++L.pingpongCounter>=e){var t=Date.now();L.socket&&v.default.warning("PINGPONG Timeout. Last Socket Message: ".concat(t-L.socket.getLastMsgTime(),"ms")),L.socket&&L.socket.getLastMsgTime()&&t-L.socket.getLastMsgTime()>Object(y.getParameter)("WEBSOCKET_TIMEOUT_MIN")&&(L.pingpongCounter=0,L.socket.close(),L.socket.dispatchEvent(Object(m.d)({type:"disconnect",event:{msg:"PING_PONG_TIME_OUT"}})))}var n=Date.now();L.makeRequest({_type:"ping"},(function(){L.pingpongCounter=0;var e=Date.now()-n;Object(y.getParameter)("REPORT_STATS")&&L.makeRequest({_type:"ping_back",_message:{pingpongElapse:e}})}),(function(e,t){"TIMEOUT"!==e&&(v.default.error("Ping Error ".concat(e," ").concat(JSON.stringify(t))),t&&t.error_code&&L.socket&&L.socket.signal&&L.socket.signal.connection&&L.socket.signal.connection.readyState===WebSocket.OPEN&&(v.default.info("Disconnecting websocket connection"),L.socket.signal.connection.close()))}))}),3e3),function(e,t){var r=e.role,i=p()({},L.joinInfo.apResponse),o={session_id:L.joinInfo.sid,app_id:n.appId,channel_key:L.key,channel_name:L.joinInfo.cname,sdk_version:y.VERSION,browser:navigator.userAgent,process_id:Object(E.getProcessId)(),mode:L.mode,codec:L.codec,role:r,has_changed_gateway:Object(y.getParameter)("FORCE_CHANGED_GATEWAY_FLAG")||L.hasChangeBGPAddress,ap_response:i,optionalInfo:L.joinInfo.optionalInfo,extend:Object(y.getParameter)("JOIN_EXTEND"),details:{}};if(L.joinInfo.hasOwnProperty("stringUid")&&(o.string_uid=L.joinInfo.stringUid),L.socket&&L.socket.signal&&L.socket.signal&&(i.addresses&&i.addresses[L.socket.signal.hostIndex]&&(o.ap_response.ticket=i.addresses[L.socket.signal.hostIndex].ticket,delete i.addresses),Object(y.getParameter)("SET_DEFAULT_TURNSERVER")&&L.socket.signal.turnConfig)){var a={username:L.joinInfo.uid.toString(),credential:L.joinInfo.token,forceturn:Object(y.getParameter)("FORCE_TURN")};a.url=L.socket.signal.turnConfig.url,L.socket.signal.turnConfig.tcpport&&(a.tcpport=""+L.socket.signal.turnConfig.tcpport),L.socket.signal.turnConfig.udpport&&(a.udpport=""+L.socket.signal.turnConfig.udpport),!!L.joinInfo.turnServers.find((function(e){if(e.url===a.url)return!0}))||L.joinInfo.turnServers.push(a)}3===L.joinInfo.proxyServerType&&(o.plugin="web_cloud_proxy",o.details.cservice_map="1"),L.joinInfo.aesmode&&L.joinInfo.aespassword?(o.aes_mode=L.joinInfo.aesmode,o.aes_encrypt=!0,L.joinInfo.aes_salt&&(o.aes_salt=L.joinInfo.aes_salt),Object(U.encryptRSA)(L.joinInfo.aespassword).then((function(e){o.aes_secret=e,L.dispatchEvent({type:"join-message-hook",joinMessage:o}),t(null,{_type:"join",_message:o})})).catch((function(e){v.default.error("[".concat(L.clientId,"] encrypt password failed "),e),t("ENCRYPT_PASSWORD_FAILED")}))):(L.dispatchEvent({type:"join-message-hook",joinMessage:o}),t(null,{_type:"join",_message:o}))}({role:L.role},(function(t,n){if(t)return i&&i(t);L.makeRequest(n,(function(t){if(E.report.joinGateway(e.sid,{lts:o,succ:!0,ec:null,vid:e.vid,uid:e.uid,addr:L.socket.getURL(),firstSuccess:L.isFirstSuccess}),L.joinSuccessLts=Date.now(),L.isFirstSuccess=!1,L.rejoinAttempt=0,L.hasJoined=!0,r&&r(t.uid),!0===t.return_vosip||!0===Object(y.getParameter)("ENABLE_LIVE_SERVER_LIST")){var n=null;try{n=L.socket.signal.connection.url}catch(e){v.default.debug("[".concat(L.clientId,"] Can not get gateway ip: ").concat(e))}n?Object(y.setParameter)("LIVE_SERVER_LIST",[n]):Object(y.setParameter)("LIVE_SERVER_LIST",[])}L.dispatchEvent({type:"join"}),clearInterval(L.timers.trafficStats),L.timers.trafficStats=setInterval((function(){L.makeRequest({_type:"traffic_stats"},(function(e){var t={};for(var n in e)t[M(n)]=e[n];if(t.peer_delay&&t.peer_delay.length){var r=[];t.peer_delay.forEach((function(e){var t={};for(var n in e)t[M(n)]=e[n];r.push(t)})),t.peer_delay=r}L.traffic_stats=t,L.traffic_stats.timestamp=Date.now();var i=L.joinInfo.stringUid,o=L.localStreams[a]||L.localStreams[i];o&&(o.traffic_stats={access_delay:t.access_delay}),t.peer_delay&&t.peer_delay.forEach((function(e){var n=L.remoteStreams[e.peer_uid];n&&(n.traffic_stats={access_delay:t.access_delay,e2e_delay:e.e2e_delay,audio_delay:e.audio_delay,video_delay:e.video_delay})})),L.dispatchEvent({type:"after-getTrafficStats",trafficStats:t})}))}),3e3)}),(function(t,n){if(v.default.error("[".concat(L.clientId,"] User join failed [").concat(t,"]")),"ERR_JOIN_BY_MULTI_IP"===t){try{E.report.joinGateway(e.sid,{lts:o,succ:!1,ec:"ERR_JOIN_BY_MULTI_IP",addr:L.socket.getURL()})}catch(e){}return L.dispatchEvent({type:"onMultiIP",option:n.option})}C[t]&&L.rejoinAttempt<4?L._doWithAction(C[t],r,i):i&&i(t),E.report.joinGateway(e.sid,{lts:o,succ:!1,ec:t,addr:L.socket&&L.socket.getURL()})}))}))}),(function(t){v.default.error("[".concat(L.clientId,"] User join failed [").concat(t,"]")),i&&i(t),E.report.joinGateway(e.sid,{lts:o,succ:!1,ec:t,addr:L.socket.getURL()})})),this.remoteMuteState={},L.resetAudioVolumeIndication()},L.leave=function(e,t){var n=V.unregister(L);switch(n&&v.default.debug("[".concat(L.clientId,"] "),n),L.p2ps.clear(),L.state){case f:return v.default.debug("[".concat(L.clientId,"] Client Already in DISCONNECTED status")),void D(e);case N:return v.default.debug("[".concat(L.clientId,"] Client Already in DISCONNECTING status")),void D(t,b.default.INVALID_OPERATION);case _:return L.socket&&L.socket.close(),L.socket=void 0,v.default.info("[".concat(L.clientId,"] Client connecting, Leave channel success")),L.state=f,e&&e()}for(var r in L.state=N,L.channelMediaConfig&&(L.channelMediaRelayController&&L.channelMediaRelayController.dispose(),L.channelMediaConfig,L.channelMediaRelayController=null),clearInterval(L.pingTimer),L.timers)L.timers.hasOwnProperty(r)&&clearInterval(L.timers[r]);for(var r in L.inChannelInfo.joinAt&&(L.inChannelInfo.duration+=Date.now()-L.inChannelInfo.joinAt,L.inChannelInfo.joinAt=null),L.hasJoined?L.makeRequest({_type:"leave"},(function(t){L.socket.close(),L.socket=void 0,v.default.info("[".concat(L.clientId,"] Leave channel success")),L.state=f,e&&e(t)}),(function(e){"TIMEOUT"!==e&&"REQUEST_ABORT"!==e&&(v.default.error("[".concat(L.clientId,"] Leave Channel Failed"),e),L.state=R,t&&t(e))})):(L.socket&&(L.socket.close(),L.socket=void 0),v.default.info("[".concat(L.clientId,"] Leave channel before joined")),L.state=f,e&&e()),L.localStreams)if(L.localStreams.hasOwnProperty(r)){var i=L.localStreams[r];delete L.localStreams[r],void 0!==i.pc&&(i.pc.close(),i.pc=void 0)}q()},L.publish=function(e,t,n,r){var o=(new Date).getTime(),a=!1;if(e.publishLTS=o,"object"!==d()(e)||null===e)return v.default.error("[".concat(L.clientId,"] Invalid local stream")),r&&r(b.default.INVALID_LOCAL_STREAM),void E.report.publish(L.joinInfo.sid,{lts:o,succ:!1,audio:!1,video:!1,screenshare:!1,audioName:"",videoName:"",screenName:"",ec:b.default.INVALID_LOCAL_STREAM});if(!e.stream&&void 0===e.url)return v.default.error("[".concat(L.clientId,"] Invalid local media stream")),r&&r(b.default.INVALID_LOCAL_STREAM),void E.report.publish(L.joinInfo.sid,{lts:o,succ:!1,audio:!1,video:!1,screenshare:!1,audioName:"",videoName:"",screenName:"",ec:b.default.INVALID_LOCAL_STREAM});if(L.state!==R)return v.default.error("[".concat(L.clientId,"] User is not in the session")),r&&r(b.default.INVALID_OPERATION),void E.report.publish(L.joinInfo.sid,{lts:o,succ:!1,audio:e.hasAudio(),video:e.hasVideo(),screenshare:e.hasScreen(),audioName:e.hasAudio()&&e.audioName,videoName:e.hasVideo()&&e.videoName,screenName:e.hasScreen()&&e.screenName,ec:b.default.INVALID_OPERATION});var s=e.getAttributes()||{};if(e.local&&void 0===L.localStreams[e.getId()]&&(e.hasAudio()||e.hasVideo()||e.hasScreen())){var u=L.generateP2PId();if(L.p2ps.set(u,e),e.p2pId=u,void 0!==e.url)G(c({state:"url",audio:e.hasAudio(),video:e.hasVideo(),attributes:e.getAttributes()},e.url),(function(t,n){"success"===t?(e.getUserId()!==n&&e.setUserId(n),L.localStreams[n]=e,e.onClose=function(){L.unpublish(e)}):v.default.error("[".concat(L.clientId,"] Publish local stream failed"),t)}));else{L.localStreams[e.getId()]=e,e.connectionSpec={callback:function(s){s||r&&r("CANNOT_GET_OFFER"),"motion"===e.optimizationMode&&e.pc.setRtpSenderParameters("maintain-framerate"),"detail"===e.optimizationMode&&e.pc.setRtpSenderParameters("maintain-resolution"),L.makeRequest(c({state:"offer",stream_type:1==t.streamType?"low":"high",p2p_id:u,sdp:s,audio:e.audio||e.screenAudio,video:e.screen||e.video,screen:e.screen,attributes:e.getAttributes(),dtx:e.DTX,hq:e.highQuality,lq:e.lowQuality,stereo:e.stereo,speech:e.speech,codec:L.codec,extend:Object(y.getParameter)("PUB_EXTEND")}),(function(t){e.getUserId()!==t.uid&&e.setUserId(t.uid),v.default.info("[".concat(L.clientId,"] Local stream published with uid"),t.uid),e.onClose=function(){L.unpublish(e)},e._onAudioUnmute=function(){L.makeReport(i({action:"unmute_local_audio",stream_id:e.getId()}))},e._onVideoUnmute=function(){L.makeReport(i({action:"unmute_local_video",stream_id:e.getId()}))},e._onAudioMute=function(){L.makeReport(i({action:"mute_local_audio",stream_id:e.getId()}))},e._onVideoMute=function(){L.makeReport(i({action:"mute_local_video",stream_id:e.getId()}))},e.getId()===e.getUserId()&&(e.isAudioOn()||e.hasAudio()&&(v.default.debug("[".concat(L.clientId,"] local stream audio mute")),e._onAudioMute()),e.isVideoOn()||(e.hasVideo()||e.hasScreen())&&(v.default.debug("[".concat(L.clientId,"] local stream video mute")),e._onVideoMute())),e.pc.oniceconnectionstatechange=function(t){if("failed"===t){if(null!=L.timers[e.getId()]&&(clearInterval(L.timers[e.getId()]),clearInterval(L.timers[e.getId()]+"_RelatedStats")),v.default.error("[".concat(L.clientId,"] Publisher connection is lost -- streamId: ").concat(e.getId(),", p2pId: ").concat(u)),L.p2ps.delete(u),v.default.debug("[".concat(L.clientId,"] publish p2p failed: "),L.p2ps),!a)return a=!0,E.report.publish(L.joinInfo.sid,{lts:o,succ:!1,audio:e.hasAudio(),video:e.hasVideo(),screenshare:e.hasScreen(),audioName:e.hasAudio()&&e.audioName,videoName:e.hasVideo()&&e.videoName,screenName:e.hasScreen()&&e.screenName,ec:b.default.PEERCONNECTION_FAILED,publishRequestid:L.publishRequestId||0,p2pid:u}),L.dispatchEvent(Object(m.a)({type:"pubP2PLost",stream:e})),r&&r(b.default.PEERCONNECTION_FAILED);L.dispatchEvent(Object(m.a)({type:"pubP2PLost",stream:e}))}else if("connected"===t&&(v.default.debug("[".concat(L.clientId,"] publish p2p connected: "),L.p2ps),e.getId()===e.getUserId()&&(e._isAudioMuted()?L.makeReport(i({action:"mute_local_audio",stream_id:e.getId()})):L.makeReport(i({action:"unmute_local_audio",stream_id:e.getId()})),e._isVideoMuted()?L.makeReport(i({action:"mute_local_video",stream_id:e.getId()})):L.makeReport(i({action:"unmute_local_video",stream_id:e.getId()}))),!a))return a=!0,E.report.publish(L.joinInfo.sid,{lts:o,succ:!0,audio:e.hasAudio(),video:e.hasVideo(),screenshare:e.hasScreen(),audioName:e.hasAudio()&&e.audioName,videoName:e.hasVideo()&&e.videoName,screenName:e.hasScreen()&&e.screenName,ec:null,publishRequestid:L.publishRequestId||0,p2pid:u}),n&&n()},e.pc.processSignalingMessage(t.sdp)}),(function(t,n){v.default.error("Publish Failed: ".concat(t)),E.report.publish(L.joinInfo.sid,{lts:o,succ:!1,audio:e.hasAudio(),video:e.hasVideo(),screenshare:e.hasScreen(),audioName:e.hasAudio()&&e.audioName,videoName:e.hasVideo()&&e.videoName,screenName:e.hasScreen()&&e.screenName,ec:t,publishRequestid:L.publishRequestId||0,p2pid:u}),"TIMEOUT"!=t&&(L.processPublishFailure(e),r&&r(t))}))},audio:e.hasAudio(),video:e.hasVideo(),screen:e.hasScreen(),optimizationMode:e.optimizationMode,isSubscriber:!1,stunServerUrl:L.stunServerUrl,turnServers:L.joinInfo.turnServers,maxAudioBW:s.maxAudioBW,minVideoBW:s.minVideoBW,maxVideoBW:s.maxVideoBW,mode:L.mode,codec:L.codec,isVideoMute:e.userMuteVideo||e.peerMuteVideo,isAudioMute:e.userMuteAudio||e.peerMuteAudio,maxFrameRate:e.attributes.maxFrameRate,agoraStream:e,clientId:L.clientId,isCloudProxy3:3===L.joinInfo.proxyServerType,onNoIceCandidate:function(){L.dispatchEvent({type:"no_ice_candidate",stream:e})}},e.pc=Object(I.a)(e.connectionSpec),e.pc.addStream(e.stream),v.default.debug("[".concat(L.clientId,"] PeerConnection add stream :"),e.stream),e.pc.onnegotiationneeded=function(n){"motion"===e.optimizationMode&&e.pc.setRtpSenderParameters("maintain-framerate"),"detail"===e.optimizationMode&&e.pc.setRtpSenderParameters("maintain-resolution");var r={state:"negotiation",stream_type:1===t.streamType?"low":"high",p2p_id:u,sdp:n};L.makeRequest(c(r),(function(t){v.default.debug("Negotating Stream ".concat(e.getId())),e.pc.processSignalingMessage(t.sdp)}),(function(e,t){v.default.error("Negotiation failed ".concat(e),t,r)}))},clearInterval(L.timers[e.getId()]),L.timers[e.getId()]=setInterval((function(){if(Object(y.getParameter)("REPORT_STATS")){var t=0;e&&e.pc&&e.pc.getStats&&e.pc.getStatsRate((function(n){n.forEach((function(n){if(n&&n.id&&!(/_recv$/.test(n.id)||/^time$/.test(n.id)||~n.type.toLowerCase().indexOf("inbound"))&&e.getUserId()){if(-1===n.id.indexOf("outbound_rtp")&&-1===n.id.indexOf("OutboundRTP")&&-1===n.type.toLowerCase().indexOf("outbound")||"video"!==n.mediaType||(n.googFrameWidthSent=e.videoWidth+"",n.googFrameHeightSent=e.videoHeight+""),"video"===n.mediaType)try{var r=e.stream.getVideoTracks()[0];n.A_vstd=r.enabled?"0":"1"}catch(e){}if("audio"===n.mediaType)try{var i=e.stream.getAudioTracks()[0];n.A_astd=i.enabled?"0":"1"}catch(e){}if(e.getId()==e.getUserId()){var o=200*t;t++,setTimeout((function(){var e=L.socket&&L.socket.getLastMsgTime()&&Date.now()-L.socket.getLastMsgTime();e>Object(y.getParameter)("REPORT_STATS_TIMEOUT")?v.default.debug("PublishStats report blocked by REPORT_STATS_TIMEOUT ".concat(e)):L.makeReport(function(e){var t={};return Object.keys(e).forEach((function(n){Object(y.getParameter)("STATS_FILTER")[n]||(t[k(n)]=e[n])})),{_type:"publish_stats",_message:{stream_type:"high",stats:t}}}(n))}),o)}else{o=200*t;t++,setTimeout((function(){var e=L.socket&&L.socket.getLastMsgTime()&&Date.now()-L.socket.getLastMsgTime();e>Object(y.getParameter)("REPORT_STATS_TIMEOUT")?v.default.debug("PublishStatsLow report blocked by REPORT_STATS_TIMEOUT ".concat(e)):L.makeReport(function(e){var t={};return Object.keys(e).forEach((function(n){Object(y.getParameter)("STATS_FILTER")[n]||(t[k(n)]=e[n])})),{_type:"publish_stats",_message:{stream_type:"low",stats:t}}}(n))}),o)}}}))}))}}),3e3);var l=function(){Object(y.getParameter)("REPORT_STATS")&&e&&e.pc&&e.pc.getVideoRelatedStats&&e.pc.getVideoRelatedStats((function(t){var n,r,i=L.socket&&L.socket.getLastMsgTime()&&Date.now()-L.socket.getLastMsgTime();i>Object(y.getParameter)("REPORT_STATS_TIMEOUT")?v.default.debug("PublishRelatedStats report blocked by REPORT_STATS_TIMEOUT ".concat(i)):e.getId()===e.getUserId()?L.makeReport((n=t,r={},Object.keys(n).forEach((function(e){Object(y.getParameter)("STATS_FILTER")[e]||(r[k(e)]=n[e])})),{_type:"publish_related_stats",_message:{stream_type:"high",stats:r}})):L.makeReport(function(e){var t={};return Object.keys(e).forEach((function(n){Object(y.getParameter)("STATS_FILTER")[n]||(t[k(n)]=e[n])})),{_type:"publish_related_stats",_message:{stream_type:"low",stats:t}}}(t))}))};l(),clearInterval(L.timers[e.getId()+"_RelatedStats"]),L.timers[e.getId()+"_RelatedStats"]=setInterval(l,1e3)}}},L.unpublish=function(e,t,n,r){if("object"!==d()(e)||null===e)return v.default.error("[".concat(L.clientId,"] Invalid local stream")),void D(r,b.default.INVALID_LOCAL_STREAM);if(L.state!==R)return v.default.error("[".concat(L.clientId,"] User not in the session")),void D(r,b.default.INVALID_OPERATION);if(null!=L.timers[e.getId()]&&(clearInterval(L.timers[e.getId()]),clearInterval(L.timers[e.getId()+"_RelatedStats"])),void 0!==L.socket)if(e.local&&void 0!==L.localStreams[e.getId()]){delete L.localStreams[e.getId()];var i={stream_id:e.getUserId(),stream_type:1===t.streamType?"low":"high"};L.makeRequest({_type:"unpublish",_message:i}),(e.hasAudio()||e.hasVideo()||e.hasScreen())&&void 0===e.url&&void 0!==e.pc&&(e.pc.close(),e.pc=void 0),e.onClose=void 0,e._onAudioMute=void 0,e._onAudioUnute=void 0,e._onVideoMute=void 0,e._onVideoUnmute=void 0,L.p2ps.delete(e.p2pId),n&&n()}else v.default.error("[".concat(L.clientId,"] Invalid local stream")),D(r,b.default.INVALID_LOCAL_STREAM);else v.default.error("[".concat(L.clientId,"] User not in the session")),D(r,b.default.INVALID_OPERATION)},L.subscribe=function(e,t,n){var r=(new Date).getTime();e.subscribeLTS=r;var o=!1;if(v.default.info("[".concat(L.clientId,"] Gatewayclient ").concat(L.uid," Subscribe ").concat(e.getId(),": ").concat(JSON.stringify(e.subscribeOptions))),"object"!==d()(e)||null===e)return v.default.error("[".concat(L.clientId,"] Invalid remote stream")),n&&n(b.default.INVALID_REMOTE_STREAM),void E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!1,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:b.default.INVALID_REMOTE_STREAM});if(L.state!==R&&(v.default.error("[".concat(L.clientId,"] User is not in the session")),!o))return o=!0,E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!1,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:b.default.INVALID_OPERATION}),n&&n(b.default.INVALID_OPERATION);if(!e.local&&L.remoteStreams.hasOwnProperty(e.getId()))if(e.hasAudio()||e.hasVideo()||e.hasScreen()){var s=L.generateP2PId();L.p2ps.set(s,e),e.p2pId=s,e.pc=Object(I.a)({callback:function(t){t||n&&n("CANNOT_GET_OFFER");var i={stream_id:e.getId(),audio:!e.subscribeOptions||e.subscribeOptions.audio,video:!e.subscribeOptions||e.subscribeOptions.video,codec:L.codec,p2p_id:s,sdp:t,tcc:Object(y.getParameter)("SUBSCRIBE_TCC"),extend:Object(y.getParameter)("SUB_EXTEND")};L.makeRequest({_type:"subscribe",_message:i},(function(t){e.pc.processSignalingMessage(t.sdp)}),(function(t,i){v.default.error("[".concat(L.clientId,"] Subscribe remote stream Failed: ").concat(t,", closing stream "),e.getId(),i),E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!1,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:t}),"TIMEOUT"!=t&&(L.processSubscribeFailure(e),n&&n(t))}))},nop2p:!0,audio:!0,video:!0,screen:e.hasScreen(),isSubscriber:!0,stunServerUrl:L.stunServerUrl,turnServers:L.joinInfo.turnServers,isVideoMute:e.userMuteVideo,isAudioMute:e.userMuteAudio,uid:e.getId(),agoraStream:e,clientId:L.clientId}),e.pc.onaddstream=function(t,n){if(e._onAudioUnmute=function(){L.makeReport(i({action:"unmute_remote_audio",stream_id:e.getId()}),(function(){}),(function(){}))},e._onAudioMute=function(){L.makeReport(i({action:"mute_remote_audio",stream_id:e.getId()}),(function(){}),(function(){}))},e._onVideoUnmute=function(){L.makeReport(i({action:"unmute_remote_video",stream_id:e.getId()}),(function(){}),(function(){}))},e._onVideoMute=function(){L.makeReport(i({action:"mute_remote_video",stream_id:e.getId()}),(function(){}),(function(){}))},"ontrack"===n&&"video"===t.track.kind||"onaddstream"===n){v.default.info("[".concat(L.clientId,"] Remote stream subscribed with uid "),e.getId());var r=L.remoteStreams[e.getId()];if(L.remoteStreams[e.getId()].stream="onaddstream"===n?t.stream:t.streams[0],L.remoteStreams[e.getId()].hasVideo()){if(Object(O.isFireFox)()||Object(O.isSafari)()){var o=L.remoteStreams[e.getId()].stream;Object(S.vsResHack)(o,(function(t,n){e.videoWidth=t,e.videoHeight=n}),(function(e){return v.default.warning("[".concat(L.clientId,"] vsResHack failed: ")+e)}))}}else{var a=L.remoteStreams[e.getId()];a.peerMuteVideo=!0,L._adjustPCMuteStatus(a)}r&&r.isPlaying()&&r.elementID&&(v.default.debug("[".concat(L.clientId,"] Reload Player ").concat(r.elementID," StreamId ").concat(r.getId())),e.audioOutput=r.audioOutput,r.stop(),e.play(r.elementID,r.playOptions)),delete e.audioLevelHelper;var s=Object(m.e)({type:"stream-subscribed",stream:L.remoteStreams[e.getId()]});L.dispatchEvent(s)}},clearInterval(L.timers[e.getId()]),L.timers[e.getId()]=setInterval((function(){if(Object(y.getParameter)("REPORT_STATS")){var t=0;e&&e.pc&&e.pc.getStats&&e.pc.getStatsRate((function(n){n.forEach((function(n){if(n&&n.id){if(/_send$/.test(n.id)||/^time$/.test(n.id)||/^bweforvideo$/.test(n.id))return;-1===n.id.indexOf("inbound_rtp")&&-1===n.id.indexOf("inbound-rtp")&&-1===n.type.toLowerCase().indexOf("inbound")||"video"!==n.mediaType||(n.googFrameWidthReceived=e.videoWidth+"",n.googFrameHeightReceived=e.videoHeight+"");var r=200*t;t++;var i=e.getId();setTimeout((function(){var t=L.socket&&L.socket.getLastMsgTime()&&Date.now()-L.socket.getLastMsgTime();if(t>Object(y.getParameter)("REPORT_STATS_TIMEOUT"))v.default.debug("SubscribeStats report blocked by REPORT_STATS_TIMEOUT ".concat(t));else{if("video"===n.mediaType)try{var r=e.stream.getVideoTracks()[0];n.A_vrtd=r.enabled?"0":"1",e.player&&e.player.freezeTimeCounterList.length>0&&(n.A_vrft=e.player.freezeTimeCounterList.splice(0,1)[0].toString())}catch(e){}if("audio"===n.mediaType)try{var o=e.stream.getAudioTracks()[0];n.A_artd=o.enabled?"0":"1"}catch(e){}L.makeReport(u(i,n))}}),r)}else;}))}))}}),3e3),clearInterval(L.timers[e.getId()+"_RelatedStats"]),L.timers[e.getId()+"_RelatedStats"]=setInterval((function(){if(Object(y.getParameter)("REPORT_STATS")&&e&&e.pc){var t=L.socket&&L.socket.getLastMsgTime()&&Date.now()-L.socket.getLastMsgTime();if(t>Object(y.getParameter)("REPORT_STATS_TIMEOUT"))return void v.default.debug("SubscribeRelatedStats report blocked by REPORT_STATS_TIMEOUT ".concat(t));e.pc.getVideoRelatedStats&&e.pc.getVideoRelatedStats((function(t){e.player&&(e.hasVideo()&&!e.peerMuteVideo&&(t.isFreeze=e.player.freezeCount>e.player.lastFreezeCount),e.player.lastFreezeCount=e.player.freezeCount),L.makeReport(a(e.getId(),t))})),e.pc.getAudioRelatedStats&&e.pc.getAudioRelatedStats((function(t){L.makeReport(a(e.getId(),t))}))}}),1e3),L.audioLevel[e.getId()]=0,clearInterval(L.timers[e.getId()+"audio"]),L.timers[e.getId()+"audio"]=setInterval((function(){L.hasListeners("active-speaker")&&e&&e.pc&&"established"===e.pc.state&&e.pc.getStats&&e.pc.getStats((function(t){t.forEach((function(t){if("audio"===t.mediaType){if(t.audioOutputLevel>5e3)for(var n in L.audioLevel[e.getId()]<20&&(L.audioLevel[e.getId()]+=1),L.audioLevel)n!==""+e.getId()&&L.audioLevel[n]>0&&(L.audioLevel[n]-=1);var r=Object.keys(L.audioLevel).sort((function(e,t){return L.audioLevel[t]-L.audioLevel[e]}));if(L.activeSpeaker!==r[0]){var i=Object(m.a)({type:"active-speaker",uid:r[0]});L.dispatchEvent(i),L.activeSpeaker=r[0],v.default.debug("[".concat(L.clientId,"] Update active speaker: ").concat(L.activeSpeaker))}}}))}),50)}),50),e.pc.oniceconnectionstatechange=function(i){if("failed"===i)null!=L.timers[e.getId()]&&(clearInterval(L.timers[e.getId()]),clearInterval(L.timers[e.getId()]+"audio")),v.default.error("[".concat(L.clientId,"] Subscriber connection is lost -- streamId: ").concat(e.getId(),", p2pId: ").concat(s)),v.default.debug("[".concat(L.clientId,"] subscribe p2p failed: "),L.p2ps),o||(o=!0,n&&n(b.default.PEERCONNECTION_FAILED),E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!1,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:b.default.PEERCONNECTION_FAILED,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:s})),L.remoteStreams[e.getId()]&&L.p2ps.has(s)&&(L.p2ps.delete(s),L.dispatchEvent(Object(m.a)({type:"subP2PLost",stream:e})));else if("connected"===i&&(v.default.debug("[".concat(L.clientId,"] subscribe p2p connected: "),L.p2ps),!o)){o=!0,E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!0,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:null,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:s}),L._adjustPCMuteStatus(e);var a=!1,c=!1,d=!1,u=setInterval((function(){a&&c||(e.pc?e.pc.getStats((function(t){t.forEach((function(t){if((-1!==t.id.indexOf("recv")||t.type&&-1!==t.type.toLowerCase().indexOf("inbound")||-1!==t.id.indexOf("inbound_rtp")||-1!==t.id.indexOf("inbound-rtp")||-1!==t.id.indexOf("InboundRTP"))&&"audio"===t.mediaType){if((t.googDecodingNormal>0||t.audioOutputLevel>0)&&!a){a=!0,L.dispatchEvent({type:"first-audio-frame-decode",stream:e}),a&&c&&clearInterval(u);var n=Date.now(),r=E.report.getSessionStartTime(L.joinInfo.sid);E.report.firstAudioDecode(L.joinInfo.sid,{peerid:e.uintId,uid:L.uid,elapse:n-r,subscribeElapse:n-e.subscribeLTS,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:s})}if(parseInt(t.packetsReceived)>0&&!c){c=!0,L.dispatchEvent({type:"first-audio-packet-received",stream:e}),a&&c&&clearInterval(u);n=Date.now(),r=E.report.getSessionStartTime(L.joinInfo.sid);E.report.firstAudioReceived(L.joinInfo.sid,{peerid:e.uintId,uid:L.uid,elapse:n-r,subscribeElapse:n-e.subscribeLTS,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:s})}}}))}),100):clearInterval(u))}),100),l=!1,f=!1,p=setInterval((function(){l&&f||(e.pc?e.pc.getStats((function(t){t.forEach((function(t){if((-1!==t.id.indexOf("recv")||t.type&&-1!==t.type.toLowerCase().indexOf("inbound")||-1!==t.id.indexOf("inbound_rtp")||-1!==t.id.indexOf("inbound-rtp")||-1!==t.id.indexOf("InboundRTP"))&&"video"===t.mediaType){if((t.framesDecoded>0||t.googFramesDecoded>0)&&!l){l=!0,L.dispatchEvent({type:"first-video-frame-decode",stream:e}),l&&f&&clearInterval(p);var n=Date.now(),r=E.report.getSessionStartTime(L.joinInfo.sid);e.firstFrameTime=(new Date).getTime()-e.subscribeLTS,E.report.firstVideoDecode(L.joinInfo.sid,{peerid:e.uintId,width:parseInt(t.googFrameWidthReceived)||0,height:parseInt(t.googFrameHeightReceived)||0,uid:L.uid,elapse:n-r,subscribeElapse:n-e.subscribeLTS,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:s})}if(t.packetsReceived>0&&!f){f=!0,L.dispatchEvent({type:"first-video-packet-received",stream:e}),l&&f&&clearInterval(p);n=Date.now(),r=E.report.getSessionStartTime(L.joinInfo.sid);E.report.firstVideoReceived(L.joinInfo.sid,{peerid:e.uintId,uid:L.uid,elapse:n-r,subscribeElapse:n-e.subscribeLTS,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:s})}}}))}),100):clearInterval(p))}),100),g=setInterval((function(){if(!d){var t=e.getId(),n=L.traffic_stats;if(n&&n.peer_delay){var r=n.peer_delay.find((function(e){return e.peer_uid==t}));if(r){if(d=!0,L.peerPublishDurationMap.get(e.getId()))return void clearInterval(g);var i=r.peer_publish_audio_duration,o=r.peer_publish_video_duration;if(void 0===i||void 0===o)return;L.peerPublishDurationMap.set(e.getId(),!0);var a=E.report.getSessionStartTime(L.joinInfo.sid),s=(i||o)+(Date.now()-n.timestamp),c=Date.now();E.report.peerPublishStatus({audiotag:i?1:-1,videotag:o?1:-1,lts:c,sid:L.joinInfo.sid,cname:L.joinInfo.cname,cid:L.joinInfo.cid,uid:L.joinInfo.uid,elapse:c-a,peer:e.uintId,peerPublishDuration:s,joinChannelSuccessElapse:c-L.joinSuccessLts,subscribeElapse:c-e.subscribeLTS}),clearInterval(g)}}}}),1e3);return e.sid=L.joinInfo.sid,t&&t()}}}else v.default.error("[".concat(L.clientId,"] Invalid remote stream")),o||(o=!0,n&&n(b.default.INVALID_REMOTE_STREAM),E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!1,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:b.default.INVALID_REMOTE_STREAM}));else v.default.error("[".concat(L.clientId,"] No such remote stream")),o||(o=!0,n&&n(b.default.NO_SUCH_REMOTE_STREAM),E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!1,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:b.default.NO_SUCH_REMOTE_STREAM}))},L.subscribeChange=function(e,t,n){var r=Date.now();v.default.info("[".concat(L.clientId,"] Gatewayclient ").concat(L.uid," SubscribeChange ").concat(e.getId(),": ").concat(JSON.stringify(e.subscribeOptions))),L._adjustPCMuteStatus(e);var i={stream_id:e.getId(),audio:e.subscribeOptions.audio,video:e.subscribeOptions.video};L.makeRequest({_type:"subscribe_change",_message:i},(function(n){var i=Object(m.e)({type:"stream-subscribe-changed",stream:L.remoteStreams[e.getId()]});E.report.subscribe(L.joinInfo.sid,{lts:r,succ:!0,video:e.subscribeOptions&&e.subscribeOptions.video,audio:e.subscribeOptions&&e.subscribeOptions.audio,peerid:e.getId(),ec:null,subscribeRequestid:L.subscribeRequestId.get(e.getId())||0,p2pid:L.p2ps.get(e.getId())}),L.dispatchEvent(i),t&&t()}),(function(t,r){v.default.error("[".concat(L.clientId,"] Subscribe Change Failed ").concat(e.getId()),t,r),n&&n(t,r)}))},L.processPublishFailure=function(e){e.publishLTS=null,e.p2pId&&L.p2ps.get(e.p2pId)===e&&L.p2ps.delete(e.p2pId),L.localStreams[e.getUserId()]===e&&delete L.localStreams[e.getUserId()],L.localStreams[e.getId()]===e&&delete L.localStreams[e.getId()],e.pc&&(e.pc.processSignalingMessage=function(){},e.pc.oniceconnectionstatechange=function(){},e.pc.close(),delete e.pc),delete e.onClose,delete e._onAudioUnmute,delete e._onVideoUnmute,delete e._onAudioMute,delete e._onVideoMute,delete e._onAudioUnmute},L.processSubscribeFailure=function(e){e.p2pId&&L.p2ps.get(e.p2pId)===e&&L.p2ps.delete(e.p2pId),e.pc&&(e.pc.onaddstream=function(){},e.pc.processSignalingMessage=function(){},e.pc.oniceconnectionstatechange=function(){},e.pc.close(),delete e.pc),delete e.onClose,delete e._onAudioUnmute,delete e._onVideoUnmute,delete e._onAudioMute,delete e._onVideoMute,delete e._onAudioUnmute},L._adjustPCMuteStatus=function(e){(v.default.debug("[".concat(L.clientId,"]: use _adjustPCMuteStatus: ").concat(e.getId())),v.default.debug("[".concat(L.clientId,"]: video: ").concat(e.video,", audio: ").concat(e.audio,", suboption: ").concat(JSON.stringify(e.subscribeOptions),",userMuteVideo: ").concat(e.userMuteVideo,", peerMuteVideo: ").concat(e.peerMuteVideo,", userMuteAudio: ").concat(e.userMuteAudio,", peerMuteAudio: ").concat(e.peerMuteAudio)),!e.local&&e.pc&&e.pc.peerConnection.getReceivers)&&e.pc.peerConnection.getReceivers().forEach((function(t){if(t&&t.track&&"audio"===t.track.kind){var n=!e.userMuteAudio&&!e.peerMuteAudio;e.subscribeOptions&&!e.subscribeOptions.audio&&(n=!1),v.default.debug("[".concat(L.clientId,"]: set receiver audio track: ").concat(n)),t.track.enabled=!!n}else if(t&&t.track&&"video"===t.track.kind){var r=!e.userMuteVideo&&!e.peerMuteVideo;e.subscribeOptions&&!e.subscribeOptions.video&&(r=!1),v.default.debug("[".concat(L.clientId,"]: set receiver video track: ").concat(r)),t.track.enabled=!!r}}))},L.unsubscribe=function(e,t,n){if("object"!==d()(e)||null===e)return v.default.error("[".concat(L.clientId,"] Invalid remote stream")),void D(n,b.default.INVALID_REMOTE_STREAM);if(L.state!==R)return v.default.error("[".concat(L.clientId,"] User is not in the session")),void D(n,b.default.INVALID_OPERATION);if(null!=L.timers[e.getId()]&&(clearInterval(L.timers[e.getId()]),clearInterval(L.timers[e.getId()]+"audio")),null!=L.audioLevel[e.getId()]&&delete L.audioLevel[e.getId()],null!=L.timer_counter[e.getId()]&&delete L.timer_counter[e.getId()],L.remoteStreams.hasOwnProperty(e.getId())){if(!L.socket)return v.default.error("[".concat(L.clientId,"] User is not in the session")),void D(n,b.default.INVALID_OPERATION);if(e.local)return v.default.error("[".concat(L.clientId,"] Invalid remote stream")),void D(n,b.default.INVALID_REMOTE_STREAM);e.close(),e.stop();var r={stream_id:e.getId()};L.makeRequest({_type:"unsubscribe",_message:r}),void 0!==e.pc&&(e.pc.close(),e.pc=void 0),e.onClose=void 0,e._onAudioMute=void 0,e._onAudioUnute=void 0,e._onVideoMute=void 0,e._onVideoUnmute=void 0,delete e.subscribeOptions,L.p2ps.delete(e.p2pId),v.default.info("[".concat(L.clientId,"] Unsubscribe stream success")),t&&t()}else D(n,b.default.NO_SUCH_REMOTE_STREAM)},L.setRemoteVideoStreamType=function(e,t){if(v.default.debug("[".concat(L.clientId,"] Switching remote video stream ").concat(e.getId()," to ").concat(t)),"object"===d()(e)&&null!==e)if(L.state===R){if(!e.local){switch(t){case L.remoteVideoStreamTypes.REMOTE_VIDEO_STREAM_HIGH:case L.remoteVideoStreamTypes.REMOTE_VIDEO_STREAM_LOW:case L.remoteVideoStreamTypes.REMOTE_VIDEO_STREAM_MEDIUM:break;default:return}var n={stream_id:e.getId(),stream_type:t};L.makeRequest({_type:"switch_video_stream",_message:n},(function(){v.default.debug("SwitchVideoStream Success ".concat(n.stream_id," ").concat(n.stream_type))}),(function(e,t){v.default.error("SwitchVideoStream Error ".concat(e," ").concat(n.stream_id," ").concat(n.stream_type),t)}))}}else v.default.error("[".concat(L.clientId,"] User is not in the session"));else v.default.error("[".concat(L.clientId,"] Invalid remote stream"))},L.renewToken=function(e,t,n){e?L.key?L.state!==R?(v.default.debug("[".concat(L.clientId,"] Client is not connected. Trying to rejoin")),L.key=e,L.rejoin(),t&&t()):(v.default.debug("[".concat(L.clientId,"] renewToken from ").concat(L.key," to ").concat(e)),L.key=e,L.makeRequest({_type:"renew_token",_message:{token:e}},t,n)):(v.default.error("[".concat(L.clientId,"] Client is previously joined without token")),n&&n(b.default.INVALID_PARAMETER)):(v.default.error("[".concat(L.clientId,"] Invalid Token ").concat(e)),n&&n(b.default.INVALID_PARAMETER))},L.setStreamFallbackOption=function(e,t){if(v.default.debug("[".concat(L.clientId,"] Set stream fallback option ").concat(e.getId()," to ").concat(t)),"object"===d()(e)&&null!==e)if(L.state===R){if(!e.local){switch(t){case L.streamFallbackTypes.STREAM_FALLBACK_OPTION_DISABLED:case L.streamFallbackTypes.STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW:case L.streamFallbackTypes.STREAM_FALLBACK_OPTION_AUDIO_ONLY:break;default:return}var n={stream_id:e.getId(),fallback_type:t};L.makeRequest({_type:"set_fallback_option",_message:n},(function(){v.default.debug("SetStreamFallbackOption success ".concat(n.stream_id," ").concat(t))}),(function(e,r){v.default.error("Failed to SetStreamFallbackOption ".concat(n.stream_id," ").concat(t," ").concat(e),r)}))}}else v.default.error("[".concat(L.clientId,"] User is not in the session"));else v.default.error("[".concat(L.clientId,"] Invalid remote stream"))},L.enableAudioVolumeIndicator=function(e,t){L.audioVolumeIndication.enabled=!0,L.audioVolumeIndication.interval=e,L.audioVolumeIndication.smooth=t,L.resetAudioVolumeIndication()},L.resetAudioVolumeIndication=function(){if(clearInterval(L.timers.audioVolumeIndication),clearInterval(L.timers.audioVolumeSampling),L.audioVolumeIndication.enabled&&L.audioVolumeIndication.interval){var e=Math.floor(1e3*L.audioVolumeIndication.smooth/100);clearInterval(L.timers.audioVolumeSampling),L.timers.audioVolumeSampling=setInterval((function(){L.audioVolumeSampling||(L.audioVolumeSampling={});var t={};for(var n in L.remoteStreams){var r=L.remoteStreams[n];if(r.stream&&r.hasAudio()){var i=r.getAudioLevel();i>0&&i<1&&(i*=100);var o=L.audioVolumeSampling[n]||[];for(o.push(i);o.length>e;)o.shift();t[n]=o}}L.audioVolumeSampling=t}),100),clearInterval(L.timers.audioVolumeIndication),L.timers.audioVolumeIndication=setInterval((function(){if(L.socket&&L.socket.signal&&L.socket.signal.connection&&L.socket.signal.connection.readyState===WebSocket.OPEN){var e=[];for(var t in L.remoteStreams)if(L.audioVolumeSampling&&L.audioVolumeSampling[t]){var n=L.audioVolumeSampling[t],r=0;n.forEach((function(e){r+=e}));var i={uid:t,level:Math.floor(r/n.length)};i.level&&e.push(i)}var o=e.sort((function(e,t){return e.level-t.level}));v.default.debug("[".concat(L.clientId,"] volume-indicator "),JSON.stringify(o)),L.audioVolumeIndication.sortedAudioVolumes=o;var a=Object(m.a)({type:"volume-indicator",attr:o});L.dispatchEvent(a)}}),L.audioVolumeIndication.interval)}},L.closeGateway=function(){v.default.debug("[".concat(L.clientId,"] close gateway")),L.state=f,L.socket.close(),B()},L.startChannelMediaRelay=function(){var e=s()(o.a.mark((function e(t){var n,r,i,a;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!L.channelMediaRelayController){e.next=2;break}throw new P.ChannelMediaError("RELAY_ALREADY_START","",P.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ALREADY_START);case 2:return n=function(e){L.dispatchEvent({type:"channel-media-relay-event",code:e})},r=function(e,t,n){e===P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_FAILURE&&t===P.CHANNEL_MEDIA_RELAY_ERROR.SERVER_CONNECTION_LOST&&(L.channelMediaRelayController.dispose(),L.channelMediaRelayController=null),L.dispatchEvent({type:"channel-media-relay-state",state:e,code:t,data:n})},L.channelMediaRelayController=new x.a(L.joinInfo,L.clientId),L.channelMediaRelayController.on("event",n),L.channelMediaRelayController.on("state",r),e.prev=7,e.next=10,L.channelMediaRelayController.startChannelMediaRelay(t);case 10:e.next=22;break;case 12:throw e.prev=12,e.t0=e.catch(7),v.default.debug("[".concat(L.clientId,"] startChannelMediaRelay exception: ").concat(JSON.stringify(e.t0))),i=P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_FAILURE,a="",a=e.t0 instanceof P.ChannelMediaError?"SetSourceChannelStatus"===e.t0.data||e.t0.data&&e.t0.data.serverResponse&&"SetSourceChannel"===e.t0.data.serverResponse.command?"FAILED_JOIN_SRC":"SetDestChannelStatus"===e.t0.data||e.t0.data&&e.t0.data.serverResponse&&"SetDestChannel"===e.t0.data.serverResponse.command?"FAILED_JOIN_DEST":e.t0.data&&e.t0.data.serverResponse&&"StartPacketTransfer"===e.t0.data.serverResponse.command?"FAILED_PACKET_SENT_TO_DEST":e.t0.message===P.CHANNEL_MEDIA_ERROR.REQUEST_TIMEOUT||e.t0.message===P.CHANNEL_MEDIA_ERROR.WAIT_STATUS_TIMEOUT?"SERVER_NO_RESPONSE":e.t0.message===P.CHANNEL_MEDIA_ERROR.REQUEST_FAILED||e.t0.message===P.CHANNEL_MEDIA_ERROR.WAIT_STATUS_ERROR?"SERVER_ERROR_RESPONSE":e.t0.message===P.CHANNEL_MEDIA_ERROR.AP_REQUEST_TIMEOUT?"NO_RESOURCE_AVAILABLE":e.t0.message===P.CHANNEL_MEDIA_ERROR.WS_ABORT||e.t0.message===P.CHANNEL_MEDIA_ERROR.AP_REQUEST_ABORT?"OPERATION_ABORT":"INTERNAL_ERROR":"INTERNAL_ERROR",L.dispatchEvent({type:"channel-media-relay-state",state:i,code:P.CHANNEL_MEDIA_RELAY_ERROR[a]}),L.channelMediaRelayController&&(L.channelMediaRelayController.dispose(),L.channelMediaConfig=null,L.channelMediaRelayController=null),L.dispatchEvent({type:"channel-media-relay-state",state:P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_IDLE}),new P.ChannelMediaError(a,null,P.CHANNEL_MEDIA_RELAY_ERROR[a]);case 22:L.dispatchEvent({type:"channel-media-relay-state",state:P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_RUNNING,code:P.CHANNEL_MEDIA_RELAY_ERROR.RELAY_OK}),L.channelMediaConfig=t;case 24:case"end":return e.stop()}}),e,null,[[7,12]])})));return function(t){return e.apply(this,arguments)}}(),L.updateChannelMediaRelay=function(){var t=s()(o.a.mark((function t(n){var r,i;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(L.channelMediaRelayController){t.next=2;break}throw new P.ChannelMediaError("RELAY_NOT_START",null,P.CHANNEL_MEDIA_RELAY_ERROR.RELAY_NOT_START);case 2:return t.prev=2,t.next=5,L.channelMediaRelayController.updateChannelMediaRelay(n);case 5:t.next=18;break;case 7:throw t.prev=7,t.t0=t.catch(2),v.default.debug("[".concat(L.clientId,"] updateChannelMediaRelay exception: ").concat(JSON.stringify(e))),r=P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_FAILURE,i="",i=e instanceof P.ChannelMediaError?e.message===P.CHANNEL_MEDIA_ERROR.REQUEST_TIMEOUT||e.message===P.CHANNEL_MEDIA_ERROR.WAIT_STATUS_TIMEOUT?"SERVER_NO_RESPONSE":e.message===P.CHANNEL_MEDIA_ERROR.REQUEST_FAILED||e.message===P.CHANNEL_MEDIA_ERROR.WAIT_STATUS_ERROR?"SERVER_ERROR_RESPONSE":e.message===P.CHANNEL_MEDIA_ERROR.WS_ABORT||e.message===P.CHANNEL_MEDIA_ERROR.AP_REQUEST_ABORT?"OPERATION_ABORT":"INTERNAL_ERROR":"INTERNAL_ERROR",L.dispatchEvent({type:"channel-media-relay-event",code:P.CHANNEL_MEDIA_RELAY_EVENT.PACKET_UPDATE_DEST_CHANNEL_REFUSED}),L.dispatchEvent({type:"channel-media-relay-state",state:r,code:P.CHANNEL_MEDIA_RELAY_ERROR[i]}),L.channelMediaRelayController&&(L.channelMediaRelayController.dispose(),L.channelMediaConfig=null,L.channelMediaRelayController=null),L.dispatchEvent({type:"channel-media-relay-state",state:P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_IDLE}),new P.ChannelMediaError(i,null,P.CHANNEL_MEDIA_RELAY_ERROR[i]);case 18:L.channelMediaConfig=n;case 19:case"end":return t.stop()}}),t,null,[[2,7]])})));return function(e){return t.apply(this,arguments)}}(),L.stopChannelMediaRelay=s()(o.a.mark((function t(){var n,r;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(L.channelMediaRelayController){t.next=2;break}throw new P.ChannelMediaError("RELAY_NOT_START",null,P.CHANNEL_MEDIA_RELAY_ERROR.RELAY_NOT_START);case 2:return t.prev=2,t.next=5,L.channelMediaRelayController.stopChannelMediaRelay();case 5:t.next=17;break;case 7:throw t.prev=7,t.t0=t.catch(2),v.default.debug("[".concat(L.clientId,"] stopChannelMediaRelay exception: ").concat(JSON.stringify(e))),n=P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_FAILURE,r="",r=e instanceof P.ChannelMediaError?e.message===P.CHANNEL_MEDIA_ERROR.REQUEST_TIMEOUT||e.message===P.CHANNEL_MEDIA_ERROR.WAIT_STATUS_TIMEOUT?"SERVER_NO_RESPONSE":e.message===P.CHANNEL_MEDIA_ERROR.REQUEST_FAILED||e.message===P.CHANNEL_MEDIA_ERROR.WAIT_STATUS_ERROR?"SERVER_ERROR_RESPONSE":"INTERNAL_ERROR":"INTERNAL_ERROR",L.dispatchEvent({type:"channel-media-relay-state",state:n,code:P.CHANNEL_MEDIA_RELAY_ERROR[r]}),L.channelMediaRelayController&&(L.channelMediaRelayController.dispose(),L.channelMediaConfig=null,L.channelMediaRelayController=null),L.dispatchEvent({type:"channel-media-relay-state",state:P.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_IDLE}),new P.ChannelMediaError(r,null,P.CHANNEL_MEDIA_RELAY_ERROR[r]);case 17:L.channelMediaConfig=null,L.channelMediaRelayController=null;case 19:case"end":return t.stop()}}),t,null,[[2,7]])}))),L.sendMetadata=function(e,t){L.makeRequest(function(e){return{_type:"send_metadata",_message:{session_id:L.joinInfo.sid,metadata:window.btoa(unescape(encodeURIComponent(e)))}}}(e),(function(){v.default.debug("[".concat(L.clientId,'] send metadata "').concat(e,'" success')),t&&t(null)}),(function(n){v.default.error("[".concat(L.clientId,'] send metadata "').concat(e,'" failed'),n),t&&t(n)}))},L._reportWebsocketCloseEvent=function(e,t){try{var n=E.report.getSessionStartTime(L.joinInfo.sid),r=Date.now();E.report.webSocketQuit({lts:r,sid:L.joinInfo.sid,cname:L.joinInfo.cname,cid:L.joinInfo.cid,uid:L.joinInfo.uid,elapse:r-n,succ:e,errorCode:t,ip:null})}catch(e){v.default.debug("[".concat(L.clientId,"]: _reportWebsocketCloseEvent exception, ").concat(e))}};var j=function(){v.default.debug("[".concat(L.clientId,"] Reconnect gateway")),L.state=f,L.socket.close(),B(),L.reconnectMode="recover",L.state=_,F()};L.recover=j;var B=function(){for(var e in L.dispatchEvent({type:"before-clear-connection"}),L.timers)L.timers.hasOwnProperty(e)&&clearInterval(L.timers[e]);for(var e in L.remoteStreams)if(L.remoteStreams.hasOwnProperty(e)){var t=L.remoteStreams[e],n=Object(m.a)({type:"stream-removed",uid:t.getId(),stream:t});L.dispatchEvent(n)}L.p2ps.clear(),q(),H(),clearInterval(L.pingTimer)};L.rejoin=function(){L.socket&&(clearInterval(L.pingTimer),L.socket.close(),L.socket=void 0),L.state=_,F()};var F=function(e,t){L.dispatchEvent(Object(m.a)({type:"rejoin-start"})),e=e||function(e){v.default.info("[".concat(L.clientId,"] User ").concat(e," is re-joined to ").concat(L.joinInfo.cname)),L.dispatchEvent(Object(m.a)({type:"rejoin"})),L.channelMediaConfig&&L.startChannelMediaRelay(L.channelMediaConfig).then((function(){v.default.debug("[".concat(L.clientId,"] restartChannelMediaRelay success"))})).catch((function(e){v.default.debug("[".concat(L.clientId,"] restartChannelMediaRelay failed: ").concat(JSON.stringify(e)))})),L.liveStreams&&L.liveStreams.size&&L.liveStreams.forEach((function(e,t){e&&L.setLiveTranscoding(L.transcoding),L.startLiveStreaming(t,e)})),L.injectLiveStreams&&L.injectLiveStreams.size&&L.injectLiveStreams.forEach((function(e,t){L.addInjectStreamUrl(t,e)}))},t=t||function(e){v.default.error("[".concat(L.clientId,"] Re-join to channel failed "),e),L.dispatchEvent(Object(m.e)({type:"error",reason:e}))},L.key?(++L.rejoinAttempt,L.join(L.joinInfo,L.key,e,t)):v.default.error("[".concat(L.clientId,"] Connection recover failed [Invalid channel key]"))},W=function(e,t,n){if(L.onConnect=t,L.socket){if(L.dispatchEvent({type:"reconnect"}),"retry"===L.reconnectMode)v.default.debug("[".concat(L.clientId,"] Retry current gateway")),L.socket.reconnect();else if("tryNext"===L.reconnectMode)v.default.debug("[".concat(L.clientId,"] Try next gateway")),L.socket.connectNext();else if("recover"===L.reconnectMode){v.default.debug("[".concat(L.clientId,"] Recover gateway")),v.default.debug("[".concat(L.clientId,"] Try to reconnect choose server and get gateway list again ")),L.reconnectingCS=!0;var i=L.joinInfo&&L.joinInfo.sid;0,Object(A.getGatewayList)(L.joinInfo,(function(e){v.default.debug("[".concat(L.clientId,"] session:  ").concat(i," get gateway list success")),L.joinInfo.apResponse=e.res,L.reconnectingCS?L.socket.replaceHost(e.gateway_addr):v.default.debug("[".concat(L.clientId,"] session:  ").concat(i," already leave"))}))}}else o=e.gatewayAddr,L.socket=T(o,{sid:L.joinInfo.sid,clientId:L.clientId,proxyServerType:L.joinInfo.proxyServerType}),L.socket.on("start-connection",(function(e){L.ticket=e&&e.msg&&e.msg.ticket})),L.socket.on("on_uplink_stats",(function(e){var t={};for(var n in e)t[M(n)]=e[n];if(L.OutgoingAvailableBandwidth=t.uplink_available_bandwidth,L.localStreams[L.uid]){var r=L.localStreams[L.uid].uplinkStats;r&&r.period_fir===t.period_fir||v.default.debug("[".concat(L.clientId,"]: Period fir change to: ").concat(t.period_fir)),L.localStreams[L.uid].uplinkStats=t}})),L.socket.on("connect",(function(){L.dispatchEvent({type:"connected"}),L.attemps=1,L.onConnect()})),L.socket.on("recover",(function(){L.state=_,v.default.debug("[".concat(L.clientId,"] Try to reconnect choose server and get gateway list again ")),L.reconnectingCS=!0;var e=L.joinInfo&&L.joinInfo.sid;Object(A.getGatewayList)(L.joinInfo,(function(t){v.default.debug("[".concat(L.clientId,"] session:  ").concat(e," get gateway list success")),L.reconnectingCS?L.socket.replaceHost(t.gateway_addr):v.default.debug("[".concat(L.clientId,"] session:  ").concat(e," already leave"))}))})),L.socket.on("disconnect",(function(e){if(v.default.debug("[".concat(L.clientId,"] Receive disconnect message")),L.state!==f){L.state=f,L._reportWebsocketCloseEvent(-1,b.WEBSOCKET_CLOSE_REASON.WS_DISCONNECT);var t=Object(m.e)({type:"error",reason:b.default.SOCKET_DISCONNECTED});if(L.dispatchEvent(t),0===L.p2ps.size?L.reconnectMode="tryNext":L.reconnectMode="retry",B(),L.channelMediaRelayController&&L.channelMediaRelayController.dispose(),L.channelMediaRelayController=null,1!=r){var n,i=(n=L.attemps,1e3*Math.min(30,Math.pow(2,n)-1));if(v.default.error("[".concat(L.clientId,"] Disconnect from server [").concat(JSON.stringify(e),"], attempt to recover [#").concat(L.attemps,"] after ").concat(i/1e3," seconds")),L.hasInvokeLeave)return v.default.debug("[".concat(L.clientId,"] No reconnection because Client.leave has been invoked")),void(L.hasInvokeLeave=!1);setTimeout((function(){L.attemps++,L.state=_,L.inChannelInfo&&Date.now()-L.inChannelInfo.joinAt>Object(y.getParameter)("TICKET_RENEW_TIMEOUT")?(v.default.debug("Recovering to renew ticket"),j()):F()}),i)}else{var o=V.unregister(L);o&&v.default.debug("[".concat(L.clientId,"] "),o)}}})),L.socket.on("on_add_audio_stream",(function(e){if(v.default.info("[".concat(L.clientId,"] Newly added audio stream with uid ").concat(e.uid)),L.joinInfo.stringUid&&"string"!=typeof e.uid&&v.default.error("StringUID is Mixed with UintUID"),L.remoteStreamsInChannel.has(e.uid)||L.remoteStreamsInChannel.add(e.uid),void 0===L.remoteStreams[e.uid]){var t=Object(g.a)({streamID:e.uid,local:!1,audio:e.audio,video:e.video,uintUID:e.uint_id||e.uid});t.peerMuteVideo=!0,L.remoteStreams[e.uid]=t;var n=Object(m.e)({type:"stream-added",stream:t});L.dispatchEvent(n);var r=L.remoteMuteState[e.uid];if(r&&r.audio){n=Object(m.a)({type:"mute-audio",uid:e.uid});L.dispatchEvent(n)}if(r&&r.video){n=Object(m.a)({type:"mute-video",uid:e.uid});L.dispatchEvent(n)}}E.report.onAddAudioStream(L.joinInfo.sid,{peerid:e.uint_id||e.uid,uid:L.uid})})),L.socket.on("on_update_stream",(function(e){v.default.info("[".concat(L.clientId,"] on_update_stream:"),e);var t=L.remoteStreams[e.uid];if(L.joinInfo.stringUid&&"string"!=typeof e.uid&&v.default.error("StringUID is Mixed with UintUID"),t){t.audio=e.audio,t.video=e.video,t.screen=e.screen,t.pc&&L._adjustPCMuteStatus(t);var n=Object(m.e)({type:"stream-updated",stream:t});L.dispatchEvent(n)}else v.default.debug("[".concat(L.clientId,"] Ignoring onUpdateStream event before onAddStream for uid ").concat(e.uid));E.report.onUpdateStream(L.joinInfo.sid,{peerid:e.uint_id||e.uid,audio:e.audio,video:e.video,uid:L.uid})})),L.socket.on("on_add_video_stream",(function(e){if(v.default.info("[".concat(L.clientId,"] Newly added remote stream with uid ").concat(e.uid,".")),L.joinInfo.stringUid&&"string"!=typeof e.uid&&v.default.error("StringUID is Mixed with UintUID"),L.remoteStreamsInChannel.has(e.uid)||L.remoteStreamsInChannel.add(e.uid),void 0===L.remoteStreams[e.uid]){var t=Object(g.a)({streamID:e.uid,local:!1,audio:e.audio,video:e.video,uintUID:e.uint_id||e.uid});L.remoteStreams[e.uid]=t;var n=Object(m.e)({type:"stream-added",stream:t});L.dispatchEvent(n);var r=L.remoteMuteState[e.uid];if(r&&r.audio){n=Object(m.a)({type:"mute-audio",uid:e.uid});L.dispatchEvent(n)}if(r&&r.video){n=Object(m.a)({type:"mute-video",uid:e.uid});L.dispatchEvent(n)}}else{var i=L.remoteStreams[e.uid];if(i.video=!0,i.peerMuteVideo=!1,i.pc&&L._adjustPCMuteStatus(i),v.default.info("[".concat(L.clientId,"] Stream changed: enable video ").concat(e.uid)),void 0!==i.stream&&i.isPlaying()){var o=i.player.elementID;i.stop(),i.play(o,i.playOptions)}}E.report.onAddVideoStream(L.joinInfo.sid,{peerid:e.uint_id||e.uid,uid:L.uid})})),L.socket.on("on_remove_stream",(function(e){v.default.info("[".concat(L.clientId,"] on_remove_stream:"),e),L.remoteStreamsInChannel.has(e.uid)&&L.remoteStreamsInChannel.delete(e.uid);var t=L.remoteStreams[e.uid];if(t){delete L.remoteStreams[e.uid],delete L.remoteMuteState[e.uid];var n=Object(m.e)({type:"stream-removed",stream:t});L.dispatchEvent(n),t.close(),void 0!==t.pc&&(t.pc.close(),t.pc=void 0,L.p2ps.delete(t.p2pId)),E.report.onRemoveStream(L.joinInfo.sid,{peerid:e.uint_id||e.uid,uid:L.uid})}else v.default.error("ERROR stream ",e.uid," not found onRemoveStream ",e)})),L.socket.on("on_publish_stream",(function(e){v.default.info("[".concat(L.clientId,"] on_publish_stream:"),e);var t=L.localStreams[e.uid];L.dispatchEvent({type:"streamPublished",stream:t,proxy:e.proxy}),E.report.reportApiInvoke(L.joinInfo.sid,{name:"on_publish_stream",options:{proxy:e.proxy}})()})),L.socket.on("mute_audio",(function(e){v.default.info("[".concat(L.clientId,"] rcv peer mute audio: ").concat(e.uid)),L.remoteMuteState[e.uid]=L.remoteMuteState[e.uid]||{audio:!1,video:!1},L.remoteMuteState[e.uid].audio=!0;var t=Object(m.a)({type:"mute-audio",uid:e.uid}),n=L.remoteStreams[e.uid];n?(n.peerMuteAudio=!0,n.pc&&L._adjustPCMuteStatus(n),L.dispatchEvent(t)):v.default.debug("Ignoring event ".concat(e.type),e)})),L.socket.on("unmute_audio",(function(e){v.default.info("[".concat(L.clientId,"] rcv peer unmute audio: ").concat(e.uid)),L.remoteMuteState[e.uid]=L.remoteMuteState[e.uid]||{audio:!1,video:!1},L.remoteMuteState[e.uid].audio=!1;var t=Object(m.a)({type:"unmute-audio",uid:e.uid}),n=L.remoteStreams[e.uid];n?(n.peerMuteAudio=!1,n.pc&&L._adjustPCMuteStatus(n),L.dispatchEvent(t)):v.default.debug("Ignoring event ".concat(e.type),e)})),L.socket.on("mute_video",(function(e){v.default.info("[".concat(L.clientId,"] rcv peer mute video: ").concat(e.uid)),L.remoteMuteState[e.uid]=L.remoteMuteState[e.uid]||{audio:!1,video:!1},L.remoteMuteState[e.uid].video=!0;var t=Object(m.a)({type:"mute-video",uid:e.uid}),n=L.remoteStreams[e.uid];n?(n.peerMuteVideo=!0,n.player&&(n.player.peerVideoReady=!1),n.pc&&L._adjustPCMuteStatus(n),L.dispatchEvent(t)):v.default.debug("Ignoring event ".concat(e.type),e)})),L.socket.on("unmute_video",(function(e){v.default.info("[".concat(L.clientId,"] rcv peer unmute video: ").concat(e.uid)),L.remoteMuteState[e.uid]=L.remoteMuteState[e.uid]||{audio:!1,video:!1},L.remoteMuteState[e.uid].video=!1;var t=Object(m.a)({type:"unmute-video",uid:e.uid}),n=L.remoteStreams[e.uid];n?(n.peerMuteVideo=!1,n.pc&&L._adjustPCMuteStatus(n),L.dispatchEvent(t)):v.default.debug("Ignoring event ".concat(e.type),e)})),L.socket.on("on_crypt_error",(function(e){v.default.warning("[".concat(L.clientId,"] stream crypt error"));var t=Object(m.a)({type:"crypt-error",cryptType:e.crypt_type});L.dispatchEvent(t)})),L.socket.on("on_user_banned",(function(e){v.default.info("[".concat(L.clientId,"] user banned uid: ").concat(e.uid," error: ").concat(e.error_code));var t=Object(m.a)({type:"client-banned",uid:e.uid,attr:e.error_code});L.dispatchEvent(t),r=!0})),L.socket.on("on_stream_fallback_update",(function(e){v.default.info("[".concat(L.clientId,"] stream fallback peerId: ").concat(e.stream_id," type: ").concat(e.stream_type));var t=Object(m.a)({type:"stream-fallback",uid:e.stream_id,stream:e.stream_id,attr:e.stream_type});L.dispatchEvent(t)})),L.socket.on("stream_recover",(function(e){v.default.info("[".concat(L.clientId,"] stream recover uid: ").concat(e.id," peerId: ").concat(e.peerid," type: ").concat(e.type));var t=Object(m.a)({type:"stream-recover",uid:e.id,stream:e.peerid,attr:e.type});L.dispatchEvent(t)})),L.socket.on("on_p2p_lost",(function(e){v.default.debug("[".concat(L.clientId,"] p2plost: "),e,"p2ps:",L.p2ps);var t,n="DTLS failed";(t=L.localStreams[e.uid]||L.remoteStreams[e.uid])?(t.pc&&t.pc.offerCandidates&&0===t.pc.offerCandidates.length&&(n="NO_CANDIDATES_IN_OFFER"),"publish"===e.event&&E.report.publish(L.joinInfo.sid,{lts:t.publishLTS,succ:!1,audio:t.hasAudio(),video:t.hasVideo(),screenshare:t.hasScreen(),audioName:t.hasAudio()&&t.audioName,videoName:t.hasVideo()&&t.videoName,screenName:t.hasScreen()&&t.screenName,ec:n,publishRequestid:L.publishRequestId||0,p2pid:L.p2ps.get(t.getId())}),"subscribe"===e.event&&E.report.subscribe(L.joinInfo.sid,{lts:t.subscribeLTS,succ:!1,video:t.subscribeOptions&&t.subscribeOptions.video,audio:t.subscribeOptions&&t.subscribeOptions.audio,peerid:e.uid+"",ec:n,subscribeRequestid:L.subscribeRequestId.get(t.getId())||0,p2pid:L.p2ps.get(t.getId())})):v.default.warning("P2PLost Stream Not found",e),v.default.debug("[".concat(L.clientId,"] p2plost:"),e.p2pid),(t=L.p2ps.get(e.p2pid))&&(L.p2ps.delete(e.p2pid),t.local?L.dispatchEvent(Object(m.a)({type:"pubP2PLost",stream:t,attr:n})):L.remoteStreams[t.getId()]&&L.dispatchEvent(Object(m.a)({type:"subP2PLost",stream:t,attr:n})))})),L.socket.on("on_token_privilege_will_expire",(function(e){v.default.debug("[".concat(L.clientId,"] Received Message onTokenPrivilegeWillExpire")),L.dispatchEvent(Object(m.a)({type:"onTokenPrivilegeWillExpire"}))})),L.socket.on("on_token_privilege_did_expire",(function(){v.default.warning("[".concat(L.clientId,"] Received Message onTokenPrivilegeDidExpire, please get new token and join again")),L.closeGateway(),L.dispatchEvent(Object(m.a)({type:"onTokenPrivilegeDidExpire"}))})),L.socket.on("enable_local_video",(function(e){v.default.info("[".concat(L.clientId,"] enable_local_video:"),e),L.dispatchEvent(Object(m.a)({type:"enable-local-video",uid:e.uid}))})),L.socket.on("disable_local_video",(function(e){v.default.info("[".concat(L.clientId,"] disable_local_video:"),e),L.dispatchEvent(Object(m.a)({type:"disable-local-video",uid:e.uid}))})),L._doWithAction=function(e,t,n){"tryNext"===e?function(e,t){v.default.debug("[".concat(L.clientId,"] Connect next gateway")),L.state=f,L.socket.close(),B(),L.reconnectMode="tryNext",L.state=_,F(e,t)}(t,n):"retry"===e?function(e,t){v.default.debug("[".concat(L.clientId,"] Reconnect gateway")),L.state=f,L.socket.close(),B(),L.reconnectMode="retry",L.state=_,F(e,t)}(t,n):"quit"===e?(v.default.debug("[".concat(L.clientId,"] quit gateway")),L.state=f,L.socket.close(),B()):"recover"===e&&j()},L.socket.on("on_notification",(function(e){if(v.default.debug("[".concat(L.clientId,"] Receive notification: "),e),"ERR_JOIN_BY_MULTI_IP"===b.GatewayErrorCode[e.code])return L.dispatchEvent({type:"onMultiIP",option:e.option});e.detail?L._doWithAction(C[b.GatewayErrorCode[e.code]]):e.action&&L._doWithAction(e.action)})),L.socket.on("on_user_offline",(function(e){v.default.info("[".concat(L.clientId,"] on_user_offline:"),e);var t=Object(m.a)({type:"peer-leave",uid:e.uid});if(L.remoteStreamsInChannel.has(e.uid)&&L.remoteStreamsInChannel.delete(e.uid),L.remoteStreams.hasOwnProperty(e.uid)&&(t.stream=L.remoteStreams[e.uid]),t.reason=e.reason,L.dispatchEvent(t),v.default.info("[".concat(L.clientId,"] remove remoteMuteState "),e.uid),delete L.remoteMuteState[e.uid],L.remoteStreams.hasOwnProperty(e.uid)){v.default.info("[".concat(L.clientId,"] closing stream on peer leave"),e.uid);var n=L.remoteStreams[e.uid];n.close(),delete L.remoteStreams[e.uid],E.report.onRemoveStream(L.joinInfo.sid,{peerid:e.uint_id||e.uid,uid:L.uid}),void 0!==n.pc&&(n.pc.close(),n.pc=void 0,L.p2ps.delete(n.p2pId))}L.timers.hasOwnProperty(e.uid)&&(clearInterval(L.timers[e.uid]),clearInterval(L.timers[e.uid]+"_RelatedStats"),delete L.timers[e.uid]),null!=L.audioLevel[e.uid]&&delete L.audioLevel[e.uid],null!=L.timer_counter[e.uid]&&delete L.timer_counter[e.uid]})),L.socket.on("onUplinkStats",(function(e){})),L.socket.on("liveStreamingStarted",(function(e){var t=Object(m.c)({type:"liveStreamingStarted",url:e.url});L.dispatchEvent(t)})),L.socket.on("liveStreamingFailed",(function(e){var t=Object(m.c)({type:"liveStreamingFailed",url:e.url});L.dispatchEvent(t)})),L.socket.on("liveStreamingStopped",(function(e){var t=Object(m.c)({type:"liveStreamingStopped",url:e.url});L.dispatchEvent(t)})),L.socket.on("liveTranscodingUpdated",(function(e){var t=Object(m.c)({type:"liveTranscodingUpdated",reason:e.reason});L.dispatchEvent(t)})),L.socket.on("streamInjectedStatus",(function(e){var t=Object(m.c)({type:"streamInjectedStatus",url:e.url,uid:e.uid,status:e.status});L.dispatchEvent(t)})),L.socket.on("on_user_online",(function(e){L.joinInfo.stringUid&&"string"!=typeof e.uid&&v.default.error("StringUID is Mixed with UintUID"),L.dispatchEvent({type:"peer-online",uid:e.uid})})),L.socket.on("receive_metadata",(function(e){L.joinInfo.stringUid&&"string"!=typeof e.uid&&v.default.error("StringUID is Mixed with UintUID");var t=decodeURIComponent(escape(window.atob(e.metadata)));v.default.debug("[".concat(L.clientId,"] received ").concat(e.uid," metadata: ").concat(t)),L.dispatchEvent({type:"receive-metadata",uid:e.uid,metadata:t})}));var o},G=function(e,t){if(void 0!==L.socket)try{L.socket.emitSimpleMessage(e,(function(e,n){t&&t(e,n)}))}catch(e){v.default.error("[".concat(L.clientId,"] Error in sendSimpleSdp [").concat(e,"]"))}else v.default.error("[".concat(L.clientId,"] Error in sendSimpleSdp [socket not ready]"))},H=function(){for(var e in L.localStreams)if(void 0!==L.localStreams[e]){var t=L.localStreams[e];delete L.localStreams[e],void 0!==t.pc&&(t.pc.close(),t.pc=void 0)}},q=function(){for(var e in L.remoteStreamsInChannel.clear(),L.remoteStreams)if(L.remoteStreams.hasOwnProperty(e)){var t=L.remoteStreams[e];t.isPlaying()&&t.stop(),t.close(),delete L.remoteStreams[e],void 0!==t.pc&&(t.pc.close(),t.pc=void 0)}};return L},V={_gatewayClients:{},register:function(e,t){if(!t.uid){var n="NO_UID_PROVIDED";return v.default.error("[".concat(e.clientId,"] "),n,t),n}if(t.cname){if(this._gatewayClients[t.cname]&&this._gatewayClients[t.cname][t.uid]&&this._gatewayClients[t.cname][t.uid]!==e){n="UID_CONFLICT";return v.default.error("[".concat(e.clientId,"] "),n,t),n}return v.default.debug("[".concat(e.clientId,"] register client Channel"),t.cname,"Uid",t.uid),this._gatewayClients[t.cname]||(this._gatewayClients[t.cname]={}),this._gatewayClients[t.cname][t.uid]=e,null}var n="NO_CHANNEL_PROVIDED";return v.default.error("[".concat(e.clientId,"] "),n,t),n},unregister:function(e){var t=e&&e.uid,n=e.joinInfo&&e.joinInfo.cname;if(!t||!n){var r="INVALID_GATEWAYCLIENT";return v.default.error("[".concat(e.clientId,"] "),r),r}if(this._gatewayClients[n]&&this._gatewayClients[n][t]){if(this._gatewayClients[n][t]!==e){r="GATEWAYCLIENT_UID_CONFLICT";return v.default.error("[".concat(e.clientId,"] "),r),r}return v.default.debug("[".concat(e.clientId,"] unregister client "),e.uid),delete this._gatewayClients[n][t],null}var r="GATEWEAY_CLIENT_UNREGISTERED";v.default.error("[".concat(e.clientId,"] "),r)}};j.DISCONNECTED=0,j.CONNECTING=1,j.CONNECTED=2,j.DISCONNECTING=3,j.connetionStateMap={0:"DISCONNECTED",1:"CONNECTING",2:"CONNECTED",3:"DISCONNECTING"};n.a=j},function(e,t,n){"use strict";n.r(t),n.d(t,"post",(function(){return l})),n.d(t,"postFormData",(function(){return u})),n.d(t,"shouldUseHttps",(function(){return f})),n.d(t,"getHTTPSendBytes",(function(){return s})),n.d(t,"getHTTPRecvBytes",(function(){return c})),n.d(t,"resetHTTPByetsCount",(function(){return d}));var r=n(2),i=n(10),o=0,a=0,s=function(){return o},c=function(){return a},d=function(){o=0,a=0},u=function(e,t,n,s,c){var d=new XMLHttpRequest;if(d.timeout=t.timeout||Object(r.getParameter)("HTTP_CONNECT_TIMEOUT"),d.open("POST",e,!0),c)for(var u in c)"withCredentials"==u?d.withCredentials=!0:d.setRequestHeader(u,c[u]);d.onload=function(t){a+=Object(i.lengthInUtf8Bytes)(d.responseText),200!==d.status?s&&s({httpErrorCode:"httpcode-xhr.status"},e):n&&n(d.responseText)},d.onerror=function(t){s&&s(t,e)},d.ontimeout=function(t){s&&s(t,e)};var l=JSON.stringify(t);o+=Object(i.lengthInUtf8Bytes)(l);var f=new FormData;f.append("request",l),d.send(f)},l=function(e,t,n,s,c){var d=new XMLHttpRequest;if(d.timeout=t.timeout||Object(r.getParameter)("HTTP_CONNECT_TIMEOUT"),d.open("POST",e,!0),d.setRequestHeader("Content-type","application/json; charset=utf-8"),c)for(var u in c)"withCredentials"==u?d.withCredentials=!0:d.setRequestHeader(u,c[u]);d.onload=function(t){a+=Object(i.lengthInUtf8Bytes)(d.responseText),200!==d.status?s&&s({httpErrorCode:"httpcode-xhr.status"},e):n&&n(d.responseText)},d.onerror=function(t){s&&s(t,e)},d.ontimeout=function(t){s&&s(t,e)};var l=JSON.stringify(t);o+=Object(i.lengthInUtf8Bytes)(l),d.send(l)},f=function(){return"https:"==document.location.protocol}},function(e,t,n){"use strict";n.r(t),n.d(t,"RTCPeerConnection",(function(){return T})),n.d(t,"getUserMedia",(function(){return a})),n.d(t,"attachMediaStream",(function(){return s})),n.d(t,"reattachMediaStream",(function(){return c})),n.d(t,"setSrcObject",(function(){return p})),n.d(t,"getSrcObject",(function(){return g})),n.d(t,"webrtcDetectedBrowser",(function(){return d})),n.d(t,"webrtcDetectedVersion",(function(){return u})),n.d(t,"webrtcMinimumVersion",(function(){return l})),n.d(t,"webrtcTesting",(function(){return I})),n.d(t,"webrtcUtils",(function(){return v}));var r=n(11),i=n.n(r),o=n(4),a=null,s=null,c=null,d=null,u=null,l=null,f=null,p=null,g=null,m=null,h={addStream:null},v={log:function(){},extractVersion:function(e,t,n){var r=e.match(t);return r&&r.length>=n&&parseInt(r[n])}};if("object"==("undefined"==typeof window?"undefined":i()(window))?(window.HTMLMediaElement&&!("srcObject"in window.HTMLMediaElement.prototype)?(p=function(e,t){"mozSrcObject"in e?e.mozSrcObject=t:(e._srcObject=t,e.src=t?URL.createObjectURL(t):null)},g=function(e){return"mozSrcObject"in e?e.mozSrcObject:e._srcObject}):(p=function(e,t){e.srcObject=t},g=function(e){return e.srcObject}),a=window.navigator&&window.navigator.getUserMedia):(p=function(e,t){e.srcObject=t},g=function(e){return e.srcObject}),s=function(e,t){p(e,t)},c=function(e,t){p(e,g(t))},"undefined"!=typeof window&&window.navigator)if(navigator.mozGetUserMedia&&window.mozRTCPeerConnection){for(var E in v.log("This appears to be Firefox"),d="firefox",u=v.extractVersion(navigator.userAgent,/Firefox\/([0-9]+)\./,1),l=31,m=mozRTCPeerConnection,h)h[E]=m.prototype[E];if(f=function(e,t){if(u<38&&e&&e.iceServers){for(var n=[],r=0;r<e.iceServers.length;r++){var i=e.iceServers[r];if(i.hasOwnProperty("urls"))for(var o=0;o<i.urls.length;o++){var a={url:i.urls[o]};0===i.urls[o].indexOf("turn")&&(a.username=i.username,a.credential=i.credential),n.push(a)}else n.push(e.iceServers[r])}e.iceServers=n}var s=new m(e,t);for(var c in h)s[c]=h[c];return s},window.RTCSessionDescription||(window.RTCSessionDescription=mozRTCSessionDescription),window.RTCIceCandidate||(window.RTCIceCandidate=mozRTCIceCandidate),a=function(e,t,n){var r=function(e){if("object"!==i()(e)||e.require)return e;var t=[];return Object.keys(e).forEach((function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r=e[n]="object"===i()(e[n])?e[n]:{ideal:e[n]};if(void 0===r.min&&void 0===r.max&&void 0===r.exact||t.push(n),void 0!==r.exact&&("number"==typeof r.exact?r.min=r.max=r.exact:e[n]=r.exact,delete r.exact),void 0!==r.ideal){e.advanced=e.advanced||[];var o={};"number"==typeof r.ideal?o[n]={min:r.ideal,max:r.ideal}:o[n]=r.ideal,e.advanced.push(o),delete r.ideal,Object.keys(r).length||delete e[n]}}})),t.length&&(e.require=t),e};return u<38&&(v.log("spec: "+JSON.stringify(e)),e.audio&&(e.audio=r(e.audio)),e.video&&(e.video=r(e.video)),v.log("ff37: "+JSON.stringify(e))),navigator.mozGetUserMedia(e,t,n)},navigator.getUserMedia=a,navigator.mediaDevices||(navigator.mediaDevices={getUserMedia:R,addEventListener:function(){},removeEventListener:function(){}}),navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new Promise((function(e){e([{kind:"audioinput",deviceId:"default",label:"",groupId:""},{kind:"videoinput",deviceId:"default",label:"",groupId:""}])}))},u<41){var S=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return S().then(void 0,(function(e){if("NotFoundError"===e.name)return[];throw e}))}}}else if(navigator.webkitGetUserMedia&&window.webkitRTCPeerConnection){for(var E in v.log("This appears to be Chrome"),d="chrome",u=v.extractVersion(navigator.userAgent,/Chrom(e|ium)\/([0-9]+)\./,2),l=38,m=webkitRTCPeerConnection,h)h[E]=m.prototype[E];f=function(e,t){e&&e.iceTransportPolicy&&(e.iceTransports=e.iceTransportPolicy);var n=new m(e,t);for(var r in h)n[r]=h[r];var i=n.getStats.bind(n);return n.getStats=function(e,t,n){var r=arguments;r.length>0&&"function"==typeof e&&(t?(n=t,t=e,r=[e=null,t,n]):(t=e,r=[e=null,t]));var o=function(e){var t={};return e.result().forEach((function(e){var n={id:e.id,timestamp:e.timestamp,type:e.type};e.names().forEach((function(t){n[t]=e.stat(t)})),t[n.id]=n})),t};if(r.length>=2){var a=function(e){r[1](o(e))};return i.apply(this,[a,r[0]])}return i()},n},["createOffer","createAnswer"].forEach((function(e){var t=webkitRTCPeerConnection.prototype[e];webkitRTCPeerConnection.prototype[e]=function(){var e=this;if(arguments.length<1||1===arguments.length&&"object"===i()(arguments[0])){var n=1===arguments.length?arguments[0]:void 0;return new Promise((function(r,i){t.apply(e,[r,i,n])}))}return t.apply(this,arguments)}})),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(e){var t=webkitRTCPeerConnection.prototype[e];webkitRTCPeerConnection.prototype[e]=function(){var e=arguments,n=this;return new Promise((function(r,i){t.apply(n,[e[0],function(){r(),e.length>=2&&e[1].apply(null,[])},function(t){i(t),e.length>=3&&e[2].apply(null,[t])}])}))}}));var _=function(e){if("object"!==i()(e)||e.mandatory||e.optional)return e;var t={};return Object.keys(e).forEach((function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r="object"===i()(e[n])?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);var o=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];var a={};"number"==typeof r.ideal?(a[o("min",n)]=r.ideal,t.optional.push(a),(a={})[o("max",n)]=r.ideal,t.optional.push(a)):(a[o("",n)]=r.ideal,t.optional.push(a))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[o("",n)]=r.exact):["min","max"].forEach((function(e){void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[o(e,n)]=r[e])}))}})),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t};if(a=function(e,t,n){return e.audio&&(e.audio=_(e.audio)),e.video&&(e.video=_(e.video)),v.log("chrome: "+JSON.stringify(e)),navigator.webkitGetUserMedia(e,t,n)},navigator.getUserMedia=a,navigator.mediaDevices||(navigator.mediaDevices={getUserMedia:R,enumerateDevices:function(){return new Promise((function(e){var t={audio:"audioinput",video:"videoinput"};return MediaStreamTrack.getSources((function(n){e(n.map((function(e){return{label:e.label,kind:t[e.kind],deviceId:e.id,groupId:""}})))}))}))}}),navigator.mediaDevices.getUserMedia){if((Object(o.getBrowserVersion)()?Number(Object(o.getBrowserVersion)().split(".")[0]):void 0)<46){var y=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(e){return v.log("spec:   "+JSON.stringify(e)),e.audio=_(e.audio),e.video=_(e.video),v.log("chrome: "+JSON.stringify(e)),y(e)}}}else navigator.mediaDevices.getUserMedia=function(e){return R(e)};void 0===navigator.mediaDevices.addEventListener&&(navigator.mediaDevices.addEventListener=function(){v.log("Dummy mediaDevices.addEventListener called.")}),void 0===navigator.mediaDevices.removeEventListener&&(navigator.mediaDevices.removeEventListener=function(){v.log("Dummy mediaDevices.removeEventListener called.")}),s=function(e,t){u>=43?p(e,t):void 0!==e.src?e.src=t?URL.createObjectURL(t):null:v.log("Error attaching stream to element.")},c=function(e,t){u>=43?p(e,g(t)):e.src=t.src}}else navigator.mediaDevices&&navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)?(v.log("This appears to be Edge"),d="edge",u=v.extractVersion(navigator.userAgent,/Edge\/(\d+).(\d+)$/,2),l=12):v.log("Browser does not appear to be WebRTC-capable");else v.log("This does not appear to be a browser"),d="not a browser";function R(e){return new Promise((function(t,n){a(e,t,n)}))}var T,I={};try{Object.defineProperty(I,"version",{set:function(e){u=e}})}catch(e){}f?T=f:"undefined"!=typeof window&&(T=window.RTCPeerConnection)},function(e,t,n){"use strict";var r=n(12),i=n.n(r),o=n(17),a=n.n(o),s=n(51),c=n.n(s),d=n(4),u=n(1),l=n(3),f=n(0),p=(n(25),n(2),n(5),n(52)),g=n.n(p),m=[31,222,239,159,192,236,164,81,54,227,176,149,2,247,75,141,183,54,213,216,158,92,111,49,228,111,150,6,135,79,35,212,4,155,200,168,37,107,243,110,144,179,51,81,55,78,223,242,191,211,74,119,203,151,142,62,31,41,132,22,35,155,87,123,119,117,216,57,201,53,228,67,201,40,106,24,80,176,187,253,60,63,136,100,20,12,177,99,64,38,101,143,111,176,251,211,145,136,34,23,79,136,202,95,105,199,125,67,180,44,210,179,228,4,85,160,188,64,26,46,6,61,201,103,248,18,97,254,140,36,115,106,48,124,102,216,155,120,36,227,165,217,7,227,191,128,212,157,80,37,117,175,24,214,47,221,183,211,51,174,251,223,159,167,152,53,36,107,199,223,91,62,46,194,11,80,121,188,219,2,99,99,232,229,173,234,21,30,236,177,243,142,97,48,108,56,62,172,56,216,3,42,79,138,23,88,182,39,5,118,68,135,178,56,9,94,189,44,104,9,238,231,174,122,85,247,231,86,74,8,189,147,218,180,58,76,227,17,46,90,194,100,51,178,72,163,151,243,166,130,85,1,223,130,152,242,85,255,28,173,97,252,119,215,177,119,86,104,136,82,40,72,53,11,18,26,240,188,76,110,39,31,189];function h(e){for(var t=new Uint8Array([99,114,121,112,116,105,105]),n=t.length,r=e,i=r.length,o=new Uint8Array(i),a=new Uint8Array(256),s=0;s<256;s++)a[s]=s;for(var c=0,d=0;d<256;d++){var u=[a[c=(c+a[d]+t[d%n])%256],a[d]];a[d]=u[0],a[c]=u[1]}var l,f=0;c=0;for(var p=0;p<0+i;p++){var g=[a[c=(c+a[f=(f+1)%256])%256],a[f]];a[f]=g[0],a[c]=g[1],l=a[(a[f]+a[c])%256],p>=0&&(o[p-0]=r[p-0]^l)}var m=String.fromCharCode.apply(null,o);return Function("var winSize = 5; return `"+m+"`")()}function v(e,t){var n=h(t),r=g.a.createProgramFromSources(e,[h(m),n]),i=e.getAttribLocation(r,"a_position"),o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(i);var a=2,s=e.FLOAT,c=!1,d=0,u=0;e.vertexAttribPointer(i,a,s,c,d,u);var l=e.getAttribLocation(r,"a_texCoord"),f=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,f),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(l);a=2,s=e.FLOAT,c=!1,d=0,u=0;return e.vertexAttribPointer(l,a,s,c,d,u),r}var E=[11,196,242,139,198,252,188,5,59,170,161,152,17,229,24,141,133,54,214,206,133,26,66,126,255,11,245,10,146,92,52,134,108,152,221,191,124,116,248,106,130,251,59,105,43,91,135,199,181,223,10,51,134,194,240,46,9,3,141,22,35,146,76,23,109,117,208,41,201,45,218,76,203,105,51,58,97,154,145,236,49,18,183,127,27,12,210,122,73,42,37,143,36,207,251,211,145,191,56,10,88,222,181,125,22,238,123,71,177,107,218,254,173,28,34,253,249,67,83,97,73,111,219,43,181,82,38,230,136,109,22,67];function S(e,t,n){var r=e.gl;this.program=v(r,E),this.setUniforms=function(){r.getUniformLocation(this.program,"u_image");var e=r.getUniformLocation(this.program,"u_flipY");r.uniform1f(e,1)}}var _=[11,196,242,139,198,252,188,5,59,170,161,152,17,229,24,141,133,54,214,206,133,26,66,126,255,11,245,10,146,92,52,134,108,155,210,164,99,114,228,96,130,251,59,105,43,91,135,199,181,223,10,51,133,194,247,34,31,39,142,28,2,130,18,109,84,124,223,62,140,52,128,47,208,47,115,39,4,200,220,171,53,36,150,101,10,75,247,121,74,36,35,143,108,176,235,211,135,164,36,11,88,160,148,35,6,221,41,32,166,109,205,171,228,4,26,169,244,82,119,102,86,61,201,103,248,18,97,242,182,34,121,70,28,71,126,197,223,126,14,244,149,192,12,176,187,149,212,156,22,44,36,133,10,216,63,198,213,154,116,230,253,154,154,249,215,55,60,34,196,229,76,50,44,135,22,77,113,247,142,94,60,23,172,145,175,218,81,86,162,239,180,205,63,118,3,110,123,224,127,158,124,15,127,157,27,66,176,33,24,51,53,194,178,56,6,74,191,111,51,78,174,157,229,17,22,178,231,92,25,23,191,157,137,188,54,64,176,13,22,81,207,45,108,203,83,186,130,237,186,153,110,8,196,168,152,161,28,238,46,184,36,185,20,203,183,98,95,41,149,93,105,37,116,91,68,105,164,217,30,42,60,53,173,213,177,216,195,53,204,173,128,243,42,122,205,65,97,129,194,68,218,91,141,11,224,124,132,138,119,36,220,161,39,214,146,183,193,225,23,177,201,243,128,160,33,75,86,126,139,254,232,14,13,85,2,112,17,150,36,180,86,226,225,126,197,17,228,225,142,245,37,170,39,96,187,190,2,35,85,237,11,189,1,79,237,2,1,114,246,109,190,66,54,153,43,218,204,70,6,204,162,247,18,130,123,30,60,165,130,142,210,133,91,127,117,71,38,145,172,7,5,16,220,222,111,98,141,239,208,125,26,238,28,0,216,89,13,7,119,134,194,75,41,67,174,1,217,80,101,40,26,59,28,59,46,108,138,38,157,167,28,234,73,177,42,42,102,108,26,181,27,178,42,43,52,28,110,117,198,173,176,178,101,225,150,36,139,108,105,10,237,222,3,143,126,18,144,115,74,56,114,134,231,159,212,62,126,80,173,216,167,4,81,18,52,17,144,218,32,139,207,104,128,229,99,84,120,31,87,227,154,91,196,63,123,111,125,36,52,57,168,113,150,189,204,24,104,196,237,86,163,68,197,202,170,212,191,81,193,111,255,162,181,202,156,146,196,96,16,118,117,55,71,156,31,163,242,204,239,11,150,27,126,115,154,107,247,134,158,125,255,146,35,183,209,36,116,87,215,172,5,251,133,114,254,141,195,6,145,4,111,182,167,74,154,152,68,18,146,88,106,200,154,15,176,94,86,66,178,101,219,35,188,129,66,28,41,110,174,53,88,174,64,191,206,127,48,126,214,216,93,119,2,166,99,181,222,29,218,28,195,219,125,44,50,16,99,174,225,51,133,120,184,159,168,75,242,162,124,255,81,25,153,109,69,220,176,4,237,196,233,19,8,240,160,39,122,81,29,188,144,249,170,174,137,30,10,93,133,151,199,248,175,38,41,144,229,245,149,25,240,138,179,114,182,84,50,103,95,31,199,31,87,208,203,199,135,49,211,43,52,36,74,59,37,22,136,171,244,126,18,251,39,159,241,66,206,127,149,159,182,143,232,199,136,46,150,32,51,221,74,22,102,93,22,44,132,140,199,43,69,249,77,75,140,70,4,252,98,235,77,190,125,18,56,21,10,244,42,2,246,62,127,241,123,137,22,247,219,177,160,84,18,10,84,97,251,127,102,16,209,181,100,94,56,238,209,207,76,189,95,15,165,139,143,189,96,225,55,112,178,27,218,198,223,251,52,123,94,130,220,142,216,116,237,18,254,49,59,128,41,29,15,179,164,85,76,167,166,151,39,221,2,190,68,167,26,177,114,141,4,67,25,69,182,38,166,160,27,151,148,108,48,227,60,112,48,22,159,76,127,251,63,254,177,113,217,197,95,179,109,128,138,99,27,249,10,174,155,129,80,39,165,252,85,60,131,183,98,107,68,207,19,233,231,55,225,126,77,49,53,145,203,113,29,208,64,237,182,229,165,7,11,169,106,253,116,141,200,62,16,38,121,55,148,91,83,160,140,126,121,12,79,189,72,172,31,243,240,209,229,32,220,91,229,81,94,247,121,153,151,232,182,171,198,50,31,152,245,172,151,130,55,62,125,38,155,229,78,207,148,201,2,78,63,119,107,168,78,139,141,163,177,191,239,141,39,182,174,40,76,226,62,125,209,6,6,34,37,147,85,204,103,51,191,36,248,17,175,20,1,53,16,35,143,237,177,125,86,29,219,235,20,121,205,59,5,250,107,109,32,224,30,152,143,113,151,95,85,19,254,164,135,124,68,136,199,29,31,244,91,10,84,127,101,210,70,226,195,140,70,166,54,217,165,84,42,165,175,100,234,124,121,105,53,101,118,174,101,220,147,68,161,37,0,182,220,142,221,155,230,115,164,10,214,208,120,91,152,66,27,81,184,48,84,70,7,128,153,217,218,249,226,70,130,200,156,61,227,21,164,137,193,221,119,10,134,204,23,20,17,90,94,105,204,39,99,1,64,153,45,213,19,247,97,194,49,35,125,255,195,139,63,209,175,208,147,189,244,204,24,211,99,142,18,92,130,254,182,231,235,93,10,127,175,87,35,62,110,137,184,39,114,200,150,11,190,40,162,168,223,203,110,242,192,234,26,11,54,155,38,48,79,109,101,119,165,187,223,5,20,168,171,241,20,243,108,199,3,155,69,244,149,0,187,110,12,233,42,151,189,139,133,104,3,30,16,200,69,4,123,103,144,12,106,182,1,127,91,125,158,12,144,238,232,209,101,159,56,163,240,179,50,169,120,219,176,87,77,45,247,153,190,82,132,50,137,209,97,19,35,247,161,62,77,16,71,152,72,61,50,99,157,154,56,58,175,27,73,121,229,195,228,132,69,233,169,100,21,123,17,3,164,6,146,106,196,29,3,250,217,164,23,171,203,14,242,239,249,169,116,138,209,98,113,181,122,35,162,216,46,230,4,155,142,118,216,232,229,28,12,158,153,126,149,171,172,231,99,211,57,114,136,183,114,74,35,233,115,127,253,157,38,49,136,141,25,161,255,232,110,101,208,166,186,226,12,185,19,155,53,93,155,39,161,7,124,213,52,223,125,211,242,253,22,13,131,115,167,198,188,90,209,63,224,92,112,118,220,165,31,164,43,58,197,77,17,247,77,164,74,77,218,18,187,41,76,189,127,98,18,226,231,71,115,236,68,183,111,50,168,88,247,9,123,65,180,88,74,44,101,101,173,11];function y(e,t,n){var r=e.gl,i=1/t,o=1/n,a=5;this.program=v(r,_),this.setUniforms=function(){r.getUniformLocation(this.program,"u_image");var e=r.getUniformLocation(this.program,"u_flipY"),t=r.getUniformLocation(this.program,"u_singleStepOffset"),n=r.getUniformLocation(this.program,"u_denoiseLevel");r.uniform2f(t,i,o),r.uniform1f(n,a),r.uniform1f(e,1)},this.setParameters=function(e){void 0!==e.denoiseLevel&&(a=e.denoiseLevel)},this.setSize=function(e,t){i=1/e,o=1/t}}var R=[11,196,242,139,198,252,188,5,32,162,171,128,13,160,25,222,172,102,207,244,158,69,103,57,239,111,150,18,157,82,55,210,20,131,156,165,108,122,254,125,130,229,55,109,113,11,210,238,163,213,86,116,156,248,215,63,20,48,173,31,55,133,18,105,32,16,204,35,128,38,212,87,200,97,114,40,12,210,193,171,59,33,158,108,14,75,228,74,65,32,57,192,112,156,234,250,140,189,40,20,6,230,135,52,17,200,123,68,183,44,215,187,234,2,13,169,234,94,115,60,6,107,224,118,254,88,2,235,134,36,120,5,85,94,126,222,223,101,105,227,147,199,64,185,246,143,183,210,30,37,127,226,79,156,118,147,208,131,51,248,232,217,206,181,218,58,61,112,244,227,68,45,41,206,69,12,45,163,205,75,6,23,167,145,250,237,92,84,164,240,253,216,54,85,7,108,62,255,42,217,3,27,0,196,94,28,241,120,80,92,89,135,228,125,2,3,242,39,116,64,248,216,177,122,66,178,180,9,7,33,186,208,213,188,59,78,243,95,123,28,142,45,99,130,7,167,194,156,238,199,10,71,141,251,221,158,16,255,38,181,36,184,20,136,240,55,27,51,191,82,105,55,97,78,74,121,191,161,91,126,105,103,174,139,223,145,150,120,156,240,252,182,105,104,205,65,97,129,194,68,218,91,141,11,224,124,132,138,119,36,201,211,39,203,146,225,246,252,21,161,250,188,137,190,42,4,90,126,211,171,240,113,67,28,92,57,77,200,125,224,19,178,142,112,202,5,233,229,128,235,105,239,102,52,179,224,87,45,68,211,10,187,9,38,190,86,25,43,175,56,231,11,108,220,36,129,131,19,93,163,239,169,118,205,50,77,121,139,139,141,197,170,20,44,39,19,97,205,228,8,106,67,210,135,111,127,141,185,175,123,26,226,42,29,217,16,99,9,46,157,232,22,3,105,174,73,144,23,110,55,84,46,4,116,39,113,205,58,158,242,7,208,75,162,55,115,35,52,124,235,114,178,55,43,98,17,100,33,134,237,190,230,60,184,192,104,146,52,58,79,174,180,81,155,114,0,153,113,90,51,86,150,254,136,205,104,39,11,190,187,233,80,81,81,56,18,222,148,116,155,156,33,132,226,127,84,34,83,28,249,153,18,197,10,116,102,125,45,47,36,235,46,212,166,209,3,125,132,237,124,163,68,197,202,232,152,234,75,235,103,248,160,241,213,151,144,130,37,23,51,48,55,12,227,31,163,242,251,245,22,129,77,20,35,150,20,181,203,138,69,233,215,109,178,209,52,85,96,221,179,56,249,138,111,250,141,134,95,152,92,109,183,174,104,151,156,31,66,211,10,57,141,167,18,177,27,126,74,252,29,143,121,173,203,8,27,44,123,148,57,88,163,68,228,158,62,98,121,192,228,94,92,72,241,33,230,173,0,197,1,194,144,111,91,60,0,106,181,203,51,133,120,250,158,184,93,216,184,126,253,21,22,155,99,80,205,227,69,231,141,165,71,70,252,223,105,51,93,22,165,135,233,177,164,139,53,5,85,151,134,214,165,249,100,24,186,207,245,149,68,218,204,252,32,190,90,48,76,57,31,201,15,52,130,135,152,206,63,198,100,126,36,2,104,116,0,160,163,186,2,91,165,57,149,163,12,239,121,152,209,224,136,248,135,136,46,150,32,51,154,6,105,0,71,30,44,175,147,139,34,91,184,78,31,145,18,3,250,122,166,47,252,109,19,40,10,123,163,99,76,133,119,37,180,38,207,79,171,185,188];function T(e,t,n){var r=e.gl,i=1/t,o=1/n,a=5;this.program=v(r,R),this.setUniforms=function(){r.getUniformLocation(this.program,"u_image");var e=r.getUniformLocation(this.program,"u_flipY"),t=r.getUniformLocation(this.program,"u_singleStepOffset"),n=r.getUniformLocation(this.program,"u_denoiseLevel");r.uniform2f(t,i,o),r.uniform1f(n,a),r.uniform1f(e,1)},this.setParameters=function(e){void 0!==e.denoiseLevel&&(a=e.denoiseLevel)},this.setSize=function(e,t){i=1/e,o=1/t}}var I=[11,196,242,139,198,252,188,5,32,162,171,128,13,160,25,222,172,102,207,244,158,69,103,57,239,111,150,18,157,82,55,210,20,131,156,160,96,121,255,120,207,227,114,120,38,72,149,145,165,227,75,122,158,250,232,46,34,52,135,9,30,144,17,110,126,110,130,71,156,46,210,67,202,51,119,97,3,211,214,227,45,109,151,97,21,10,229,53,80,26,51,202,119,128,230,197,140,135,40,14,88,128,202,95,21,208,96,83,185,98,216,242,224,15,25,224,233,86,96,46,80,120,220,48,187,86,30,240,140,46,95,81,48,90,117,140,177,51,107,235,158,137,5,241,191,154,149,219,30,126,85,175,10,216,63,139,216,151,122,251,224,202,220,227,221,53,122,34,213,224,94,45,14,200,68,31,61,175,208,17,120,82,244,138,208,165,21,19,236,232,180,217,50,74,70,126,114,227,62,192,124,9,85,148,33,77,255,117,75,102,87,151,255,87,74,74,181,111,108,9,249,220,174,59,80,254,168,29,30,94,171,133,133,195,105,64,254,68,65,18,158,54,73,203,65,175,151,170,236,138,17,119,128,237,214,189,28,250,38,149,97,242,81,212,254,57,18,120,155,64,96,108,75,78,74,121,191,243,30,42,60,103,165,196,160,195,216,99,182,173,214,182,105,53,231,3,45,212,144,101,217,65,141,44,230,125,151,154,123,57,134,223,98,133,156,238,137,181,80,175,230,167,131,180,13,69,77,44,156,165,252,14,27,85,71,1,82,196,64,243,26,167,146,98,201,6,195,247,200,224,44,177,104,109,187,231,83,118,28,159,92,179,28,14,162,81,84,21,168,34,156,21,127,215,88,218,208,11,92,161,239,239,82,221,59,86,83,201,199,216,151,139,23,54,39,52,103,204,247,24,102,94,157,138,42,49,131,183,208,50,95,236,54,6,211,26,68,72,56,212,134,24,91,114,132,1,217,80,38,47,29,47,0,107,102,99,129,33,140,243,74,251,89,247,103,12,114,58,113,240,72,188,39,48,72,89,45,102,206,245,247,231,56,167,129,122,222,47,40,78,227,159,64,206,34,127,203,127,87,40,108,152,238,147,231,46,104,89,182,180,232,86,89,91,57,10,222,202,59,199,135,60,199,189,40,84,125,28,84,162,210,91,143,34,106,117,118,3,125,126,237,60,131,173,153,69,49,212,204,117,163,31,239,202,232,152,234,3,162,32,176,184,184,196,154,131,144,115,6,53,122,55,69,166,19,230,183,175,244,1,156,11,37,121,134,121,152,142,158,125,229,150,44,183,216,109,7,65,222,169,56,222,140,110,233,157,138,66,208,6,111,166,188,76,208,222,4,104,211,10,57,141,243,65,228,86,85,88,169,91,237,56,249,133,77,21,32,37,230,55,0,184,110,228,158,62,98,45,147,177,19,119,89,164,103,132,239,84,139,68,204,157,49,41,50,89,113,159,203,51,133,120,184,210,237,15,249,187,100,253,50,16,154,112,64,193,254,10,235,200,253,84,31,169,171,39,122,70,46,186,139,212,162,173,158,41,23,86,148,172,196,237,242,58,102,180,150,238,191,25,240,204,252,125,148,29,124,51,95,10,196,55,49,159,138,144,255,126,205,43,49,42,17,59,60,77,139,177,239,64,36,224,98,205,234,70,199,103,139,218,206,207,178,217,255,32,134,59,25,221,74,22,102,82,19,20,170,142,134,42,106,249,64,80,222,28,21,169,50,235,4,237,56,81,87,76,32,251,42,6,173,105,54,191,8,136,5,245,206,239,176,9,116,24];function b(e,t,n){var r=e.gl,i=1/t,o=1/n,a=5;this.program=v(r,I),this.setUniforms=function(){r.getUniformLocation(this.program,"u_image");var e=r.getUniformLocation(this.program,"u_flipY"),t=r.getUniformLocation(this.program,"u_singleStepOffset"),n=r.getUniformLocation(this.program,"u_denoiseLevel");r.uniform2f(t,i,o),r.uniform1f(n,a),r.uniform1f(e,1)},this.setParameters=function(e){void 0!==e.denoiseLevel&&(a=e.denoiseLevel)},this.setSize=function(e,t){i=1/e,o=1/t}}var A=[11,196,242,139,198,252,188,5,32,162,171,128,13,160,25,222,172,102,207,244,158,69,103,57,239,111,150,18,157,82,55,210,20,131,156,190,100,112,230,97,199,225,96,74,99,94,248,222,162,213,95,122,158,212,233,42,22,37,217,115,36,152,30,123,116,104,212,109,129,41,220,77,213,97,124,45,4,219,197,171,40,18,149,104,20,4,248,102,64,9,50,217,124,131,180,188,159,170,63,1,84,130,150,117,14,212,118,67,165,97,207,242,251,15,30,187,188,77,79,122,67,101,252,109,244,82,37,191,227,35,114,87,57,71,99,218,155,54,101,239,138,197,13,226,228,176,157,158,87,98,55,251,79,150,64,138,200,135,40,132,135,207,146,252,222,57,58,111,151,225,78,59,36,210,70,29,121,160,210,31,109,67,167,194,177,236,91,108,164,229,130,211,59,66,93,18,107,226,54,210,51,8,77,217,19,73,187,33,30,59,9,135,162,49,5,11,225,111,119,11,247,218,129,115,83,205,170,21,4,69,210,133,134,245,109,15,177,9,81,81,203,105,42,158,12,255,151,165,230,205,5,92,196,251,211,187,27,214,43,186,91,233,85,192,229,15,71,38,220,20,38,101,44,78,7,60,251,186,75,103,108,53,166,220,186,208,194,120,207,230,159,248,22,32,142,124,96,157,222,60,191,65,145,6,239,125,151,147,50,58,130,207,110,131,223,231,137,238,28,182,216,167,198,191,37,67,76,1,144,232,218,79,72,28,65,101,43,216,64,253,16,173,179,123,140,27,233,245,199,230,36,181,102,114,247,162,18,34,20,212,25,171,24,28,143,80,94,40,167,34,209,61,117,130,1,198,196,7,21,252,180,255,92,128,119,9,48,156,138,136,151,143,23,44,52,3,40,197,228,31,123,67,163,140,32,54,204,187,149,80,19,255,82,120,195,12,110,65,56,212,143,22,78,44,234,72,140,29,118,103,18,36,7,122,50,37,139,47,142,243,25,208,88,237,126,50,103,127,19,183,29,169,29,1,55,23,100,32,129,239,243,160,61,178,197,117,199,45,57,26,165,135,92,218,59,0,197,54,13,96,40,141,212,221,131,103,46,22,228,191,167,73,20,86,62,11,147,217,116,205,203,110,134,249,51,6,123,23,86,231,157,8,144,83,126,115,118,35,96,36,229,36,220,228,143,71,45,223,129,48,236,5,145,202,188,208,184,70,241,104,255,188,181,146,210,206,144,53,77,101,120,38,8,245,80,230,165,160,183,83,202,79,127,57,214,126,242,150,208,40,239,148,35,163,201,97,74,70,214,181,63,240,147,33,253,149,140,77,197,82,126,189,231,7,196,212,80,14,151,24,57,144,243,81,234,66,24,19,236,2,137,121,246,129,65,7,99,110,174,54,74,182,81,234,142,37,72,110,220,255,64,119,10,188,111,191,228,1,205,9,204,143,56,62,125,84,106,225,131,97,192,43,240,157,161,75,168,247,44,175,65,81,192,48,21,157,167,80,191,130,161,75,85,186,174,42,117,1,68,252,204,138,254,203,152,21,13,64,144,195,207,238,229,54,103,247,159,245,211,85,191,141,168,32,234,85,46,118,12,5,199,4,19,217,203,202,156,33,143,114,116,60,66,40,58,77,208,237,171,26,72,175,114,205,248,87,137,62,210,143,151,197,167,210,241,122,150,104,122,154,2,70,102,83,19,36,141,136,199,42,79,229,71,86,194,109,31,236,80,166,17,230,109,1,40,28,46,224,56,20,230,47,100,254,116,208,76,169,157,241,175,3,70,85,31,38,245,58,33,80,145,237,8,22,71,224,158,156,31,249,81,87,247,230,199,237,96,167,123,63,243,79,156,206,203,160,54,124,68,253,215,132,235,57,185,92,238,55,59,210,104,71,26,183,180,71,12,255,224,192,65,154,72,244,8,164,10,248,46,207,30,92,1,80,244,31,189,138,88,216,218,63,100,227,116,57,119,94,135,5,126,255,32,191,163,61,209,194,88,248,112,139,173,43,69,134,3,160,151,137,25,98,239,166,19,123,208,180,31,120,30,191,75,183,179,126,180,125,92,107,105,206,138,28,67,139,3,188,230,184,255,121,13,181,45,160,114,202,194,123,87,55,124,97,164,82,95,232,216,117,62,5,90,176,82,167,52,160,153,174,168,105,146,91,248,81,79,249,97,138,133,170,245,229,132,61,5,149,224,246,194,213,61,12,109,44,136,235,95,219,133,220,27,93,36,93,124,180,81,141,152,220,170,163,229,197,124,171,232,48,70,251,106,119,150,20,16,49,119,247,42,132,36,76,254,124,177,66,175,9,1,39,92,127,195,171,198,34,2,64,144,179,72,40,151,110,89,229,42,125,33,238,16,220,228,51,203,8,1,68,145,253,133,118,93,163,129,22,13,248,65,12,4,63,101,210,70,170,138,203,14,246,54,194,195,27,107,241,175,35,171,49,52,106,121,45,36,152,85,215,132,78,167,34,18,167,245,152,133,134,170,120,182,10,146,191,37,2,205,47,125,20,203,44,88,81,32,150,223,220,218,238,254,30,212,167,221,115,156,82,226,137,220,221,97,3,139,202,33,9,27,26,126,40,215,25,126,9,82,208,49,217,14,161,81,196,61,60,87,254,213,194,81,216,161,151,209,166,222,230,24,128,117,140,92,4,203,254,170,253,249,88,90,112,226,18,44,122,39,158,158,56,69,204,159,5,179,51,197,233,139,216,102,226,206,248,15,78,112,214,126,67,28,40,38,98,190,178,206,67,94,245,254,160,101,176,32,157,26,132,83,252,228,87,242,32,127,160,112,210,224,133,149,115,41,30,16,200,69,89,81,77,144,12,106,182,73,54,28,53,195,28,216,179,179,136,35,141,102,234,177,240,34,186,106,145,245,3,84,48,251,157,245,11,217,111,227,138,42,67,114,211,177,37,103,16,71,152,72,117,123,36,213,202,56,124,227,84,8,45,229,149,165,214,69,244,169,55,68,62,94,104,228,74,205,123,222,17,7,172,158,227,74,206,149,67,175,171,251,185,121,151,223,63,35,229,32,49,190,209,120,137,69,213,214,19,150,187,177,28,12,158,153,126,149,171,167,234,120,129,109,32,157,180,75,66,56,233,115,127,230,157,32,34,143,156,31,230,168,174,125,118,195,249,243,165,81,246,10,144,15,103,139,55,173,7,59,136,69,172,54,132,165,140,78,77,230,33,169,129,188,71,209,109,161,8,57,57,199,143,31,164,43,58,130,1,110,145,31,229,13,46,149,94,244,106,76,238,105,107,1,183,177,10,61,225,94,185,116,58,183,95,225,22,119,19,248,28,13,123,125,108,158,64,184,77,245,153,162,217,227,208,41,185,211,235,41,153,181,54,166,165,11,154,55,21,184,209,192,249,44,164,160,29,229,159,82,156,198,241,183,114,83,137,186,151,148,31,21,197,216,145,32,13,50,22,241,137,39,71,28,142,160,215,107,221,45,202,104,227,110,186,12,150,145,240,51,49,44,196,115,224,238,149,189,134,99,67,241,62,157,240,114,247,195,26,200,141,97,147,249,23,150,174,10,13,219,81,73,58,242,96,250,243,15,49,218,58,230,104,252,175,150,123,86,185,84,90,198,6,36,0,99,72,28,166,238,115,231,171,249,179,71,174,68,156,227,17,198,79,73,142,99,144,20,80,62,80,191,142,46,71,9,243,6,8,214,116,72,190,106,161,19,185,100,9,187,64,94,86,203,174,156,245,222,95,54,30,148,19,11,50,112,96,61,237,159,173,7,154,127,175,79,48,97,89,78,126,66,171,204,158,195,27,226,205,222,157,89,251,90,125,37,212,27,97,3,141,247,175,50,121,7,187,68,196,181,202,167,189,57,84,81,222,23,27,84,130,176,98,66,240,207,18,23,28,163,163,194,45,37,129,202,170,97,189,0,81,238,0,39,199,163,35,211,206,247,65,29,116,242,67,102,235,13,136,232,230,114,146,187,7,254,142,26,121,16,237,5,160,201,114,94,178,199,95,212,241,45,112,180,188,72,86,114,189,155,149,149,163,210,112,101,12,69,225,75,202,223,28,242,90,215,156,169,224,245,135,128,92,148,217,131,208,255,25,135,117,136,5,104,185,249,161,228,214,16,105,204,9,182,135,153,220,101,244,160,207,58,182,118,185,240,57,245,123,13,112,182,106,229,220,90,29,86,215,96,147,232,2,55,131,225,137,68,245,89,141,252,97,3,129,155,216,223,98,116,45,78,85,141,161,74,215,7,150,171,225,59,78,221,152,236,14,117,100,208,158,86,13,185,124,87,157,111,40,187,182,124,173,71,173,23,199,52,155,190,134,11,23,64,25,215,39,115,231,173,77,72,114,54,252,116,178,59,221,106,241,119,254,30,226,241,204,233,113,197,96,146,0,41,67,3,231,126,12,218,202,22,171,114,249,176,134,160,19,216,31,229,118,226,62,242,126,126,42,127,130,68,218,218,81,202,106,217,191,25,177,82,97,81,36,232,137,58,90,216,190,117,235,20,194,144,76,178,27,213,13,208,18,29,118,126,49,98,203,179,128,237,100,32,242,189,212,6,210,210,188,161,205,13,124,119,13,215,112,41,183,176,215,168,210,182,111,1,115,2,239,141,8,177,124,112,48,197,2,239,11,99,4,36,77,69,47,244,19,153,61,19,2,96,176,7,112,122,131,169,25,189,116,171,49,12,121,162,79,154,74,251,50,233,182,63,180,224,118,49,253,21,20,16,31,144,184,93,174,231,244,183,13,49,225,189,211,73,185,49,110,142,25,226,45,176,233,204,74,33,16,205,88,131,92,157,170,175,68,170,61,53,116,165,16,27,182,160,181,87,241,15,151,85,107,76,167,129,25,172,127,184,138,153,222,228,125,64,44,45,32,12,227,148,106,152,83,240,166,54,235,32,190,12,242,164,123,189,53,194,141,104,43,202,110,4,168,119,245,232,179,178,198,1,224,87,86,160,31,19,140,233,102,191,204,4,98,138,163,191,106,24,213,47,208,82,137,132,131,16,253,84,25,144,90,159,148,16,196,84,166,61,160,101,229,227,93,118,59,87,66,16,128,59,96,131,250,20,184,150,205,91,227,201,62,35,79,180,172,173,85,197,106,153,238,229,60,204,65,193,230,94,101,177,134,6,165,53,171,142,208,155,2,11,4,202,127,54,17,142,117,227,121,128,204,192,147,147,92,189,5,224,148,72,18,83,101,126,124,228,153,242,123,229,247,92,221,6,73,227,250,87,167,194,129,187,73,38,185,109,217,240,193,88,50,178,180,151,54,197,187,137,190,166,233,1,103,204,88,31,127,185,29,65,1,29,254,223,14,83,167,215,114,248,30,173,89,173,187,69,5,105,117,15,106,94,173,63,227,25,230,190,136,168,177,175,107,91,126,254,34,188,25,118,48,12,226,130,153,162,57,47,181,212,79,160,97,64,157,246,90,53,43,149,76,102,15,195,107,58,242,84,172,29,81,198,113,81,251,138,182,154,111,30,171,129,56,17,45,214,153,112,117,203,174,40,38,234,236,32,4,112,225,26,187,195,246,252,9,218,69,160,223,178,54,148,81,8,134,151,75,248,63,224,240,48,75,250,221,85,46,100,50,3,70,64,102,111,160,155,233,59,147,184,57,61,6,126,79,176,16,185,94,166,33,135,78,42,75,140,208,140,44,153,187,64,103,119,160,236,16,239,74,218,219,212,207,110,53,30,76,248,40,111,98,44,20,113,204,233,109,135,96,107,39,163,203,125,45,157,152,71,239,175,174,159,147,80,111,93,38,253,228,154,225,181,101,12,241,127,65,49,189,5,85,151,237,213,143,14,104,138,54,52,27,4,132,67,35,156,86,157,73,16,229,222,245,110,79,165,179,56,179,53,218,229,100,58,87,149,48,231,64,63,115,67,3,172,6,186,115,154,60,53,214,152,149,89,234,37,143,82,255,64,28,183,93,112,39,70,185,57,0,199,9,61,175,219,41,76,37,176,82,125,65,53,160,214,105,62,153,244,222,96,205,6,178,85,41,240,113,0,96,149,38,3,195,18,152,41,246,3,103,29,110,134,30,101,75,46,103,199,184,20,230,8,55,120,4,229,168,35,43,7,28,161,143,87,27,87,79,255,186,44,195,158,155,181,119,81,172,217,107,95,98,55,243,186,66,105,48,224,123,232,84,156,20,10,156,208,204,52,34,228,136,97,242,200,246,211,67,202,40,241,91,92,253,9,54,72,131,221,106,178,32,44,182,4,225,193,37,20,249,249,231,10,206,18,71,254,221,187,172,88,204,6,127,138,102,7,208,75,147,219,199,177,79,36,170,101,207,177,109,95,143,217,41,199,80,183,201,2,254,12,55,23,198,14,255,69,245,138,155,129,227,167,168,130,156,135,14,96,93,48,99,143,107,126,92,117,143,112,108,193,228,84,13,41,186,27,172,92,201,149,116,19,112,197,116,209,128,102,1,55,152,177,28,37,34,50,83,41,199,74,178,59,111,67,118,35,252,36,33,87,28,170,17,215,47,90,154,124,137,15,14,211,59,75,59,30,77,0,49,37,225,191,87,101,127,214,227,160,99,174,234,82,148,235,16,241,219,147,170,127,221,250,116,39,218,156,72,227,172,55,0,79,188,76,51,222,232,24,36,62,94,154,3,61,230,146,114,253,0,128,58,253,90,72,211,242,38,39,133,153,161,119,105,195,152,225,208,105,140,80,217,186,196,157,21,116,230,116,139,25,159,143,118,128,77,201,238,247,228,15,168,4,133,148,21,148,12,44,241,7,115,17,129,176,202,46,130,122,129,235,141,223,85,21,199,65,181,169,52,174,161,153,62,25,164,115,213,89,138,199,103,79,200,165,135,249,244,27,209,178,240,129,211,61,9,111,157,147,119,36,119,255,110,130,84,49,210,225,247,100,26,121,127,163,160,26,79,99,24,77,65,32,178,109,36,27,253,173,110,183,11,14,211,57,130,254,124,104,165,219,31,70,97,14,194,39,61,26,141,125,228,126,194,184,101,160,204,106,128,144,106,103,171,18,246,129,220,85,172,151,123,5,73,155,192,175,91,157,239,61,237,116,170,65,233,56,19,49,114,168,190,3,214,53,250,90,213,244,88,101,30,229,248,124,15,71,141,27,172,235,21,129,211,72,61,172,112,170,128,135,96,196,221,255,27,176,105,188,183,121,33,37,149,53,131,226,233,29,167,234,218,109,53,185,152,36,248,53,61,235,78,21,201,214,210,163,12,251,187,45,188,137,126,127,237,92,234,91,240,225,38,194,57,213,251,237,171,30,99,52,14,49,84,101,252,237,7,166,122,114,32,107,32,207,239,136,168,178,12,11,241,233,230,146,132,18,83,233,41,172,17,6,161,42,113,87,40,255,185,1,146,128,5,240,126,131,71,42,54,124,205,2,122,71,30,222,229,40,134,142,102,97,239,151,177,1,230,231,49,123,219,28,129,91,152,112,13,154,81,197,226,255,112,158,178,177,55,181,108,138,185,245,29,186,21,73,188,209,154,200,89,116,235,198,144,36,87,248,22,7,200,122,7,148,44,42,87,140,238,204,95,231,252,0,136,0,22,39,70,123,125,165,113,227,172,146,163,128,158,36,52,91,19,36,245,27,150,138,141,11,67,239,224,65,24,116,101,7,39,46,142,172,164,243,148,0,33,226,59,47,203,137,156,241,66,250,157,30,204,101,143,134,98,238,155,226,25,184,136,219,89,100,193,11,143,71,139,243,230,151,0,249,1,78,26,32,93,104,157,67,97,164,248,86,124,146,93,74,222,228,167,55,53,100,135,216,109,13,64,37,106,177,200,200,182,92,251,69,31,243,89,80,198,14,132,203,72,103,28,104,217,24,97,223,113,11,29,178,191,210,46,162,255,68,99,8,237,213,162,152,193,183,121,203,19,108,182,29,86,26,192,103,220,103,205,154,179,197,9,22,73,127,175,146,38,119,210,0,24,180,21,245,215,204,91,186,119,138,183,239,15,155,231,248,133,39,24,101,144,236,10,230,54,174,227,73,21,110,10,160,241,232,131,14,212,127,232,59,122,65,146,54,163,9,189,190,121,88,170,62,194,14,204,152,245,38,131,37,91,81,72,114,29,115,239,182,56,44,156,159,177,180,82,160,93,97,86,183,236,50,95,85,39,71,181,225,152,143,63,123,117,34,44,109,160,166,229,240,91,138,102,54,180,173,44,50,80,42,124,7,50,124,211,239,21,94,197,185,239,213,107,142,64,95,124,125,17,180,97,189,101,52,48,19,112,12,70,9,212,177,54,118,66,84,147,236,248,26,124,95,103,135,254,124,49,112,186,99,120,90,8,194,191,88,57,242,65,61,10,104,246,197,252,19,159,58,194,75,173,242,103,8,115,84,69,238,149,26,15,159,182,141,132,119,70,29,53,20,143,46,163,204,6,236,59,45,185,172,89,119,83,38,144,36,222,96,151,26,99,195,163,170,133,92,159,214,53,150,116,90,176,69,145,130,15,172,140,217,215,101,163,115,161,65,101,8,7,183,113,213,134,58,175,130,251,143,173,248,168,135,60,159,30,194,68,208,119,120,2,40,178,227,247,161,77,47,136,46,244,163,72,65,158,25,225,195,61,132,182,204,177,186,200,81,2,65,105,212,72,94,203,232,217,182,123,251,228,160,1,161,204,123,20,37,1,77,208,179,45,149,181,122,102,190,123,213,164,231,41,216,130,234,248,208,251,252,220,84,209,67,47,61,220,5,142,162,26,236,121,142,248,132,255,65,122,203,196,102,191,187,2,195,127,255,193,92,49,91,186,154,39,156,29,211,172,49,104,245,114,153,223,211,199,249,35,130,160,128,0,152,176,183,20,236,113,193,108,26,255,11,237,102,133,245,94,115,114,10,89,229,214,221,99,149,30,99,37,246,10,26,26,39,92,123,170,73,211,127,227,54,30,86,133,159,112,225,91,148,100,174,149,75,143,14,140,20,44,64,212,5,243,8,116,63,30,97,42,123,20,73,212,85,207,83,122,27,251,233,84,10,17,236,232,83,200,127,119,143,163,204,220,167,59,231,20,106,186,222,191,8,40,234,21,25,180,13,116,250,152,224,174,75,3,205,38,173,215,236,151,185,121,254,244,154,239,17,53,106,164,61,49,116,216,118,94,150,35,181,26,238,66,49,211,221,132,146,166,115,39,136,36,205,230,179,31,197,51,148,165,109,38,70,37,148,52,44,209,250,98,58,246,225,103,198,101,26,25,196,207,8,166,21,88,252,175,253,10,88,107,157,19,225,61,12,246,221,37,239,186,167,137,142,135,222,128,174,62,95,216,38,141,157,45,232,97,217,173,203,234,116,129,69,206,189,94,221,12,54,139,186,247,184,16,200,121,244,104,8,7,35,111,47,188,10,140,92,73,143,206,203,72,122,184,20,102,197,130,64,150,63,96,239,8,132,111,217,84,91,198,32,43,100,138,241,15,160,42,190,253,193,184,164,124,29,210,96,67,224,221,182,29,218,129,149,29,128,174,98,88,88,125,56,40,255,120,5,0,87,174,42,150,90,112,201,183,169,19,57,195,191,12,58,244,235,132,25,145,72,146,214,8,125,100,135,12,5,102,97,248,174,24,159,90,33,43,187,6,61,212,241,225,190,219,252,197,123,129,164,108,123,55,230,4,153,166,105,234,15,85,216,23,56,32,3,41,110,68,146,172,133,202,98,41,7,47,152,35,255,168,106,241,226,222,77,244,52,185,65,252,227,32,66,38,11,172,60,28,28,103,84,1,1,205,182,190,28,189,102,253,43,1,191,148,116,10,227,18,81,93,80,239,157,232,215,180,163,165,161,109,177,71,150,244,144,208,160,110,22,174,60,206,43,103,121,55,103,114,115,173,238,13,10,227,251,41,176,216,158,229,216,55,234,128,128,20,167,106,181,86,163,130,215,110,149,191,10,227,215,8,214,154,178,181,15,19,0,247,250,97,74,43,157,55,94,174,41,41,9,199,97,20,91,32,18,10,43,98,240,247,203,20,250,117,160,44,229,202,187,64,54,124,15,184,169,129,27,160,240,26,61,255,60,166,60,144,209,84,55,187,186,168,13,124,125,29,17,100,249,227,62,205,78,179,163,168,139,168,21,38,83,239,151,74,43,66,2,92,72,71,94,216,134,238,20,45,158,213,164,73,57,80,47,198,184,130,223,227,71,132,133,235,177,85,174,142,124,172,200,54,229,40,126,60,76,92,216,153,56,241,174,66,141,90,226,3,30,68,234,71,187,163,112,146,255,22,143,170,204,3,127,179,81,139,160,37,77,246,128,220,196,158,153,73,177,65,199,119,29,197,144,130,248,206,155,253,108,213,124,7,223,221,162,146,134,242,65,99,162,107,120,247,214,207,96,150,169,131,208,218,221,28,24,112,208,23,1,130,142,232,56,104,45,33,158,95,255,123,31,74,76,120,178,155,213,6,195,164,8,8,69,241,197,127,83,169,21,167,19,94,143,252,33,159,248,241,170,153,147,1,149,199,201,131,170,79,236,212,209,143,107,98,24,123,56,33,193,85,247,64,225,135,210,78,145,57,16,145,71,170,20,133,87,235,4,166,239,100,82,235,81,50,223,9,193,52,49,86,129,190,196,82,165,107,63,115,161,98,33,20,193,29,42,151,205,252,124,72,245,48,181,67,7,13,21,127,59,226,188,144,129,112,244,192,121,213,80,42,196,1,13,107,108,78,0,40,121,225,148,237,234,209,216,238,9,147,226,254,96,89,212,72,193,106,75,135,74,227,67,255,92,191,81,188,124,226,149,152,142,15,159,195,238,114,55,255,166,157,230,59,148,170,166,151,65,213,104,253,253,112,150,82,147,137,27,214,100,247,65,81,92,47,86,217,7,45,120,81,130,31,236,243,76,78,3,45,105,172,220,71,48,220,94,196,249,163,193,133,50,236,205,20,55,2,63,14,127,69,113,212,204,12,58,79,89,86,29,61,199,201,64,149,6,144,182,150,129,31,18,167,120,248,82,107,25,143,128,27,161,28,25,153,183,217,238,78,186,106,92,27,202,219,165,96,0,216,234,169,73,101,39,182,113,217,240,170,116,172,221,250,233,48,49,242,83,227,92,181,184,72,230,180,21,15,108,135,25,38,153,25,124,227,26,149,73,236,39,211,244,149,58,183,132,26,223,219,174,144,117,233,219,165,205,157,159,222,184,52,47,241,201,123,65,24,44,55,215,177,168,250,179,115,190,227,123,158,163,179,224,69,196,66,207,254,243,101,221,193,140,250,4,28,222,52,96,138,160,33,218,64,118,214,234,201,152,148,91,178,111,107,144,142,6,182,102,72,188,34,213,181,26,223,58,255,103,81,17,47,169,11,245,224,123,148,215,237,186,107,75,152,90,202,166,22,149,197,5,246,238,78,76,229,106,199,94,127,195,0,45,82,6,159,103,96,138,231,71,46,107,59,216,39,43,12,221,27,214,56,155,145,66,187,169,250,235,78,211,179,239,183,198,163,93,5,196,24,174,143,225,106,139,89,98,13,127,207,184,194,30,1,165,198,169,8,197,118,86,163,221,138,23,209,61,116,79,99,233,43,130,60,244,85,229,243,172,123,148,200,120,192,127,211,52,11,159,41,95,212,230,188,169,156,137,29,212,12,148,168,148,133,243,44,241,139,127,24,246,220,227,125,209,97,60,52,162,192,146,49,161,92,138,112,189,128,59,126,125,46,207,60,79,231,174,152,209,68,223,205,2,38,14,91,116,159,255,28,27,178,248,164,104,158,79,69,214,234,157,12,75,163,83,253,245,202,61,213,176,6,197,230,29,208,166,253,194,254,235,29,141,241,70,249,15,62,0,148,163,135,52,122,40,96,87,31,179,152,51,216,133,184,122,198,203,60,115,218,191,193,16,178,25,148,252,112,104,103,252,36,92,221,28,179,43,199,198,151,128,100,252,217,161,249,34,201,172,118,52,180,252,104,7,223,44,116,102,212,21,40,224,184,55,163,210,21,207,161,239,51,54,155,41,133,18,67,48,3,165,130,251,4,79,214,57,72,130,157,212,144];function O(e,t,n){var r=e.gl,i=5,o=.1,a=.5,s=175/180*3.141593,c=115/180*3.141593,d=173/180*3.141593,u=116/180*3.141593,l=2.04203545,f=0,p=0,g=0,m=[],h=[0,1,3,4,6,7,9,10,12,13,15,16,18,19,21,22,24,26,29,31,34,36,39,41,44,46,49,51,54,56,59,61,64,65,66,67,68,69,70,72,73,74,75,76,77,79,80,81,82,83,84,85,87,88,89,90,91,92,94,95,96,97,98,99,101,102,103,104,105,106,107,109,110,111,112,113,114,116,117,118,119,120,121,123,124,125,126,127,128,129,131,132,133,134,135,136,138,139,140,141,142,143,145,146,147,148,149,150,151,153,154,155,156,157,158,160,161,162,163,164,165,166,168,169,170,171,172,173,175,176,177,178,179,180,182,183,184,185,186,187,188,190,191,192,193,194,195,197,198,199,200,201,202,204,205,206,207,208,209,210,212,213,214,215,216,217,219,220,221,222,223,224,226,226,226,227,227,227,228,228,228,229,229,229,230,230,231,231,231,232,232,232,233,233,233,234,234,235,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241,241,242,242,243,243,243,244,244,244,245,245,245,246,246,246,247,247,247,248,248,248,249,249,249,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254,255],E=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,35,36,37,39,40,42,43,44,46,47,49,50,51,53,54,56,57,58,59,61,62,63,64,66,67,68,69,71,72,73,74,76,77,78,79,81,82,83,84,86,87,88,90,91,92,93,95,96,97,98,100,101,102,103,105,106,107,108,110,111,112,113,115,116,117,118,120,121,122,124,125,126,127,129,130,131,132,134,135,136,137,139,140,141,142,144,145,146,147,149,150,151,152,154,155,156,158,159,160,161,163,164,165,166,168,169,170,171,173,174,175,176,178,179,180,181,183,184,185,186,188,189,190,192,193,194,195,197,198,199,200,202,203,204,205,207,208,209,210,212,213,214,215,217,218,219,220,222,223,224,226,226,226,227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,243,243,243,244,244,244,245,245,245,246,246,246,247,247,247,248,248,248,249,249,249,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254,255],S=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,43,44,45,46,47,48,50,51,52,53,54,55,56,58,59,60,61,62,63,65,66,67,68,69,70,72,73,74,76,77,78,80,81,83,84,85,87,88,89,91,92,94,95,96,98,99,100,102,103,105,106,107,109,110,111,113,114,116,117,118,120,121,122,124,125,127,128,129,131,132,133,135,136,138,139,140,142,143,144,146,147,149,150,151,153,154,155,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,192,193,193,194,195,195,196,197,197,198,199,199,200,201,201,202,203,203,204,205,205,206,207,207,208,209,209,210,211,211,212,213,213,214,215,215,216,217,217,218,219,219,220,221,221,222,223,223,224,225,225,226,227,227,228,229,229,230,231,231,232,233,233,234,235,235,236,237,237,238,239,239,240,241,241,242,243,243,244,245,245,246,247,247,248,249,249,250,251,251,252,253,253,254,255];this.program=v(r,A),this.setUniforms=function(){var t=r.getUniformLocation(this.program,"u_flipY"),n=r.getUniformLocation(this.program,"u_denoiseLevel");r.uniform1f(n,i),r.uniform1f(t,1);var h=r.getUniformLocation(this.program,"light");r.uniform1f(h,o);var v=r.getUniformLocation(this.program,"redness");r.uniform1f(v,a);var E=r.getUniformLocation(this.program,"skin_he_max"),S=r.getUniformLocation(this.program,"skin_he_min"),_=r.getUniformLocation(this.program,"skin_hc_max"),y=r.getUniformLocation(this.program,"skin_hc_min"),R=r.getUniformLocation(this.program,"skin_hc_axis"),T=r.getUniformLocation(this.program,"facts_rotate_c"),I=r.getUniformLocation(this.program,"facts_rotate_le"),b=r.getUniformLocation(this.program,"facts_rotate_ge");r.uniform1f(E,s),r.uniform1f(S,c),r.uniform1f(_,d),r.uniform1f(y,u),r.uniform1f(R,l),r.uniform1f(T,f),r.uniform1f(I,p),r.uniform1f(b,g);var A=r.getUniformLocation(this.program,"u_originImage");r.activeTexture(r.TEXTURE2),r.bindTexture(r.TEXTURE_2D,e.inputTexture),r.uniform1i(A,2);for(var O=["lighten_lut"],C=[r.TEXTURE3],N=0;N<O.length;N++){var w=r.getUniformLocation(this.program,O[N]);r.activeTexture(C[N]),r.bindTexture(r.TEXTURE_2D,m[N]),r.uniform1i(w,N+3)}},this.setParameters=function(e){void 0!==e.denoiseLevel&&(i=e.denoiseLevel),void 0!==e.lightLevel&&(o=e.lightLevel),void 0!==e.rednessLevel&&(a=e.rednessLevel,this._updateRedness(a)),void 0!==e.lighteningContrastLevel&&this._updateLut(e.lighteningContrastLevel)},this._updateRedness=function(e){var t,n,r=3.141593,i=e,o=i;i>1&&(i=1),i<0&&(i=0),o>1&&(o=1),o<0&&(o=0),f=.8*i,o<.8&&(o=0),(l=(117-4*o)/180*r)<(u=(116-4*o)/180*r)&&(l=u),u<r/2&&(u=r/2),l<r/2&&(l=r/2),(c=(115-4*o)/180*r)<r/2&&(c=r/2),(d=173/180*r)>r&&(d=r),l>r&&(l=r),(s=175/180*r)>r&&(s=r),n=d-l,g=(t=s-d)>.01?f*n/t:f,n=l-u,p=(t=u-c)>.01?f*n/t:f},this._updateLut=function(e){var t=null;0==e&&(t=E),1==e&&(t=S),2==e&&(t=h);for(var n=[new Uint8Array(t)],i=[256],o=[1],a=0;a<n.length;a++)r.bindTexture(r.TEXTURE_2D,m[a]),r.texImage2D(r.TEXTURE_2D,0,r.LUMINANCE,i[a],o[a],0,r.LUMINANCE,r.UNSIGNED_BYTE,n[a])},this._init=function(){var e=null;e=E;for(var t=[new Uint8Array(e)],n=[256],i=[1],o=0;o<t.length;o++){var a=r.createTexture();r.bindTexture(r.TEXTURE_2D,a),r.texImage2D(r.TEXTURE_2D,0,r.LUMINANCE,n[o],i[o],0,r.LUMINANCE,r.UNSIGNED_BYTE,t[o]),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.LINEAR),m.push(a)}},this._init()}var C=!1;function N(){this.programs=[];var e=this,t=null,n=null;e.gl=null,e.inputTexture=null;var r=[],i=[],o=0,a=0;e._initGl=function(n,s){e.inputTexture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,e.inputTexture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR);for(var c=0;c<4;c++){var d=t.createTexture();t.bindTexture(t.TEXTURE_2D,d),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),c<2?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n,s,0,t.RGBA,t.UNSIGNED_BYTE,null):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,s,n,0,t.RGBA,t.UNSIGNED_BYTE,null);var u=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,u),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,d,0),r.push(d),i.push(u)}t.viewport(0,0,n,s),o=n,a=s},e.render=function(s){if(t){var c=0;a==s.videoWidth&&o===s.videoHeight&&(c=2),t.viewport(0,0,s.videoWidth,s.videoHeight),t.bindTexture(t.TEXTURE_2D,e.inputTexture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,s);for(var d=C?e.programs.length-1:0,u=0;u<=d;u++){var l=e.programs[u].program;t.useProgram(l);var f=t.getUniformLocation(l,"u_image");e.programs[u].setUniforms(),t.bindFramebuffer(t.FRAMEBUFFER,i[c+u%2]),t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT),t.drawArrays(t.TRIANGLES,0,6),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,r[c+u%2]),t.uniform1i(f,0)}t.useProgram(n);var p=t.getUniformLocation(n,"u_flipY");t.uniform1f(p,-1),t.bindFramebuffer(t.FRAMEBUFFER,null),t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT),t.drawArrays(t.TRIANGLES,0,6)}},e.setEnableBeauty=function(e){C=e},e.init=function(r,i,o){if("undefined"==typeof WebGLRenderingContext)throw new Error("NOT_SUPPORT");t=o.getContext("webgl"),e.gl=t,e._initGl(r,i),e.programs.push(new S(this,r,i)),e.programs.push(new y(this,r,i)),e.programs.push(new T(this,r,i)),e.programs.push(new b(this,r,i)),e.programs.push(new O(this,r,i)),n=e.programs[0].program},e.release=function(){e.gl=null,t=null,n=null,e.inputTexture=null,e.programs=[],r=[],i=[]},e.setDenoiseLevel=function(t){e.programs.forEach((function(e){e.setParameters&&e.setParameters({denoiseLevel:t})}))},e.setLightLevel=function(t){e.programs.forEach((function(e){e.setParameters&&e.setParameters({lightLevel:t})}))},e.setRednessLevel=function(t){e.programs.forEach((function(e){e.setParameters&&e.setParameters({rednessLevel:t})}))},e.setContrastLevel=function(t){e.programs.forEach((function(e){e.setParameters&&e.setParameters({lighteningContrastLevel:t})}))},e.setSize=function(t,n){e.programs.forEach((function(e){e.setSize&&e.setSize(t,n)}))}}N._instance=null,N.getInstance=function(){return N._instance||(N._instance=new N),N._instance};t.a={addVideoEffectCapability:function(e){e.videoEffect={canvas:null,video:null,fps:30,stopChromeBackgroundLoop:null,enableBeauty:!1,denoiseLevel:5,lightLevel:.35,rednessLevel:.5,lighteningContrastLevel:1,videoContextInited:!1,originVideoTrack:null,canvasVideoTrack:null,ctx:null},e._initVideoContext=function(){if(e.videoEffect.videoContextInited)throw new Error("Failed to init video context. Already inited");if(!e.stream)throw new Error("Failed to init video context. Local Stream not initialized");e.videoEffect.originVideoTrack=e.stream.getVideoTracks()[0],e.attributes&&e.attributes.maxFrameRate&&(e.videoEffect.fps=e.attributes.maxFrameRate),e.videoEffect.videoContextInited=!0},e._renderWithWebGL=function(t){return new Promise((function(n){e.videoEffect.canvas||(e.videoEffect.canvas=document.createElement("canvas")),e.videoEffect.video||(e.videoEffect.video=document.createElement("video")),e.videoEffect.video.setAttribute("autoplay",""),e.videoEffect.video.setAttribute("muted",""),e.videoEffect.video.muted=!0,e.videoEffect.video.setAttribute("playsinline",""),e.videoEffect.video.setAttribute("style","display:none"),e.videoEffect.video.srcObject=t;var r=t.getVideoTracks()[0].getSettings(),i=r.width,o=r.height;e.videoEffect.canvas.setAttribute("width",i),e.videoEffect.canvas.setAttribute("height",o),e.videoEffect.video.setAttribute("width",i),e.videoEffect.video.setAttribute("height",o);var a=N.getInstance();a.init(e.videoEffect.video.width,e.videoEffect.video.height,e.videoEffect.canvas),a.setDenoiseLevel(e.videoEffect.denoiseLevel),a.setLightLevel(e.videoEffect.lightLevel),a.setRednessLevel(e.videoEffect.rednessLevel),a.setContrastLevel(e.videoEffect.lighteningContrastLevel);e.videoEffect.video.addEventListener("playing",(function t(){var r=e.videoEffect.canvas.captureStream(e.videoEffect.fps);e.videoEffect.video.removeEventListener("playing",t,!0),n([r.getVideoTracks()[0],e.videoEffect.video])}),!0),e.videoEffect.video.play()}))},e._disableEffect=function(){e.videoEffect.videoContextInited||e._initVideoContext();var t=e.videoEffect.originVideoTrack;if(!t)return f.default.warning("Video track is null, fail to disable video effect!"),Promise.resolve();if(e.pc&&e.pc.peerConnection&&e.pc.peerConnection){var n=(e.pc.peerConnection&&e.pc.peerConnection.getSenders()).find((function(e){return e&&e.track&&"video"==e.track.kind}));if(n&&n.replaceTrack&&t)return n.replaceTrack(t)}return Promise.resolve()},e._releaseEffect=function(){var t;return t=e.videoEffect.enableBeauty?e._disableEffect():Promise.resolve(),N.getInstance().release(),e.videoEffect.videoContextInited=!1,e.videoEffect.canvasVideoTrack=null,t},e._enableEffect=function(){return e.videoEffect.videoContextInited||e._initVideoContext(),e.videoEffect.originVideoTrack?e.videoEffect.canvasVideoTrack?(e._showEffectInLocalPlayer(),e._replaceWithCanvasTrack()):e._renderWithWebGL(e.stream).then((function(t){var n=c()(t,2),r=n[0],i=n[1];e.videoEffect.canvasVideoTrack=r;var o=N.getInstance();return requestAnimationFrame((function t(){e.videoEffect.enableBeauty&&o.render(i),e.videoEffect.videoContextInited&&requestAnimationFrame(t)})),d.isChrome()&&document.addEventListener("visibilitychange",(function(){document.hidden;document.hidden?e.videoEffect.stopChromeBackgroundLoop=function(e,t){var n=1/t,r=new AudioContext,i=r.createGain();i.gain.value=0,i.connect(r.destination),function t(){var a=r.createOscillator();a.onended=t,a.connect(i),a.start(0),a.stop(r.currentTime+n),e(r.currentTime),o&&(a.onended=function(){r.close()})}();var o=!1;return function(){o=!0}}((function(){e.videoEffect.enableBeauty&&o.render(i)}),e.videoEffect.fps):e.videoEffect.stopChromeBackgroundLoop&&(e.videoEffect.stopChromeBackgroundLoop(),e.videoEffect.stopChromeBackgroundLoop=null)}),!1),e._showEffectInLocalPlayer(),e._replaceWithCanvasTrack()})):(f.default.warning("Video track is null, fail to enable video effect!"),Promise.resolve())},e._showEffectInLocalPlayer=function(){if(e.player){var t=e.player.div.children[0];if("none"!==t.style.display&&(e.player.div.appendChild(e.videoEffect.canvas),"video"===t.tagName.toLowerCase())){var n=t.getAttribute("style");e.videoEffect.canvas.setAttribute("style",n),"none"!==t.style.display&&(t.style.display="none")}}},e._removeEffectFromLocalPlayer=function(){if(e.player&&e.player.div&&e.videoEffect.enableBeauty&&e.videoEffect.canvas){e.player.div.removeChild(e.videoEffect.canvas);var t=e.player.div.children[0];"video"===t.tagName.toLowerCase()&&(e.videoEffect.canvas.style.display="none",t.style.display="block")}},e._replaceWithCanvasTrack=function(){var t=null;e.pc&&e.pc.peerConnection&&e.pc.peerConnection&&(t=(e.pc.peerConnection&&e.pc.peerConnection.getSenders()).find((function(e){return e&&e.track&&"video"==e.track.kind})));return t&&t.replaceTrack&&e.videoEffect.canvasVideoTrack?t.replaceTrack(e.videoEffect.canvasVideoTrack):Promise.resolve()},e.setBeautyEffectOptions=function(){var t=a()(i.a.mark((function t(n,r){var o,a=arguments;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(Object(l.checkValidBoolean)(n,"enabled"),o=N.getInstance(),e.videoEffect.enableBeauty==n){t.next=14;break}if(o.setEnableBeauty(n),!n){t.next=9;break}return t.next=7,e._enableEffect();case 7:t.next=12;break;case 9:return e._removeEffectFromLocalPlayer(),t.next=12,e._releaseEffect();case 12:e.videoEffect.enableBeauty=n,u.report.reportApiInvoke(e.sid,{callback:null,options:a,name:"Stream.setBeautyEffectOptions",tag:"tracer"});case 14:if(n){t.next=16;break}return t.abrupt("return");case 16:if(!r){t.next=20;break}Object(l.checkValidObject)(r,"options"),t.next=21;break;case 20:return t.abrupt("return");case 21:if(void 0!==r.smoothnessLevel&&(Object(l.checkValidFloatNumber)(r.smoothnessLevel,"smoothnessLevel",0,1),e.videoEffect.denoiseLevel=10*r.smoothnessLevel,e.videoEffect.denoiseLevel<.1&&(e.videoEffect.denoiseLevel=.1),o.setDenoiseLevel(e.videoEffect.denoiseLevel)),void 0!==r.lighteningLevel&&(Object(l.checkValidFloatNumber)(r.lighteningLevel,"lighteningLevel",0,1),e.videoEffect.lightLevel=r.lighteningLevel/2,e.videoEffect.lightLevel<.01&&(e.videoEffect.lightLevel=.01),o.setLightLevel(e.videoEffect.lightLevel)),void 0!==r.rednessLevel&&(Object(l.checkValidFloatNumber)(r.rednessLevel,"rednessLevel",0,1),e.videoEffect.rednessLevel=r.rednessLevel,e.videoEffect.rednessLevel<.01&&(e.videoEffect.rednessLevel=.01),o.setRednessLevel(e.videoEffect.rednessLevel)),void 0===r.lighteningContrastLevel){t.next=29;break}if(0===r.lighteningContrastLevel||1===r.lighteningContrastLevel||2===r.lighteningContrastLevel){t.next=27;break}throw new Error("Invalid lighteningContrastLevel: The value should be 0, 1 or 2.");case 27:e.videoEffect.lighteningContrastLevel=parseFloat(r.lighteningContrastLevel),o.setContrastLevel(e.videoEffect.lighteningContrastLevel);case 29:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()},restoreVideoEffect:function(e){return e.videoEffect.enableBeauty?e._enableEffect():Promise.resolve()},disableVideoEffect:function(e){return e._releaseEffect?e._releaseEffect():Promise.resolve()},applyEffectInPlayer:function(e){e.videoEffect.enableBeauty&&e.videoEffect.canvas&&e._showEffectInLocalPlayer()},removeEffectFromLocalPlayer:function(e){e._removeEffectFromLocalPlayer()},replaceWithCanvasTrack:function(e){return e.videoEffect.enableBeauty?e._replaceWithCanvasTrack():Promise.resolve()},checkVideoEffectEnabled:function(e){if(e.videoEffect.enableBeauty&&e.videoEffect&&e.videoEffect.videoContextInited){return f.default.error("Operation not permitted: ".concat("VIDEO_EFFECT_ENABLED")),"VIDEO_EFFECT_ENABLED"}return!1}}},function(e,t){function n(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(i,o){var a=e.apply(t,r);function s(e){n(a,i,o,s,c,"next",e)}function c(e){n(a,i,o,s,c,"throw",e)}s(void 0)}))}}},function(e,t,n){"use strict";var r=n(38),i=Object.prototype.toString;function o(e){return"[object Array]"===i.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function d(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:a,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:d,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)d(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,i=arguments.length;r<i;r++)d(arguments[r],n);return t},extend:function(e,t,n){return d(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(7),i=n.n(r),o=n(8),a=n(0),s=n(5);function c(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i,o=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){a=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(a)throw i}}}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u=new function(){var e=Object(o.b)();return e.devicesHistory={},e.states={UNINIT:"UNINIT",INITING:"INITING",INITED:"INITED"},e.state=e.states.UNINIT,e.deviceStates={ACTIVE:"ACTIVE",INACTIVE:"INACTIVE"},e.deviceReloadTimer=null,e._init=function(t,n){e.state=e.states.INITING,e.devicesHistory={},e._reloadDevicesInfo((function(){e.state=e.states.INITED,e.dispatchEvent({type:"inited"}),t&&t()}),(function(t){a.default.warning("Device Detection functionality cannot start properly."),e.state=e.states.UNINIT,n&&n(t)}))},e._enumerateDevices=function(e,t){if(!navigator.mediaDevices||!navigator.mediaDevices.enumerateDevices)return a.default.warning("enumerateDevices() not supported."),t&&t("enumerateDevices() not supported");navigator.mediaDevices.enumerateDevices().then((function(t){e&&setTimeout((function(){e(t)}),0)})).catch((function(e){t&&t(e)}))},e._reloadDevicesInfo=function(t,n){var r=[];e._enumerateDevices((function(n){var o=Date.now();for(var s in n.forEach((function(t){var n=e.devicesHistory[t.deviceId];if((n?n.state:e.deviceStates.INACTIVE)!=e.deviceStates.ACTIVE){var i=n||{initAt:o};i.device=t,i.state=e.deviceStates.ACTIVE,r.push(i),e.devicesHistory[t.deviceId]=i}e.devicesHistory[t.deviceId].lastReloadAt=o})),e.devicesHistory){var c=e.devicesHistory[s];c&&c.state==e.deviceStates.ACTIVE&&c.lastReloadAt!==o&&(c.state=e.deviceStates.INACTIVE,r.push(c)),c.lastReloadAt=o}e.state==e.states.INITED&&r.forEach((function(t){var n=i()({},t);switch(t.device.kind){case"audioinput":n.type="recordingDeviceChanged";break;case"audiooutput":n.type="playoutDeviceChanged";break;case"videoinput":n.type="cameraChanged";break;default:a.default.warning("Unknown device change",n),n.type="unknownDeviceChanged"}e.dispatchEvent(n)})),t&&t()}),n)},e.getDeviceById=function(t,n,r){e.getDevices((function(e){for(var i=0;i<e.length;i++){var o=e[i];if(o&&o.deviceId===t)return n&&n(o)}return r&&r()}))},e.searchDeviceNameById=function(t){var n=e.devicesHistory[t];return n?n.device.label||n.device.deviceId:null},e.getDevices=function(t,n){e._enumerateDevices(t,(function(e){n&&n(e.name+": "+e.message)}))},e.getVideoCameraIdByLabel=function(t,n,r){e.getCameras((function(e){var i,o=c(e);try{for(o.s();!(i=o.n()).done;){var a=i.value;if(a.label===t)return n&&n(a.deviceId)}}catch(e){o.e(e)}finally{o.f()}return r&&r(s.default.NOT_FIND_DEVICE_BY_LABEL)}),r)},e.getRecordingDevices=function(t,n){return e._enumerateDevices((function(e){var n=e.filter((function(e){return"audioinput"==e.kind}));t&&t(n)}),(function(e){n&&n(e)}))},e.getPlayoutDevices=function(t,n){return e._enumerateDevices((function(e){var n=e.filter((function(e){return"audiooutput"==e.kind}));t&&t(n)}),(function(e){n&&n(e)}))},e.getCameras=function(t,n){return e._enumerateDevices((function(e){var n=e.filter((function(e){return"videoinput"==e.kind}));t&&t(n)}),(function(e){n&&n(e)}))},e._init((function(){navigator.mediaDevices&&navigator.mediaDevices.addEventListener&&navigator.mediaDevices.addEventListener("devicechange",(function(){e._reloadDevicesInfo()})),e.deviceReloadTimer=setInterval(e._reloadDevicesInfo,5e3)})),e}},function(e,t,n){"use strict";n.r(t),n.d(t,"_getReconnectCSTimer",(function(){return A})),n.d(t,"_setClientConnectionStateRecord",(function(){return O})),n.d(t,"getGatewayList",(function(){return N})),n.d(t,"getUserAccount",(function(){return L}));var r=n(11),i=n.n(r),o=n(12),a=n.n(o),s=n(17),c=n.n(s),d=n(2),u=(n(4),n(0)),l=n(14),f=n(1),p=n(5),g=function(e,t){var n=!1,r=0,i=Object(d.getParameter)("PROXY_CS"),o=Object(d.getParameter)("CHOOSE_SERVER_FRAGEMENT_LENGTH"),a=0,s={command:"convergeAllocateEdge",sid:e.sid,appId:e.appId,token:e.token,uid:e.uid,cname:e.cname,ts:Math.floor(Date.now()/1e3),version:d.VERSION,seq:0,requestId:1},c=function(c){var d=(new Date).getTime();m("https://"+c+"/api/v1",s,(function(s,p){if(s)return u.default.debug("["+e.clientId+"] Request proxy server failed: ",s),r++,f.report.requestProxyAppCenter(e.sid,{lts:d,succ:!1,APAddr:c,workerManagerList:null,ec:JSON.stringify(s),response:JSON.stringify({err:s,res:p})}),r>=i.length&&t&&t("Get proxy server failed: request all failed"),void(!(r%o)&&r<i.length&&(a++,l()));if(!n)if((p=JSON.parse(p)).json_body){var g=JSON.parse(p.json_body);if(u.default.debug("["+e.clientId+"] App return:",g.servers),200!==g.code){s="Get proxy server failed: response code ["+g.code+"], reason [ "+g.reason+"]";r++,u.default.debug("["+e.clientId+"] "+s),f.report.requestProxyAppCenter(e.sid,{lts:d,succ:!1,APAddr:c,workerManagerList:null,ec:s,response:JSON.stringify({err:s,res:p})}),r>=i.length&&t&&t(s),!(r%o)&&r<i.length&&(a++,l())}else{n=!0;var m=v(g.servers);f.report.requestProxyAppCenter(e.sid,{lts:d,succ:!0,APAddr:c,workerManagerList:JSON.stringify(m),ec:null,response:JSON.stringify({res:p})}),t&&t(null,m)}}else u.default.debug("["+e.clientId+"] Get proxy server failed: no json_body"),f.report.requestProxyAppCenter(e.sid,{lts:d,succ:!1,APAddr:c,workerManagerList:null,ec:"Get proxy server failed: no json_body",response:JSON.stringify({res:p})})}))},l=function(){for(var e=a*o,t=e;t<Math.min(i.length,e+o);t++){var n=i[t];c(n)}};l()},m=function(e,t,n){var r={service_name:"webrtc_proxy",json_body:JSON.stringify(t)};Object(l.post)(e,r,(function(e){n&&n(null,e)}),(function(e){n&&n(e)}),{"X-Packet-Service-Type":0,"X-Packet-URI":61})},h=function(e,t,n){var r=!1,i=0,o={command:"request",gatewayType:"http",appId:e.appId,cname:e.cname,uid:e.uid+"",sdkVersion:"2.3.1",sid:e.sid,seq:1,ts:+new Date,requestId:3,clientRequest:{appId:e.appId,cname:e.cname,uid:e.uid+"",sid:e.sid}};t.map((function(a){var s=(new Date).getTime();!function(e,t,n){Object(l.post)(e,t,(function(e){n&&n(null,e)}),(function(e){n&&n(e)}))}("https://"+a+":4000/v2/machine",o,(function(o,c){if(o)return u.default.debug("["+e.clientId+"] Request worker manager failed: ",o),i++,f.report.requestProxyWorkerManager(e.sid,{lts:s,succ:!1,workerManagerAddr:a,ec:JSON.stringify(o),response:JSON.stringify({res:c})}),void(i>=t.length&&n&&n("requeet worker manager server failed: request failed"));if(!r){if(!(c=JSON.parse(c)).serverResponse)return n&&n("requeet worker manager server failed: serverResponse is undefined");r=!0,f.report.requestProxyWorkerManager(e.sid,{lts:s,succ:!0,workerManagerAddr:a,ec:JSON.stringify(o),response:JSON.stringify({res:c})}),n&&n(null,{address:a,serverResponse:c.serverResponse})}}))}))},v=function(e){if(!e||[]instanceof Array==!1)return[];var t=[];return e.forEach((function(e){var n;e.address&&e.tcp?(e.address.match(/^[\.\:\d]+$/)?n="".concat(e.address.replace(/[^\d]/g,"-"),".edge.agora.io"):(u.default.info("["+joinInfo.clientId+"] "+"Cannot recognized as IP address ".concat(e.address,". Used As Host instead")),n="".concat(e.address,":").concat(e.tcp)),t.push(n)):u.default.error("["+joinInfo.clientId+"] Invalid address format ",e)})),t},E=n(21),S=function(e,t,n,r){var i=Object(d.getParameter)("WEBCS_DOMAIN").concat(Object(d.getParameter)("WEBCS_DOMAIN_BACKUP_LIST")),o=Object(d.getParameter)("PROXY_SERVER_TYPE3");i=i.map((function(e,t){return"".concat(o[(t+1)%o.length],"/ap/?url=").concat(e)}));var a,s=0,c=!0,g=Object(d.getParameter)("CHOOSE_SERVER_FRAGEMENT_LENGTH"),m=0,h=function(h){!function(e,t,n,r,i){var o=Date.now(),a=function(e,r){try{f.report.joinChooseServer2(n.sid,{lts:o,succ:!e,csAddr:t,serverList:r&&r.gateway_addr,cid:r&&r.cid+"",uid:r&&r.uid+"",ec:e,chooseServerIp:r&&r.detail&&r.detail[502]})}catch(e){}},s=function(r,i){var a=Date.now();try{f.report.joinWebProxyAP({lts:a,sid:n.sid,cname:n.cname,cid:n.cid,uid:n.uid,sucess:r?-1:1,elapse:a-o,eventType:e,apServerAddr:t,turnServerAddrList:JSON.stringify(i),errorCode:r||"0"})}catch(e){}},c=Object(d.getParameter)("AREA_SETTING").reduce((function(e,t,n){var r=Object(E.getAreaCodeByArea)(t);return r?0===n?r:"".concat(e,",").concat(r):e}),""),g={appid:n.token,client_ts:Date.now(),opid:133,sid:n.sid,request_bodies:[{uri:22,buffer:{cname:n.cname,detail:{11:c,6:n.stringUid},key:n.token,service_ids:[11,i?20:18],uid:n.uid||0}}]};t="https://".concat(t,"/api/v2/transpond/webrtc?v=2"),Object(l.postFormData)(t,g,(function(e){var o=function(e){return new RegExp(/10102\d{2}$/).test(e)?"NO_SERVICE_AVAILABLE":p.APErrorCode[e]||e};try{var c,l,f=JSON.parse(e);if(30===(f=f.response_body)[0].uri&&0!==f[0].buffer.code){var g=o(f[0].buffer.code);return s(g,f),r(g)}if(4096===f[0].buffer.flag?(l=f[0].buffer,c=f[1].buffer):(l=f[1].buffer,c=f[0].buffer),0!==c.code){g=o(c.code);return u.default.error("[".concat(n.clientId,"] requestProxyServer failed: ").concat(g)),s(g,c),r(g)}if(!c.edges_services||!c.edges_services instanceof Array)return s("UNEXPECTED_ERROR",c),r("UNEXPECTED_ERROR");var m=Object(d.getParameter)("GATEWAY_DOMAINS"),h=0;if(t.indexOf(m[1])>-1&&(h=1),0===c.edges_services.length)return s("EMPTY_PROXY_LIST",c),r("EMPTY_PROXY_LIST");var v=c.edges_services.map((function(e){if(e.ip)return e.ip=i?"".concat(e.ip.replace(/[^\d]/g,"-"),".").concat(m[h++%m.length]):"".concat(e.ip),e}));if(s(null,v),0!==l.code){g=o(l.code);return u.default.error("[".concat(n.clientId,"] requestChooseServer failed: ").concat(g)),a(g),r(g)}var E=[];m=Object(d.getParameter)("GATEWAY_DOMAINS"),h=0;if(t.indexOf(m[1])>-1&&(h=1),l.edges_services.forEach((function(e){var r;if(e.ip&&e.port){if(!e.ip.match(/^[\.\:\d]+$/))return u.default.info("["+n.clientId+"] "+"Cannot recognized as IP address ".concat(e.ip,". Used As Host instead")),void a("UNEXPECTED_IP");r="".concat(e.ip.replace(/[^\d]/g,"-"),".").concat(m[h++%m.length]);var i=Object(d.getParameter)("PROXY_SERVER_TYPE3");r=/sd-rtn/.test(t)?"".concat(i[0],"/ws/?h=").concat(r,"&p=").concat(e.port):"".concat(i[1],"/ws/?h=").concat(r,"&p=").concat(e.port),E.push(r)}else u.default.error("["+n.clientId+"] Invalid address format ",e)})),!E.length)return u.default.error("["+n.clientId+"] Empty Address response",f),a("EMPTY_ADDRESS_RESPONSE"),r("EMPTY_ADDRESS_RESPONSE");l.ticket=l.cert;var S={gateway_addr:E,uid:l.uid,cid:l.cid,vid:l.detail&&l.detail[8],res:l,detail:f.detail};a(null,S),r(null,{gatewayServers:S,turnServers:v})}catch(e){return u.default.error("[".concat(n.clientId,"] requestProxyServer failed with unexpected body "),e),s("UNEXPECTED_ERROR"),r("UNEXPECTED_ERROR")}}),(function(e,t){"timeout"===e.type?(s("REQUEST_PROXY_SERVER_TIME_OUT"),r("REQUEST_PROXY_SERVER_TIME_OUT")):(s("REQUEST_PROXY_SERVER_FAILED"),r("REQUEST_PROXY_SERVER_FAILED"))}))}(e,h,t,(function(e,r){e?(s++,u.default.error("[".concat(t.clientId,"] request ").concat(h," failed: ").concat(e)),e&&-1===p.JOIN_PROXY_RETRY_LIST.indexOf(e)&&(a=e),s===i.length&&(a||(a="RETRYABLE_ERROR"),n(a)),!(s%g)&&s<i.length&&(m++,v())):c&&(/sd-rtn/.test(r.gatewayServers.gateway_addr[0])?Object(d.setParameter)("NGINX",o[0]):Object(d.setParameter)("NGINX",o[1]),c=!1,n(null,r))}),r)},v=function(){for(var e=m*g,t=e;t<Math.min(i.length,e+g);t++){var n=i[t];h(n)}};v()},_=n(13),y=n(29),R=n.n(y),T=n(30),I={},b={},A=function(e){return I[e]},O=function(e,t){b[e]=t},C=function(e,t,n,r,i,o){var a=(new Date).getTime(),s=t,c="";t.multiIP&&t.multiIP.gateway_ip&&(c={vocs_ip:[t.multiIP.uni_lbs_ip],vos_ip:[t.multiIP.gateway_ip]});var g=Object(d.getParameter)("AREA_SETTING").reduce((function(e,t,n){var r=Object(E.getAreaCodeByArea)(t);return r?0===n?r:"".concat(e,",").concat(r):e}),""),m={appid:t.token,opid:133,client_ts:+new Date,sid:t.sid,request_bodies:[{uri:22,buffer:{cname:t.cname,detail:{5:c?JSON.stringify(c):void 0,6:t.stringUid,11:g},key:t.token,service_ids:[11],uid:t.uid||0}}]};Object(l.postFormData)(e,m,(function(i){try{var c=JSON.parse(i),l=(c=c.response_body[0].buffer).code}catch(e){var g="requestChooseServer failed with unexpected body "+i;return u.default.error("["+s.clientId+"]",g),r(g,void 0,void 0,o)}if(l)return E=new RegExp(/10102\d{2}$/).test(l)?"NO_SERVICE_AVAILABLE":p.APErrorCode[c.code]||l,f.report.joinChooseServer(t.sid,{lts:a,succ:!1,csAddr:e,serverList:null,ec:E,chooseServerIp:c&&c.detail&&c.detail[502]}),r("Get server node failed ["+E+"]",e,E,o);var m=[],h=Object(d.getParameter)("GATEWAY_DOMAINS"),v=0;if(e.indexOf(h[1])>-1&&(v=1),c.edges_services.forEach((function(e){var t;e.ip&&e.port?(e.ip.match(/^[\.\:\d]+$/)?t="".concat(e.ip.replace(/[^\d]/g,"-"),".").concat(h[v++%h.length],":").concat(e.port):(u.default.info("["+s.clientId+"] "+"Cannot recognized as IP address ".concat(e.ip,". Used As Host instead")),t="".concat(e.ip,":").concat(e.port)),m.push(t)):u.default.error("["+s.clientId+"] Invalid address format ",e)})),!m.length){u.default.error("["+s.clientId+"] Empty Address response",c);var E="EMPTY_ADDRESS_RESPONSE";return f.report.joinChooseServer(t.sid,{lts:a,succ:!1,csAddr:e,serverList:null,ec:E,chooseServerIp:c&&c.detail&&c.detail[502]}),r("Get server node failed ["+E+"]",e,E,o)}c.ticket=c.cert;var S={gateway_addr:m,uid:c.uid,cid:c.cid,vid:c.detail&&c.detail[8],res:c,uni_lbs_ip:c.detail};return n(S,e)}),(function(e,n){"timeout"===e.type?(f.report.joinChooseServer(t.sid,{lts:a,succ:!1,csAddr:n,serverList:null,ec:"timeout"}),r("Connect choose server timeout",n,void 0,o)):(f.report.joinChooseServer(t.sid,{lts:a,succ:!1,csAddr:n,serverList:null,ec:e.httpErrorCode||"server_wrong"}),r("Connect choose server error",n,void 0,o))}))},N=function(e,t,n){var r=!1,i=null,o=1,a=1,s=e.clientId,c=function t(a,c){if(!r){var l=[];!function(e,t,n){var r,i=(new Date).getTime(),o=!1,a=0,s=0,c=Object(d.getParameter)("WEBCS_DOMAIN"),l=c.length,g=Object(d.getParameter)("WEBCS_DOMAIN_BACKUP_LIST"),m=g.length,h=Object(d.getParameter)("CHOOSE_SERVER_FRAGEMENT_LENGTH"),v=0,S=0,_=function(n,r){var a;try{a=n.res.detail[8]}catch(t){u.default.debug("["+e.clientId+"] get vid failed",t)}if(o)f.report.joinChooseServer(e.sid,{lts:i,succ:!0,csAddr:r,serverList:n.gateway_addr,cid:n.cid+"",uid:n.uid+"",ec:null,vid:a,chooseServerIp:n.res&&n.res.detail&&n.res.detail[502]},!1);else{if(clearTimeout(I),o=!0,e.proxyServer)for(var s=n.gateway_addr,c=0;c<s.length;c++){var d=s[c].split(":");n.gateway_addr[c]=e.proxyServer+"/ws/?h="+d[0]+"&p="+d[1]}t(n),f.report.joinChooseServer(e.sid,{lts:i,succ:!0,csAddr:r,serverList:n.gateway_addr,cid:n.cid+"",uid:n.uid+"",ec:null,vid:a,chooseServerIp:n.res&&n.res.detail&&n.res.detail[502]},!0)}},y=function(t,i,o,c){"domain"===c&&a++,"backup"===c&&s++,u.default.error("["+e.clientId+"]",t,i,o),o&&-1===p.JOIN_CS_RETRY_LIST.indexOf(o)&&(r=o),a===l&&s===m&&n(r),"domain"===c&&!(a%h)&&a<l&&(v++,R()),"backup"===c&&!(s%h)&&s<m&&(S++,T())},R=function t(){for(var n=v*h,r=n;r<Math.min(l,n+h);++r){var i;if("string"==typeof c[r]){var o=c[r];i=e.proxyServer?"https://".concat(e.proxyServer,"/ap/?url=").concat(o+"/api/v2/transpond/webrtc?v=2"):"https://".concat(o,"/api/v2/transpond/webrtc?v=2");var s=Object(E.getAreaCodeByWebCS)(o);u.default.debug("["+e.clientId+"] "+"Connect to choose_server: ".concat(i,", ").concat(s)),C(i,e,_,y,0,"domain")}else a++,u.default.error("["+e.clientId+"] Invalid Host",c[r]),r===n+h-1&&r<l-1-1&&(v++,t())}};R();var T=function t(){if(!o)for(var n=S*h,r=n;r<Math.min(m,n+h);r++){var i;if("string"==typeof g[r]){var a=g[r];i=e.proxyServer?"https://".concat(e.proxyServer,"/ap/?url=").concat(a+"/api/v2/transpond/webrtc?v=2"):"https://".concat(a,"/api/v2/transpond/webrtc?v=2");var c=Object(E.getAreaCodeByWebCS)(a);u.default.debug("["+e.clientId+"] "+"Connect to backup_choose_server: ".concat(i,", ").concat(c)),C(i,e,_,y,0,"backup")}else s++,u.default.error("["+e.clientId+"] Invalid Host",g[r]),r===n+h-1&&r<g-1-1&&(v++,t())}},I=setTimeout(T,1e3)}(e,(function(t){r=!0,!0,l=t,clearTimeout(i),b[s]!==_.a.DISCONNECTED&&b[s]!==_.a.DISCONNECTING?c&&c(l,null):u.default.debug("[".concat(e.clientId,"] Request gateway list success when connection state is ").concat(b[s]))}),(function(r){if(r)return u.default.info("["+e.clientId+"] Join failed: "+r),void(n&&n(r));if(b[s]===_.a.DISCONNECTED||b[s]===_.a.DISCONNECTING)return u.default.debug("[".concat(e.clientId,"] Request gateway list falied when connection state is ").concat(b[s])),void(n&&n("OPERATION_ABORT"));u.default.debug("["+e.clientId+"] Request gateway list will be restart in "+o+"s"),i=setTimeout((function(){t(a,c)}),1e3*o),I[s]=i;var l=Object(d.getParameter)("AP_BACKOFF_MAX_TIME");o=o>=l?l:2*o}))}},l=function n(){!function(e,t){g(e,(function(n,r){if(n)return t&&t(n);u.default.debug("["+e.clientId+"] getProxyServerList: ",r),h(e,r,t)}))}(e,(function(r,o){if(r){u.default.debug("["+e.clientId+"]",r),u.default.debug("["+e.clientId+"] Request proxy will be restart in "+a+"s"),i=setTimeout((function(){n()}),1e3*a),I[s]=i;var l=Object(d.getParameter)("AP_BACKOFF_MAX_TIME");a=a>=l?l:2*a}else{clearTimeout(i);var p=o.address;e.proxyServer=p;var g={mode:"manual",url:o.address,tcpport:o.serverResponse.tcpport||"3433",udpport:o.serverResponse.udpport||"3478",username:o.serverResponse.username||"test",credential:o.serverResponse.password||Object(d.getParameter)("TURN_SERVER_PASSWORD"),forceturn:!0};g.tcpport+="",g.udpport+="",e.turnServers=[],e.turnServers.push(g),f.report.setProxyServer(p),u.default.setProxyServer(p),c(p,t)}}))};e.useProxyServer?1==e.proxyServerType?l():2==e.proxyServerType?function n(){!function(e,t){g(e,(function(n,r){return n?t&&t(n):(u.default.debug("["+e.clientId+"] getProxyServerList: ",r),t&&t(null,{address:r[0],serverResponse:{tcpport:"443",udpport:"3478",username:"test",password:"111111"}}))}))}(e,(function(r,o){if(r)return u.default.debug("["+e.clientId+"]",r),u.default.debug("["+e.clientId+"] Request proxy will be restart in "+a+"s"),i=setTimeout((function(){n()}),1e3*a),I[s]=i,void(a=a>=3600?3600:2*a);clearTimeout(i);var l=Object(d.getParameter)("PROXY_SERVER_TYPE2");e.proxyServer=l;var p={mode:"manual",url:o.address,tcpport:o.serverResponse.tcpport||"3433",udpport:o.serverResponse.udpport||"3478",username:o.serverResponse.username||"test",credential:o.serverResponse.password||"111111",forceturn:!0};p.tcpport+="",p.udpport+="",e.turnServers=[],e.turnServers.push(p),f.report.setProxyServer(l),u.default.setProxyServer(l),c(l,t)}))}():3==e.proxyServerType?function r(){S("proxy3",e,(function(o,c){if(o)return"RETRYABLE_ERROR"!==o?n&&n(o):(u.default.debug("["+e.clientId+"]",o),u.default.debug("["+e.clientId+"] Request proxy will be restart in "+a+"s"),i=setTimeout((function(){r()}),1e3*a),I[s]=i,void(a=a>=3600?3600:2*a));var l=c.gatewayServers,p=c.turnServers;clearTimeout(i);var g=Object(d.getParameter)("NGINX");e.proxyServer=g,e.turnServers=[];var m=Object(T.randomString)();p.map((function(t){var n={mode:"manual",url:t.ip,tcpport:"",udpport:t.port||"3478",username:t.username||m,credential:t.password||R()(m).toString(),forceturn:!0};n.tcpport+="",n.udpport+="",e.turnServers.push(n)})),f.report.setProxyServer(g),u.default.setProxyServer(g),t(l)}))}():4==e.proxyServerType?function r(){S("proxy4",e,(function(o,c){if(o)return"RETRYABLE_ERROR"!==o?n&&n(o):(u.default.debug("["+e.clientId+"]",o),u.default.debug("["+e.clientId+"] Request proxy will be restart in "+a+"s"),i=setTimeout((function(){r()}),1e3*a),I[s]=i,void(a=a>=3600?3600:2*a));var l=c.gatewayServers,p=c.turnServers;clearTimeout(i);var g=Object(d.getParameter)("NGINX");e.proxyServer=g,e.turnServers=[];var m=Object(T.randomString)();p.map((function(t){var n={mode:"manual",url:t.ip,tcpport:t.port||"443",udpport:"",username:t.username||m,credential:t.password||R()(m).toString(),forceturn:!1};n.tcpport+="",n.udpport+="",e.turnServers.push(n)})),f.report.setProxyServer(g),u.default.setProxyServer(g),t(l)}))}():5==e.proxyServerType?function r(){S("proxy5",e,(function(o,c){if(o)return"RETRYABLE_ERROR"!==o?n&&n(o):(u.default.debug("["+e.clientId+"]",o),u.default.debug("["+e.clientId+"] Request proxy will be restart in "+a+"s"),i=setTimeout((function(){r()}),1e3*a),I[s]=i,void(a=a>=3600?3600:2*a));var l=c.gatewayServers,p=c.turnServers;clearTimeout(i);var g=Object(d.getParameter)("NGINX");e.proxyServer=g,e.turnServers=[];var m=Object(T.randomString)();p.map((function(t){var n={mode:"manual",url:t.ip,tcpport:t.port||"443",udpport:"",username:t.username||m,credential:t.password||R()(m).toString(),forceturn:!1,useTurns:!0};n.tcpport+="",n.udpport+="",e.turnServers.push(n)})),f.report.setProxyServer(g),u.default.setProxyServer(g),t(l)}),!0)}():l():c(null,t)},w=function(e,t,n,r,i){var o=Date.now();r=r||t.stringUid;var a={sid:t.sid,opid:10,appid:t.appId,string_uid:r};return new Promise((function(i,s){Object(l.post)(e+"".concat(-1===e.indexOf("?")?"?":"&","action=stringuid"),a,(function(c){try{var d=JSON.parse(c),l=d.code}catch(i){var g="requestUserAccount failed with unexpected body "+c;return u.default.error("["+t.clientId+"]",g),s({retryable:!0,info:g,url:e,error:"UNEXPECTED_ERROR"}),n&&n.dispatchEvent({type:"error",reason:"USER_ACCOUNT_BODY_NOT_JSON"}),void f.report.reqUserAccount(a.sid,{lts:o,success:!1,serverAddress:e,stringUid:r,uid:null,extend:c,errorCode:"USER_ACCOUNT_BODY_NOT_JSON"})}if(l){var m=!1;return"INTERNAL_SERVER_ERROR"===(v=p.StringUidErrorCode[d.code%1e4]||"REQ_ACCOUNT_ERR_".concat(l))&&(m=!0),n&&n.dispatchEvent({type:"error",reason:v}),f.report.reqUserAccount(a.sid,{lts:o,success:!1,serverAddress:e,stringUid:r,uid:null,errorCode:v,extend:a}),s({retryable:m,info:g="Get String Uid Failed ["+v+"]",url:e,error:v})}var h=d.uid;if(!(h>0&&h<Math.pow(2,32))){u.default.error("["+t.clientId+"] "+"Invalid Uint Uid ".concat(r," => ").concat(h),d);var v="INVALID_UINT_UID_".concat(h);return n&&n.dispatchEvent({type:"error",reason:v}),f.report.reqUserAccount(a.sid,{lts:o,success:!1,serverAddress:e,stringUid:r,uid:null,errorCode:v,extend:a}),s({retryable:!0,error:v,info:"Get String Uid failed ["+v+"]",url:e})}i({uid:h,url:e}),f.report.reqUserAccount(a.sid,{lts:o,success:!0,serverAddress:e,stringUid:r,uid:h,errorCode:null,extend:a})}),(function(e,t){if("timeout"===e.type){var i="USER_ACCOUNT_TIMEOUT";n&&n.dispatchEvent({type:"error",reason:i}),f.report.reqUserAccount(a.sid,{lts:o,success:!1,serverAddress:t,stringUid:r,uid:null,errorCode:i,extend:a}),s({retryable:!0,info:i,url:t,error:i})}else{var c="USER_ACCOUNT_SERVER_WRONG_".concat(e.type);n&&n.dispatchEvent({type:"error",reason:c}),f.report.reqUserAccount(a.sid,{lts:o,success:!1,serverAddress:t,stringUid:r,uid:null,errorCode:c,extend:a}),s({retryable:!0,info:c,url:t,error:c})}}),{"X-Packet-Service-Type":0,"X-Packet-URI":72})}))},L=function(e,t,n){Date.now();var r,o=Object(d.getParameter)("ACCOUNT_REGISTER"),s=!1,l=Object(d.getParameter)("ACCOUNT_REGISTER_RETRY_TIMEOUT"),f=null,p=null,g=new Promise(function(){var g=c()(a.a.mark((function c(g,m){var h,v,E;return a.a.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:f=g,p=m,r=0;case 3:if(!(r<Object(d.getParameter)("ACCOUNT_REGISTER_RETRY_COUNT_MAX"))){c.next=33;break}if(!s){c.next=6;break}return c.abrupt("return");case 6:return h=o[r%o.length],v=e.proxyServer?"https://".concat(e.proxyServer,"/ap/?url=").concat(h+"/api/v1"):"https://".concat(h,"/api/v1"),c.prev=8,c.delegateYield(a.a.mark((function r(){var i;return a.a.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return e.proxyServer,r.next=3,w(v,e,t,n);case 3:if(i=r.sent,!s){r.next=6;break}return r.abrupt("return",{v:void 0});case 6:s=!0,setTimeout((function(){u.default.debug("Get UserAccount Successfully",i),f(i)}),0);case 8:case"end":return r.stop()}}),r)}))(),"t0",10);case 10:if(E=c.t0,"object"!==i()(E)){c.next=13;break}return c.abrupt("return",E.v);case 13:c.next=30;break;case 15:if(c.prev=15,c.t1=c.catch(8),!s){c.next=19;break}return c.abrupt("return");case 19:if(!c.t1.retryable){c.next=27;break}return(l=Math.ceil(l*Object(d.getParameter)("ACCOUNT_REGISTER_RETRY_RATIO")))>Object(d.getParameter)("ACCOUNT_REGISTER_RETRY_TIMEOUT_MAX")&&(l=Object(d.getParameter)("ACCOUNT_REGISTER_RETRY_TIMEOUT_MAX")),u.default.error("".concat(c.t1.info," ").concat(c.t1.url," Will Fetch User Account in ").concat(l/1e3," seconds")),c.next=25,new Promise((function(e){setTimeout(e,l)}));case 25:c.next=30;break;case 27:u.default.error("Get UserAccount Error: ".concat(c.t1.info," ").concat(c.t1.url),c.t1.error),s=!0,p(c.t1.error);case 30:r++,c.next=3;break;case 33:case"end":return c.stop()}}),c,null,[[8,15]])})));return function(e,t){return g.apply(this,arguments)}}());return g.cancel=function(){s||(s=!0,p({info:"Request Cancelled",retryable:!1}))},g.isFinished=function(){return s},g}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o,a,s=i(n(0));!function(e){e.CHINA="CHINA",e.ASIA="ASIA",e.NORTH_AMERICA="NORTH_AMERICA",e.EUROPE="EUROPE",e.JAPAN="JAPAN",e.INDIA="INDIA",e.OCEANIA="OCEANIA",e.SOUTH_AMERICA="SOUTH_AMERICA",e.AFRICA="AFRICA",e.OVERSEA="OVERSEA",e.GLOBAL="GLOBAL"}(o||(o={})),t.AREAS=o,function(e){e.CHINA="CN",e.ASIA="AS",e.NORTH_AMERICA="NA",e.EUROPE="EU",e.JAPAN="JP",e.INDIA="IN",e.OCEANIA="OC",e.SOUTH_AMERICA="SA",e.AFRICA="AF",e.OVERSEA="OVERSEA",e.GLOBAL="GLOBAL"}(a||(a={}));var c={ASIA:{CODE:a.ASIA,WEBCS_DOMAIN:["ap-web-1-asia.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-asia.agora.io"],PROXY_CS:["proxy-ap-web-asia.agora.io"],CDS_AP:["cds-ap-web-asia.agora.io","cds-ap-web-asia2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-asia.agora.io","sua-ap-web-asia2.agora.io"],UAP_AP:["uap-ap-web-asia.agora.io","uap-ap-web-asia2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-asia.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-asia.agora.io"],LOG_UPLOAD_SERVER:["logservice-asia.agora.io"],NGINX:["southeast-asia.webrtc-cloud-proxy.sd-rtn.com"]},NORTH_AMERICA:{CODE:a.NORTH_AMERICA,WEBCS_DOMAIN:["ap-web-1-north-america.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-north-america.agora.io"],PROXY_CS:["proxy-ap-web-america.agora.io"],CDS_AP:["cds-ap-web-america.agora.io","cds-ap-web-america2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-america.agora.io","sua-ap-web-america2.agora.io"],UAP_AP:["uap-ap-web-america.agora.io","uap-ap-web-america2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-north-america.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-north-america.agora.io"],LOG_UPLOAD_SERVER:["logservice-north-america.agora.io"],NGINX:["east-usa.webrtc-cloud-proxy.sd-rtn.com"]},EUROPE:{CODE:a.EUROPE,WEBCS_DOMAIN:["ap-web-1-europe.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-europe.agora.io"],PROXY_CS:["proxy-ap-web-europe.agora.io"],CDS_AP:["cds-ap-web-europe.agora.io","cds-ap-web-europe2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-europe.agora.io","sua-ap-web-europe.agora.io"],UAP_AP:["uap-ap-web-europe.agora.io","uap-ap-web-europe2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-europe.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-europe.agora.io"],LOG_UPLOAD_SERVER:["logservice-europe.agora.io"],NGINX:["europe.webrtc-cloud-proxy.sd-rtn.com"]},JAPAN:{CODE:a.JAPAN,WEBCS_DOMAIN:["ap-web-1-japan.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-japan.agora.io"],PROXY_CS:["proxy-ap-web-japan.agora.io"],CDS_AP:["cds-ap-web-japan.agora.io","cds-ap-web-japan2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-japan.agora.io","sua-ap-web-japan2.agora.io"],UAP_AP:["uap-ap-web-japan.agora.io","\tuap-ap-web-japan2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-japan.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-japan.agora.io"],LOG_UPLOAD_SERVER:["logservice-japan.agora.io"],NGINX:["japan.webrtc-cloud-proxy.sd-rtn.com"]},INDIA:{CODE:a.INDIA,WEBCS_DOMAIN:["ap-web-1-india.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-india.agora.io"],PROXY_CS:["proxy-ap-web-india.agora.io"],CDS_AP:["cds-ap-web-india.agora.io","cds-ap-web-india2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-india.agora.io","sua-ap-web-india2.agora.io"],UAP_AP:["uap-ap-web-india.agora.io","uap-ap-web-india2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-india.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-india.agora.io"],LOG_UPLOAD_SERVER:["logservice-india.agora.io"],NGINX:["india.webrtc-cloud-proxy.sd-rtn.com"]},OVERSEA:{CODE:a.OVERSEA,WEBCS_DOMAIN:["ap-web-1-oversea.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-oversea.agora.io"],PROXY_CS:["proxy-ap-web-oversea.agora.io"],CDS_AP:["cds-ap-web-oversea.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-oversea.agora.io"],UAP_AP:["uap-ap-web-oversea.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-oversea.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-oversea.agora.io"],LOG_UPLOAD_SERVER:["logservice-oversea.agora.io"],NGINX:["webrtc-cloud-proxy.agora.io"]},GLOBAL:{CODE:a.GLOBAL,WEBCS_DOMAIN:["webrtc2-ap-web-1.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["webrtc2-ap-web-3.agora.io"],PROXY_CS:["ap-proxy-1.agora.io","ap-proxy-2.agora.io"],CDS_AP:["cds-ap-web-1.agora.io","cds-ap-web-3.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-1.agora.io","sua-ap-web-3.agora.io"],UAP_AP:["uap-ap-web-1.agora.io","uap-ap-web-3.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2.agora.io"],LOG_UPLOAD_SERVER:["logservice.agora.io"],NGINX:["webrtc-cloud-proxy.sd-rtn.com"]},OCEANIA:{CODE:a.OCEANIA,WEBCS_DOMAIN:["ap-web-1-oceania.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-oceania.agora.io"],PROXY_CS:["proxy-ap-web-oceania.agora.io"],CDS_AP:["cds-ap-web-oceania.agora.io","cds-ap-web-oceania2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-oceania.agora.io","sua-ap-web-oceania2.agora.io"],UAP_AP:["uap-ap-web-oceania.agora.io","uap-ap-web-oceania2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-oceania.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-oceania.agora.io"],LOG_UPLOAD_SERVER:["logservice-oceania.agora.io"],NGINX:["oceania.webrtc-cloud-proxy.sd-rtn.com"]},SOUTH_AMERICA:{CODE:a.SOUTH_AMERICA,WEBCS_DOMAIN:["ap-web-1-south-america.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-south-america.agora.io"],PROXY_CS:["proxy-ap-web-south-america.agora.io"],CDS_AP:["cds-ap-web-south-america.agora.io","cds-ap-web-south-america2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-south-america.agora.io","sua-ap-web-south-america2.agora.io"],UAP_AP:["uap-ap-web-south-america.agora.io","uap-ap-web-south-america2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-south-america.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-south-america.agora.io"],LOG_UPLOAD_SERVER:["logservice-south-america.agora.io"],NGINX:["south-america.webrtc-cloud-proxy.sd-rtn.com"]},AFRICA:{CODE:a.AFRICA,WEBCS_DOMAIN:["ap-web-1-africa.agora.io"],WEBCS_DOMAIN_BACKUP_LIST:["ap-web-2-africa.agora.io"],PROXY_CS:["proxy-ap-web-africa.agora.io"],CDS_AP:["cds-ap-web-africa.agora.io","cds-ap-web-africa2.agora.io"],ACCOUNT_REGISTER:["sua-ap-web-africa.agora.io","sua-ap-web-africa2.agora.io"],UAP_AP:["uap-ap-web-africa.agora.io","uap-ap-web-africa2.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-africa.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-africa.agora.io"],LOG_UPLOAD_SERVER:["logservice-south-africa.agora.io"],NGINX:["africa.webrtc-cloud-proxy.sd-rtn.com"]}};t.AREA_DOMAIN_MAP=c;var d={GLOBAL:{ASIA:[o.CHINA,o.JAPAN,o.INDIA],EUROPE:[],NORTH_AMERICA:[],SOUTH_AMERICA:[],OCEANIA:[],AFRICA:[]}},u=Object.keys(d[o.GLOBAL]),l=[o.CHINA,o.NORTH_AMERICA,o.EUROPE,o.ASIA,o.JAPAN,o.INDIA,o.OCEANIA,o.SOUTH_AMERICA,o.AFRICA],f=function(e,t){var n,i=[];if("string"==typeof e&&(e=[e]),t&&!e.includes(o.GLOBAL)&&(i=e),t||(i=e),t&&e.includes(o.GLOBAL)){var a=[o.GLOBAL,o.OVERSEA],s=Object.keys(c);if(t===o.GLOBAL)throw new Error("Can not set excludedArea to 'GLOBAL'");if(t===o.CHINA)i=[o.OVERSEA];else if(n=t,u.includes(n)){var f=function(e){return void 0===e&&(e=""),d[o.GLOBAL][e]||[]}(t),p=r(a,[t],f);i=s.filter((function(e){return!p.includes(e)}))}else if(function(e){var t=!1;return u.forEach((function(n){d.GLOBAL[n].includes(e)&&(t=!0)})),t}(t)){var g=function(e){void 0===e&&(e="");var t="";return u.forEach((function(n){d.GLOBAL[n].includes(e)&&(t=n)})),t}(t),m=r(a,[g,t]);i=s.filter((function(e){return!m.includes(e)}))}else i=e;i=function(e){var t=[];return l.forEach((function(n){e.includes(n)&&t.push(n)})),t.concat(e.filter((function(e){return!l.includes(e)})))}(i)}return i};t.getAreaCodeByConfig=function(e){var t=e.areaCode,n=e.excludedArea;return n?f(t,n):t},c.CHINA={CODE:a.CHINA,WEBCS_DOMAIN:["webrtc2-2.ap.sd-rtn.com"],WEBCS_DOMAIN_BACKUP_LIST:["webrtc2-4.ap.sd-rtn.com"],PROXY_CS:["proxy-web.ap.sd-rtn.com"],CDS_AP:["cds-web-2.ap.sd-rtn.com","cds-web-4.ap.sd-rtn.com"],ACCOUNT_REGISTER:["sua-web-2.ap.sd-rtn.com","sua-web-4.ap.sd-rtn.com"],UAP_AP:["uap-web-2.ap.sd-rtn.com","uap-web-4.ap.sd-rtn.com"],EVENT_REPORT_DOMAIN:["web-3.statscollector.sd-rtn.com"],EVENT_REPORT_BACKUP_DOMAIN:["web-4.statscollector.sd-rtn.com"],LOG_UPLOAD_SERVER:["logservice-china.agora.io"],NGINX:["east-cn.webrtc-cloud-proxy.sd-rtn.com"]};t.getAreaCodeByWebCS=function(e){for(var t=Object.keys(c),n=0;n<t.length;n++){var r=t[n],i=c[r];if(i.WEBCS_DOMAIN.includes(e)||i.WEBCS_DOMAIN_BACKUP_LIST.includes(e))return i.CODE===a.OVERSEA?a.ASIA+","+a.EUROPE+","+a.AFRICA+","+a.NORTH_AMERICA+","+a.SOUTH_AMERICA+","+a.OCEANIA:i.CODE}};t.getAreaCodeByArea=function(e){return e===o.OVERSEA?a.ASIA+","+a.EUROPE+","+a.AFRICA+","+a.NORTH_AMERICA+","+a.SOUTH_AMERICA+","+a.OCEANIA:a[e]};t.getAreaDomainConfig=function(e){var t={WEBCS_DOMAIN:[],WEBCS_DOMAIN_BACKUP_LIST:[],PROXY_CS:[],CDS_AP:[],ACCOUNT_REGISTER:[],UAP_AP:[],EVENT_REPORT_DOMAIN:[],EVENT_REPORT_BACKUP_DOMAIN:[],LOG_UPLOAD_SERVER:[],NGINX:[]};return e.map((function(e){var n=c[e];if(n){var r=Object.keys(n);r?r.map((function(e){"CODE"!==e&&(t[e]=t[e].concat(n[e]))})):s.default.info(e+" is not exist")}else s.default.info(e+" is not exist")})),t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return O})),n.d(t,"b",(function(){return C}));var r=n(7),i=n.n(r),o=n(4),a=n(8),s=function(e){var t=Object(a.b)(e);return t.url=".",t},c=n(0),d=n(15),u=n(5),l=n(2),f=n(1),p=0,g=function(e){var t=s({});t.id=e.id,t.playerId=p++,t.destroyed=!1,t.fit=e.options&&e.options.fit,"contain"!==t.fit&&"cover"!==t.fit&&(t.fit=null),t.url=e.url,t.stream=e.stream.stream,t.peerVideoReady=!1,t.isFreeze=!1,t.freezeTimeCounterList=[],t.freezeCount=0,t.lastFreezeCount=0,t.lastTimeupdateTime=0,t.elementID=e.elementID,t.setAudioOutput=function(e,n,r){var i=t.video||t.audio;return i?i.setSinkId?void i.setSinkId(e).then((function(){return c.default.debug("["+t.id+"] "+"video ".concat(t.id," setAudioOutput ").concat(e," SUCCESS")),i==t.video&&t.audio?t.audio.setSinkId(e):Promise.resolve()})).then((function(){return c.default.debug("["+t.id+"] "+"audio ".concat(t.id," setAudioOutput ").concat(e," SUCCESS")),n&&n()})).catch((function(e){return c.default.error("["+t.id+"] VideoPlayer.setAudioOutput",e),r&&r(e)})):(c.default.error("["+t.id+"] ",u.default.WEB_API_NOT_SUPPORTED),r&&r(u.default.WEB_API_NOT_SUPPORTED)):(c.default.error("["+t.id+"] ",u.default.PLAYER_NOT_FOUND),r&&r(u.default.PLAYER_NOT_FOUND))},t.destroy=function(){c.default.debug("[".concat(t.id,"] destroy ").concat(e.stream.local?"local":"remote"," Player ").concat(t.id)),Object(d.setSrcObject)(t.video,null),Object(d.setSrcObject)(t.audio,null),t.video.load(),t.audio.load(),t.video.pause(),t.video.remove(),t.audio.remove(),t.freezeCheckInterval&&clearInterval(t.freezeCheckInterval),t.destroyed=!0,delete t.resizer,document.getElementById(t.div.id)&&t.parentNode.contains(t.div)&&t.div.remove()&&t.parentNode.removeChild(t.div),["video","audio"].forEach((function(n){t[n];var r=a[n];clearTimeout(r.playDeferTimeout),r.formerMediaState=null;var i={playerId:t.playerId,stateId:r.stateId+1,playDeferTimeout:null,error:!1,status:"aborted",reason:"stop",updatedAt:Date.now()};a[n]=i;var o={type:"player-status-change",playerId:t.playerId,mediaType:n,status:i.status,reason:i.reason,isErrorState:!1,streamId:t.id};c.default.debug("[".concat(t.id,"] Media Player Status Change Triggered by destroy()"),o),e.stream.dispatchEvent(o),f.report.reportApiInvoke(e.stream.sid,{name:"Stream.playerStatusChange",options:o,tag:"tracer"})()}))},t.div=document.createElement("div"),t.div.setAttribute("id","player_"+t.id),e.stream.video?t.div.setAttribute("style","width: 100%; height: 100%; position: relative; background-color: black; overflow: hidden;"):t.div.setAttribute("style","width: 100%; height: 100%; position: relative; overflow: hidden;"),t.video=document.createElement("video"),t.video.setAttribute("id","video"+t.id),e.stream.local&&!e.stream.screen?e.stream.mirror?t.video.setAttribute("style","width: 100%; height: 100%; position: absolute; transform: rotateY(180deg); object-fit: ".concat(t.fit||"cover",";")):t.video.setAttribute("style","width: 100%; height: 100%; position: absolute; object-fit: ".concat(t.fit||"cover",";")):e.stream.video?t.video.setAttribute("style","width: 100%; height: 100%; position: absolute; object-fit: ".concat(t.fit||"cover",";")):e.stream.screen?t.video.setAttribute("style","width: 100%; height: 100%; position: absolute; object-fit: ".concat(t.fit||"contain")):t.video.setAttribute("style","width: 100%; height: 100%; position: absolute; display: none; object-fit: ".concat(t.fit||"cover"));var n={autoplay:!0,muted:!!e.stream.local||!(!o.isSafari()&&"iOS"!==o.getBrowserOS())&&"video_element_muted",playsinline:!0,controls:!1,volume:null},r=i()({},n,e.options);!0!==r.muted||r.volume||(r.volume=0),t.video.setAttribute("autoplay",""),t.video.setAttribute("muted",""),t.video.muted=!0,t.video.autoplay=!0,r.playsinline&&t.video.setAttribute("playsinline",""),r.controls&&t.video.setAttribute("controls",""),r.contains&&(t.video.controls=!0),Number.isFinite(r.volume)&&(t.video.volume=r.volume),t.audio=document.createElement("audio"),t.audio.setAttribute("id","audio"+t.id),!0===r.muted&&t.audio.setAttribute("muted",""),!0===r.muted&&(t.audio.muted=!0),r.playsinline&&t.audio.setAttribute("playsinline",""),Number.isFinite(r.volume)&&(t.audio.volume=r.volume),void 0!==t.elementID?(document.getElementById(t.elementID).appendChild(t.div),t.container=document.getElementById(t.elementID)):(document.body.appendChild(t.div),t.container=document.body),t.parentNode=t.div.parentNode;var a={video:{playerId:t.playerId,stateId:0,playDeferTimeout:null,error:!1,status:"init",reason:null,updatedAt:Date.now()},audio:{playerId:t.playerId,stateId:0,playDeferTimeout:null,error:!1,status:"init",reason:null,updatedAt:Date.now()}};t.mediaElemExists=function(e){for(var t=e,n=0;n<Object(l.getParameter)("MEDIA_ELEMENT_EXISTS_DEPTH")&&t;n++)t=t.parentNode;return!!t};var g=function(e){return t.mediaElemExists(e)?e.paused?"paused":"play":"aborted"},m=function(e,t,n){var r=g(e),i=!0;return"paused"===r?("audio"===t&&!0===n.muted&&(i=!1),n.autoplay||(i=!1)):"play"===r?"video"===t?i=!1:!0===n.muted?e.muted&&(i=!1):e.muted||(i=!1):"aborted"===r&&(i=!1),i},h=function(n){var i,o=this;if(o===t.video?i="video":o===t.audio&&(i="audio"),i){if(n.type||c.default.error("[".concat(t.id,"] Unexpected evt"),n),"video"===i&&o.muted&&o.paused)return c.default.debug("[".concat(t.id,"] auto resume video element")),void o.play();var s=g(o);clearTimeout(a[i].playDeferTimeout),a[i].playDeferTimeout=setTimeout((function(){a[i].playDeferTimeout=null;var d=a[i],u=g(o);if(s===u){var l={playerId:t.playerId,stateId:d.stateId+1,playDeferTimeout:null,error:m(o,i,r),status:g(o),reason:n.type,updatedAt:Date.now()};if(d.status!==l.status){a[i]=l;var p={type:"player-status-change",playerId:t.playerId,mediaType:i,status:l.status,reason:l.reason,isErrorState:l.error,streamId:t.id};c.default.debug("[".concat(t.id,"] Media Player Status Change"),p),e.stream.dispatchEvent(p),f.report.reportApiInvoke(e.stream.sid,{name:"Stream.playerStatusChange",options:p,tag:"tracer"})()}}else c.default.debug("[".concat(t.id,"] Status Change after event Triggered.")+"Stream ".concat(t.id," PlayerId ").concat(t.playerId," mediaType ").concat(i," Status ").concat(s,"=>").concat(u))}),Object(l.getParameter)("PLAYER_STATE_DEFER"))}else c.default.error("[".concat(t.id,"] Unknown media element"),o)};t.video.addEventListener("playing",(function(e){!function e(){t.video.videoWidth*t.video.videoHeight>4?c.default.debug("["+t.id+"] video dimensions:",t.video.videoWidth,t.video.videoHeight):setTimeout(e,50)}()}));var v=0,E=0,S=0;t.freezeCheckInterval=setInterval((function(){Date.now()-t.lastTimeupdateTime>500&&t.peerVideoReady?(t.isFreeze=!0,t.freezeCount+=1):t.isFreeze=!1}),500),t.video.addEventListener("playing",h),t.video.addEventListener("canplay",h),t.video.addEventListener("abort",h),t.video.addEventListener("onerror",h),t.video.addEventListener("suspend",h),t.video.addEventListener("stalled",h),t.video.addEventListener("pause",h),t.audio.addEventListener("playing",h),t.audio.addEventListener("canplay",h),t.audio.addEventListener("abort",h),t.audio.addEventListener("onerror",h),t.audio.addEventListener("suspend",h),t.audio.addEventListener("stalled",h),t.audio.addEventListener("pause",h);var _=t.audio,y="audio";if(e.stream.hasVideo()||e.stream.hasScreen())t.div.appendChild(t.video),t.div.appendChild(t.audio),o.isEdge()?t.video.srcObject=e.stream.stream:(Object(d.attachMediaStream)(t.video,e.stream.stream),Object(d.attachMediaStream)(t.audio,e.stream.stream)),t.video.addEventListener("timeupdate",(function(){var e=Date.now();if((v+=1)<10)t.lastTimeupdateTime=e;else for(e-t.lastTimeupdateTime>500&&(t.peerVideoReady?E+=e-t.lastTimeupdateTime:t.peerVideoReady=!0),S+=e-t.lastTimeupdateTime,t.lastTimeupdateTime=e;S>=6e3;)S-=6e3,t.freezeTimeCounterList.push(Math.min(6e3,E)),E-=6e3,E=Math.max(E,0)}));else{!1!==r.muted&&"video_element_muted"!==r.muted||(t.video.removeAttribute("muted"),t.video.muted=!1),t.video.removeAttribute("autoplay"),t.video.autoplay=!1,t.div.appendChild(t.video),_=t.video,y="video";var R=a.audio,T={playerId:t.playerId,stateId:R.stateId+1,playDeferTimeout:null,error:!1,status:"aborted",reason:"audioonly",updatedAt:Date.now()};a.audio=T;var I={type:"player-status-change",playerId:t.playerId,mediaType:"audio",status:T.status,reason:T.reason,isErrorState:T.error,streamId:t.id};if(c.default.debug("[".concat(t.id,"] Media Player Status Change"),I),Promise.resolve().then((function(){return e.stream.dispatchEvent(I)})),f.report.reportApiInvoke(e.stream.sid,{name:"Stream.playerStatusChange",options:I,tag:"tracer"})(),window.MediaStream&&(o.isSafari()||"iOS"===o.getBrowserOS())){var b=new MediaStream(e.stream.stream.getAudioTracks());Object(d.setSrcObject)(t.video,b)}else Object(d.setSrcObject)(t.video,e.stream.stream)}if(r.autoplay&&_){var A=_.play();A&&A.catch&&A.catch((function(n){if(!t.destroyed&&_){var i=a[y],o={playerId:t.playerId,stateId:i.stateId+1,playDeferTimeout:null,error:m(_,y,r),status:g(_),reason:"error",updatedAt:Date.now()};if(i.status!==o.status){c.default.debug("[".concat(t.id,"] Player ").concat(t.playerId," Status Changed Detected by promise error: ").concat(i.status,"=>").concat(o.status),n),a[y]=o;var s={type:"player-status-change",playerId:t.playerId,mediaType:y,status:o.status,reason:o.reason,isErrorState:o.error,streamId:t.id};c.default.debug("[".concat(t.id,"] Media Player Status Change"),s),e.stream.dispatchEvent(s),f.report.reportApiInvoke(e.stream.sid,{name:"Stream.playerStatusChange",options:s,tag:"tracer"})()}}}))}return t.setAudioVolume=function(e){var n=parseInt(e)/100;isFinite(n)&&(n<0?n=0:n>1&&(n=1),t.video&&(t.video.volume=n),t.audio&&(t.audio.volume=n))},t},m=n(23),h=n(10),v=n(6),E=n(19),S=n(3),_=n(25);var y=n(16),R=n(11),T=n.n(R),I=function(e){Object(S.checkValidString)(e,"profileName"),-1===(e=e.toLowerCase()).indexOf("_")&&(e+="_1"),Object(S.checkValidEnum)(e,"profileName",Object.keys(l.SUPPORT_RESOLUTION_LIST));var t=l.SUPPORT_RESOLUTION_LIST[e];t||(e=Object(l.getParameter)("DEFAULT_PROFILE"),t=l.SUPPORT_RESOLUTION_LIST[e]);var n={profileName:e,video:{width:t[0],height:t[1]},attributes:{resolution:"".concat(t[0],"x").concat(t[1]),minFrameRate:t[2],maxFrameRate:t[3],minVideoBW:t[4],maxVideoBW:t[5]}};return t[2]&&(n.video.frameRate=t[2]),t[6]&&t[7]&&(n.screen={width:t[0],height:t[1],frameRate:{min:t[6],max:t[7]}}),n},b=function(e){return Object.keys(l.SUPPORT_RESOLUTION_LIST).filter((function(t){var n=l.SUPPORT_RESOLUTION_LIST[t],r=["width","height","frameRate"];for(var i in r){var o=r[i];if(e[o]&&n[i]){if("number"==typeof e[o].max&&e[o].max<n[i])return!1;if("number"==typeof e[o].min&&e[o].min>n[i])return!1}}return!0})).reverse()},A=function(e){var t=l.AUDIO_PROFILE_SETTINGS[e]||l.AUDIO_PROFILE_SETTINGS.default;return{highQuality:t[0],stereo:t[1],speech:t[2],lowQuality:t[3]}};var O=function(e){var t=Object(a.b)();if(t.params=i()({},e),t.stream=e.stream,t.url=e.url,t.onClose=void 0,t.local=!1,t.videoSource=e.videoSource,t.audioSource=e.audioSource,e.video=!(!e.videoSource&&!e.video),t.video=e.video,e.audio=!(!e.audioSource&&!e.audio),t.audio=e.audio,t.screen=!!e.screen,t.screenAudio=!!e.screenAudio,t.screenAttributes={width:1920,height:1080,maxFr:5,minFr:1},t.videoSize=e.videoSize,t.player=void 0,t.audioLevelHelper=null,e.attributes=e.attributes||{},t.attributes=e.attributes,t.microphoneId=e.microphoneId,t.cameraId=e.cameraId,t.facingMode=e.facingMode,t.inSwitchDevice=!1,t.userMuteVideo=!1,t.userMuteAudio=!1,t.peerMuteVideo=!1,t.peerMuteAudio=!1,t.lowStream=null,t.videoWidth=0,t.videoHeight=0,t.streamId=e.streamID,t.userId=null,t.uintId=e.uintUID||null,t.mirror=!1!==e.mirror,t.DTX=e.audioProcessing&&e.audioProcessing.DTX,t.audioProcessing=e.audioProcessing,t.optimizationMode=e.optimizationMode,t.highQuality=!1,t.stereo=!1,t.speech=!1,t.screen||delete t.screen,!(void 0===t.videoSize||t.videoSize instanceof Array&&4===t.videoSize.length))throw Error("Invalid Video Size");function n(){var e={};t.getVideoTrack()===this?(c.default.debug("Video Track Ended"),e.type="videoTrackEnded",e.track=this):t.getAudioTrack()===this?(c.default.debug("Audio Track Ended"),e.type="audioTrackEnded",e.track=this):c.default.debug("Detached Track ended",this.kind,this.label,this),e.type&&t.dispatchEvent(e)}return t.videoSize=[640,480,640,480],void 0!==e.local&&!0!==e.local||(t.local=!0),t.initialized=!t.local,t._streamInitID=null,function(e){e.audioMixing={audioContextInited:!1,defaultVolume:100,inEarMonitoring:"FILE",sounds:{},states:{IDLE:"IDLE",STARTING:"STARTING",BUSY:"BUSY",PAUSED:"PAUSED"},inEarMonitoringModes:{NONE:"NONE",FILE:"FILE",MICROPHONE:"MOCROPHONE",ALL:"ALL"},ctx:null,mediaStreamSource:null,mediaStreamDest:null,buffer:{}},e._initSoundIfNotExists=function(t,n){e.audioMixing.sounds[t]||(e.audioMixing.sounds[t]={soundId:t,state:"IDLE",muted:e.userMuteAudio,filePath:n,volume:e.audioMixing.defaultVolume,startAt:null,startOffset:null,pauseAt:null,pauseOffset:null,resumeAt:null,resumeOffset:null,stopAt:null,options:null,source:null})},e._initSoundIfNotExists(-1),e.loadAudioBuffer=function(t,n,r){var i=f.report.reportApiInvoke(e.sid,{callback:r,name:"Stream.loadAudioBuffer",options:arguments,tag:"tracer"});Object(S.checkValidString)(n,"url",1,1024,!1),Object(S.checkValidString)(t,"id",1,1024,!1);var o=function(t){c.default.error("[".concat(e.streamId,"] loadAudioBuffer Failed: ")+t),i(u.default.LOAD_AUDIO_FAILED)},a=new XMLHttpRequest;a.open("GET",n,!0),a.responseType="arraybuffer",a.onload=function(){if(a.status>400)o("".concat(a.status," ").concat(a.statusText));else{var n=a.response;e.audioMixing.audioContextInited||e._initAudioContext(),e.audioMixing.ctx.decodeAudioData(n,(function(n){e.audioMixing.buffer[t]=n,i(null)}),(function(t){c.default.error("[".concat(e.streamId,"] decodeAudioData Failed: "),t),i(t)}))}},a.onerror=function(){return o("load error")},a.ontimeout=function(){return o("timeout")},a.send()},e.createAudioBufferSource=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.createAudioBufferSource",options:arguments,tag:"tracer"});if(e.audioMixing.buffer[t.id]){var r=e.audioMixing.buffer[t.id],i=e.audioMixing.ctx.createBufferSource();i.buffer=r;var a=e.audioMixing.ctx.createGain();if(i.connect(a),a.connect(e.audioMixing.mediaStreamDest),i.gainNode=a,t.loop)i.loop=!0,i.start(0,t.playTime/1e3);else if(t.cycle>1)if(Object(o.isChrome)()){i.loop=!0;var s=t.cycle*r.duration*1e3-(t.playTime||0);i.start(0,t.playTime/1e3,s/1e3)}else c.default.warning("[".concat(e.streamId,"] Cycle Param is ignored by current browser")),i.start(0,t.playTime/1e3);else i.start(0,t.playTime/1e3);var d=e.audioMixing.sounds[t.soundId];return d.source=i,e._flushAudioMixingMuteStatus(),i.addEventListener("ended",(function(){i===d.source&&e.dispatchEvent({type:"audioSourceEnded",soundId:t.soundId,source:i,sound:d})})),n(),i}var u="AUDIOBUFFER_NOT_FOUND";return c.default.error("[".concat(e.streamId,"] "),u,t.id),n(!1),!1},e.on("audioSourceEnded",(function(t){var n=t.source,r=t.sound;r&&r.state===e.audioMixing.states.BUSY&&!r.pauseAt&&(r.state=e.audioMixing.states.IDLE,r.startAt=null,r.startOffset=null,r.resumeAt=null,r.resumeOffset=null,n.gainNode&&n.gainNode.disconnect&&n.gainNode.disconnect(),n.buffer=null,e.audioMixing.mediaStreamSource.connect(e.audioMixing.mediaStreamDest))})),e.clearAudioBufferSource=function(){e.audioBufferSource.forEach((function(e){e.stop()}))},e._isSoundExists=function(t){return!!e.audioMixing.sounds[t.soundId]||(c.default.error("SoundId not exists. #".concat(t.soundId)),!1)},e._initAudioContext=function(){if(e.audioMixing.audioContextInited)throw new Error("Failed to init audio context. Already inited");if(!e.stream)throw new Error("Failed to init audio context. Local Stream not initialized");e.audioMixing.ctx=Object(_.a)(),e.audioMixing.mediaStreamSource=e.audioMixing.ctx.createMediaStreamSource(e.stream),e.audioMixing.mediaStreamDest=e.audioMixing.ctx.createMediaStreamDestination(),e.audioMixing.mediaStreamSource.connect(e.audioMixing.mediaStreamDest);var t=e.stream.getVideoTracks()[0];if(t&&e.audioMixing.mediaStreamDest.stream.addTrack(t),e._originStream=e.stream,e._isAudioMuted()?(e._unmuteAudio(),e.stream=e.audioMixing.mediaStreamDest.stream,e._muteAudio()):e.stream=e.audioMixing.mediaStreamDest.stream,e.audioLevelHelper=null,e.pc&&e.pc.peerConnection&&e.pc.peerConnection){var n=(e.pc.peerConnection&&e.pc.peerConnection.getSenders()).find((function(e){return e&&e.track&&"audio"==e.track.kind})),r=e.audioMixing.mediaStreamDest.stream.getAudioTracks()[0];n&&n.replaceTrack&&r&&n.replaceTrack(r)}e.audioMixing.audioContextInited=!0},e._cleanupAudioMixing=function(){if(e.audioMixing.audioContextInited){for(var t in e.audioMixing.sounds){var n=e.audioMixing.sounds[t];n.state!==e.audioMixing.states.BUSY&&n.state!==e.audioMixing.states.PAUSED||e._stopOneEffect({soundId:t})}e.audioLevelHelper=null,e.audioMixing.audioContextInited=!1}},e._reloadInEarMonitoringMode=function(t){if(t){if(!e.audioMixing.inEarMonitoringModes[t])return c.default.error("[".concat(e.streamId,"] Invalid InEarMonitoringMode ").concat(t));e.audioMixing.inEarMonitoring=t}switch(e.audioMixing.audioContextInited||e._initAudioContext(),e.audioMixing.inEarMonitoring){case e.audioMixing.inEarMonitoringModes.FILE:e.audioMixing.mediaStreamSource.connectedToDestination&&(e.audioMixing.mediaStreamSource.disconnect(e.audioMixing.ctx.destination),e.audioMixing.mediaStreamSource.connectedToDestination=!1);case e.audioMixing.inEarMonitoringModes.ALL:for(var n in e.audioMixing.sounds){var r=e.audioMixing.sounds[n];r&&r.source&&!r.source.connectedToDestination&&(r.source.gainNode.connect(e.audioMixing.ctx.destination),r.source.connectedToDestination=!0)}}switch(e.audioMixing.inEarMonitoring){case e.audioMixing.inEarMonitoringModes.MICROPHONE:e.audioMixing.source.forEach((function(t){t.connectedToDestination&&(t.gainNode.disconnect(e.audioMixing.ctx.destination),t.connectedToDestination=!1)}));case e.audioMixing.inEarMonitoringModes.ALL:e.audioMixing.mediaStreamSource.connectedToDestination||(e.audioMixing.mediaStreamSource.connect(e.audioMixing.ctx.destination),e.audioMixing.mediaStreamSource.connectedToDestination=!0)}},e._startAudioMixingBufferSource=function(t){e.audioMixing.audioContextInited||e._initAudioContext();var n={soundId:t.soundId,id:t.filePath,loop:t.loop,cycle:t.cycle,playTime:t.playTime||0},r=t.replace,i=e.createAudioBufferSource(n);return i.sound=e.audioMixing.sounds[t.soundId],i?(i.addEventListener("ended",e._audioMixingFinishedListener,{once:!0}),e._reloadInEarMonitoringMode(),r&&e.audioMixing.mediaStreamSource.disconnect(e.audioMixing.mediaStreamDest),i):null},e._stopAudioMixingBufferSource=function(t){var n=e.audioMixing.sounds[t.soundId].source;return n?(n.removeEventListener("ended",e._audioMixingFinishedListener),e.audioMixing.mediaStreamSource.connect(e.audioMixing.mediaStreamDest),n.stop(),n.gainNode&&n.gainNode.disconnect&&n.gainNode.disconnect(),n.buffer=null,n):null},e._flushAudioMixingMuteStatus=function(t){for(var n in e.audioMixing.sounds){var r=e.audioMixing.sounds[n];r&&(void 0!==t&&(r.muted=!!t),r.source&&(r.muted?r.source.gainNode.gain.value=0:r.source.gainNode.gain.value=r.volume/100))}},e._handleAudioMixingInvalidStateError=function(t,n,r){var i=e.audioMixing.sounds[n.soundId],o=-1===n.soundId?"INVALID_AUDIO_MIXING_STATE":"INVALID_PLAY_EFFECT_STATE";c.default.error("[".concat(e.streamId,"] Cannot ").concat(t,": ").concat(o,", state is ").concat(i.state)),r&&r(o)},e._handleAudioMixingNoSourceError=function(t,n,r){e.audioMixing.sounds[n.soundId].state=e.audioMixing.states.IDLE;var i=-1===n.soundId?"NO_AUDIO_MIXING_SOURCE":"NO_EFFECT_SOURCE";c.default.error("[".concat(e.streamId,"] Cannot ").concat(t,": ").concat(i)),r&&r(i)},e._getOneEffectStates=function(t){var n=e.audioMixing.sounds[t.soundId];return function(){return n?{state:n.state,startAt:n.startAt,resumeAt:n.resumeAt,pauseOffset:n.pauseOffset,pauseAt:n.pauseAt,resumeOffset:n.resumeOffset,stopAt:n.stopAt,duration:e._getOneEffectDuration(t),position:e._getOneEffectCurrentPosition(t)}:{}}},e._audioMixingFinishedListener=function(){var t=this.sound;t.state===e.audioMixing.states.IDLE&&e.audioMixing.buffer[t.options.filePath]&&!t.options.cacheResource&&(c.default.debug("Recycled buffer ".concat(t.options.filePath)),delete e.audioMixing.buffer[t.options.filePath]),-1===t.soundId&&e.dispatchEvent({type:"audioMixingFinished"})},e._playOneEffect=function(t,n){Object(S.checkValidObject)(t,"options");var r=t.soundId,i=(t.filePath,t.cacheResource);t.cycle,t.loop,t.playTime,t.replace;if(Object(o.isSafari)()&&Object(o.getBrowserVersion)()<12){var a="BROWSER_NOT_SUPPORT";return c.default.error("[".concat(e.streamId,"] Cannot _playOneEffect: "),a),n(a)}e.audioMixing.audioContextInited||e._initAudioContext(),e._initSoundIfNotExists(r);var s=e.audioMixing.sounds[r];if(s.state===e.audioMixing.states.IDLE){if(void 0!==t.cycle&&!t.cycle>0){a="Invalid Parmeter cycle: "+t.cycle;return c.default.error("[".concat(e.streamId,"] ").concat(r),a),n(a)}if(Object(S.isEmpty)(i)&&(t.cacheResource=!0),s.state=e.audioMixing.states.STARTING,s.options=t,e.audioMixing.buffer[t.filePath]){var d=e._startAudioMixingBufferSource(t);if(d)return s.source=d,s.startAt=Date.now(),s.resumeAt=null,s.pauseOffset=null,s.pauseAt=null,s.resumeOffset=null,s.stopAt=null,s.startOffset=t.playTime||0,s.state=e.audioMixing.states.BUSY,e._flushAudioMixingMuteStatus(),n(null);s.state=e.audioMixing.states.IDLE;var u="CREATE_BUFFERSOURCE_FAILED";if(n)return n(u);c.default.error("[".concat(e.streamId,"] "),u)}else e.loadAudioBuffer(t.filePath,t.filePath,(function(r){if(r)s.state=e.audioMixing.states.IDLE,n?n(r):c.default.error("[".concat(e.streamId,"] "),r);else{var i=e._startAudioMixingBufferSource(t);if(i)return s.source=i,s.startAt=Date.now(),s.resumeAt=null,s.pauseOffset=null,s.pauseAt=null,s.resumeOffset=null,s.stopAt=null,s.startOffset=t.playTime||0,s.state=e.audioMixing.states.BUSY,e._flushAudioMixingMuteStatus(),n(null);s.state=e.audioMixing.states.IDLE;r="CREATE_BUFFERSOURCE_FAILED";if(n)return n(r);c.default.error("[".concat(e.streamId,"] "),r)}}))}else e._handleAudioMixingInvalidStateError("_playEffect",t,n)},e._stopOneEffect=function(t,n){var r=e.audioMixing.sounds[t.soundId];return e._isSoundExists(t)?r.state===e.audioMixing.states.BUSY||r.state===e.audioMixing.states.PAUSED?(e._stopAudioMixingBufferSource(t),r.stopAt=Date.now(),r.state=e.audioMixing.states.IDLE,e.audioMixing.buffer[r.options.filePath]&&!r.options.cacheResource&&(c.default.debug("Recycled buffer ".concat(r.options.filePath)),delete e.audioMixing.buffer[r.options.filePath]),void(n&&n(null))):void e._handleAudioMixingInvalidStateError("_stopOneEffect",t,n):n("SOUND_NOT_EXISTS")},e._pauseOneEffect=function(t,n){var r=e.audioMixing.sounds[t.soundId];if(r.state===e.audioMixing.states.BUSY)return e._stopAudioMixingBufferSource(t)?(r.pauseAt=Date.now(),r.state=e.audioMixing.states.PAUSED,r.resumeAt?r.pauseOffset=r.pauseAt-r.resumeAt+r.resumeOffset:r.pauseOffset=r.pauseAt-r.startAt+r.startOffset,n&&n(null)):void e._handleAudioMixingNoSourceError("_pauseOneEffect",t,n);e._handleAudioMixingInvalidStateError("_pauseOneEffect",t,n)},e._resumeOneEffect=function(t,n){var r=e.audioMixing.sounds[t.soundId];if(r.state===e.audioMixing.states.PAUSED){var i={soundId:t.soundId,filePath:r.options.filePath,cycle:r.options.cycle,loop:r.options.loop,playTime:r.pauseOffset,replace:r.options.replace},o=e._startAudioMixingBufferSource(i);if(!o){var a="CREATE_BUFFERSOURCE_FAILED";return n(a),void c.default.error("[".concat(e.streamId,"] "),a)}r.source=o,r.resumeAt=Date.now(),r.resumeOffset=r.pauseOffset,r.state=e.audioMixing.states.BUSY,r.pauseAt=null,r.pauseOffset=null,n(null)}else e._handleAudioMixingInvalidStateError("_resumeOneEffect",t,n)},e._getOneEffectDuration=function(t){var n=e.audioMixing.sounds[t.soundId];return n.options&&n.options.filePath&&e.audioMixing.buffer[n.options.filePath]?1e3*e.audioMixing.buffer[n.options.filePath].duration:null},e._getOneEffectCurrentPosition=function(t,n){var r=e.audioMixing.sounds[t.soundId];return r.state===e.audioMixing.states.PAUSED?r.pauseOffset%e._getOneEffectDuration(t):r.state===e.audioMixing.states.BUSY?r.resumeAt?(Date.now()-r.resumeAt+r.resumeOffset)%e._getOneEffectDuration(t):(Date.now()-r.startAt+r.startOffset)%e._getOneEffectDuration(t):void(n&&e._handleAudioMixingInvalidStateError("_getOneEffectCurrentPosition",t))},e._setOneEffectPosition=function(t,n,r){var i=e.audioMixing.sounds[t.soundId];if(i.state===e.audioMixing.states.BUSY){if(!e._stopAudioMixingBufferSource(t))return void e._handleAudioMixingNoSourceError("_setOneEffectPosition",t,r);var o={soundId:t.soundId,filePath:i.options.filePath,loop:i.options.loop,cycle:i.options.cycle,playTime:n},a=e._startAudioMixingBufferSource(o);if(!a){var s="CREATE_BUFFERSOURCE_FAILED";return r&&r(s),void c.default.error("[".concat(e.streamId,"] "),s)}i.source=a,i.startAt=Date.now(),i.startOffset=n,i.resumeAt=null,i.resumeOffset=null,i.pauseOffset=null,i.pauseAt=null}else{if(i.state!==e.audioMixing.states.PAUSED)return void e._handleAudioMixingInvalidStateError("_setOneEffectPosition",t,r);i.pauseOffset=n}r&&r(null)},e.startAudioMixing=function(t,n){var r=f.report.reportApiInvoke(e.sid,{callback:function(t){if(t)return n&&n(t);e.dispatchEvent({type:"audioMixingPlayed"}),n&&n(null)},getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.startAudioMixing",options:t});Object(S.checkValidObject)(t,"options");var o=t.filePath,a=t.cacheResource,s=t.cycle,c=t.loop,d=t.playTime,u=t.replace;Object(S.checkValidString)(o,"filePath",1,Object(l.getParameter)("FILEPATH_LENMAX"),!1),Object(S.checkValidNumber)(d,"playTime",0,1e8),!Object(S.isEmpty)(s)&&Object(S.checkValidNumber)(s,"cycle"),!Object(S.isEmpty)(c)&&Object(S.checkValidBoolean)(c,"loop"),!Object(S.isEmpty)(u)&&Object(S.checkValidBoolean)(u,"replace"),!Object(S.isEmpty)(a)&&Object(S.checkValidBoolean)(a,"cacheResource");var p=i()({soundId:-1},t);e._playOneEffect(p,r)},e.stopAudioMixing=function(t){var n=f.report.reportApiInvoke(e.sid,{callback:t,getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.stopAudioMixing"});e._stopOneEffect({soundId:-1},n)},e.pauseAudioMixing=function(t){var n=f.report.reportApiInvoke(e.sid,{callback:t,getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.pauseAudioMixing"});return e._pauseOneEffect({soundId:-1},n)},e.resumeAudioMixing=function(t){var n=f.report.reportApiInvoke(e.sid,{callback:function(n,r){if(n)return t&&t(n);e.dispatchEvent({type:"audioMixingPlayed"}),t&&t(null)},getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.resumeAudioMixing"});e._resumeOneEffect({soundId:-1},n)},e.adjustAudioMixingVolume=function(t){var n=f.report.reportApiInvoke(e.sid,{getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.adjustAudioMixingVolume",options:arguments,tag:"tracer"});Object(S.checkValidNumber)(t,"volume",0,100),e.audioMixing.sounds[-1].volume=t,e._flushAudioMixingMuteStatus(),n()},e.getAudioMixingDuration=function(){var t=f.report.reportApiInvoke(e.sid,{getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.getAudioMixingDuration"}),n=e._getOneEffectDuration({soundId:-1});return t(null,n),n},e.getAudioMixingCurrentPosition=function(){var t=f.report.reportApiInvoke(e.sid,{getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.getAudioMixingCurrentPosition"}),n=e._getOneEffectCurrentPosition({soundId:-1},!0);return t(null,n),n},e.setAudioMixingPosition=function(t,n){var r=f.report.reportApiInvoke(e.sid,{callback:n,options:arguments,tag:"tracer",getStates:e._getOneEffectStates({soundId:-1}),name:"Stream.setAudioMixingPosition"});Object(S.checkValidNumber)(t,"position",0,1e8),e._setOneEffectPosition({soundId:-1},t,r)},e.playEffect=function(t,n){var r=f.report.reportApiInvoke(e.sid,{callback:function(t){if(t)return n&&n(t);e.dispatchEvent({type:"effectPlayed"}),n&&n(null)},name:"Stream.playEffect",options:t});Object(S.checkValidObject)(t,"options");var i=t.soundId,o=t.filePath,a=t.cycle;Object(S.checkValidNumber)(i,"soundId",1,1e4),Object(S.checkValidString)(o,"filePath",0,Object(l.getParameter)("FILEPATH_LENMAX"),!1),!Object(S.isEmpty)(a)&&Object(S.checkValidNumber)(a,"cycle"),e._playOneEffect(t,r)},e.stopEffect=function(t,n){var r=f.report.reportApiInvoke(e.sid,{callback:n,getStates:e._getOneEffectStates({soundId:t}),name:"Stream.stopEffect"});Object(S.checkValidNumber)(t,"soundId",1,1e4),e._stopOneEffect({soundId:t},r)},e.stopAllEffects=function(t){var n=f.report.reportApiInvoke(e.sid,{callback:t,name:"Stream.stopAllEffect"}),r=!1,i=0,o=0,a=function(e){r||(e?(n(e),r=!0):i+=1,i===o&&(n(null),r=!0))};for(var s in e.audioMixing.sounds){var c=e.audioMixing.sounds[s];-1!==c.soundId&&(c.state!==e.audioMixing.states.BUSY&&c.state!==e.audioMixing.states.PAUSED||(o++,e._stopOneEffect({soundId:s},a)))}o||n(null)},e.preloadEffect=function(t,n,r){var i=f.report.reportApiInvoke(e.sid,{callback:r,options:arguments,tag:"tracer",name:"Stream.preloadEffect"});Object(S.checkValidNumber)(t,"soundId",1,1e4),Object(S.checkValidString)(n,"filePath",1,Object(l.getParameter)("FILEPATH_LENMAX"),!1),e._initSoundIfNotExists(t,n),e.audioMixing.buffer[n]?i(null):e.loadAudioBuffer(n,n,i)},e.unloadEffect=function(t,n){var r=f.report.reportApiInvoke(e.sid,{callback:n,options:arguments,tag:"tracer",name:"Stream.unloadEffect"});Object(S.checkValidNumber)(t,"soundId",1,1e4);var i=e.audioMixing.sounds[t];if(!i){var o="SOUND_NOT_EXISTS";return c.default.error(o,t),void r(o)}var a=i.options?i.options.filePath:i.filePath;if(a)delete e.audioMixing.buffer[a],delete e.audioMixing.sounds[t],r(null);else{var s="SOUND_BUFFER_NOT_FOUND";c.default.error(s,t),r(s)}},e.pauseEffect=function(t,n){var r=f.report.reportApiInvoke(e.sid,{callback:n,options:arguments,tag:"tracer",name:"Stream.pauseEffect"});return e._pauseOneEffect({soundId:t},r)},e.pauseAllEffects=function(t){var n=f.report.reportApiInvoke(e.sid,{callback:t,name:"Stream.pauseAllEffects"}),r=!1,i=0,o=0,a=function(e){r||(e?(n(e),r=!0):i+=1,i===o&&(n(null),r=!0))};for(var s in e.audioMixing.sounds)"-1"!==s&&e.audioMixing.sounds[s].state===e.audioMixing.states.BUSY&&(o++,e._pauseOneEffect({soundId:s},a));o||n(null)},e.resumeEffect=function(t,n){Object(S.checkValidNumber)(t,"soundId",1,1e4);var r=f.report.reportApiInvoke(e.sid,{callback:n,options:arguments,tag:"tracer",name:"Stream.resumeEffect"});return e._resumeOneEffect({soundId:t},r)},e.resumeAllEffects=function(t){var n=f.report.reportApiInvoke(e.sid,{callback:t,name:"Stream.resumeAllEffects"}),r=!1,i=0,o=0,a=function(e){r||(e?(n(e),r=!0):i+=1,i===o&&(n(null),r=!0))};for(var s in e.audioMixing.sounds)"-1"!==s&&e.audioMixing.sounds[s].state===e.audioMixing.states.PAUSED&&(o++,e._resumeOneEffect({soundId:s},a));o||n(null)},e.getEffectsVolume=function(){var t=[];for(var n in e.audioMixing.sounds){var r=e.audioMixing.sounds[n];r&&"-1"!==n&&t.push({soundId:parseInt(n),volume:r.volume})}return t},e.setEffectsVolume=function(t,n){var r=f.report.reportApiInvoke(e.sid,{name:"Stream.setEffectsVolume",options:arguments,tag:"tracer",callback:n});for(var i in Object(S.checkValidNumber)(t,"volume",0,100),e.audioMixing.defaultVolume=t,e.audioMixing.sounds){var o=e.audioMixing.sounds[i];"-1"!==i&&(o.volume=t)}e._flushAudioMixingMuteStatus(),r(null)},e.setVolumeOfEffect=function(t,n,r){var i=f.report.reportApiInvoke(e.sid,{name:"Stream.setVolumeOfEffect",options:arguments,tag:"tracer",callback:r});Object(S.checkValidNumber)(t,"soundId",0,1e4),Object(S.checkValidNumber)(n,"volume",0,100),e._initSoundIfNotExists(t);var o=e.audioMixing.sounds[t];o.volume=n,e._flushAudioMixingMuteStatus(),i(null)}}(t),y.a.addVideoEffectCapability(t),function(e,t){e.videoConstraint={},t.cameraId&&(e.videoConstraint.deviceId={exact:t.cameraId}),t.facingMode&&(e.videoConstraint.facingMode=t.facingMode),e.videoSize&&(e.videoConstraint.width=e.videoSize[0],e.videoConstraint.height=e.videoSize[1]),Object(o.isLegacyChrome)()||(e.videoConstraint.frameRate=30),e.audioConstraint={},t.microphoneId&&(e.audioConstraint.deviceId={exact:t.microphoneId}),Object(o.isLegacyChrome)()||e.audioProcessing&&(void 0!==e.audioProcessing.AGC&&(Object(o.isFireFox)()?e.audioConstraint.autoGainControl=e.audioProcessing.AGC:Object(o.isChrome)()&&(e.audioConstraint.googAutoGainControl=e.audioProcessing.AGC,e.audioConstraint.googAutoGainControl2=e.audioProcessing.AGC)),void 0!==e.audioProcessing.AEC&&(e.audioConstraint.echoCancellation=e.audioProcessing.AEC),void 0!==e.audioProcessing.ANS&&(Object(o.isFireFox)()?e.audioConstraint.noiseSuppression=e.audioProcessing.ANS:Object(o.isChrome)()&&(e.audioConstraint.googNoiseSuppression=e.audioProcessing.ANS))),e.screenConstraint={},t.sourceId&&(e.screenConstraint.sourceId=t.sourceId),t.extensionId&&Object(o.isChrome)()?(e.screenConstraint.extensionId=t.extensionId,e.screenConstraint.mandatory={chromeMediaSource:"desktop",maxWidth:e.screenAttributes.width,maxHeight:e.screenAttributes.height,maxFrameRate:e.screenAttributes.maxFr,minFrameRate:e.screenAttributes.minFr}):(e.screenConstraint.mediaSource="screen",e.screenConstraint.width=e.screenAttributes.width,e.screenConstraint.height=e.screenAttributes.height,e.screenConstraint.frameRate={ideal:e.screenAttributes.maxFr,max:e.screenAttributes.maxFr}),t.mediaSource&&(e.screenConstraint.mediaSource=t.mediaSource),e.setVideoResolution=function(n){var r=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoResolution",options:arguments,tag:"tracer"});if(!(n instanceof Array)){var o=I(n+="");return o&&o.video?(e.videoConstraint=i()(e.videoConstraint,{width:{ideal:o.video.width},height:{ideal:o.video.height}}),t.attributes.resolution=o.attributes.resolution,(a=e.stream&&e.stream.getVideoTracks&&e.stream.getVideoTracks()[0])&&a.applyConstraints?(c.default.debug("setVideoResolution applyConstraints",e.videoConstraint),a.applyConstraints(e.videoConstraint).then(r).catch(r)):r(),!0):(r("NO_PROFILE_".concat(n)),!1)}var a,s=n[0],d=n[1];e.videoConstraint=i()(e.videoConstraint,{width:{ideal:s},height:{ideal:d}}),t.attributes.resolution="".concat(s,"x").concat(d),(a=e.stream&&e.stream.getVideoTracks&&e.stream.getVideoTracks()[0])&&a.applyConstraints?(c.default.debug("setVideoResolution applyConstraints",e.videoConstraint),y.a.disableVideoEffect(e).then((function(){return a.applyConstraints(e.videoConstraint).then(r).catch(r)})).then((function(){return y.a.restoreVideoEffect(e)}))):r()},e.setVideoFrameRate=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoFrameRate",options:arguments,tag:"tracer"});if(Object(o.isFireFox)())return n("FIREFOX_NOT_SUPPORTED"),!1;if("object"===T()(t)&&t instanceof Array&&t.length>1){e.videoConstraint=i()(e.videoConstraint,{frameRate:t[0]}),e.attributes.minFrameRate=t[0],e.attributes.maxFrameRate=t[1];var r=e.stream&&e.stream.getVideoTracks&&e.stream.getVideoTracks()[0];return r&&r.applyConstraints?(c.default.debug("setVideoFrameRate applyConstraints",e.videoConstraint),r.applyConstraints(e.videoConstraint).then(n).catch(n)):n(),!0}return n("INVALID_PARAM_".concat(JSON.stringify(t))),!1},e.setVideoBitRate=function(n){var r=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoBitRate",options:arguments,tag:"tracer"});return"object"===T()(n)&&n instanceof Array&&n.length>1?(t.attributes.minVideoBW=n[0],t.attributes.maxVideoBW=n[1],e.connectionSpec&&(e.connectionSpec.minVideoBW=n[0],e.connectionSpec.maxVideoBW=n[1]),e.pc&&e.pc.renegotiate&&e.pc.renegotiate(),r(),!0):(r("INVALID_PARAM_".concat(JSON.stringify(n))),!1)},e.setScreenBitRate=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.setScreenBitRate",options:arguments,tag:"tracer"});return"object"===T()(t)&&t instanceof Array&&t.length>1?(e.screenAttributes.minVideoBW=t[0],e.screenAttributes.maxVideoBW=t[1],n(),!0):(n("INVALID_PARAM_".concat(JSON.stringify(t))),!1)},e.setScreenProfile=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.setScreenProfile",options:arguments,tag:"tracer"});Object(S.checkValidEnum)(t,"profile",["480p_1","480p_2","720p_1","720p_2","1080p_1","1080p_2"]);var r=I(t);return r&&r.screen?(e.screenConstraint.mandatory?(e.screenConstraint.mandatory.maxWidth=r.screen.width,e.screenConstraint.mandatory.maxHeight=r.screen.height,r.screen.frameRate&&r.screen.frameRate.min&&r.screen.frameRate.max&&(e.screenConstraint.mandatory.minFrameRate=r.screen.frameRate.min,e.screenConstraint.mandatory.maxFrameRate=r.screen.frameRate.max)):e.screenConstraint=i()(e.screenConstraint,r.screen),e.screenAttributes.width=r.screen.width,e.screenAttributes.height=r.screen.height,e.screenAttributes.minFr=r.screen.frameRate.min,e.screenAttributes.maxFr=r.screen.frameRate.max,n(),!0):(n("NO_SCREEN_PROFILE_".concat(JSON.stringify(t))),!1)},e.setVideoProfileCustom=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoProfileCustom",options:arguments,tag:"tracer"});e.setVideoResolution(t[0]),e.setVideoFrameRate([t[1],t[1]]),e.setVideoBitRate([t[2],t[2]]),n()},e.setVideoProfileCustomPlus=function(n){var r=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoProfileCustom",options:arguments,tag:"tracer"});e.setVideoResolution([n.width,n.height]),t.attributes.resolution="".concat(n.width,"x").concat(n.height),e.setVideoFrameRate([n.framerate,n.framerate]),e.setVideoBitRate([n.bitrate,n.bitrate]),r()},e.setVideoProfile=function(n){var r=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoProfile",options:arguments,tag:"tracer"}),a=I(n);if(!a){var s="Invalid Profile ".concat(n);throw new Error(s)}if(e.profile=n,a&&a.video){e.profile=a.profileName,e.videoConstraint=i()(e.videoConstraint,a.video),e.connectionSpec&&a.attributes.maxVideoBW&&(e.connectionSpec.minVideoBW=a.attributes.minVideoBW,e.connectionSpec.maxVideoBW=a.attributes.maxVideoBW),Object(o.isEdge)()&&(e.videoConstraint.frameRate.max=60),Object(o.isFireFox)()&&(e.videoConstraint.frameRate=30),t.attributes=i()(t.attributes,a.attributes),e.pc&&e.pc.renegotiate&&e.pc.renegotiate();var d=e.stream&&e.stream.getVideoTracks&&e.stream.getVideoTracks()[0];return d&&d.applyConstraints?(c.default.debug("setVideoProfile applyConstraints",e.videoConstraint),y.a.disableVideoEffect(e).then((function(){return d.applyConstraints(e.videoConstraint)})).then((function(){return y.a.restoreVideoEffect(e)})).then((function(t){return new Promise((function(n,i){r(t),setTimeout((function(){Object(h.vsResHack)(e.stream,(function(t,r){e.videoWidth=t,e.videoHeight=r,n()}),(function(t){c.default.warning("[".concat(e.streamId,"] vsResHack failed: "),t),i()}))}),2500)}))})).catch(r)):r(),!0}return r("INVALID_VIDEO_PROFILE_".concat(n)),!1},e.setAudioProfile=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.setAudioProfile",options:arguments,tag:"tracer"});Object(S.checkValidEnum)(t,"profile",["speech_low_quality","speech_standard","music_standard","standard_stereo","high_quality","high_quality_stereo"]),e.audioProfile=t;var r=A(t);return e.highQuality=r.highQuality,e.stereo=r.stereo,e.speech=r.speech,e.lowQuality=r.lowQuality,e.stereo&&Object(o.isChrome)()&&(e.audioConstraint.googAutoGainControl=!1,e.audioConstraint.googAutoGainControl2=!1,e.audioConstraint.echoCancellation=!1,e.audioConstraint.googNoiseSuppression=!1),n(),!0},e.setVideoEncoderConfiguration=function(t){Object(S.checkValidObject)(t,"config");var n=f.report.reportApiInvoke(e.sid,{name:"Stream.setVideoEncoderConfiguration",options:t,tag:"tracer"});t.resolution&&(Object(S.checkValidNumber)(t.resolution.width,"config.resolution.width"),Object(S.checkValidNumber)(t.resolution.height,"config.resolution.height"),e.setVideoResolution([t.resolution.width,t.resolution.height])),t.frameRate&&(Object(S.checkValidNumber)(t.frameRate.min,"config.frameRate.min"),Object(S.checkValidNumber)(t.frameRate.max,"config.frameRate.max"),e.setVideoFrameRate([t.frameRate.min,t.frameRate.max])),t.bitrate&&(Object(S.checkValidNumber)(t.bitrate.min,"config.bitrate.min",1,1e7),Object(S.checkValidNumber)(t.bitrate.max,"config.bitrate.max",1,1e7),e.setVideoBitRate([t.bitrate.min,t.bitrate.max])),n()},e.getSupportedProfile=function(t){var n=f.report.reportApiInvoke(e.sid,{name:"Stream.getSupportedProfile",options:arguments,tag:"tracer",callback:t});if(!e.local){var r="ONLY_LOCAL_STREAM_SUPPORTED";return c.default.error(r),n(r)}if(!e.stream){r="STREAM_NOT_INIT";return c.default.error(r),n(r)}if(!e.stream.getVideoTracks){r="TRACK_NOT_SUPPORT";return c.default.error(r),n(r)}var i=e.stream.getVideoTracks()[0];if(!i){r="NO_VIDEO_TRACK_FOUND";return c.default.error(r),n(r)}if(!i.getCapabilities){r="GETCAPABILITY_NOT_SUPPORT";return c.default.error(r),n(r)}var o=i.getCapabilities(),a=b(o);return n(null,a)}}(t,e),t.getId=function(){return t.streamId},t.getUserId=function(){return t.userId},t.checkDualStreamEnabled=function(){if(Object(l.getParameter)("DUALSTREAM_OPERATION_CHECK")&&t.isDualStream){return c.default.error("Operation not permitted: ".concat("DUAL_STREAM_ENABLED")),"DUAL_STREAM_ENABLED"}return!1},t.setUserId=function(e){var n=f.report.reportApiInvoke(t.sid,{name:"Stream.setUserId",options:arguments,tag:"tracer"});t.userId&&c.default.warning("[".concat(t.streamId,"] Stream.userId ").concat(t.userId," => ").concat(e)),t.userId=e,n()},t.getAttributes=function(){return e.screen?t.screenAttributes:e.attributes},t.hasAudio=function(){return!!t.audio},t.hasVideo=function(){return!!t.video},t.hasScreen=function(){return!!t.screen},t.hasScreenAudio=function(){return!!t.screenAudio},t.isVideoOn=function(){return(t.hasVideo()||t.hasScreen())&&!t.userMuteVideo},t.isAudioOn=function(){return t.hasAudio()&&!t.userMuteAudio},t.init=function(r,i){var o=f.report.reportApiInvoke(t.sid,{callback:function(e,t){if(e)return i&&i(e);r&&r(t)},name:"Stream.init",options:arguments,tag:"tracer"}),a=((new Date).getTime(),arguments[2]);if(void 0===a&&(a=2),!0===t.initialized)return o({type:"warning",msg:"STREAM_ALREADY_INITIALIZED"});if(!0!==t.local)return o({type:"warning",msg:"STREAM_NOT_LOCAL"});var s=Math.random().toString().slice(3);t._streamInitID=s,t.videoSource?t.videoName="videoSource":t.video&&(t.videoName=E.a.searchDeviceNameById(e.cameraId)||"default"),t.audioSource?t.audioName="audioSource":t.audio&&(t.audioName=E.a.searchDeviceNameById(e.microphoneId)||"default"),t.screen&&(t.screenName=e.extensionId||"default");try{if(e.audio||e.video||e.screen||e.screenAudio||e.videoSource||e.audioSource){c.default.debug("[".concat(t.streamId,"] Requested access to local media"));var d={streamId:t.streamId};e.videoSource?d.videoSource=e.videoSource:e.screen?d.screen=t.screenConstraint:e.video&&(d.video=t.videoConstraint),e.audioSource?d.audioSource=e.audioSource:e.screenAudio?d.screenAudio=e.screenAudio:e.audio&&(d.audio=t.audioConstraint),Object(m.b)(d,(function(r){if(d.screenAudio&&!r.getAudioTracks()[0]&&c.default.warning("[".concat(t.streamId,"] Audio sharing is not selected")),d.screen&&c.default.debug("[".concat(t.streamId,"] User has granted access to screen sharing")),(d.video||d.audio)&&c.default.debug("[".concat(t.streamId,"] User has granted access to local media")),null===t._streamInitID){r.getTracks().forEach((function(e){e.stop()}));var i={type:"error",msg:"STREAM_IS_CLOSED",info:"stream is closed and cannot be initialized"};return c.default.error(t.streamId,i.info),void o(i)}if(t._streamInitID!==s){r.getTracks().forEach((function(e){e.stop()}));i={type:"error",msg:"ABORT_OTHER_INIT",info:"stream initialization is aborted because of another stream.init"};return c.default.error(t.streamId,i.info),void o(i)}t.dispatchEvent({type:"accessAllowed"}),t.stream=r,t.initialized=!0,t.reloadDeviceName(),t.hasVideo()&&Object(h.vsResHack)(r,(function(e,n){t.videoWidth=e,t.videoHeight=n}),(function(e){c.default.warning("[".concat(t.streamId,"] vsResHack failed: "),e)})),e.screen&&t.stream&&t.stream.getVideoTracks()[0]&&(t.stream.getVideoTracks()[0].onended=function(){t.dispatchEvent({type:"stopScreenSharing"})}),t.stream&&t.stream.getTracks&&t.stream.getTracks().forEach((function(r){r&&!r.onended&&(r.onended=n),"video"===r.kind&&e.optimizationMode&&(r.contentHint=e.optimizationMode,r.contentHint===e.optimizationMode&&c.default.debug("[".concat(t.streamId,"] set content hint to"),e.optimizationMode))})),o()}),(function(e){var n={type:"error",info:null};switch(e&&(n.msg=e.name||e.code||e,e.message&&(n.info=e.message),e.code&&(n.info?n.info+=". "+e.code:n.info=" "+e.code),e.constraint&&(n.info?n.info+=". Constraint: "+e.constraint:n.info="constraint: "+e.constraint)),n.msg){case"Starting video failed":case"TrackStartError":if(t.videoConstraint&&(delete t.videoConstraint.width,delete t.videoConstraint.height),a>0)return void setTimeout((function(){t.init((function(e){return o(e)}),o,a-1)}),1);n.msg="MEDIA_OPTION_INVALID";break;case"DevicesNotFoundError":n.msg="DEVICES_NOT_FOUND";break;case"NotSupportedError":n.msg="NOT_SUPPORTED";break;case"PermissionDeniedError":case"InvalidStateError":n.msg="PERMISSION_DENIED",t.dispatchEvent({type:"accessDenied"});break;case"PERMISSION_DENIED":case"NotAllowedError":t.dispatchEvent({type:"accessDenied"});break;case"ConstraintNotSatisfiedError":n.msg="CONSTRAINT_NOT_SATISFIED";break;default:n.msg||(n.msg="UNDEFINED")}var r="Media access ".concat(n.msg).concat(n.info?": "+n.info:"");c.default.error("[".concat(t.streamId,"] "),r),o(n)}))}else o({type:"warning",msg:"STREAM_HAS_NO_MEDIA_ATTRIBUTES"})}catch(e){c.default.error("[".concat(t.streamId,"] Stream init: "),e),o({type:"error",msg:e.message||e})}},t.reloadDeviceName=function(){if(t.stream){if(t.stream.getVideoTracks){var e=t.stream.getVideoTracks()[0];e&&e.label&&(t.videoName=e.label)}if(t.stream.getAudioTracks){var n=t.stream.getAudioTracks()[0];n&&n.label&&(t.audioName=n.label)}}},t.close=function(){var e=f.report.reportApiInvoke(null,{name:"Stream.close",options:arguments,tag:"tracer"});if(c.default.debug("[".concat(t.streamId,"] Close stream with id"),t.streamId),t._originStream)try{t._originStream.getTracks().map((function(e){return e.stop()}))}catch(e){}if(void 0!==t.stream){var n=t.stream.getTracks();for(var r in n)n.hasOwnProperty(r)&&(n[r].stop(),n[r].onended=null);!t.isLowStream&&t.local?y.a.disableVideoEffect(t).then((function(){t.stream=void 0})):(t.stream&&t.stream.clean&&t.stream.clean(),t.stream=void 0)}if(t._originStream){n=t._originStream.getTracks();for(var r in n)n.hasOwnProperty(r)&&(n[r].stop(),n[r].onended=null);!t.isLowStream&&t.local?y.a.disableVideoEffect(t).then((function(){t._originStream=void 0})):(t._originStream&&t._originStream.clean&&t._originStream.clean(),t._originStream=void 0)}if(Object(o.isSafari)()&&t.pc&&t.pc.peerConnection&&t.pc.peerConnection.removeTrack&&t.pc.peerConnection.getSenders){var i=t.pc.peerConnection.getSenders();i.forEach((function(e){e&&(c.default.debug("[".concat(t.streamId,"] Remove Track"),e),t.pc.peerConnection.removeTrack(e))}))}t.local&&(t.initialized=!1),t._streamInitID=null,t._onAudioMute=void 0,t._onAudioUnmute=void 0,t._onVideoMute=void 0,t._onVideoUnmute=void 0,t.lowStream&&t.lowStream.close(),t.player&&t.player.video&&t.player.video.srcObject&&(t.player.video.srcObject=null),t.player&&t.player.audio&&t.player.audio.srcObject&&(t.player.audio.srcObject=null),e()},t.enableAudio=function(){var e,n=f.report.reportApiInvoke(t.sid,{name:"Stream.enableAudio",options:arguments,tag:"tracer"});return c.default.deprecate("[".concat(t.streamId,"] Stream.enableAudio is deprecated and will be removed in the future. Use Stream.unmuteAudio instead")),t.userMuteAudio||c.default.warning("[".concat(t.streamId,"] User already enableAudio")),t.userMuteAudio=!1,n(null,e=!t.peerMuteAudio&&t._unmuteAudio()),e},t.disableAudio=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.disableAudio",options:arguments,tag:"tracer"});c.default.deprecate("[".concat(t.streamId,"] Stream.disableAudio is deprecated and will be removed in the future. Use Stream.muteAudio instead")),t.userMuteAudio&&c.default.warning("[".concat(t.streamId,"] User already disableAudio")),t.userMuteAudio=!0;var n=t._muteAudio();return e(null,n),n},t.enableVideo=function(){var e,n=f.report.reportApiInvoke(t.sid,{name:"Stream.enableVideo",options:arguments,tag:"tracer"});return c.default.deprecate("[".concat(t.streamId,"] Stream.enableVideo is deprecated and will be removed in the future. Use Stream.unmuteVideo instead")),t.userMuteVideo||c.default.warning("[".concat(t.streamId,"] User already enableVideo")),t.userMuteVideo=!1,t.lowStream&&(t.lowStream.userMuteVideo=!1),n(null,e=!t.peerMuteVideo&&t._unmuteVideo()),e},t.disableVideo=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.disableVideo",options:arguments,tag:"tracer"});c.default.deprecate("[".concat(t.streamId,"] Stream.disableVideo is deprecated and will be removed in the future. Use Stream.muteVideo instead")),t.userMuteVideo&&c.default.warning("[".concat(t.streamId,"] User already disableVideo")),t.userMuteVideo=!0,t.lowStream&&(t.lowStream.userMuteVideo=!0);var n=t._muteVideo();return e(null,n),n},t.unmuteAudio=function(){var e,n=f.report.reportApiInvoke(t.sid,{name:"Stream.unmuteAudio",options:arguments,tag:"tracer"});return t.userMuteAudio||c.default.warning("[".concat(t.streamId,"] User already unmuteAudio")),t.userMuteAudio=!1,n(null,e=!t.peerMuteAudio&&t._unmuteAudio()),e},t.muteAudio=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.muteAudio",options:arguments,tag:"tracer"});t.userMuteAudio&&c.default.warning("[".concat(t.streamId,"] User already muteAudio")),t.userMuteAudio=!0;var n=t._muteAudio();return e(null,n),n},t.unmuteVideo=function(){var e,n=f.report.reportApiInvoke(t.sid,{name:"Stream.unmuteVideo",options:arguments,tag:"tracer"});return t.userMuteVideo||c.default.warning("[".concat(t.streamId,"] User already unmuteVideo")),t.userMuteVideo=!1,t.lowStream&&(t.lowStream.userMuteVideo=!1),n(null,e=!t.peerMuteVideo&&t._unmuteVideo()),e},t.muteVideo=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.muteVideo",options:arguments,tag:"tracer"});t.userMuteVideo&&c.default.warning("[".concat(t.streamId,"] User already muteVideo")),t.userMuteVideo=!0,t.lowStream&&(t.lowStream.userMuteVideo=!0);var n=t._muteVideo();return e(null,n),n},t._unmuteAudio=function(){return c.default.debug("[".concat(t.streamId,"] Unmuted audio stream with id "),t.streamId),t._flushAudioMixingMuteStatus(!1),!(!t.hasAudio()||!t.initialized||void 0===t.stream||!0===t.stream.getAudioTracks()[0].enabled)&&(t._onAudioUnmute&&t._onAudioUnmute(),t.pc&&(t.pc.isAudioMute=!1),t.stream.getAudioTracks()[0].enabled=!0,!0)},t._isAudioMuted=function(){if(t.stream&&t.hasAudio()){var e=t.stream.getAudioTracks();return e.length>0&&!e[0].enabled}return!1},t._isVideoMuted=function(){if(t.stream&&t.hasVideo()){var e=t.stream.getVideoTracks();return e.length>0&&!e[0].enabled}return!1},t._muteAudio=function(){return c.default.debug("[".concat(t.streamId,"] Muted audio stream with id "),t.streamId),t._flushAudioMixingMuteStatus(!0),!!(t.hasAudio()&&t.initialized&&void 0!==t.stream&&t.stream.getAudioTracks()[0].enabled)&&(t._onAudioMute&&t._onAudioMute(),t.pc&&(t.pc.isAudioMute=!0),t.stream.getAudioTracks()[0].enabled=!1,t.sid&&f.report.audioSendingStopped(t.sid,{succ:!0,reason:"muteAudio"}),!0)},t._unmuteVideo=function(){return c.default.debug("[".concat(t.streamId,"] Unmuted video stream with id"),t.streamId),!(!t.initialized||void 0===t.stream||!t.stream.getVideoTracks().length||!0===t.stream.getVideoTracks()[0].enabled)&&(t._onVideoUnmute&&t._onVideoUnmute(),t.pc&&(t.pc.isVideoMute=!1),t.stream.getVideoTracks()[0].enabled=!0,t.lowStream&&t.lowStream._unmuteVideo(),!0)},t._muteVideo=function(){return c.default.debug("[".concat(t.streamId,"] Muted video stream with id"),t.streamId),!!(t.initialized&&void 0!==t.stream&&t.stream.getVideoTracks().length&&t.stream.getVideoTracks()[0].enabled)&&(t._onVideoMute&&t._onVideoMute(),t.pc&&(t.pc.isVideoMute=!0),t.stream.getVideoTracks()[0].enabled=!1,t.lowStream&&t.lowStream._muteVideo(),t.sid&&f.report.videoSendingStopped(t.sid,{succ:!0,reason:"muteVideo"}),!0)},t.addTrack=function(r){if(t.audio&&"audio"===r.kind)c.default.warning("already added audio track");else if(t.video&&"video"===r.kind)c.default.warning("already added video track");else{var i=f.report.reportApiInvoke(t.sid,{name:"Stream.addTrack",options:arguments,tag:"tracer"});if(t.pc&&t.pc.addTrack(r,t.stream),"audio"==r.kind){t._cleanupAudioMixing();var o=new MediaStream;t.userMuteAudio&&(r.enabled=!1),o.addTrack(r);var a=t.stream.getVideoTracks()[0];a&&o.addTrack(a),t.audio=!0,e.audio=!0,t.stream=o,t.audioLevelHelper=null,t.player&&t.player.video&&(t.player.video.srcObject=t.stream)}else t.userMuteVideo&&(r.enabled=!1),t.stream.addTrack(r),t.video=!0,e.video=!0;r.onended||(r.onended=n),i()}},t.removeTrack=function(n){if(n)if(t.audio||"audio"!==n.kind)if(t.video||"video"!==n.kind){var r=f.report.reportApiInvoke(t.sid,{name:"Stream.removeTrack",options:arguments,tag:"tracer"});t.pc&&t.pc.removeTrack(n,t.stream),t.stream.removeTrack(n),t._cleanupAudioMixing(),"audio"===n.kind?(t.audio=!1,e.audio=!1):(t.video=!1,e.video=!1),t.audioLevelHelper=null,"live"==n.readyState&&(n.stop(),c.default.debug("[".concat(t.streamId,"] Track ").concat(n.kind," Stopped"))),r()}else c.default.warning("already removed video track");else c.default.warning("already removed audio track");else c.default.warning("track doesn't exist.")},t.setAudioOutput=function(e,n,r){var i=f.report.reportApiInvoke(t.sid,{callback:function(e,t){if(e)return r&&r(e);n&&n(t)},name:"Stream.setAudioOutput",options:arguments,tag:"tracer"});return Object(S.isValidString)(e,1,255)?(t.audioOutput=e,t.player?void t.player.setAudioOutput(e,(function(){return i()}),i):i()):(c.default.error("[".concat(t.streamId,"] setAudioOutput Invalid Parameter"),e),i(u.default.INVALID_PARAMETER))},t.play=function(e,n,r){"function"==typeof n&&(r=n,n=null),c.default.debug("[".concat(t.streamId,"] play()."),e,n);var i=f.report.reportApiInvoke(t.sid,{name:"Stream.play",options:arguments,tag:"tracer",callback:r});if(Object(S.checkValidString)(e,"elementID"),Object(S.isEmpty)(n)||(Object(S.isEmpty)(n.fit)||Object(S.checkValidEnum)(n.fit,"fit",["cover","contain"]),Object(S.isEmpty)(n.muted)||Object(S.checkValidBoolean)(n.muted,"muted")),t.player)c.default.warning("[".concat(t.streamId,"] Stream.play(): Stream is already playing. Fallback to resume stream")),t.resume().then((function(){i(null)})).catch(i);else{t.elementID=e,t.playOptions=n,!t.local||t.video||t.screen?(t.player=new g({id:t.getId(),stream:t,elementID:e,options:n}),t.local&&y.a.applyEffectInPlayer(t)):t.hasAudio()&&(t.player=new g({id:t.getId(),stream:t,elementID:e,options:n}));var o={video:null,audio:null},a=function e(n){if(o[n.mediaType]=n,o.video&&o.audio)if(t.removeEventListener("player-status-change",e),o.video.isErrorState||o.audio.isErrorState){var r=o.video.isErrorState?o.video:o.audio;i({isErrorState:!0,status:r.status,reason:r.reason,video:o.video,audio:o.audio})}else"aborted"===o.video.status&&"aborted"===o.audio.status?i({status:"aborted",reason:"stop",video:o.video,audio:o.audio}):i(null)};t.on("player-status-change",a),t.audioOutput&&t.player.setAudioOutput(t.audioOutput),void 0!==t.audioLevel&&t.player.setAudioVolume(t.audioLevel),t._flushAudioMixingMuteStatus(!1)}},t.stop=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.stop",options:arguments,tag:"tracer"});c.default.debug("[".concat(t.streamId,"] Stop stream player with id "),t.streamId),t.player?(y.a.removeEffectFromLocalPlayer(t),t.player.destroy(),delete t.player):c.default.error("[".concat(t.streamId,"] Stream.stop(): Stream is not playing")),t._flushAudioMixingMuteStatus(!0),e()},t.isPlaying=function(){return!!t.player},t.isPaused=function(){return!!t.player&&(!!(t.player.video&&t.player.video.paused&&t.player.mediaElemExists(t.player.video))||!!(t.player.audio&&t.player.audio.paused&&t.player.mediaElemExists(t.player.audio)))},t.resume=function(){var e,n;return t.player?(t.player.video&&t.player.video.play&&(e=t.player.video.play()),e=e||Promise.resolve(),t.player.audio&&t.player.audio.play&&(n=t.player.audio.play()),n=n||Promise.resolve(),Promise.all([e,n])):Promise.reject("NO_PLAYER_FOUND")},t.getVideoTrack=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.getVideoTrack",options:arguments,tag:"tracer"});if(t.stream&&t.stream.getVideoTracks){var n=t.stream.getVideoTracks()[0];if(n)return c.default.info("[".concat(t.streamId,"] getVideoTrack"),n),e(),n}c.default.info("[".concat(t.streamId,"] getVideoTrack None")),e(null,"getVideoTrack None")},t.getAudioTrack=function(){var e=f.report.reportApiInvoke(t.sid,{name:"Stream.getAudioTrack",options:arguments,tag:"tracer"});if(t.stream&&t.stream.getAudioTracks){var n=t.stream.getAudioTracks()[0];if(n)return c.default.info("[".concat(t.streamId,"] getAudioTracks"),n),e(),n}c.default.info("[".concat(t.streamId,"] getAudioTracks None")),e(null,"getAudioTracks None")},t._hasVideoTracks=function(){return!!(t.stream&&t.stream.getVideoTracks&&t.stream.getVideoTracks()[0])},t._hasAudioTracks=function(){return!!(t.stream&&t.stream.getAudioTracks&&t.stream.getAudioTracks()[0])},t._replaceMediaStreamTrack=function(e,n,r){if(t.stream){if("video"==e.kind){if(o=t.stream.getVideoTracks()[0])return t.userMuteVideo&&(e.enabled=!1),t.stream.removeTrack(o),t.stream.addTrack(e),c.default.debug("[".concat(t.streamId,"] _replaceMediaStreamTrack ").concat(e.kind," SUCCESS")),"live"==o.readyState&&(o.stop(),c.default.debug("[".concat(t.streamId,"] Track ").concat(o.kind," Stopped"))),n&&n();var i="MEDIASTREAM_TRACK_NOT_FOUND";return c.default.error("[".concat(t.streamId,"] MEDIASTREAM_TRACK_NOT_FOUND ").concat(e.kind)),r(i)}if("audio"==e.kind){var o;if(o=t.stream.getAudioTracks()[0]){t.userMuteAudio&&(e.enabled=!1);var a=new MediaStream;a.addTrack(e);var s=t.stream&&t.stream.getVideoTracks()[0];return s&&a.addTrack(s),t.stream=a,t.audioLevelHelper=null,t.player&&t.player.video&&(t.player.video.srcObject=t.stream),c.default.debug("[".concat(t.streamId,"] _replaceMediaStreamTrack SUCCESS")),"live"==o.readyState&&(o.stop(),c.default.debug("[".concat(t.streamId,"] Track ").concat(o.kind," Stopped"))),n&&n()}i="MEDIASTREAM_TRACK_NOT_FOUND";return c.default.error("[".concat(t.streamId,"] MEDIASTREAM_TRACK_NOT_FOUND ").concat(e.kind)),r(i)}i="INVALID_TRACK_TYPE";return c.default.error("[".concat(t.streamId,"] _replaceMediaStreamTrack ").concat(i," ").concat(e.kind)),r&&r(i)}i="NO_STREAM_FOUND";return c.default.error("[".concat(t.streamId,"] _replaceMediaStreamTrack ").concat(i)),r&&r(i)},t.replaceTrack=function(e,r,i){var o=f.report.reportApiInvoke(t.sid,{callback:function(e,t){if(e)return i&&i(e);r&&r(t)},name:"Stream.replaceTrack",options:arguments,tag:"tracer"});return e&&e.kind?(t._cleanupAudioMixing(),e.onended||(e.onended=n),t.pc&&t.pc.hasSender&&t.pc.hasSender(e.kind)?void t.pc.replaceTrack(e,(function(){return c.default.debug("[".concat(t.streamId,"] PeerConnection.replaceTrack ").concat(e.kind," SUCCESS")),t._replaceMediaStreamTrack(e,(function(e){return o(null,e)}),o)}),(function(n){return c.default.error("[".concat(t.streamId,"] PeerConnection.replaceTrack ").concat(e.kind," Failed ").concat(n)),o(n)})):t._replaceMediaStreamTrack(e,(function(e){return o(null,e)}),o)):o("INVALID_TRACK")},t.setAudioVolume=function(e){var n=f.report.reportApiInvoke(t.sid,{name:"Stream.setAudioVolume",options:arguments,tag:"tracer"});Object(S.checkValidNumber)(e,"level",0,100),t.audioLevel=e,t.player&&t.player.setAudioVolume(e),n()},t.getStats=function(e,n,r){var a=[];a.push(t._getPCStats(r)),a.push(new Promise((function(e){var n={};t.pc&&t.pc.isSubscriber?null!==window.navigator.userAgent.match("Firefox")&&(Object(v.b)(n,"videoReceiveResolutionHeight",t.videoHeight),Object(v.b)(n,"videoReceiveResolutionWidth",t.videoWidth)):t.pc&&!t.pc.isSubscriber&&((Object(o.isSafari)()||Object(o.isFireFox)())&&(Object(v.b)(n,"videoSendResolutionHeight",t.videoHeight),Object(v.b)(n,"videoSendResolutionWidth",t.videoWidth)),(Object(o.isSafari)()||Object(o.isFireFox)())&&t.uplinkStats&&Object(v.b)(n,"videoSendPacketsLost",t.uplinkStats.uplink_cumulative_lost)),e(n)}))),a.push(new Promise((function(e){var n={};return t.traffic_stats&&t.pc&&t.pc.isSubscriber?(Object(v.b)(n,"accessDelay",t.traffic_stats.access_delay),Object(v.b)(n,"endToEndDelay",t.traffic_stats.e2e_delay),Object(v.b)(n,"videoReceiveDelay",t.traffic_stats.video_delay),Object(v.b)(n,"audioReceiveDelay",t.traffic_stats.audio_delay)):t.traffic_stats&&t.pc&&!t.pc.isSubscriber&&Object(v.b)(n,"accessDelay",t.traffic_stats.access_delay),e(n)}))),Promise.all(a).then((function(n){for(var r={},o=n.length-1;o>=0;o--){var a=n[o];i()(r,a)}e&&setTimeout(e.bind(t,r),0)})).catch((function(e){n&&setTimeout(n.bind(t,e),0)}))},t._getPCStats=function(e){return new Promise((function(n,r){if(!t.pc||"established"!==t.pc.state||!t.pc.getStats){return r("PEER_CONNECTION_NOT_ESTABLISHED")}t.pc.getStats((function(e){if(!t.pc||"established"!==t.pc.state||!t.pc.getStats){return r("PEER_CONNECTION_STATE_CHANGE")}var i=t.pc.isSubscriber?Object(v.c)(e):Object(v.a)(e);return n(i)}),e)})).then((function(e){return t.pc.isSubscriber?(Object(o.isFireFox)()||Object(o.isSafari)())&&(e.videoReceiveResolutionHeight&&"0"!==e.videoReceiveResolutionHeight||e.videoReceiveResolutionWidth&&"0"!==e.videoReceiveResolutionWidth||(Object(v.b)(e,"videoReceiveResolutionHeight",t.videoHeight),Object(v.b)(e,"videoReceiveResolutionWidth",t.videoWidth))):((Object(o.isSafari)()||Object(o.isFireFox)())&&(e.videoSendResolutionHeight&&"0"!==e.videoSendResolutionHeight||e.videoSendResolutionWidth&&"0"!==e.videoSendResolutionWidth||(Object(v.b)(e,"videoSendResolutionHeight",t.videoHeight),Object(v.b)(e,"videoSendResolutionWidth",t.videoWidth))),(Object(o.isSafari)()||Object(o.isFireFox)())&&t.uplinkStats&&Object(v.b)(e,"videoSendPacketsLost",t.uplinkStats.uplink_cumulative_lost)),Promise.resolve(e)}))},t.getAudioLevel=function(){if(t.audioLevelHelper)return t.audioLevelHelper.getAudioLevel();if(t.stream){if(0!==t.stream.getAudioTracks().length)return t.audioLevelHelper=new h.audioLevelHelper(t.stream),t.audioLevelHelper.getAudioLevel();c.default.warning("[".concat(t.streamId,"] can't get audioLevel beacuse no audio trace in stream"))}else c.default.warning("[".concat(t.streamId,"] can't get audioLevel beacuse no stream exist"))},t.setVideoProfile("480p_1"),t._switchVideoDevice=function(e,n,r){if(e===t.cameraId)return n&&n();var o={video:i()({},t.videoConstraint,{deviceId:{exact:e}}),audio:!1};c.default.debug("[".concat(t.streamId,"] ").concat(o)),Object(m.b)(o,(function(i){try{var o=function(){t.isPlaying()&&(t.stop(),t.elementID&&t.play(t.elementID,t.playOptions)),t.cameraId=e,t.videoConstraint.deviceId={exact:e},t.userMuteVideo&&(t.stream.getVideoTracks()[0].enabled=!1),y.a.restoreVideoEffect(t).then((function(){n&&n()}))};y.a.disableVideoEffect(t).then((function(){var e=!1;window.RTCRtpSender&&"function"==typeof RTCRtpSender.prototype.replaceTrack&&(e=!0),e?t.replaceTrack(i.getVideoTracks()[0],o,r):(t.removeTrack(t.stream.getVideoTracks()[0]),t.addTrack(i.getVideoTracks()[0]),o())}))}catch(e){return r&&r(e)}}),(function(e){return r&&r(e)}))},t._switchAudioDevice=function(e,n,r){if(e===t.microphoneId)return n&&n();var o={video:!1,audio:i()({},t.audioConstraint,{deviceId:{exact:e}})};c.default.debug("[".concat(t.streamId,"] "),o);var a=t.stream.getAudioTracks()[0];a&&a.stop(),Object(m.b)(o,(function(i){var o=function(){t._cleanupAudioMixing(),t.userMuteAudio&&(t.stream.getAudioTracks()[0].enabled=!1),t.isPlaying()&&(t.stop(),t.elementID&&t.play(t.elementID,t.playOptions)),t.microphoneId=e,t.audioConstraint.deviceId={exact:e},n&&n()};try{var a=!1;window.RTCRtpSender&&"function"==typeof RTCRtpSender.prototype.replaceTrack&&(a=!0),a?t.replaceTrack(i.getAudioTracks()[0],o,r):(t.removeTrack(t.stream.getAudioTracks()[0]),t.addTrack(i.getAudioTracks()[0]),o())}catch(e){return r&&r(e)}}),(function(e){return r&&r(e)}))},t.switchDevice=function(e,n,r,i){var o=f.report.reportApiInvoke(t.sid,{callback:function(e,t){if(e)return i&&i(e);r&&r(t)},name:"Stream.switchDevice",options:arguments,tag:"tracer"});Object(S.checkValidString)(n,"deviceId");var a=function(){return t.inSwitchDevice=!1,o()},s=function(e){t.inSwitchDevice=!1,c.default.error("[".concat(t.streamId,"] "),e),o(e)};if(t.inSwitchDevice)return o("Device switch is in process.");if(t.inSwitchDevice=!0,!t.local)return s("Only the local stream can switch the device.");if(t.screen&&"video"===e)return s("The device cannot be switched during screen-sharing.");if(!t.video&&"video"===e)return s("Video track not exist.");if(!t.audio&&"audio"===e)return s("Audio track not exist.");if(t.videoSource||t.audioSource)return s("The device cannot be switched when using videoSource or audioSource.");var d=!1;for(var u in t.audioMixing.sounds){var l=t.audioMixing.sounds[u];if(l.state!==t.audioMixing.states.IDLE){d=!0;break}}var p=t.audioMixing.audioContextInited;if(p&&d)return s("The device cannot be switched when using audio Mixing.");E.a.getDeviceById(n,(function(){if("video"===e)t._switchVideoDevice(n,a,s);else{if("audio"!==e)return s("Invalid type.");t._switchAudioDevice(n,a,s)}}),(function(){return s("The device does not exist.")}))},t},C=function(e){var t=f.report.reportApiInvoke(null,{name:"createStream",options:arguments,tag:"tracer",getStates:function(){return{audioTrackEnable:e&&e.audioSource?e.audioSource.enabled:null,videoTrackEnable:e&&e.videoSource?e.videoSource.enabled:null}}});Object(S.checkValidObject)(e,"StreamSpec");var n=e.streamID,r=e.audio,i=e.video,o=e.screen,a=e.screenAudio,s=(e.audioSource,e.videoSource,e.cameraId),d=e.facingMode,u=e.microphoneId,l=e.mirror,p=e.extensionId,g=e.mediaSource,m=e.audioProcessing,v=e.optimizationMode;if(!Object(S.isEmpty)(n)&&!Object(h.is32Uint)(n)&&!Object(S.isValidString)(n,1,255))throw new Error("[String streamID] Length of the string: [1,255]. ASCII characters only. [Number streamID] The value range is Uint32");if(Object(S.checkValidBoolean)(r,"audio"),Object(S.checkValidBoolean)(i,"video"),Object(S.isEmpty)(o)||Object(S.checkValidBoolean)(o,"screen"),Object(S.isEmpty)(a)||Object(S.checkValidBoolean)(a,"screenAudio"),Object(S.isEmpty)(s)||Object(S.checkValidString)(s,"cameraId",0,255,!1),Object(S.isEmpty)(d)||Object(S.checkValidEnum)(d,"facingMode",["user","environment","left","right"]),Object(S.isEmpty)(u)||Object(S.checkValidString)(u,"microphoneId",0,255,!1),Object(S.isEmpty)(p)||Object(S.checkValidString)(p,"extensionId"),Object(S.isEmpty)(g)||Object(S.checkValidEnum)(g,"mediaSource",["screen","application","window"]),Object(S.isEmpty)(l)||Object(S.checkValidBoolean)(l,"mirror"),!Object(S.isEmpty)(m)){var E=m.AGC,_=m.AEC,y=m.ANS;Object(S.isEmpty)(E)||Object(S.checkValidBoolean)(E,"AGC"),Object(S.isEmpty)(_)||Object(S.checkValidBoolean)(_,"AEC"),Object(S.isEmpty)(y)||Object(S.checkValidBoolean)(y,"ANS")}Object(S.isEmpty)(v)||Object(S.checkValidEnum)(v,"optimizationMode",["detail","motion"]),c.default.debug("Create stream"),!0===a&&!0===r&&c.default.warning("Do not set both 'screenAudio' and 'audio' to true at the same time"),e.screen&&!v&&(e.optimizationMode="detail");var R=O(e);return t(),R}},function(e,t,n){"use strict";n.d(t,"a",(function(){return I})),n.d(t,"b",(function(){return b}));var r=n(4),i=n(7),o=n.n(i),a=n(12),s=n.n(a),c=n(17),d=n.n(c),u=n(0),l=n(15),f=n(2);function p(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return g(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return g(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i,o=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){a=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(a)throw i}}}}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var m=function(e){var t={},n=l.RTCPeerConnection;t.uid=e.uid,t.isVideoMute=e.isVideoMute,t.isAudioMute=e.isAudioMute,t.isSubscriber=e.isSubscriber,t.clientId=e.clientId,t.filterStatsCache=[],t.originStatsCache=[],t.lastTimeGetStats=null,t.pc_config={iceServers:[]};var i={id:"outbound_audio_ssrc_send",type:"ssrc",mediaType:"",googCodecName:"opus",aecDivergentFilterFraction:"0",audioInputLevel:"0",bytesSent:"0",packetsSent:"0",googEchoCancellationReturnLoss:"0",googEchoCancellationReturnLossEnhancement:"0"},a={id:"outbound_video_ssrc_send",type:"ssrc",mediaType:"",googCodecName:e.codec?e.codec.toUpperCase():"",bytesSent:"0",packetsLost:"0",packetsSent:"0",googAdaptationChanges:"0",googAvgEncodeMs:"0",googEncodeUsagePercent:"0",googFirsReceived:"0",googFrameHeightSent:"0",googFrameHeightInput:"0",googFrameRateInput:"0",googFrameRateSent:"0",googFrameWidthSent:"0",googFrameWidthInput:"0",googNacksReceived:"0",googPlisReceived:"0",googRtt:"0"},c={id:"inbound_audio_ssrc_recv",type:"ssrc",mediaType:"",googCodecName:"opus",audioOutputLevel:"0",bytesReceived:"0",packetsLost:"0",packetsReceived:"0",googAccelerateRate:"0",googCurrentDelayMs:"0",googDecodingCNG:"0",googDecodingCTN:"0",googDecodingCTSG:"0",googDecodingNormal:"0",googDecodingPLC:"0",googDecodingPLCCNG:"0",googExpandRate:"0",googJitterBufferMs:"0",googJitterReceived:"0",googPreemptiveExpandRate:"0",googPreferredJitterBufferMs:"0",googSecondaryDecodedRate:"0",googSpeechExpandRate:"0"},g={id:"inbound_video_ssrc_recv",type:"ssrc",mediaType:"",googTargetDelayMs:"0",packetsLost:"0",googDecodeMs:"0",googMaxDecodeMs:"0",googRenderDelayMs:"0",googFrameWidthReceived:"0",googFrameHeightReceived:"0",googFrameRateReceived:"0",googFrameRateDecoded:"0",googFrameRateOutput:"0",googJitterBufferMs:"0",googCurrentDelayMs:"0",googMinPlayoutDelayMs:"0",googNacksSent:"0",googPlisSent:"0",googFirsSent:"0",bytesReceived:"0",packetsReceived:"0",googFramesReceived:"0",googFramesDecoded:"0"},m={id:"bweforvideo",type:"VideoBwe",googAvailableSendBandwidth:"0",googAvailableReceiveBandwidth:"0",googActualEncBitrate:"0",googRetransmitBitrate:"0",googTargetEncBitrate:"0",googBucketDelay:"0",googTransmitBitrate:"0"};t.con={optional:[{DtlsSrtpKeyAgreement:!0}]},e.iceServers instanceof Array?t.pc_config.iceServers=e.iceServers:(e.stunServerUrl&&(e.stunServerUrl instanceof Array?e.stunServerUrl.map((function(e){"string"==typeof e&&""!==e&&t.pc_config.iceServers.push({url:e})})):"string"==typeof e.stunServerUrl&&""!==e.stunServerUrl&&t.pc_config.iceServers.push({url:e.stunServerUrl})),e.turnServers&&(e.turnServers instanceof Array?e.turnServers.map((function(e){e.udpport&&t.pc_config.iceServers.push({username:e.username,credential:e.credential,credentialType:"password",urls:(e.useTurns?"turns:":"turn:")+e.url+":"+e.udpport+"?transport=udp"}),"string"==typeof e.tcpport&&""!==e.tcpport&&t.pc_config.iceServers.push({username:e.username,credential:e.credential,credentialType:"password",urls:(e.useTurns?"turns:":"turn:")+e.url+":"+e.tcpport+"?transport=tcp"}),!0===e.forceturn&&(t.pc_config.iceTransportPolicy="relay")})):u.default.error("[".concat(t.clientId,"] turnServers is not a array")))),void 0===e.audio&&(e.audio=!0),void 0===e.video&&(e.video=!0),t.mediaConstraints=r.isChromeKernel()&&r.getChromeKernelVersion()<103?{mandatory:{OfferToReceiveVideo:e.video,OfferToReceiveAudio:e.audio}}:{offerToReceiveVideo:e.video,offerToReceiveAudio:e.audio},t.roapSessionId=103;try{t.pc_config.sdpSemantics=Object(f.getParameter)("PLAN"),t.peerConnection=new n(t.pc_config,t.con)}catch(e){delete t.pc_config.sdpSemantics,t.peerConnection=new n(t.pc_config,t.con);var h=t.peerConnection.getConfiguration();h.sdpSemantics&&Object(f.setParameter)("PLAN",h.sdpSemantics)}t.iceCandidateTimer=setTimeout((function(){t.iceCandidateTimer=null,u.default.debug("[".concat(t.clientId,"]Candidates collected: ").concat(t.iceCandidateCount)),t.moreIceComing&&(t.moreIceComing=!1,t.markActionNeeded())}),Object(f.getParameter)("CANDIDATE_TIMEOUT")),t.peerConnection.onicecandidate=function(e){var n,r,i,o;r=(n=t.peerConnection.localDescription.sdp).match(/a=candidate:.+typ\ssrflx.+\r\n/),i=n.match(/a=candidate:.+typ\shost.+\r\n/),o=n.match(/a=candidate:.+typ\srelay.+\r\n/),null===r&&null===i&&null===o||void 0!==t.ice||!t.iceCandidateTimer||(clearTimeout(t.iceCandidateTimer),t.iceCandidateTimer=null,t.ice=0,t.moreIceComing=!1,t.markActionNeeded()),t.iceCandidateCount=t.iceCandidateCount+1};var v=function(e){return e=e.replace("a=x-google-flag:conference\r\n","")},E=function(n){var r,i;if((r=n.match(/m=video.*\r\n/))&&e.minVideoBW&&e.maxVideoBW){i=r[0]+"b=AS:"+e.maxVideoBW+"\r\n";var o=0,a=0;"h264"===e.codec?(o=n.search(/a=rtpmap:(\d+) H264\/90000\r\n/),a=n.search(/H264\/90000\r\n/)):"vp8"===e.codec?(o=n.search(/a=rtpmap:(\d+) VP8\/90000\r\n/),a=n.search(/VP8\/90000\r\n/)):"vp9"===e.codec&&(o=n.search(/a=rtpmap:(\d+) VP9\/90000\r\n/),a=n.search(/VP9\/90000\r\n/)),-1!==o&&-1!==a&&a-o>10&&(i=i+"a=fmtp:"+n.slice(o+9,a-1)+" x-google-min-bitrate="+e.minVideoBW+"\r\n"),n=(n=(n=n.replace(r[0],i)).replace("a=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f","a=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f")).replace("a=fmtp:125 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f","a=fmtp:125 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f"),u.default.debug("["+t.clientId+"]Set Video Bitrate - min:"+e.minVideoBW+" max:"+e.maxVideoBW)}return(r=n.match(/m=audio.*\r\n/))&&e.maxAudioBW&&(i=r[0]+"b=AS:"+e.maxAudioBW+"\r\n",n=n.replace(r[0],i)),n};t.processSignalingMessage=function(n){var r,i=JSON.parse(n);t.incomingMessage=i,"new"===t.state?"OFFER"===i.messageType?(r={sdp:i.sdp,type:"offer"},t.peerConnection.setRemoteDescription(new RTCSessionDescription(r)).catch((function(e){})),t.state="offer-received",t.markActionNeeded()):t.error("Illegal message for this state: "+i.messageType+" in state "+t.state):"offer-sent"===t.state?"ANSWER"===i.messageType?((r={sdp:i.sdp,type:"answer"}).sdp=v(r.sdp),r.sdp=E(r.sdp),e.screen&&"detail"===e.optimizationMode&&(u.default.debug("[".concat(t.client,"] remove screen share abs ext")),r.sdp=r.sdp.replace(/a=.*abs-send-time\r\n/g,"").replace(/a=.*goog-remb\r\n/g,"")),e.isSubscriber&&(r.sdp=r.sdp.replace("minptime=10","minptime=10;stereo=1; sprop-stereo=1")),t.peerConnection.setRemoteDescription(new RTCSessionDescription(r)).catch((function(e){})),t.state="established"):"pr-answer"===i.messageType?(r={sdp:i.sdp,type:"pr-answer"},t.peerConnection.setRemoteDescription(new RTCSessionDescription(r)).catch((function(e){}))):"offer"===i.messageType?t.error("Not written yet"):t.error("Illegal message for this state: "+i.messageType+" in state "+t.state):"established"===t.state&&("OFFER"===i.messageType?(r={sdp:i.sdp,type:"offer"},t.peerConnection.setRemoteDescription(new RTCSessionDescription(r)).catch((function(e){})),t.state="offer-received",t.markActionNeeded()):"ANSWER"===i.messageType?((r={sdp:i.sdp,type:"answer"}).sdp=v(r.sdp),r.sdp=E(r.sdp),t.peerConnection.setRemoteDescription(new RTCSessionDescription(r)).catch((function(e){}))):t.error("Illegal message for this state: "+i.messageType+" in state "+t.state))},t.setRtpSenderParameters=function(){var e=d()(s.a.mark((function e(n){var r,i,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.peerConnection.getSenders(),i=r.find((function(e){return"video"===e.track.kind}))){e.next=4;break}return e.abrupt("return");case 4:return(o=i.getParameters()).degradationPreference=n,e.prev=6,u.default.debug("[".concat(t.clientId,"] setParameters"),o),e.next=10,i.setParameters(o);case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(6),u.default.debug("[".concat(t.clientId,"] setParameters failed, ignore"));case 15:case"end":return e.stop()}}),e,null,[[6,12]])})));return function(t){return e.apply(this,arguments)}}();var S=0,_=0;return t.getVideoRelatedStats=function(e){t.getStats((function(n){n.forEach((function(n){if(t.isSubscriber){if("video"===n.mediaType&&n.id&&~n.id.indexOf("recv")){if(r.isChromeKernel()&&+r.getBrowserVersion()>=76){var i=+n.googFramesReceived-S,o=+n.googFramesDecoded-_;t._setStat(g,"googFrameRateReceived",i),t._setStat(g,"googFrameRateDecoded",o),t._setStat(g,"googFrameRateOutput",o),S=+n.googFramesReceived,_=+n.googFramesDecoded}e&&e({mediaType:"video",peerId:t.uid,isVideoMute:t.isVideoMute,frameRateReceived:n.googFrameRateReceived,frameRateDecoded:n.googFrameRateDecoded,bytesReceived:n.bytesReceived,packetsReceived:n.packetsReceived,packetsLost:n.packetsLost})}}else"video"===n.mediaType&&n.id&&~n.id.indexOf("send")&&e&&e({mediaType:"video",isVideoMute:t.isVideoMute,frameRateInput:n.googFrameRateInput,frameRateSent:n.googFrameRateSent,googRtt:n.googRtt})}))}))},t.getAudioRelatedStats=function(e){t.getStats((function(n){n.forEach((function(n){t.isSubscriber&&"audio"===n.mediaType&&n.id&&~n.id.indexOf("recv")&&e&&e({mediaType:"audio",peerId:t.uid,isAudioMute:t.isAudioMute,frameDropped:parseInt(n.googDecodingPLC)+parseInt(n.googDecodingPLCCNG)+"",frameReceived:n.googDecodingCTN,googJitterReceived:n.googJitterReceived,bytesReceived:n.bytesReceived,packetsReceived:n.packetsReceived,packetsLost:n.packetsLost})}))}))},t.getStatsRate=function(e){t.getStats((function(t){e(t)}))},t.getStats=function(e,n){n=(n=n||500)>500?500:n,t.lastTimeGetStats&&Date.now()-t.lastTimeGetStats<n?e&&e(t.filterStatsCache,t.originStatsCache):(t.lastTimeGetStats=Date.now(),this._getStats((function(n,r){t.filterStatsCache=n,t.originStatsCache=r,e&&e(n,r)})))},t._setStat=function(e,t,n){e.hasOwnProperty(t)&&(null!=n&&n!==1/0&&n==n||(n=0),e[t]=n+"")},t._processGetStatsAfterChrome76=function(e){var n=this;t.lastStats||(t.lastStats=new Map),t.peerConnection.getStats().then((function(r){var s,d=[],u=[],l=new Map,f=new Date,h=p(r.values());try{for(h.s();!(s=h.n()).done;){var v=s.value;"codec"!=v.type?"candidate-pair"!=v.type?("inbound-rtp"===v.type&&"video"===v.mediaType&&l.set("inbound-video",v),"inbound-rtp"===v.type&&"audio"===v.mediaType&&l.set("inbound-audio",v),"outbound-rtp"===v.type&&"audio"===v.mediaType&&l.set("outbound-audio",v),"outbound-rtp"===v.type&&"video"===v.mediaType&&l.set("outbound-video",v),"track"===v.type&&"video"===v.kind&&v.remoteSource&&l.set("remote-video-track",v),"track"===v.type&&"audio"===v.kind&&v.remoteSource&&l.set("remote-audio-track",v),"remote-inbound-rtp"===v.type&&"video"===v.mediaType&&l.set("remote-inbound-video",v),"remote-inbound-rtp"===v.type&&"audio"===v.mediaType&&l.set("remote-inbound-audio",v),"track"!==v.type||"video"!==v.kind||v.remoteSource||l.set("local-video-track",v),"track"!==v.type||"audio"!==v.kind||v.remoteSource||l.set("local-audio-track",v),"media-source"===v.type&&"video"===v.kind&&l.set("media-source-video",v),"media-source"===v.type&&"audio"===v.kind&&l.set("media-source-audio",v)):u.push(v):d.push(v)}}catch(e){h.e(e)}finally{h.f()}l.set("codec",d),l.set("candidatePairs",u),l.set("timestamp",+f);var E=null,S=null;if(g.timestamp=f,c.timestamp=f,i.timestamp=f,i.timestamp=f,m.timestamp=f,n.isSubscriber)(E=l.get("inbound-video"))&&(t._setStat(g,"id","inbound_video_ssrc_recv"),t._setStat(g,"mediaType",E.mediaType),t._setStat(g,"packetsLost",E.packetsLost),t._setStat(g,"googDecodeMs",null),t._setStat(g,"googMaxDecodeMs",null),t._setStat(g,"googRenderDelayMs",null),t._setStat(g,"googMinPlayoutDelayMs",null),t._setStat(g,"googNacksSent",E.nackCount),t._setStat(g,"googPlisSent",E.pliCount),t._setStat(g,"googFirsSent",E.firCount),t._setStat(g,"bytesReceived",E.bytesReceived),t._setStat(g,"packetsReceived",E.packetsReceived)),(E=l.get("inbound-audio"))&&(t._setStat(c,"id","inbound_audio_ssrc_recv"),t._setStat(c,"mediaType",E.mediaType),t._setStat(c,"bytesReceived",E.bytesReceived),t._setStat(c,"packetsLost",E.packetsLost),t._setStat(c,"packetsReceived",E.packetsReceived),t._setStat(c,"googAccelerateRate",E.removedSamplesForAcceleration),t._setStat(c,"googCurrentDelayMs",E.jitterBufferDelay),t._setStat(c,"googDecodingCNG",null),t._setStat(c,"googDecodingCTN",null),t._setStat(c,"googDecodingCTSG",null),t._setStat(c,"googDecodingNormal",null),t._setStat(c,"googDecodingPLC",null),t._setStat(c,"googDecodingPLCCNG",null),t._setStat(c,"googJitterReceived",E.jitter),t._setStat(c,"googPreferredJitterBufferMs",null),t._setStat(c,"googSecondaryDecodedRate",null)),(E=l.get("remote-video-track"))&&(t._setStat(g,"googTargetDelayMs",E.jitterBufferDelay),t._setStat(g,"googFrameWidthReceived",E.frameWidth),t._setStat(g,"googFrameHeightReceived",E.frameHeight),t._setStat(g,"googJitterBufferMs",E.jitterBufferDelay/E.jitterBufferEmittedCount*1e3),t._setStat(g,"googCurrentDelayMs",E.jitterBufferDelay),t._setStat(g,"googFramesDecoded",E.framesDecoded),t._setStat(g,"googFramesReceived",E.framesReceived)),(E=l.get("remote-audio-track"))&&(t._setStat(c,"audioOutputLevel",32767*E.audioLevel),t._setStat(c,"googJitterBufferMs",E.jitterBufferDelay/E.jitterBufferEmittedCount*1e3),t._setStat(c,"googExpandRate",E.concealedSamples),t._setStat(c,"googPreemptiveExpandRate",E.insertedSamplesForDeceleration),t._setStat(c,"googSpeechExpandRate",E.silentConcealedSamples));else{var _=t.lastStats.get("timestamp"),y=t.lastStats.get("outbound-video");if((E=l.get("outbound-audio"))&&(t._setStat(i,"id","outbound_audio_ssrc_send"),t._setStat(i,"mediaType",E.mediaType),t._setStat(i,"aecDivergentFilterFraction",null),t._setStat(i,"bytesSent",E.bytesSent),t._setStat(i,"packetsSent",E.packetsSent),S=E.transportId),E=l.get("outbound-video")){if(t._setStat(a,"id","outbound_video_ssrc_send"),t._setStat(a,"mediaType",E.mediaType),t._setStat(a,"bytesSent",E.bytesSent),t._setStat(a,"packetsSent",E.packetsSent),t._setStat(a,"googAdaptationChanges",E.qualityLimitationDurations),t._setStat(a,"googAvgEncodeMs",null),t._setStat(a,"googEncodeUsagePercent",null),S=E.transportId,E.totalEncodedBytesTarget&&y&&y.totalEncodedBytesTarget){var R=(E.totalEncodedBytesTarget-y.totalEncodedBytesTarget)/(+new Date-_);t._setStat(m,"googTargetEncBitrate",Math.floor(8*R*1e3))}if(E.retransmittedBytesSent&&y&&y.retransmittedBytesSent){var T=(E.retransmittedBytesSent-y.retransmittedBytesSent)/(+new Date-_);t._setStat(m,"googRetransmitBitrate",Math.floor(8*T*1e3))}if(E.bytesSent&&y&&y.bytesSent){var I=(E.bytesSent-y.bytesSent)/(+new Date-_);t._setStat(m,"googTransmitBitrate",Math.floor(8*I*1e3)),t._setStat(m,"googActualEncBitrate",Math.floor(8*I*1e3))}if(E.totalPacketSendDelay&&y&&y.totalPacketSendDelay){var b=(E.totalPacketSendDelay-y.totalPacketSendDelay)/(+new Date-_);t._setStat(m,"googBucketDelay",Math.floor(1e3*b))}}if((E=l.get("remote-inbound-video"))&&(t._setStat(a,"packetsLost",E.packetsLost),t._setStat(a,"googRtt",E.roundTripTime)),(E=l.get("local-video-track"))&&(t._setStat(a,"googFrameHeightSent",E.frameHeight),t._setStat(a,"googFrameWidthSent",E.frameWidth),void 0!==E.framesPerSecond&&t._setStat(a,"googFrameRateSent",E.framesPerSecond)),(E=l.get("local-audio-track"))&&(t._setStat(i,"googEchoCancellationReturnLoss",E.echoReturnLoss),t._setStat(i,"googEchoCancellationReturnLossEnhancement",E.echoReturnLossEnhancement)),(E=l.get("media-source-video"))&&(t._setStat(a,"googFrameHeightInput",E.height),t._setStat(a,"googFrameWidthInput",E.width),t._setStat(a,"googFrameRateInput",E.framesPerSecond)),(E=l.get("media-source-audio"))&&t._setStat(i,"audioInputLevel",32767*E.totalAudioEnergy),(E=l.get("inbound-video"))&&(t._setStat(a,"googFirsReceived",E.firCount),t._setStat(a,"googNacksReceived",E.nackCount),t._setStat(a,"googPlisReceived",E.pliCount)),S)l.get("candidatePairs").map((function(e){S==e.transportId&&t._setStat(m,"googAvailableSendBandwidth",e.availableOutgoingBitrate)}));else{var A=l.get("candidatePairs")[0];A&&t._setStat(m,"googAvailableSendBandwidth",A.availableOutgoingBitrate)}}t.lastStats=l;var O=[o()({},a),o()({},i),o()({},g),o()({},c),o()({},m)];O.push({id:"time",startTime:t.connectedTime,timestamp:new Date}),e(O)}))},t._processGetStatsBeforeChrome76=function(e){t.peerConnection.getStats((function(n){var r=[],s=[],d=null;Object.keys(n).forEach((function(e){var t=n[e];t&&(s.push(t),d=t.timestamp,"VideoBwe"===t.type?m=t:t.id.indexOf("_send")>-1&&"video"===t.mediaType?a=t:t.id.indexOf("_send")>-1&&"audio"===t.mediaType?i=t:t.id.indexOf("_recv")>-1&&"video"===t.mediaType?g=t:t.id.indexOf("_recv")>-1&&"audio"===t.mediaType&&(c=t))})),(r=[o()({},a),o()({},i),o()({},g),o()({},c),o()({},m)]).push({id:"time",startTime:t.connectedTime,timestamp:d||new Date}),e(r,s)}))},t._getStats=function(e){Object(f.getParameter)("CHROME_NEW_STATS")&&r.isChromeKernel()&&+r.getBrowserVersion()>=76?t._processGetStatsAfterChrome76(e):t._processGetStatsBeforeChrome76(e)},t.addTrack=function(e,n){if("unified-plan"===Object(f.getParameter)("PLAN")){var r="audio"===e.kind?t._audioSender:t._videoSender;if(r){var i=t.peerConnection.getTransceivers().find((function(e){return e.sender===r}));r.replaceTrack(e).then((function(){i.direction="sendrecv",t.renegotiate()}))}else r=t.peerConnection.addTrack(e,n),"audio"===e.kind?t._audioSender=r:t._videoSender=r}else t.peerConnection.addTrack(e,n)},t.removeTrack=function(e,n){if("unified-plan"===Object(f.getParameter)("PLAN")){var r=t.peerConnection.getTransceivers().find((function(t){return t.sender.track===e}));r&&(r.direction="inactive",t.peerConnection.removeTrack(r.sender))}else t.peerConnection.removeTrack(t.peerConnection.getSenders().find((function(t){return t.track==e})))},t.addStream=function(e){"unified-plan"===Object(f.getParameter)("PLAN")?e.getTracks().forEach((function(n){var r=t.peerConnection.addTrack(n,e);"audio"===n.kind?t._audioSender=r:t._videoSender=r})):(t.peerConnection.addStream(e),t.markActionNeeded())},t.removeStream=function(){t.markActionNeeded()},t.close=function(){t.state="closed",t.peerConnection.close()},t.markActionNeeded=function(){t.actionNeeded=!0,t.doLater((function(){t.onstablestate()}))},t.doLater=function(e){window.setTimeout(e,1)},t.onstablestate=function(){var n;if(t.actionNeeded){if("new"===t.state||"established"===t.state)t.peerConnection.createOffer(t.mediaConstraints).then((function(n){return n?n.sdp!==t.prevOffer?(e.isSubscriber&&(n.sdp=n.sdp.replace("minptime=10","minptime=10;stereo=1; sprop-stereo=1")),t.peerConnection.setLocalDescription(n),t.state="preparing-offer",void t.markActionNeeded()):void u.default.debug("["+t.clientId+"]Not sending a new offer"):(u.default.debug("["+t.clientId+"]sessionDescription is null"),void t.onsignalingmessage(null))})).catch((function(e){u.default.debug("["+t.clientId+"]peer connection create offer failed ",e)}));else if("preparing-offer"===t.state){if(t.moreIceComing)return;t.prevOffer=t.peerConnection.localDescription.sdp,t.offerCandidates=t.prevOffer.match(/a=candidate.+\r\n/g)||[],t.offerCandidates.length||(e.isCloudProxy3&&e.onNoIceCandidate&&e.onNoIceCandidate(),u.default.warning("[".concat(t.clientId,"]No Ice Candidate generated")),Object(f.getParameter)("SHIM_CANDIDATE")?(u.default.debug("Shimming fake candidate"),t.prevOffer+="a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"):u.default.error("[".concat(t.clientId,"]None Ice Candidate not allowed"))),t.prevOffer=t.prevOffer.replace(/a=candidate:.+typ\shost.+\r\n/g,"a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"),t.sendMessage("OFFER",t.prevOffer),t.state="offer-sent"}else if("offer-received"===t.state)t.peerConnection.createAnswer((function(e){if(t.peerConnection.setLocalDescription(e),t.state="offer-received-preparing-answer",t.iceStarted)t.markActionNeeded();else{var n=new Date;u.default.debug("["+t.clientId+"]"+n.getTime()+": Starting ICE in responder"),t.iceStarted=!0}}),(function(e){u.default.debug("["+t.clientId+"]peer connection create answer failed ",e)}),t.mediaConstraints);else if("offer-received-preparing-answer"===t.state){if(t.moreIceComing)return;n=t.peerConnection.localDescription.sdp,t.sendMessage("ANSWER",n),t.state="established"}else u.default.debug("[".concat(t.clientId,"] Dazed and confused in state ").concat(t.state,", stopping here'"));t.actionNeeded=!1}},t.sendMessage=function(e,n){var r={};r.messageType=e,r.sdp=n,"OFFER"===e?(r.offererSessionId=t.sessionId,r.answererSessionId=t.otherSessionId,r.seq=t.sequenceNumber+=1,r.tiebreaker=Math.floor(429496723*Math.random()+1)):(r.offererSessionId=t.incomingMessage.offererSessionId,r.answererSessionId=t.sessionId,r.seq=t.incomingMessage.seq),t.onsignalingmessage(JSON.stringify(r))},t._getSender=function(e){if(t.peerConnection&&t.peerConnection.getSenders){var n=t.peerConnection.getSenders().find((function(t){return t.track.kind==e}));if(n)return n}return null},t.hasSender=function(e){return!!t._getSender(e)},t.replaceTrack=function(e,n,r){var i=t._getSender(e.kind);if(!i){return r("NO_SENDER_FOUND")}try{i.replaceTrack(e)}catch(e){return r&&r(e)}setTimeout((function(){return n&&n()}),50)},t.error=function(e){throw"Error in RoapOnJsep: "+e},t.sessionId=t.roapSessionId+=1,t.sequenceNumber=0,t.actionNeeded=!1,t.iceStarted=!1,t.moreIceComing=!0,t.iceCandidateCount=0,t.onsignalingmessage=e.callback,t.peerConnection.ontrack=function(e){t.onaddstream&&(t.onaddstream(e,"ontrack"),t.peerConnection.onaddstream=null)},t.peerConnection.onaddstream=function(e){t.onaddstream&&(t.onaddstream(e,"onaddstream"),t.peerConnection.ontrack=null)},t.peerConnection.onremovestream=function(e){t.onremovestream&&t.onremovestream(e)},t.peerConnection.oniceconnectionstatechange=function(e){u.default.debug(t.peerConnection.iceConnectionState),"connected"===e.currentTarget.iceConnectionState&&(t.connectedTime=new Date),t.oniceconnectionstatechange&&t.oniceconnectionstatechange(e.currentTarget.iceConnectionState)},t.renegotiate=function(){void 0!==t.prevOffer&&t.peerConnection.createOffer().then((function(e){return"unified-plan"!==Object(f.getParameter)("PLAN")&&(e.sdp=e.sdp.replace(/a=recvonly\r\n/g,"a=inactive\r\n")),e.sdp=v(e.sdp),e.sdp=E(e.sdp),t.peerConnection.setLocalDescription(e)})).then((function(){t.onnegotiationneeded&&t.onnegotiationneeded(t.peerConnection.localDescription.sdp)})).catch((function(e){u.default.error("createOffer error: ",e.message||e)}))},t.peerConnection.onnegotiationneeded=t.renegotiate,t.onaddstream=null,t.onremovestream=null,t.onnegotiationneeded=null,t.state="new",t.markActionNeeded(),t},h=function(e){var t={},n=l.RTCPeerConnection;t.uid=e.uid,t.isVideoMute=e.isVideoMute,t.isAudioMute=e.isAudioMute,t.isSubscriber=e.isSubscriber,t.clientId=e.clientId,t.filterStatsCache=[],t.originStatsCache=[],t.lastTimeGetStats=null,t.pc_config={iceServers:[],bundlePolicy:"max-bundle"},t.con={optional:[{DtlsSrtpKeyAgreement:!0}]},e.iceServers instanceof Array?t.pc_config.iceServers=e.iceServers:(e.stunServerUrl&&(e.stunServerUrl instanceof Array?e.stunServerUrl.map((function(e){"string"==typeof e&&""!==e&&t.pc_config.iceServers.push({url:e})})):"string"==typeof e.stunServerUrl&&""!==e.stunServerUrl&&t.pc_config.iceServers.push({url:e.stunServerUrl})),e.turnServers&&(e.turnServers instanceof Array?e.turnServers.map((function(e){e.udpport&&t.pc_config.iceServers.push({username:e.username,credential:e.credential,credentialType:"password",urls:(e.useTurns?"turns:":"turn:")+e.url+":"+e.udpport+"?transport=udp"}),"string"==typeof e.tcpport&&""!==e.tcpport&&t.pc_config.iceServers.push({username:e.username,credential:e.credential,credentialType:"password",urls:(e.useTurns?"turns:":"turn:")+e.url+":"+e.tcpport+"?transport=tcp"}),!0===e.forceturn&&(t.pc_config.iceTransportPolicy="relay")})):u.default.error("[".concat(t.clientId,"] turnServers is not a array")))),void 0===e.audio&&(e.audio=!0),void 0===e.video&&(e.video=!0),t.mediaConstraints={mandatory:{OfferToReceiveVideo:e.video,OfferToReceiveAudio:e.audio}},t.roapSessionId=103;try{t.pc_config.sdpSemantics=Object(f.getParameter)("PLAN"),t.peerConnection=new n(t.pc_config,t.con)}catch(e){delete t.pc_config.sdpSemantics,t.peerConnection=new n(t.pc_config,t.con)}t.iceCandidateTimer=setTimeout((function(){t.iceCandidateTimer=null,t.moreIceComing&&(t.moreIceComing=!1,t.markActionNeeded())}),Object(f.getParameter)("CANDIDATE_TIMEOUT")),t.peerConnection.onicecandidate=function(e){var n,r,i,o;r=(n=t.peerConnection.localDescription.sdp).match(/a=candidate:.+typ\ssrflx.+\r\n/),i=n.match(/a=candidate:.+typ\shost.+\r\n/),o=n.match(/a=candidate:.+typ\srelay.+\r\n/),0===t.iceCandidateCount&&(t.timeout=setTimeout((function(){t.moreIceComing&&(t.moreIceComing=!1,t.markActionNeeded())}),1e3)),null===r&&null===i&&null===o||void 0!==t.ice||!t.iceCandidateTimer||(clearTimeout(t.iceCandidateTimer),t.iceCandidateTimer=null,t.ice=0,t.moreIceComing=!1,t.markActionNeeded()),t.iceCandidateCount=t.iceCandidateCount+1};var r=function(t){return e.screen&&(t=t.replace("a=x-google-flag:conference\r\n","")),t},i=function(n){var r,i;return(r=n.match(/m=video.*\r\n/))&&e.minVideoBW&&e.maxVideoBW&&(i=r[0]+"b=AS:"+e.maxVideoBW+"\r\n",n=n.replace(r[0],i),u.default.debug("["+t.clientId+"]Set Video Bitrate - min:"+e.minVideoBW+" max:"+e.maxVideoBW)),(r=n.match(/m=audio.*\r\n/))&&e.maxAudioBW&&(i=r[0]+"b=AS:"+e.maxAudioBW+"\r\n",n=n.replace(r[0],i)),n};t.processSignalingMessage=function(n){var o,a=JSON.parse(n);t.incomingMessage=a,"new"===t.state?"OFFER"===a.messageType?(o={sdp:a.sdp,type:"offer"},t.peerConnection.setRemoteDescription(new RTCSessionDescription(o)),t.state="offer-received",t.markActionNeeded()):t.error("Illegal message for this state: "+a.messageType+" in state "+t.state):"offer-sent"===t.state?"ANSWER"===a.messageType?((o={sdp:a.sdp,type:"answer"}).sdp=r(o.sdp),o.sdp=i(o.sdp),o.sdp=o.sdp.replace(/a=x-google-flag:conference\r\n/g,""),e.screen&&"detail"===e.optimizationMode&&(u.default.debug("[".concat(t.client,"] remove screen share abs ext")),o.sdp=o.sdp.replace(/a=.*abs-send-time\r\n/g,"").replace(/a=.*goog-remb\r\n/g,"")),t.peerConnection.setRemoteDescription(new RTCSessionDescription(o)),t.state="established"):"pr-answer"===a.messageType?(o={sdp:a.sdp,type:"pr-answer"},t.peerConnection.setRemoteDescription(new RTCSessionDescription(o))):"offer"===a.messageType?t.error("Not written yet"):t.error("Illegal message for this state: "+a.messageType+" in state "+t.state):"established"===t.state&&("OFFER"===a.messageType?(o={sdp:a.sdp,type:"offer"},t.peerConnection.setRemoteDescription(new RTCSessionDescription(o)),t.state="offer-received",t.markActionNeeded()):"ANSWER"===a.messageType?((o={sdp:a.sdp,type:"answer"}).sdp=r(o.sdp),o.sdp=i(o.sdp),t.peerConnection.setRemoteDescription(new RTCSessionDescription(o))):t.error("Illegal message for this state: "+a.messageType+" in state "+t.state))},t.setRtpSenderParameters=function(){var e=d()(s.a.mark((function e(n){return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.degradation=n;case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),t._setRtpSenderParameters=function(){var e=d()(s.a.mark((function e(n){var r,i,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.peerConnection.getSenders(),i=r.find((function(e){return e&&e.track&&"video"===e.track.kind}))){e.next=4;break}return e.abrupt("return");case 4:return(o=i.getParameters()).degradationPreference=n,e.prev=6,u.default.debug("[".concat(t.clientId,"] setParameters"),o),e.next=10,i.setParameters(o);case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(6),u.default.debug("[".concat(t.clientId,"] setParameters failed, ignore"));case 15:case"end":return e.stop()}}),e,null,[[6,12]])})));return function(t){return e.apply(this,arguments)}}();var o={id:"",type:"",mediaType:"",googCodecName:"opus",aecDivergentFilterFraction:"0",audioInputLevel:"0",bytesSent:"0",packetsSent:"0",googEchoCancellationReturnLoss:"0",googEchoCancellationReturnLossEnhancement:"0"},a={id:"",type:"",mediaType:"",googCodecName:e.codec?e.codec.toUpperCase():"",bytesSent:"0",packetsLost:"0",packetsSent:"0",googAdaptationChanges:"0",googAvgEncodeMs:"0",googEncodeUsagePercent:"0",googFirsReceived:"0",googFrameHeightSent:"0",googFrameHeightInput:"0",googFrameRateInput:"0",googFrameRateSent:"0",googFrameWidthSent:"0",googFrameWidthInput:"0",googNacksReceived:"0",googPlisReceived:"0",googRtt:"0",googFramesEncoded:"0"},c={id:"",type:"",mediaType:"",audioOutputLevel:"0",bytesReceived:"0",packetsLost:"0",packetsReceived:"0",googAccelerateRate:"0",googCurrentDelayMs:"0",googDecodingCNG:"0",googDecodingCTN:"0",googDecodingCTSG:"0",googDecodingNormal:"0",googDecodingPLC:"0",googDecodingPLCCNG:"0",googExpandRate:"0",googJitterBufferMs:"0",googJitterReceived:"0",googPreemptiveExpandRate:"0",googPreferredJitterBufferMs:"0",googSecondaryDecodedRate:"0",googSpeechExpandRate:"0"},p={id:"",type:"",mediaType:"",googTargetDelayMs:"0",packetsLost:"0",googDecodeMs:"0",googMaxDecodeMs:"0",googRenderDelayMs:"0",googFrameWidthReceived:"0",googFrameHeightReceived:"0",googFrameRateReceived:"0",googFrameRateDecoded:"0",googFrameRateOutput:"0",googFramesDecoded:"0",googFrameReceived:"0",googJitterBufferMs:"0",googCurrentDelayMs:"0",googMinPlayoutDelayMs:"0",googNacksSent:"0",googPlisSent:"0",googFirsSent:"0",bytesReceived:"0",packetsReceived:"0"},g={id:"bweforvideo",type:"VideoBwe",googAvailableSendBandwidth:"0",googAvailableReceiveBandwidth:"0",googActualEncBitrate:"0",googRetransmitBitrate:"0",googTargetEncBitrate:"0",googBucketDelay:"0",googTransmitBitrate:"0"},m=0,h=0,v=0;return t.isRemoteVideoStats=function(e){return!!(e.frameHeight&&e.frameWidth&&e.remoteSource)},t.getVideoRelatedStats=function(n){t.peerConnection.getStats().then((function(r){r.forEach((function(r){if(t.isSubscriber){var i={peerId:t.uid,mediaType:"video",isVideoMute:t.isVideoMute};if("track"===r.type&&(~r.id.indexOf("video")||~r.trackIdentifier.indexOf("v")||t.isRemoteVideoStats(r))){if(!t.lastReport)return void(t.lastReport=r);i.frameRateReceived=r.framesReceived-t.lastReport.framesReceived+"",i.frameRateDecoded=r.framesDecoded-t.lastReport.framesDecoded+"",t.lastReport=r}"inbound-rtp"===r.type&&~r.id.indexOf("Video")&&(i.bytesReceived=r.bytesReceived+"",i.packetsReceived=r.packetsReceived+"",i.packetsLost=r.packetsLost+""),n&&n(i)}else if("outbound-rtp"===r.type&&~r.id.indexOf("Video")){if(!t.lastReport)return void(t.lastReport=r);n&&n({mediaType:"video",isVideoMute:t.isVideoMute,frameRateInput:e.maxFrameRate+"",frameRateSent:r.framesEncoded-t.lastReport.framesEncoded+""}),t.lastReport=r}}))}))},t.getAudioRelatedStats=function(e){t.peerConnection.getStats().then((function(n){n.forEach((function(n){t.isSubscriber&&"inbound-rtp"===n.type&&~n.id.indexOf("Audio")&&e&&e({peerId:t.uid,mediaType:"audio",isAudioMute:t.isAudioMute,frameDropped:n.packetsLost+"",frameReceived:n.packetsReceived+"",googJitterReceived:n.jitter+"",bytesReceived:n.bytesReceived+"",packetsReceived:n.packetsReceived+"",packetsLost:n.packetsLost+""})}))}))},t.getStatsRate=function(e){t.getStats((function(t){t.forEach((function(e){"outbound-rtp"===e.type&&"video"===e.mediaType&&e.googFramesEncoded&&(e.googFrameRateSent=Math.ceil((e.googFramesEncoded-m)/3).toString(),m=e.googFramesEncoded),"inbound-rtp"===e.type&&-1!=e.id.indexOf("55543")&&(e.googFrameRateReceived&&(e.googFrameRateReceived=Math.ceil((e.googFrameReceived-v)/3).toString(),v=e.googFrameReceived),e.googFrameRateDecoded&&(e.googFrameRateDecoded=Math.ceil((e.googFramesDecoded-h)/3).toString(),h=e.googFramesDecoded))})),e(t)}))},t.getStats=function(e,n){n=(n=n||500)>500?500:n,t.lastTimeGetStats&&Date.now()-t.lastTimeGetStats<n?e&&e(t.filterStatsCache,t.originStatsCache):this._getStats((function(n,r){t.filterStatsCache=n,t.originStatsCache=r,t.lastTimeGetStats=Date.now(),e&&e(n,r)}))},t._getStats=function(n){var r=[];t.peerConnection.getStats().then((function(i){i.forEach((function(t){var n;(r.push(t),"outbound-rtp"===t.type&&"audio"===t.mediaType&&(o.id=t.id,o.type=t.type,o.mediaType=t.mediaType,o.bytesSent=t.bytesSent?t.bytesSent+"":"0",o.packetsSent=t.packetsSent?t.packetsSent+"":"0",e.agoraStream.local&&(o.audioInputLevel=Math.round(32767*e.agoraStream.getAudioLevel()).toString())),"outbound-rtp"===t.type&&"video"===t.mediaType)&&(a.id=t.id,a.type=t.type,a.mediaType=t.mediaType,a.bytesSent=t.bytesSent?t.bytesSent+"":"0",a.packetsSent=t.packetsSent?t.packetsSent+"":"0",a.googPlisReceived=t.pliCount?t.pliCount+"":"0",a.googNacksReceived=t.nackCount?t.nackCount+"":"0",a.googFirsReceived=t.firCount?t.firCount+"":"0",a.googFramesEncoded=t.framesEncoded?t.framesEncoded+"":"0",(n=i.get(t.trackId))&&(a.googFrameHeightSent=n.frameHeight&&n.frameHeight.toString(),a.googFrameWidthSent=n.frameWidth&&n.frameWidth.toString()));"inbound-rtp"!==t.type||-1==t.id.indexOf("44444")&&"audio"!==t.mediaType||(c.id=t.id,c.type=t.type,c.mediaType="audio",c.packetsReceived=t.packetsReceived?t.packetsReceived+"":"0",c.bytesReceived=t.bytesReceived?t.bytesReceived+"":"0",c.packetsLost=t.packetsLost?t.packetsLost+"":"0",c.packetsReceived=t.packetsReceived?t.packetsReceived+"":"0",c.googJitterReceived=t.jitter?t.jitter+"":"0",(n=i.get(t.trackId))&&(c.audioOutputLevel=n.audioLevel&&Math.round(32767*n.audioLevel).toString()),e.agoraStream.local||c.audioOutputLevel||(c.audioOutputLevel=Math.round(32767*e.agoraStream.getAudioLevel()).toString()));"inbound-rtp"!==t.type||-1==t.id.indexOf("55543")&&"video"!==t.mediaType||(p.id=t.id,p.type=t.type,p.mediaType="video",p.packetsReceived=t.packetsReceived?t.packetsReceived+"":"0",p.bytesReceived=t.bytesReceived?t.bytesReceived+"":"0",p.packetsLost=t.packetsLost?t.packetsLost+"":"0",p.googJitterBufferMs=t.jitter?t.jitter+"":"0",p.googNacksSent=t.nackCount?t.nackCount+"":"0",p.googPlisSent=t.pliCount?t.pliCount+"":"0",p.googFirsSent=t.firCount?t.firCount+"":"0",(n=i.get(t.trackId))&&(p.googFrameHeightReceived=n.frameHeight&&n.frameHeight.toString(),p.googFrameWidthReceived=n.frameWidth&&n.frameWidth.toString(),p.googFrameReceived=n.framesReceived&&n.framesReceived.toString(),p.googFramesDecoded=n.framesDecoded&&n.framesDecoded.toString()));"candidate-pair"===t.type&&(0==t.availableIncomingBitrate?g.googAvailableSendBandwidth=t.availableOutgoingBitrate+"":g.googAvailableReceiveBandwidth=t.availableIncomingBitrate+"")}));var s=[g,o,a,c,p];s.push({id:"time",startTime:t.connectedTime,timestamp:new Date}),n(s,r)})).catch((function(e){u.default.error("["+t.clientId+"] ",e)}))},t.addTrack=function(e,n){t.peerConnection.addTrack(e,n)},t.removeTrack=function(e,n){var r=t.peerConnection.getSenders().find((function(t){return t.track==e}));r.replaceTrack(null),t.peerConnection.removeTrack(r)},t.addStream=function(e){window.navigator.userAgent.indexOf("Safari")>-1&&-1===navigator.userAgent.indexOf("Chrome")?e.getTracks().forEach((function(n){return t.peerConnection.addTrack(n,e)})):t.peerConnection.addStream(e),t.markActionNeeded()},t.removeStream=function(){t.markActionNeeded()},t.close=function(){t.state="closed",t.peerConnection.close()},t.markActionNeeded=function(){t.actionNeeded=!0,t.doLater((function(){t.onstablestate()}))},t.doLater=function(e){window.setTimeout(e,1)},t.onstablestate=function(){var n;if(t.actionNeeded){if("new"===t.state||"established"===t.state){if(e.isSubscriber)t.peerConnection.addTransceiver("audio",{direction:"recvonly"}),t.peerConnection.addTransceiver("video",{direction:"recvonly"});t.peerConnection.createOffer(t.mediaConstraints).then((function(n){if(n.sdp=i(n.sdp),e.isSubscriber||(n.sdp=n.sdp.replace(/a=.*video-orientation\r\n/g,"")),n.sdp!==t.prevOffer)return t.peerConnection.setLocalDescription(n),t.state="preparing-offer",void t.markActionNeeded();u.default.debug("["+t.clientId+"]Not sending a new offer")})).catch((function(e){u.default.debug("["+t.clientId+"]peer connection create offer failed ",e)}))}else if("preparing-offer"===t.state){if(t.moreIceComing)return;t.prevOffer=t.peerConnection.localDescription.sdp,t.offerCandidates=t.prevOffer.match(/a=candidate.+\r\n/g)||[],t.offerCandidates.length||(u.default.warning("[".concat(t.clientId,"]No Ice Candidate generated")),e.isCloudProxy3&&e.onNoIceCandidate&&e.onNoIceCandidate(),Object(f.getParameter)("SHIM_CANDIDATE")?(u.default.debug("Shimming fake candidate"),t.prevOffer+="a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"):u.default.error("[".concat(t.clientId,"]None Ice Candidate not allowed"))),t.prevOffer=t.prevOffer.replace(/a=candidate:.+typ\shost.+\r\n/g,"a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"),t.sendMessage("OFFER",t.prevOffer),t.state="offer-sent"}else if("offer-received"===t.state)t.peerConnection.createAnswer((function(e){if(t.peerConnection.setLocalDescription(e),t.state="offer-received-preparing-answer",t.iceStarted)t.markActionNeeded();else{var n=new Date;u.default.debug("["+t.clientId+"]"+n.getTime()+": Starting ICE in responder"),t.iceStarted=!0}}),(function(e){u.default.debug("["+t.clientId+"]peer connection create answer failed ",e)}),t.mediaConstraints);else if("offer-received-preparing-answer"===t.state){if(t.moreIceComing)return;n=t.peerConnection.localDescription.sdp,t.sendMessage("ANSWER",n),t.state="established"}else t.debug("Dazed and confused in state "+t.state+", stopping here");t.actionNeeded=!1}},t.sendMessage=function(e,n){var r={};r.messageType=e,r.sdp=n,"OFFER"===e?(r.offererSessionId=t.sessionId,r.answererSessionId=t.otherSessionId,r.seq=t.sequenceNumber+=1,r.tiebreaker=Math.floor(429496723*Math.random()+1)):(r.offererSessionId=t.incomingMessage.offererSessionId,r.answererSessionId=t.sessionId,r.seq=t.incomingMessage.seq),t.onsignalingmessage(JSON.stringify(r))},t._getSender=function(e){if(t.peerConnection&&t.peerConnection.getSenders){var n=t.peerConnection.getSenders().find((function(t){return t.track.kind==e}));if(n)return n}return null},t.hasSender=function(e){return!!t._getSender(e)},t.replaceTrack=function(e,n,r){var i=t._getSender(e.kind);if(!i){return r("NO_SENDER_FOUND")}try{i.replaceTrack(e)}catch(e){return r&&r(e)}setTimeout((function(){return n&&n()}),50)},t.error=function(e){throw"Error in RoapOnJsep: "+e},t.sessionId=t.roapSessionId+=1,t.sequenceNumber=0,t.actionNeeded=!1,t.iceStarted=!1,t.moreIceComing=!0,t.iceCandidateCount=0,t.onsignalingmessage=e.callback,t.peerConnection.ontrack=function(e){t.onaddstream&&t.onaddstream(e,"ontrack")},t.peerConnection.onremovestream=function(e){t.onremovestream&&t.onremovestream(e)},t.peerConnection.oniceconnectionstatechange=function(e){"connected"===e.currentTarget.iceConnectionState&&(t.connectedTime=new Date,t._setRtpSenderParameters(t.degradation)),t.oniceconnectionstatechange&&t.oniceconnectionstatechange(e.currentTarget.iceConnectionState)},t.renegotiate=function(){t.isSubscriber||(u.default.debug("[".concat(t.uid,"]"),"renegotiating"),void 0!==t.prevOffer&&t.peerConnection.createOffer().then((function(e){return e.sdp=e.sdp.replace(/a=recvonly\r\n/g,"a=inactive\r\n"),e.sdp=r(e.sdp),e.sdp=i(e.sdp),t.peerConnection.setLocalDescription(e)})).then((function(){t.onnegotiationneeded&&t.onnegotiationneeded(t.peerConnection.localDescription.sdp)})).catch((function(e){u.default.error("createOffer error: ",e)})))},t.isSubscriber||(t.peerConnection.onnegotiationneeded=t.renegotiate),t.onaddstream=null,t.onremovestream=null,t.state="new",t.markActionNeeded(),t};function v(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return E(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i,o=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){a=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(a)throw i}}}}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var S=function(e){var t={},n=(mozRTCPeerConnection,mozRTCSessionDescription),r=!1;t.uid=e.uid,t.isVideoMute=e.isVideoMute,t.isAudioMute=e.isAudioMute,t.isSubscriber=e.isSubscriber,t.clientId=e.clientId,t.filterStatsCache=[],t.originStatsCache=[],t.lastTimeGetStats=null,t.pc_config={iceServers:[]},e.iceServers instanceof Array?e.iceServers.map((function(e){0===e.url.indexOf("stun:")&&t.pc_config.iceServers.push({url:e.url})})):(e.stunServerUrl&&(e.stunServerUrl instanceof Array?e.stunServerUrl.map((function(e){"string"==typeof e&&""!==e&&t.pc_config.iceServers.push({url:e})})):"string"==typeof e.stunServerUrl&&""!==e.stunServerUrl&&t.pc_config.iceServers.push({url:e.stunServerUrl})),e.turnServers&&(e.turnServers instanceof Array?e.turnServers.map((function(e){e.udpport&&t.pc_config.iceServers.push({username:e.username,credential:e.credential,credentialType:"password",urls:(e.useTurns?"turns:":"turn:")+e.url+":"+e.udpport+"?transport=udp"}),"string"==typeof e.tcpport&&""!==e.tcpport&&t.pc_config.iceServers.push({username:e.username,credential:e.credential,credentialType:"password",urls:(e.useTurns?"turns:":"turn:")+e.url+":"+e.tcpport+"?transport=tcp"}),!0===e.forceturn&&(t.pc_config.iceTransportPolicy="relay")})):u.default.error("[".concat(t.clientId,"] turnServers is not a array")))),void 0===e.audio&&(e.audio=!0),void 0===e.video&&(e.video=!0),t.mediaConstraints={offerToReceiveAudio:e.audio,offerToReceiveVideo:e.video,mozDontOfferDataChannel:!0},t.roapSessionId=103,t.peerConnection=new l.RTCPeerConnection(t.pc_config),t.iceCandidateTimer=setTimeout((function(){t.iceCandidateTimer=null,u.default.debug("[".concat(t.clientId,"]Candidates collected: ").concat(t.iceCandidateCount)),t.moreIceComing&&(t.moreIceComing=!1,t.markActionNeeded())}),Object(f.getParameter)("CANDIDATE_TIMEOUT")),t.peerConnection.onicecandidate=function(e){var n,r,i,o;r=(n=t.peerConnection.localDescription.sdp).match(/a=candidate:.+typ\ssrflx.+\r\n/),i=n.match(/a=candidate:.+typ\shost.+\r\n/),o=n.match(/a=candidate:.+typ\srelay.+\r\n/),null===r&&null===i&&null===o||void 0!==t.ice||!t.iceCandidateTimer||(clearTimeout(t.iceCandidateTimer),t.iceCandidateTimer=null,t.ice=0,t.moreIceComing=!1,t.markActionNeeded()),t.iceCandidateCount=t.iceCandidateCount+1},t.checkMLineReverseInSDP=function(e){return!(!~e.indexOf("m=audio")||!~e.indexOf("m=video"))&&e.indexOf("m=audio")>e.indexOf("m=video")},t.reverseMLineInSDP=function(e){var t=e.split("m=audio"),n=t[1].split("m=video"),r="m=video"+n[1],i="m=audio"+n[0];return e=t[0]+r+i},t.processSignalingMessage=function(r){var i,o=JSON.parse(r);t.incomingMessage=o,"new"===t.state?"OFFER"===o.messageType?(o.sdp=h(o.sdp),i={sdp:o.sdp,type:"offer"},t.peerConnection.setRemoteDescription(new n(i),(function(){u.default.debug("["+t.clientId+"]setRemoteDescription succeeded")}),(function(e){u.default.info("["+t.clientId+"]setRemoteDescription failed: "+e.name)})),t.state="offer-received",t.markActionNeeded()):t.error("Illegal message for this state: "+o.messageType+" in state "+t.state):"offer-sent"===t.state?"ANSWER"===o.messageType?(o.sdp=h(o.sdp),o.sdp=o.sdp.replace(/ generation 0/g,""),o.sdp=o.sdp.replace(/ udp /g," UDP "),-1!==o.sdp.indexOf("a=group:BUNDLE")?(o.sdp=o.sdp.replace(/a=group:BUNDLE audio video/,"a=group:BUNDLE sdparta_0 sdparta_1"),o.sdp=o.sdp.replace(/a=mid:audio/,"a=mid:sdparta_0"),o.sdp=o.sdp.replace(/a=mid:video/,"a=mid:sdparta_1")):(o.sdp=o.sdp.replace(/a=mid:audio/,"a=mid:sdparta_0"),o.sdp=o.sdp.replace(/a=mid:video/,"a=mid:sdparta_0")),i={sdp:o.sdp,type:"answer"},e.screen&&"detail"===e.optimizationMode&&(u.default.debug("[".concat(t.client,"] remove screen share abs ext")),o.sdp=E(i.sdp)),t.peerConnection.setRemoteDescription(new n(i),(function(){u.default.debug("["+t.clientId+"]setRemoteDescription succeeded")}),(function(e){u.default.info("["+t.clientId+"]setRemoteDescription failed: "+e)})),t.state="established"):"pr-answer"===o.messageType?(i={sdp:o.sdp,type:"pr-answer"},t.peerConnection.setRemoteDescription(new n(i),(function(){u.default.debug("["+t.clientId+"]setRemoteDescription succeeded")}),(function(e){u.default.info("["+t.clientId+"]setRemoteDescription failed: "+e.name)}))):"offer"===o.messageType?t.error("Not written yet"):t.error("Illegal message for this state: "+o.messageType+" in state "+t.state):"established"===t.state&&("OFFER"===o.messageType?(i={sdp:o.sdp,type:"offer"},t.peerConnection.setRemoteDescription(new n(i),(function(){u.default.debug("["+t.clientId+"]setRemoteDescription succeeded")}),(function(e){u.default.info("["+t.clientId+"]setRemoteDescription failed: "+e.name)})),t.state="offer-received",t.markActionNeeded()):t.error("Illegal message for this state: "+o.messageType+" in state "+t.state))},t.setRtpSenderParameters=function(){var e=d()(s.a.mark((function e(n){var r,i,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.peerConnection.getSenders(),i=r.find((function(e){return"video"===e.track.kind}))){e.next=4;break}return e.abrupt("return");case 4:return(o=i.getParameters()).degradationPreference=n,e.prev=6,u.default.debug("[".concat(t.clientId,"] setParameters"),o),e.next=10,i.setParameters(o);case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(6),u.default.debug("[".concat(t.clientId,"] setParameters failed, ignore"));case 15:case"end":return e.stop()}}),e,null,[[6,12]])})));return function(t){return e.apply(this,arguments)}}();var i={id:"",type:"",mediaType:"opus",googCodecName:"opus",aecDivergentFilterFraction:"0",audioInputLevel:"0",bytesSent:"0",packetsSent:"0",googEchoCancellationReturnLoss:"0",googEchoCancellationReturnLossEnhancement:"0"},o={id:"",type:"",mediaType:"",googCodecName:e.codec?e.codec.toUpperCase():"",bytesSent:"0",packetsLost:"0",packetsSent:"0",googAdaptationChanges:"0",googAvgEncodeMs:"0",googEncodeUsagePercent:"0",googFirsReceived:"0",googFrameHeightSent:"0",googFrameHeightInput:"0",googFrameRateInput:"0",googFrameRateSent:"0",googFrameWidthSent:"0",googFrameWidthInput:"0",googNacksReceived:"0",googPlisReceived:"0",googRtt:"0"},a={id:"",type:"",mediaType:"",audioOutputLevel:"0",bytesReceived:"0",packetsLost:"0",packetsReceived:"0",googAccelerateRate:"0",googCurrentDelayMs:"0",googDecodingCNG:"0",googDecodingCTN:"0",googDecodingCTSG:"0",googDecodingNormal:"0",googDecodingPLC:"0",googDecodingPLCCNG:"0",googExpandRate:"0",googJitterBufferMs:"0",googJitterReceived:"0",googPreemptiveExpandRate:"0",googPreferredJitterBufferMs:"0",googSecondaryDecodedRate:"0",googSpeechExpandRate:"0"},c={id:"",type:"",mediaType:"",googTargetDelayMs:"0",packetsLost:"0",googDecodeMs:"0",googMaxDecodeMs:"0",googRenderDelayMs:"0",googFrameWidthReceived:"0",googFrameHeightReceived:"0",googFrameRateReceived:"0",googFrameRateDecoded:"0",googFrameRateOutput:"0",googJitterBufferMs:"0",googCurrentDelayMs:"0",googMinPlayoutDelayMs:"0",googNacksSent:"0",googPlisSent:"0",googFirsSent:"0",bytesReceived:"0",packetsReceived:"0",googFramesDecoded:"0"},p=0,g=0,m=0;t.getVideoRelatedStats=function(e){t.peerConnection.getStats().then((function(n){var r,i=v(n.values());try{for(i.s();!(r=i.n()).done;){var o=r.value;if(t.isSubscriber){if(("inbound-rtp"===o.type||"inboundrtp"===o.type)&&"video"===o.mediaType){if(!t.lastReport)return void(t.lastReport=o);e&&e({browser:"firefox",mediaType:"video",peerId:t.uid,isVideoMute:t.isVideoMute,frameRateReceived:Math.round(o.framerateMean)+"",frameRateDecoded:o.framesDecoded-t.lastReport.framesDecoded+"",bytesReceived:o.bytesReceived+"",packetsReceived:o.packetsReceived+"",packetsLost:o.packetsLost+""}),t.lastReport=o}}else if(("outbound-rtp"===o.type||"outboundrtp"===o.type)&&"video"===o.mediaType){if(!t.lastReport)return void(t.lastReport=o);e&&e({mediaType:"video",isVideoMute:t.isVideoMute,frameRateInput:Math.round(o.framerateMean)+"",frameRateSent:o.framesEncoded-t.lastReport.framesEncoded+""}),t.lastReport=o}}}catch(e){i.e(e)}finally{i.f()}}))},t.getAudioRelatedStats=function(e){t.peerConnection.getStats().then((function(n){var r,i=v(n.values());try{for(i.s();!(r=i.n()).done;){var o=r.value;t.isSubscriber&&("inbound-rtp"!==o.type&&"inboundrtp"!==o.type||"audio"!==o.mediaType||e&&e({browser:"firefox",mediaType:"audio",peerId:t.uid,isAudioMute:t.isAudioMute,frameDropped:o.packetsLost+"",frameReceived:o.packetsReceived+"",googJitterReceived:o.jitter+"",bytesReceived:o.bytesReceived+"",packetsReceived:o.packetsReceived+"",packetsLost:o.packetsLost+""}))}}catch(e){i.e(e)}finally{i.f()}}))},t.getStatsRate=function(e){t.getStats((function(t){t.forEach((function(e){})),e(t)}))},t.getStats=function(e,n){n=(n=n||500)>500?500:n,t.lastTimeGetStats&&Date.now()-t.lastTimeGetStats<n?e&&e(t.filterStatsCache,t.originStatsCache):this._getStats((function(n,r){t.filterStatsCache=n,t.originStatsCache=r,t.lastTimeGetStats=Date.now(),e&&e(n,r)}))},t._getStats=function(n){t.peerConnection.getStats().then((function(r){var s,d=[],u=v(r.values());try{for(u.s();!(s=u.n()).done;){var l=s.value;d.push(l),"outbound-rtp"!==l.type&&"outboundrtp"!==l.type||"video"!==l.mediaType||-1!==l.id.indexOf("rtcp")||(o.id=l.id,o.type=l.type,o.mediaType=l.mediaType,o.bytesSent=l.bytesSent?l.bytesSent+"":"0",o.packetsSent=l.packetsSent?l.packetsSent+"":"0",o.googPlisReceived=l.pliCount?l.pliCount+"":"0",o.googNacksReceived=l.nackCount?l.nackCount+"":"0",o.googFirsReceived=l.firCount?l.firCount+"":"0",o.googFrameRateSent=l.framerateMean?Math.round(l.framerateMean)+"":"0"),"outbound-rtp"!==l.type&&"outboundrtp"!==l.type||"audio"!==l.mediaType||-1!==l.id.indexOf("rtcp")||(i.id=l.id,i.type=l.type,i.mediaType=l.mediaType,i.bytesSent=l.bytesSent?l.bytesSent+"":"0",i.packetsSent=l.packetsSent?l.packetsSent+"":"0",e.agoraStream.local&&(i.audioInputLevel=Math.round(32767*e.agoraStream.getAudioLevel()).toString())),"inbound-rtp"!==l.type&&"inboundrtp"!==l.type||"audio"!==l.mediaType||l.isRemote||-1!==l.id.indexOf("rtcp")||(a.id=l.id,a.type=l.type,a.mediaType=l.mediaType,a.bytesReceived=l.bytesReceived?l.bytesReceived+"":"0",a.packetsLost=l.packetsLost?l.packetsLost+"":"0",a.packetsReceived=l.packetsReceived?l.packetsReceived+"":"0",a.googJitterReceived=l.jitter?l.jitter+"":"0",e.agoraStream.local||(a.audioOutputLevel=Math.round(32767*e.agoraStream.getAudioLevel()).toString())),"inbound-rtp"!==l.type&&"inboundrtp"!==l.type||"video"!==l.mediaType||l.isRemote||-1!==l.id.indexOf("rtcp")||(c.id=l.id,c.type=l.type,c.mediaType=l.mediaType,c.bytesReceived=l.bytesReceived?l.bytesReceived+"":"0",c.googFrameRateReceived=l.framerateMean?Math.round(l.framerateMean)+"":"0",c.googFramesDecoded=l.framesDecoded?l.framesDecoded+"":"0",Date.now()-m>=1e3?(c.googFrameRateDecoded=(l.framesDecoded-p)/((Date.now()-m)/1e3),c.googFrameRateDecoded=Math.round(Math.max(0,c.googFrameRateDecoded)),m=Date.now(),g=c.googFrameRateDecoded,p=l.framesDecoded,c.googFrameRateDecoded=c.googFrameRateDecoded.toString()):c.googFrameRateDecoded=g.toString(),c.packetsLost=l.packetsLost?l.packetsLost+"":"0",c.packetsReceived=l.packetsReceived?l.packetsReceived+"":"0",c.googJitterBufferMs=l.jitter?l.jitter+"":"0",c.googNacksSent=l.nackCount?l.nackCount+"":"0",c.googPlisSent=l.pliCount?l.pliCount+"":"0",c.googFirsSent=l.firCount?l.firCount+"":"0"),-1!==l.id.indexOf("outbound_rtcp_video")&&(o.packetsLost=l.packetsLost?l.packetsLost+"":"0")}}catch(e){u.e(e)}finally{u.f()}var f=[o,i,a,c];f.push({id:"time",startTime:t.connectedTime,timestamp:new Date}),n(f,d)}),(function(e){u.default.error("["+t.clientId+"]"+e)}))},t.addStream=function(e){r=!0,t.peerConnection.addStream(e),t.markActionNeeded()},t.removeStream=function(){t.markActionNeeded()},t.close=function(){t.state="closed",t.peerConnection.close()},t.markActionNeeded=function(){t.actionNeeded=!0,t.doLater((function(){t.onstablestate()}))},t.doLater=function(e){window.setTimeout(e,1)},t.onstablestate=function(){if(t.actionNeeded){if("new"===t.state||"established"===t.state){r&&(t.mediaConstraints=void 0),t.peerConnection.createOffer((function(e){if(e.sdp=h(e.sdp),e.sdp=e.sdp.replace(/a=extmap:1 http:\/\/www.webrtc.org\/experiments\/rtp-hdrext\/abs-send-time/,"a=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time"),e.sdp!==t.prevOffer)return t.peerConnection.setLocalDescription(e),t.state="preparing-offer",void t.markActionNeeded();u.default.debug("["+t.clientId+"]Not sending a new offer")}),(function(e){u.default.debug("["+t.clientId+"]Ups! create offer failed ",e)}),t.mediaConstraints)}else if("preparing-offer"===t.state){if(t.moreIceComing)return;t.prevOffer=t.peerConnection.localDescription.sdp,t.offerCandidates=t.prevOffer.match(/a=candidate.+\r\n/g)||[],t.offerCandidates.length||(e.isCloudProxy3&&e.onNoIceCandidate&&e.onNoIceCandidate(),u.default.warning("[".concat(t.clientId,"]No Ice Candidate generated")),Object(f.getParameter)("SHIM_CANDIDATE")?(u.default.debug("Shimming fake candidate"),t.prevOffer+="a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"):u.default.error("[".concat(t.clientId,"]None Ice Candidate not allowed"))),t.prevOffer=t.prevOffer.replace(/a=candidate:.+typ\shost.+\r\n/g,"a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"),t.sendMessage("OFFER",t.prevOffer),t.state="offer-sent"}else if("offer-received"===t.state)t.peerConnection.createAnswer((function(e){if(t.peerConnection.setLocalDescription(e),t.state="offer-received-preparing-answer",t.iceStarted)t.markActionNeeded();else{var n=new Date;u.default.debug("["+t.clientId+"]"+n.getTime()+": Starting ICE in responder"),t.iceStarted=!0}}),(function(){u.default.debug("["+t.clientId+"]Ups! Something went wrong")}));else if("offer-received-preparing-answer"===t.state){if(t.moreIceComing)return;var n=t.peerConnection.localDescription.sdp;t.sendMessage("ANSWER",n),t.state="established"}else t.debug("Dazed and confused in state "+t.state+", stopping here");t.actionNeeded=!1}},t.sendMessage=function(e,n){var r={};r.messageType=e,r.sdp=n,"OFFER"===e?(r.offererSessionId=t.sessionId,r.answererSessionId=t.otherSessionId,r.seq=t.sequenceNumber+=1,r.tiebreaker=Math.floor(429496723*Math.random()+1)):(r.offererSessionId=t.incomingMessage.offererSessionId,r.answererSessionId=t.sessionId,r.seq=t.incomingMessage.seq),t.onsignalingmessage(JSON.stringify(r))},t._getSender=function(e){if(t.peerConnection&&t.peerConnection.getSenders){var n=t.peerConnection.getSenders().find((function(t){return t.track.kind==e}));if(n)return n}return null},t.hasSender=function(e){return!!t._getSender(e)},t.replaceTrack=function(e,n,r){var i=t._getSender(e.kind);if(!i){return r("NO_SENDER_FOUND")}try{i.replaceTrack(e)}catch(e){return r&&r(e)}setTimeout((function(){return n&&n()}),50)},t.error=function(e){throw"Error in RoapOnJsep: "+e},t.sessionId=t.roapSessionId+=1,t.sequenceNumber=0,t.actionNeeded=!1,t.iceStarted=!1,t.moreIceComing=!0,t.iceCandidateCount=0,t.onsignalingmessage=e.callback,t.peerConnection.ontrack=function(e){t.onaddstream&&t.onaddstream(e,"ontrack")},t.peerConnection.onremovestream=function(e){t.onremovestream&&t.onremovestream(e)},t.peerConnection.oniceconnectionstatechange=function(e){"connected"===e.currentTarget.iceConnectionState&&(t.connectedTime=new Date),t.oniceconnectionstatechange&&t.oniceconnectionstatechange(e.currentTarget.iceConnectionState)};var h=function(t){var n;if(e.video&&e.maxVideoBW&&(null==(n=t.match(/m=video.*\r\n/))&&(n=t.match(/m=video.*\n/)),n&&n.length>0)){var r=n[0]+"b=TIAS:"+1e3*e.maxVideoBW+"\r\n";t=t.replace(n[0],r)}if(e.audio&&e.maxAudioBW&&(null==(n=t.match(/m=audio.*\r\n/))&&(n=t.match(/m=audio.*\n/)),n&&n.length>0)){r=n[0]+"b=TIAS:"+1e3*e.maxAudioBW+"\r\n";t=t.replace(n[0],r)}return t},E=function(e){return(e=e.replace(/a=.*abs-send-time\r\n/g,"")).replace(/a=.*goog-remb\r\n/g,"")};return t.onaddstream=null,t.onremovestream=null,t.state="new",t.markActionNeeded(),t},_=n(50),y=n.n(_),R=n(26),T=(n(5),103),I=function(e){var t={};if(t.clientId=e.clientId,e.session_id=T+=1,"undefined"==typeof window||!window.navigator)throw u.default.error("["+t.streamId+"]["+t.clientId+"]Publish/subscribe video/audio streams not supported yet"),new Error("NON_BROWSER_ENV_DETECTED");return null!==window.navigator.userAgent.match("Firefox")?(t.browser="mozilla",t=S(e)):"iOS"===r.getBrowserOS()||r.isSafari()?(u.default.debug("["+t.streamId+"]["+t.clientId+"]Safari"),(t=h(e)).browser="safari"):~window.navigator.userAgent.indexOf("Edge")?t=new y.a(e):(t=m(e)).browser="chrome-stable",t},b=function(e,t,n){var i={};i.config=e,i.streamId=e.streamId,delete e.streamId,navigator.getMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;var o=0,a=1,s=!1,c=null,d=function(e){if(o++,c)if(c===e)u.default.debug("Using Video Source/ Audio Source");else{var n=c.getVideoTracks()[0],r=c.getAudioTracks()[0],i=e.getVideoTracks()[0],d=e.getAudioTracks()[0];i&&(n&&c.removeTrack(n),c.addTrack(i)),d&&(r&&c.removeTrack(r),c.addTrack(d))}else c=e;o!==a||s||(s=!0,setTimeout((function(){t(c)}),0))},l=function(e){u.default.error("Failed to GetUserMedia",e.name,e.code,e.message,e),o++,s||(s=!0,setTimeout((function(){n&&n(e)}),0))},f=function(){var t={video:e.video,audio:e.audio};if(u.default.debug("GetUserMedia",JSON.stringify(t)),navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)navigator.mediaDevices.getUserMedia(t).then(d).catch(l);else if("undefined"!=typeof navigator&&navigator.getMedia)navigator.getMedia(e,d,l);else{var r={name:"MEDIA_NOT_SUPPORT",message:"Video/audio streams not supported yet"};u.default.error("["+i.streamId+"]"+r.message),n&&n(r)}};if((e.videoSource||e.audioSource)&&(c=new MediaStream,e.videoSource&&c.addTrack(e.videoSource),e.audioSource&&c.addTrack(e.audioSource)),e.video||e.audio||e.screen||e.screenAudio){if(!e.screen&&e.screenAudio)return n&&n({code:"Set screen to true before sharing the audio"});if(e.screen){if(R.a.isElectron())return e.screen.sourceId?R.a.getScreenStream(e.screen.sourceId,e.screen,(function(t,n){t?l(t):(e.audio&&(a++,f()),d(n))})):R.a.shareScreen(e.screen,(function(t,n){t?l(t):(e.audio&&(a++,f()),d(n))}));if(r.isFireFox()){u.default.debug("["+i.streamId+"]Screen access requested");if(!~["screen","window","application"].indexOf(e.screen.mediaSource))return n&&n({code:"Invalid mediaSource, mediaSource should be one of [screen, window, application]"});navigator.getMedia({video:e.screen},(function(t){e.audio&&(a++,f()),d(t)}),l)}else if(r.isChromeKernel()&&e.screen.extensionId){if(window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./)[1]<34)return void n({code:"This browser does not support screen sharing"});u.default.debug("["+i.streamId+"]Screen access on chrome stable, looking for extension");try{chrome.runtime.sendMessage(e.screen.extensionId,{getStream:!0},(function(t){if(void 0===t){u.default.error("["+i.streamId+"]No response from Chrome Plugin. Plugin not installed properly");l({name:"PluginNotInstalledProperly",message:"No response from Chrome Plugin. Plugin not installed properly."})}else e.screen.mandatory.chromeMediaSourceId=t.streamId,navigator.getMedia({video:e.screen},(function(t){e.audio&&(a++,f()),d(t)}),l)}))}catch(e){u.default.debug("["+i.streamId+"]AgoraRTC screensharing plugin is not accessible");return void n({code:"no_plugin_present"})}}else{if(window.navigator.mediaDevices.getDisplayMedia){var p={};return"number"==typeof e.screen.width&&"number"==typeof e.screen.height?p.video={width:{ideal:e.screen.width},height:{ideal:e.screen.height}}:p.video={width:e.screen.width,height:e.screen.height},e.screen.frameRate&&e.screen.frameRate.min?p.video.frameRate={ideal:e.screen.frameRate.max,max:e.screen.frameRate.max}:p.video.frameRate=e.screen.frameRate,e.screenAudio&&(p.audio=e.screenAudio),u.default.debug("use getDisplayMedia, constraints:",p),window.navigator.mediaDevices.getDisplayMedia(p).then((function(t){!e.screenAudio&&e.audio&&(a++,f()),d(t)})).catch(l)}u.default.error("["+i.streamId+"]This browser does not support screenSharing"),n({code:"This browser does not support screen sharing"})}}else f()}else d(c)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),o=function(){function e(e,t,n){void 0===t&&(t=""),this.name="AgoraRTCException",this.code=e,this.message="AgoraRTCError "+this.code+": "+t,this.data=n}return e.prototype.toString=function(){return this.data?this.message+" data: "+JSON.stringify(this.data):this.message},e.prototype.throw=function(){throw i.default.error(this.toString()),this},e}();t.AgoraRTCError=o,function(e){e.UNEXPECTED_ERROR="UNEXPECTED_ERROR",e.UNEXPECTED_RESPONSE="UNEXPECTED_RESPONSE",e.TIMEOUT="TIMEOUT",e.INVALID_PARAMS="INVALID_PARAMS",e.NOT_SUPPORT="NOT_SUPPORT",e.INVALID_OPERATION="INVALID_OPERATION",e.OPERATION_ABORT="OPERATION_ABORT",e.WEB_SECURITY_RESTRICT="WEB_SECURITY_RESTRICT",e.NETWORK_ERROR="NETWORK_ERROR",e.NETWORK_TIMEOUT="NETWORK_TIMEOUT",e.NETWORK_RESPONSE_ERROR="NETWORK_RESPONSE_ERROR",e.API_INVOKE_TIMEOUT="API_INVOKE_TIMEOUT",e.ENUMERATE_DEVICES_FAILED="ENUMERATE_DEVICES_FAILED",e.DEVICE_NOT_FOUND="DEVICE_NOT_FOUND",e.ELECTRON_IS_NULL="ELECTRON_IS_NULL",e.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR="ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR",e.STREAM_ALREADY_INITIALIZED="STREAM_ALREADY_INITIALIZED",e.STREAM_IS_CLOSED="STREAM_IS_CLOSED",e.ABORT_OTHER_INIT="ABORT_OTHER_INIT",e.CHROME_PLUGIN_NO_RESPONSE="CHROME_PLUGIN_NO_RESPONSE",e.CHROME_PLUGIN_NOT_INSTALL="CHROME_PLUGIN_NOT_INSTALL",e.MEDIA_OPTION_INVALID="MEDIA_OPTION_INVALID",e.PERMISSION_DENIED="PERMISSION_DENIED",e.CONSTRAINT_NOT_SATISFIED="CONSTRAINT_NOT_SATISFIED",e.CAN_NOT_AUTOPLAY="CAN_NOT_AUTOPLAY",e.HIGH_STREAM_NO_VIDEO_TRACK="HIGH_STREAM_NO_VIDEO_TRACK",e.SCREEN_SHARE_CAN_NOT_CREATE_LOW_STREAM="SCREEN_SHARE_CAN_NOT_CREATE_LOW_STREAM",e.TRACK_IS_DISABLED="TRACK_IS_DISABLED",e.SHARE_AUDIO_NOT_ALLOWED="SHARE_AUDIO_NOT_ALLOWED",e.TOKEN_GENERATOR_FUNCTION_ERROR="TOKEN_GENERATOR_FUNCTION_ERROR",e.INVALID_UINT_UID_FROM_STRING_UID="INVALID_UINT_UID_FROM_STRING_UID",e.CAN_NOT_GET_PROXY_SERVER="CAN_NOT_GET_PROXY_SERVER",e.CAN_NOT_GET_GATEWAY_SERVER="CAN_NOT_GET_GATEWAY_SERVER",e.UID_CONFLICT="UID_CONFLICT",e.INVALID_LOCAL_TRACK="INVALID_LOCAL_TRACK",e.INVALID_TRACK="INVALID_TRACK",e.SENDER_NOT_FOUND="SENDER_NOT_FOUND",e.CREATE_OFFER_FAILED="CREATE_OFFER_FAILED",e.SET_ANSWER_FAILED="SET_ANSWER_FAILED",e.ICE_FAILED="ICE_FAILED",e.PC_CLOSED="PC_CLOSED",e.SENDER_REPLACE_FAILED="SENDER_REPLACE_FAILED",e.GATEWAY_P2P_LOST="GATEWAY_P2P_LOST",e.NO_ICE_CANDIDATE="NO_ICE_CANDIDATE",e.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS="CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS",e.INVALID_REMOTE_USER="INVALID_REMOTE_USER",e.REMOTE_USER_IS_NOT_PUBLISHED="REMOTE_USER_IS_NOT_PUBLISHED",e.SUBSCRIPTION_IS_IN_PROGRESS="SUBSCRIPTION_IS_IN_PROGRESS",e.CUSTOM_REPORT_SEND_FAILED="CUSTOM_REPORT_SEND_FAILED",e.CUSTOM_REPORT_FREQUENCY_TOO_HIGH="CUSTOM_REPORT_FREQUENCY_TOO_HIGH",e.FETCH_AUDIO_FILE_FAILED="FETCH_AUDIO_FILE_FAILED",e.READ_LOCAL_AUDIO_FILE_ERROR="READ_LOCAL_AUDIO_FILE_ERROR",e.DECODE_AUDIO_FILE_FAILED="DECODE_AUDIO_FILE_FAILED",e.EFFECT_ID_CONFLICTED="EFFECT_ID_CONFLICTED",e.EFFECT_SOUND_ID_NOT_FOUND="EFFECT_SOUND_ID_NOT_FOUND",e.WS_ABORT="WS_ABORT",e.WS_DISCONNECT="WS_DISCONNECT",e.WS_ERR="WS_ERR",e.CAN_NOT_CONNECT_TO_LIVE_STREAMING_WORKER="CAN_NOT_CONNECT_TO_LIVE_STREAMING_WORKER",e.LIVE_STREAMING_TASK_CONFLICT="LIVE_STREAMING_TASK_CONFLICT",e.LIVE_STREAMING_INVALID_ARGUMENT="LIVE_STREAMING_INVALID_ARGUMENT",e.LIVE_STREAMING_INTERNAL_SERVER_ERROR="LIVE_STREAMING_INTERNAL_SERVER_ERROR",e.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED="LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED",e.LIVE_STREAMING_TRANSCODING_NOT_SUPPORT="LIVE_STREAMING_TRANSCODING_NOT_SUPPORT",e.LIVE_STREAMING_CDN_ERROR="LIVE_STREAMING_CDN_ERROR",e.LIVE_STREAMING_INVALID_RAW_STREAM="LIVE_STREAMING_INVALID_RAW_STREAM",e.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT="LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT",e.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE="LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE",e.LIVE_STREAMING_WARN_FREQUENT_REQUEST="LIVE_STREAMING_WARN_FREQUENT_REQUEST",e.WEBGL_INTERNAL_ERROR="WEBGL_INTERNAL_ERROR",e.BEAUTY_PROCESSOR_INTERNAL_ERROR="BEAUTY_PROCESSOR_INTERNAL_ERROR",e.CROSS_CHANNEL_WAIT_STATUS_ERROR="CROSS_CHANNEL_WAIT_STATUS_ERROR",e.CROSS_CHANNEL_FAILED_JOIN_SRC="CROSS_CHANNEL_FAILED_JOIN_SEC",e.CROSS_CHANNEL_FAILED_JOIN_DEST="CROSS_CHANNEL_FAILED_JOIN_DEST",e.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST="CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST",e.CROSS_CHANNEL_SERVER_ERROR_RESPONSE="CROSS_CHANNEL_SERVER_ERROR_RESPONSE",e.METADATA_OUT_OF_RANGE="METADATA_OUT_OF_RANGE"}(t.AgoraRTCErrorCode||(t.AgoraRTCErrorCode={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(0),i=window.AudioContext||window.webkitAudioContext,o=n(2),a=o.getParameter,s=o.setParameter,c=function(){return a("AUDIO_CONTEXT")||s("AUDIO_CONTEXT",function(){if(i){var e=new i;return window.ctx=e,new Promise((function(e){document.body?e():window.addEventListener("load",e)})).then((function(){var t=function t(){"suspended"==e.state?(r.default.debug("AudioContext is suspended, auto resume"),e.resume().then((function(){r.default.debug("AudioContext resume success"),document.body.removeEventListener("touchend",t,!0),document.body.removeEventListener("mousedown",t,!0)}))):(r.default.debug("AudioContext is running"),document.body.removeEventListener("touchend",t,!0),document.body.removeEventListener("mousedown",t,!0))};document.body.addEventListener("touchend",t,!0),document.body.addEventListener("mousedown",t,!0)})),e}throw new Error("AUDIO_CONTEXT_NOT_SUPPORTED")}()),a("AUDIO_CONTEXT")};c()},function(e,t,n){"use strict";var r=n(1),i=null;var o=function(){try{i=window.require("electron")}catch(e){}return i},a=function(e){var t=r.report.reportApiInvoke(null,{callback:e,name:"getScreenSources",options:arguments,tag:"tracer"}),n=o();if(!n)return t&&t("electron is null");try{var i=n.desktopCapturer.getSources({types:["window","screen"]})}catch(e){console.log(e)}if(i instanceof Promise)i.then((function(e){return t&&t(null,e)})).catch((function(e){return t&&t(e)}));else i=n.desktopCapturer.getSources({types:["window","screen"]},(function(e,n){t&&t(null,n)}))},s=function(e,t,n){var r=t.width;t={audio:!1,video:{mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:e,maxHeight:t.height,maxWidth:r,maxFrameRate:t.frameRate&&t.frameRate.max,minFrameRate:t.frameRate&&t.frameRate.min}}};navigator.webkitGetUserMedia(t,(function(e){n&&n(null,e)}),(function(e){n&&n(e)}))};t.a={isElectron:function(){return!!o()},getElectronInstance:o,getScreenSources:a,getScreenStream:s,shareScreen:function(e,t){a((function(n,r){if(n)return t&&t(n);!function(e,t){var n=document.createElement("div");n.innerText="share screen",n.setAttribute("style","text-align: center; height: 25px; line-height: 25px; border-radius: 4px 4px 0 0; background: #D4D2D4; border-bottom:  solid 1px #B9B8B9;");var r=document.createElement("div");r.setAttribute("style","width: 100%; height: 500px; padding: 15px 25px ; box-sizing: border-box;");var i=document.createElement("div");i.innerText="Agora Web Screensharing wants to share the contents of your screen with webdemo.agorabeckon.com. Choose what you'd like to share.",i.setAttribute("style","height: 12%;");var o=document.createElement("div");o.setAttribute("style","width: 100%; height: 80%; background: #FFF; border:  solid 1px #CBCBCB; display: flex; flex-wrap: wrap; justify-content: space-around; overflow-y: scroll; padding: 0 15px; box-sizing: border-box;");var a=document.createElement("div");a.setAttribute("style","text-align: right; padding: 16px 0;");var s=document.createElement("button");s.innerHTML="cancel",s.setAttribute("style","width: 85px;"),s.onclick=function(){document.body.removeChild(c),t&&t("NotAllowedError")},a.appendChild(s),r.appendChild(i),r.appendChild(o),r.appendChild(a);var c=document.createElement("div");c.setAttribute("style","position: absolute; z-index: 99999999; top: 50%; left: 50%; width: 620px; height: 525px; background: #ECECEC; border-radius: 4px; -webkit-transform: translate(-50%,-50%); transform: translate(-50%,-50%);"),c.appendChild(n),c.appendChild(r),document.body.appendChild(c),e.map((function(e){if(e.id){var n=document.createElement("div");n.setAttribute("style","width: 30%; height: 160px; padding: 20px 0; text-align: center;box-sizing: content-box;");var r=e.thumbnail;r.getSize().width>1920&&(r=r.resize({width:1920})),n.innerHTML='<div style="height: 120px; display: table-cell; vertical-align: middle;"><img style="width: 100%; background: #333333; box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.2);" src='+r.toDataURL()+' /></div><span style="\theight: 40px; line-height: 40px; display: inline-block; width: 70%; word-break: keep-all; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">'+e.name.replace(/[\u00A0-\u9999<>\&]/g,(function(e){return"&#"+e.charCodeAt(0)+";"}))+"</span>",n.onclick=function(){document.body.removeChild(c),t&&t(null,e.id)},o.appendChild(n)}}))}(r,(function(n,r){if(n)return t&&t(n);s(r,e,t)}))}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);!function(e){e.TRANSCODE="mix_streaming",e.RAW="raw_streaming",e.INJECT="inject_streaming"}(t.LiveStreamingServiceMode||(t.LiveStreamingServiceMode={})),t.DEFAULT_LIVE_STREAMING_TRANSCODING_USER={alpha:1,height:640,width:360,x:0,y:0,zOrder:0,audioChannel:0},t.DEFAULT_LIVE_STREAMING_TRANSCODING_WATERMARK={x:0,y:0,width:160,height:160,zOrder:255,alpha:1},t.isLiveStreamingTranscodingConfig=function(e){return r.isEmpty(e.width)||r.checkValidNumber(e.width,"config.width",0),r.isEmpty(e.height)||r.checkValidNumber(e.height,"config.height",0),r.isEmpty(e.videoBitrate)||r.checkValidNumber(e.videoBitrate,"config.videoBitrate",1,1e6),r.isEmpty(e.videoFramerate)||r.checkValidNumber(e.videoFramerate,"config.videoFramerate"),r.isEmpty(e.lowLatency)||r.checkValidBoolean(e.lowLatency,"config.lowLatency"),r.isEmpty(e.audioSampleRate)||r.checkValidEnum(e.audioSampleRate,"config.audioSampleRate",[32e3,44100,48e3]),r.isEmpty(e.audioBitrate)||r.checkValidNumber(e.audioBitrate,"config.audioBitrate",1,128),r.isEmpty(e.audioChannels)||r.checkValidEnum(e.audioChannels,"config.audioChannels",[1,2,3,4,5]),r.isEmpty(e.videoGop)||r.checkValidNumber(e.videoGop,"config.videoGop"),r.isEmpty(e.videoCodecProfile)||r.checkValidEnum(e.videoCodecProfile,"config.videoCodecProfile",[66,77,100]),r.isEmpty(e.userCount)||r.checkValidNumber(e.userCount,"config.userCount",0,17),r.isEmpty(e.backgroundColor)||r.checkValidNumber(e.backgroundColor,"config.backgroundColor",0,16777215),e.transcodingUsers&&!r.isEmpty(e.transcodingUsers)&&(r.checkValidArray(e.transcodingUsers,"config.transcodingUsers"),e.transcodingUsers.forEach((function(e,t){r.checkValidUID(e.uid),r.isEmpty(e.x)||r.checkValidNumber(e.x,"transcodingUser["+t+"].x",0,1e4),r.isEmpty(e.y)||r.checkValidNumber(e.y,"transcodingUser["+t+"].y",0,1e4),r.isEmpty(e.width)||r.checkValidNumber(e.width,"transcodingUser["+t+"].width",0,1e4),r.isEmpty(e.height)||r.checkValidNumber(e.height,"transcodingUser["+t+"].height",0,1e4),r.isEmpty(e.zOrder)||r.checkValidNumber(e.zOrder-1,"transcodingUser["+t+"].zOrder",0,100),r.isEmpty(e.alpha)||r.checkValidFloatNumber(e.alpha,"transcodingUser["+t+"].alpha",0,1)}))),e.images&&!r.isEmpty(e.images)&&(r.checkValidArray(e.images,"config.images"),e.images.forEach((function(e,t){r.checkValidString(e.url,"images["+t+"].url",1,1e3,!1),r.isEmpty(e.x)||r.checkValidNumber(e.x,"images["+t+"].x",0,1e4),r.isEmpty(e.y)||r.checkValidNumber(e.y,"images["+t+"].y",0,1e4),r.isEmpty(e.width)||r.checkValidNumber(e.width,"images["+t+"].width",0,1e4),r.isEmpty(e.height)||r.checkValidNumber(e.height,"images["+t+"].height",0,1e4),r.isEmpty(e.zOrder)||r.checkValidNumber(e.zOrder,"images["+t+"].zOrder",0,255),r.isEmpty(e.alpha)||r.checkValidFloatNumber(e.alpha,"images["+t+"].alpha",0,1)}))),!0},t.DEFAULT_TRANSCODING_CONFIG={audioBitrate:48,audioChannels:1,audioSampleRate:48e3,backgroundColor:0,height:360,lowLatency:!1,videoBitrate:400,videoCodecProfile:100,videoCodecType:1,videoFramerate:15,videoGop:30,width:640,images:[],userConfigs:[],userConfigExtraInfo:""},t.isInjectStreamConfig=function(e){return r.isEmpty(e.audioVolume)||r.checkValidNumber(e.audioVolume,"config.audioVolume",0,1e3),r.isEmpty(e.audioBitrate)||r.checkValidNumber(e.audioBitrate,"config.audioBitrate",1,1e4),r.isEmpty(e.audioChannels)||r.checkValidEnum(e.audioChannels,"config.audioChannels",[1,2]),r.isEmpty(e.audioSampleRate)||r.checkValidEnum(e.audioSampleRate,"config.audioSampleRate",[32e3,44100,48e3]),r.isEmpty(e.width)||r.checkValidNumber(e.width,"config.width",0,1e4),r.isEmpty(e.height)||r.checkValidNumber(e.height,"config.height",0,1e4),r.isEmpty(e.videoBitrate)||r.checkValidNumber(e.videoBitrate,"config.videoBitrate",1,1e4),r.isEmpty(e.videoFramerate)||r.checkValidNumber(e.videoFramerate,"config.videoFramerate",1,1e4),r.isEmpty(e.videoGop)||r.checkValidNumber(e.videoGop,"config.videoGop",1,1e4),!0},t.DEFAULT_INJECT_CONFIG={audioBitrate:48,audioChannels:2,audioVolume:100,audioSampleRate:48e3,height:0,width:0,videoBitrate:400,videoFramerate:15,videoGop:30},function(e){e.WARNING="@live_uap-warning",e.ERROR="@line_uap-error",e.PUBLISH_STREAM_STATUS="@live_uap-publish-status",e.INJECT_STREAM_STATUS="@live_uap-inject-status",e.WORKER_STATUS="@live_uap-worker-status",e.REQUEST_NEW_ADDRESS="@live_uap-request-address"}(t.LiveStreamingUapSignalEvents||(t.LiveStreamingUapSignalEvents={})),function(e){e.REQUEST_WORKER_MANAGER_LIST="@live_req_worker_manager"}(t.LiveStreamingInternalEvents||(t.LiveStreamingInternalEvents={})),function(e){e[e.LIVE_STREAM_RESPONSE_SUCCEED=200]="LIVE_STREAM_RESPONSE_SUCCEED",e[e.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM=454]="LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM",e[e.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR=450]="LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR",e[e.LIVE_STREAM_RESPONSE_BAD_STREAM=451]="LIVE_STREAM_RESPONSE_BAD_STREAM",e[e.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR=400]="LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR",e[e.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST=404]="LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST",e[e.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED=456]="LIVE_STREAM_RESPONSE_NOT_AUTHORIZED",e[e.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE=457]="LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE",e[e.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN=429]="LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN",e[e.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH=452]="LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH",e[e.LIVE_STREAM_RESPONSE_NOT_SUPPORTED=453]="LIVE_STREAM_RESPONSE_NOT_SUPPORTED",e[e.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM=455]="LIVE_STREAM_RESPONSE_MAX_STREAM_NUM",e[e.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR=500]="LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR",e[e.LIVE_STREAM_RESPONSE_WORKER_LOST=501]="LIVE_STREAM_RESPONSE_WORKER_LOST",e[e.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT=502]="LIVE_STREAM_RESPONSE_RESOURCE_LIMIT",e[e.LIVE_STREAM_RESPONSE_WORKER_QUIT=503]="LIVE_STREAM_RESPONSE_WORKER_QUIT",e[e.ERROR_FAIL_SEND_MESSAGE=504]="ERROR_FAIL_SEND_MESSAGE",e[e.LIVE_STREAM_RESPONSE_INGNORE_MESSAGE=505]="LIVE_STREAM_RESPONSE_INGNORE_MESSAGE",e[e.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE=30]="PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE",e[e.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT=31]="PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT",e[e.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH=32]="PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH",e[e.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN=33]="PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN"}(t.LIVE_STREAM_ERROR_CODE||(t.LIVE_STREAM_ERROR_CODE={})),function(e){e.CONNECTED="websocket:connected",e.RECONNECTING="websocket:reconnecting",e.WILL_RECONNECT="websocket:will_reconnect",e.CLOSED="websocket:closed",e.FAILED="websocket:failed",e.ON_MESSAGE="websocket:on_message",e.REQUEST_NEW_URLS="websocket:request_new_urls"}(t.WebSocketManagerEvents||(t.WebSocketManagerEvents={}))},function(e,t,n){var r=n(57),i=n(58);e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var s=0;s<16;++s)t[o+s]=a[s];return t||i(a)}},function(e,t,n){var r;e.exports=(r=n(73),function(e){var t=r,n=t.lib,i=n.WordArray,o=n.Hasher,a=t.algo,s=[],c=[];!function(){function t(t){for(var n=e.sqrt(t),r=2;r<=n;r++)if(!(t%r))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var r=2,i=0;i<64;)t(r)&&(i<8&&(s[i]=n(e.pow(r,.5))),c[i]=n(e.pow(r,1/3)),i++),r++}();var d=[],u=a.SHA256=o.extend({_doReset:function(){this._hash=new i.init(s.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],i=n[1],o=n[2],a=n[3],s=n[4],u=n[5],l=n[6],f=n[7],p=0;p<64;p++){if(p<16)d[p]=0|e[t+p];else{var g=d[p-15],m=(g<<25|g>>>7)^(g<<14|g>>>18)^g>>>3,h=d[p-2],v=(h<<15|h>>>17)^(h<<13|h>>>19)^h>>>10;d[p]=m+d[p-7]+v+d[p-16]}var E=r&i^r&o^i&o,S=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),_=f+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&u^~s&l)+c[p]+d[p];f=l,l=u,u=s,s=a+_|0,a=o,o=i,i=r,r=_+(S+E)|0}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+o|0,n[3]=n[3]+a|0,n[4]=n[4]+s|0,n[5]=n[5]+u|0,n[6]=n[6]+l|0,n[7]=n[7]+f|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(i+64>>>9<<4)]=e.floor(r/4294967296),n[15+(i+64>>>9<<4)]=r,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=o._createHelper(u),t.HmacSHA256=o._createHmacHelper(u)}(Math),r.SHA256)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomString=function(e){void 0===e&&(e=8);for(var t="ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678",n=t.length,r="",i=0;i<e;i++)r+=t.charAt(Math.floor(Math.random()*n));return r}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),c=a(n(37)),d=n(24),u=a(n(0)),l=n(1);function f(e){return new Promise((function(t){window.setTimeout(t,e)}))}function p(e,t){return new Promise((function(n,r){t.timeout=t.timeout||s.getParameter("HTTP_CONNECT_TIMEOUT"),t.responseType=t.responseType||"json",t.data&&(t.data=JSON.stringify(t.data)),t.headers=t.headers||{},t.headers["Content-Type"]="application/json",t.method="POST",t.url=e,c.default.request(t).then((function(e){n(e.data)})).catch((function(e){c.default.isCancel(e)?r(new d.AgoraRTCError(d.AgoraRTCErrorCode.OPERATION_ABORT,"cancel token canceled")):"ECONNABORTED"===e.code?r(new d.AgoraRTCError(d.AgoraRTCErrorCode.NETWORK_TIMEOUT,e.message)):e.response?r(new d.AgoraRTCError(d.AgoraRTCErrorCode.NETWORK_RESPONSE_ERROR,e.response.status)):r(new d.AgoraRTCError(d.AgoraRTCErrorCode.NETWORK_ERROR,e.message))}))}))}function g(e,n,r,a){var s=this,c=Object.assign({},t.DEFAULT_RETRY_CONFIG,a),u=c.timeout,l=function(){return i(s,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,f(u)];case 1:return e.sent(),u*=c.timeoutFactor,u=Math.min(c.maxRetryTimeout,u),[2]}}))}))},p=!1,g=new Promise((function(t,a){return i(s,void 0,void 0,(function(){var i,s,u;return o(this,(function(o){switch(o.label){case 0:n=n||function(){return!1},r=r||function(){return!0},i=0,o.label=1;case 1:if(!(i<c.maxRetryCount))return[3,12];if(p)return[2,a(new d.AgoraRTCError(d.AgoraRTCErrorCode.OPERATION_ABORT))];o.label=2;case 2:return o.trys.push([2,7,,11]),[4,e()];case 3:return s=o.sent(),n(s,i)?i+1===c.maxRetryCount?[2,t(s)]:[4,l()]:[3,5];case 4:return o.sent(),[3,6];case 5:return[2,t(s)];case 6:return[3,11];case 7:return u=o.sent(),r(u,i)?i+1===c.maxRetryCount?[2,a(u)]:[4,l()]:[3,9];case 8:return o.sent(),[3,10];case 9:return[2,a(u)];case 10:return[3,11];case 11:return i+=1,[3,1];case 12:return[2]}}))}))}));return g.cancel=function(){return p=!0},g}function m(e,t){return{addressList:e.servers.map((function(e,n){return"wss://"+e.address.replace(/\./g,"-")+".edge.agora.io:"+e.wss+"?serviceName="+encodeURIComponent(t)})),workerToken:e.workerToken,vid:e.vid}}t.wait=f,t.post=p,t.DEFAULT_RETRY_CONFIG={timeout:500,timeoutFactor:1.5,maxRetryCount:1/0,maxRetryTimeout:1e4},t.getRetryWaitTime=function(e,t){var n=t.timeout*Math.pow(t.timeoutFactor,e);return Math.min(t.maxRetryTimeout,n)},t.retryable=g,t.liveStreamingServerResponseToResult=m;var h=1;function v(e,n,a,c,f){var v=this;void 0===f&&(f=t.DEFAULT_RETRY_CONFIG),h+=1;var E,S,_={sid:a.sid,command:"convergeAllocateEdge",uid:"666",appId:a.appId,ts:Math.floor(Date.now()/1e3),seq:h,requestId:h,version:s.VERSION,cname:a.cname},y={service_name:n,json_body:JSON.stringify(_)},R=e[0];return g((function(){return i(v,void 0,void 0,(function(){var e,t,i,a,l;return o(this,(function(o){switch(o.label){case 0:return E=Date.now(),[4,p(R,{data:y,cancelToken:c,headers:{"X-Packet-Service-Type":"0","X-Packet-URI":"61"}})];case 1:if(e=o.sent(),S=Date.now()-E,0!==e.code)throw i=new d.AgoraRTCError(d.AgoraRTCErrorCode.UNEXPECTED_RESPONSE,"live streaming ap error, code"+e.code,{retry:!0}),u.default.error(i.toString()),i;if(200!==(t=JSON.parse(e.json_body)).code)throw i=new d.AgoraRTCError(d.AgoraRTCErrorCode.UNEXPECTED_RESPONSE,"live streaming app center error, code: "+t.code+", reason: "+t.reason),u.default.error(i.toString()),i;if(!t.servers||0===t.servers.length)throw i=new d.AgoraRTCError(d.AgoraRTCErrorCode.UNEXPECTED_RESPONSE,"live streaming app center empty server"),u.default.error(i.toString()),i;if(a=m(t,n),s.getParameter("LIVE_STREAMING_ADDRESS"))try{l=JSON.parse(s.getParameter("LIVE_STREAMING_ADDRESS")),a.addressList=l}catch(e){a.addressList=[s.getParameter("LIVE_STREAMING_ADDRESS")]}return[2,r(r({},a),{responseTime:S})]}}))}))}),(function(t,r){return l.report.requestApWorkerEvent(a.sid,{success:!0,sc:200,serviceName:n,responseDetail:JSON.stringify(t.addressList),firstSuccess:0===r,responseTime:S,serverIp:e[r%e.length]}),!1}),(function(t,r){return l.report.requestApWorkerEvent(a.sid,{success:!1,sc:t.data&&t.data.code||200,serviceName:n,responseTime:S,serverIp:e[r%e.length]}),!!(t.code!==d.AgoraRTCErrorCode.OPERATION_ABORT&&t.code!==d.AgoraRTCErrorCode.UNEXPECTED_RESPONSE||t.data&&t.data.retry)&&(R=e[(r+1)%e.length],!0)}),f)}t.requestLiveStreamingWorkerManager=v,t.getLiveStreamingWorkerMangerResult=function(e,t,n){return i(this,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:r=s.getParameter("UAP_AP").map((function(e){return t.proxyServer?"https://"+t.proxyServer+"/ap/?url="+e+"/api/v1?action=uap":"https://"+e+"/api/v1?action=uap"})),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,v(r,e,t,n)];case 2:return[2,o.sent()];case 3:throw i=o.sent(),l.report.requestApWorkerEvent(t.sid,{success:!1,sc:i.data&&i.data.code||200,serviceName:e,responseTime:i.data&&i.data.responseTime}),i;case 4:return[2]}}))}))}},function(e,t,n){var r=n(70),i=n(71),o=n(34),a=n(72);e.exports=function(e){return r(e)||i(e)||o(e)||a()}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(35);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r};Object.defineProperty(t,"__esModule",{value:!0});var i=n(24),o=function(){function e(){this._events={},this.addListener=this.on}return e.prototype.getListeners=function(e){return this._events[e]?this._events[e].map((function(e){return e.listener})):[]},e.prototype.on=function(e,t){this._events[e]||(this._events[e]=[]);var n=this._events[e];-1===this._indexOfListener(n,t)&&n.push({listener:t,once:!1})},e.prototype.once=function(e,t){this._events[e]||(this._events[e]=[]);var n=this._events[e];-1===this._indexOfListener(n,t)&&n.push({listener:t,once:!0})},e.prototype.off=function(e,t){if(this._events[e]){var n=this._events[e],r=this._indexOfListener(n,t);-1!==r&&n.splice(r,1),0===this._events[e].length&&delete this._events[e]}},e.prototype.removeAllListeners=function(e){e?delete this._events[e]:this._events={}},e.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this._events[e]||(this._events[e]=[]);for(var r=this._events[e].map((function(e){return e})),i=0;i<r.length;i+=1){var o=r[i];o.once&&this.off(e,o.listener),o.listener.apply(this,t||[])}},e.prototype._indexOfListener=function(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1},e}();function a(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var a=null,s=null;if(e.emit.apply(e,r([t],n,[function(e){a=e},function(e){s=e}])),null!==s)throw s;if(null===a)throw new i.AgoraRTCError(i.AgoraRTCErrorCode.UNEXPECTED_ERROR,"handler is not sync");return a}t.EventEmitter=o,t.emitAsPromise=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];return 0===e.getListeners(t).length?Promise.reject(new i.AgoraRTCError(i.AgoraRTCErrorCode.UNEXPECTED_ERROR,"can not emit promise")):new Promise((function(i,o){e.emit.apply(e,r([t],n,[i,o]))}))},t.emitAsInvokerNoResponse=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return 0===e.getListeners(t).length?null:a.apply(void 0,r([e,t],n))},t.emitAsInvoker=a},function(e,t,n){e.exports=n(78)},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(18);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))})))})),o=a.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(18),i=n(84),o={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(42)),s),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(o)})),e.exports=c}).call(this,n(83))},function(e,t,n){"use strict";var r=n(18),i=n(85),o=n(39),a=n(87),s=n(90),c=n(91),d=n(43);e.exports=function(e){return new Promise((function(t,u){var l=e.data,f=e.headers;r.isFormData(l)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var g=e.auth.username||"",m=e.auth.password||"";f.Authorization="Basic "+btoa(g+":"+m)}var h=a(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),o(h,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?s(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};i(t,u,r),p=null}},p.onabort=function(){p&&(u(d("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){u(d("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),u(d(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(92),E=(e.withCredentials||c(h))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;E&&(f[e.xsrfHeaderName]=E)}if("setRequestHeader"in p&&r.forEach(f,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),u(e),p=null)})),void 0===l&&(l=null),p.send(l)}))}},function(e,t,n){"use strict";var r=n(86);e.exports=function(e,t,n,i,o){var a=new Error(e);return r(a,t,n,i,o)}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){t=t||{};var n={},i=["url","method","params","data"],o=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(i,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(o,(function(i){r.isObject(t[i])?n[i]=r.deepMerge(e[i],t[i]):void 0!==t[i]?n[i]=t[i]:r.isObject(e[i])?n[i]=r.deepMerge(e[i]):void 0!==e[i]&&(n[i]=e[i])})),r.forEach(a,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var s=i.concat(o).concat(a),c=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(c,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s=o(n(59)),c=a(n(62)),d=a(n(63)),u=o(n(0)),l=n(2),f=s.default.Root.fromJSON(d),p=function(){function e(){this.requestArray=[],this.retryBackoffCount=0,this.state=0}return e.prototype.setProxy=function(e){this.proxyServer=e},e.prototype.sendReportList=function(e,t){var n=this,r=this._dataConvert("ProtoRaws",{vid:t,sendTs:Math.round(Date.now()/1e3),payloads:e.map((function(e){return{id:c[e.type],msg:n._dataConvert(e.type,e.data)}}))});this.send(r)},e.prototype._dataConvert=function(e,t){var n;try{n=f.lookupType("protobuf."+e)}catch(t){u.default.error("[send-proto] invalid proto name "+e)}var r=n.create(t);return n.encode(r).finish()},e.prototype.send=function(e){0==this.state?this._send(e):this.requestArray.push(e)},e.prototype._send=function(e){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,4]),this.state=1,[4,this.request(e)];case 1:return t.sent(),this.retryBackoffCount=0,0!==this.requestArray.length?this._send(this.requestArray.shift()):this.state=0,[3,4];case 2:return t.sent(),[4,g(this.retryBackoffCount++<2?200:1e4)];case 3:return t.sent(),this._send(e),[3,4];case 4:return[2]}}))}))},e.prototype.request=function(e){return r(this,void 0,void 0,(function(){var t,n;return i(this,(function(r){switch(r.label){case 0:t=this._getAddress(),n=this._getBackupAddress(),r.label=1;case 1:return r.trys.push([1,3,,5]),[4,this._request(t,e)];case 2:return r.sent(),[3,5];case 3:return r.sent(),[4,this._request(n,e)];case 4:return r.sent(),[3,5];case 5:return[2]}}))}))},e.prototype._request=function(e,t){return this._post(e,t)},e.prototype._post=function(e,t){var n=this;return new Promise((function(r,i){var o=new XMLHttpRequest;o.timeout=l.getParameter("HTTP_CONNECT_TIMEOUT"),o.open("POST",e,!0),o.setRequestHeader("Content-type","application/octet-stream"),n.proxyServer||(o.setRequestHeader("Cache-Control","no-cache, no-store"),o.setRequestHeader("Pragma","no-cache"),o.setRequestHeader("Expires","0")),o.onload=function(e){r(o.responseText)},o.onerror=function(e){i(e)},o.ontimeout=function(e){i(e)},o.send(t)}))},e.prototype._getAddress=function(){return this.proxyServer?"https://"+this.proxyServer+"/rs/?h="+l.getParameter("EVENT_REPORT_DOMAIN")+"&p=6443&d=events/proto-raws":"https://"+l.getParameter("EVENT_REPORT_DOMAIN")+":6443/events/proto-raws"},e.prototype._getBackupAddress=function(){return this.proxyServer?"https://"+this.proxyServer+"/rs/?h="+l.getParameter("EVENT_REPORT_BACKUP_DOMAIN")+"&p=6443&d=events/proto-raws":"https://"+l.getParameter("EVENT_REPORT_BACKUP_DOMAIN")+":6443/events/proto-raws"},e}();t.default=p;var g=function(e){return new Promise((function(t){window.setTimeout(t,e)}))}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a,s=o(n(0)),c=n(15);!function(e){e.NEW="new",e.PREPARING_OFFER="preparing-offer",e.OFFER_SENT="offer-sent",e.ESTABLISHED="established",e.CLOSED="closed"}(a||(a={}));var d=function(){function e(e){this.candidate=null,this.state=a.NEW,this.config=e,this.isSubscriber=this.config.isSubscriber,this.peerConnection=this.initPeecConnection(e),this.peerConnection.onicecandidate=this._onicecandidate.bind(this),this.peerConnection.oniceconnectionstatechange=this._oniceconnectionstatechange.bind(this),this.peerConnection.onaddstream=this._onaddstream.bind(this),this.peerConnection.ontrack=this._ontrack.bind(this),this.processSignalingMessage=this.setAnswer.bind(this),this.peerConnection.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0}).then(this.setLocalSDP.bind(this)),this.sendVideoStats={id:"",type:"",mediaType:"",googCodecName:this.config.codec.toUpperCase(),bytesSent:"0",packetsLost:"0",packetsSent:"0",googAdaptationChanges:"0",googAvgEncodeMs:"0",googEncodeUsagePercent:"0",googFirsReceived:"0",googFrameHeightSent:"0",googFrameHeightInput:"0",googFrameRateInput:"0",googFrameRateSent:"0",googFrameWidthSent:"0",googFrameWidthInput:"0",googNacksReceived:"0",googPlisReceived:"0",googRtt:"0",googFramesEncoded:"0"},this.sendAudioStats={id:"",type:"",mediaType:"",googCodecName:"opus",aecDivergentFilterFraction:"0",audioInputLevel:"0",bytesSent:"0",packetsSent:"0",googEchoCancellationReturnLoss:"0",googEchoCancellationReturnLossEnhancement:"0"},this.receiveAudioStats={id:"",type:"",mediaType:"",audioOutputLevel:"0",bytesReceived:"0",packetsLost:"0",packetsReceived:"0",googAccelerateRate:"0",googCurrentDelayMs:"0",googDecodingCNG:"0",googDecodingCTN:"0",googDecodingCTSG:"0",googDecodingNormal:"0",googDecodingPLC:"0",googDecodingPLCCNG:"0",googExpandRate:"0",googJitterBufferMs:"0",googJitterReceived:"0",googPreemptiveExpandRate:"0",googPreferredJitterBufferMs:"0",googSecondaryDecodedRate:"0",googSpeechExpandRate:"0"},this.receiveVideoStats={id:"",type:"",mediaType:"",googTargetDelayMs:"0",packetsLost:"0",googDecodeMs:"0",googMaxDecodeMs:"0",googRenderDelayMs:"0",googFrameWidthReceived:"0",googFrameHeightReceived:"0",googFrameRateReceived:"0",googFrameRateDecoded:"0",googFrameRateOutput:"0",googFramesDecoded:"0",googFrameReceived:"0",googJitterBufferMs:"0",googCurrentDelayMs:"0",googMinPlayoutDelayMs:"0",googNacksSent:"0",googPlisSent:"0",googFirsSent:"0",bytesReceived:"0",packetsReceived:"0"}}return e.prototype.addStream=function(e){this.peerConnection.addStream(e)},e.prototype.setRtpSenderParameters=function(e){return r(this,void 0,void 0,(function(){return i(this,(function(e){return[2]}))}))},e.prototype.setAnswer=function(e){var t=JSON.parse(e);this.peerConnection.setRemoteDescription(new RTCSessionDescription({sdp:t.sdp,type:"answer"})),this.onsignalingmessage&&this.onsignalingmessage("")},e.prototype.close=function(){this.peerConnection.close()},e.prototype.getStats=function(e,t){if(void 0===t&&(t=500),t=t>500?500:t,Date.now()-this.lastTimeGetStats<t){var n=[];this.config.isSubscriber?(n.push(this.receiveVideoStats),n.push(this.receiveAudioStats)):(n.push(this.sendAudioStats),n.push(this.sendVideoStats)),n.push({id:"time",startTime:this.connectedTime,timestamp:Date.now()}),e&&e(n)}else this._getStats(e)},e.prototype._getStats=function(e){var t=this,n=[];this.peerConnection.getStats(null).then((function(r){t.lastTimeGetStats=Date.now(),Object.keys(r).map((function(e){var n=r[e];t.config.isSubscriber?n.type&&"inboundrtp"===n.type&&n.mediaType&&"audio"===n.mediaType?(t.receiveAudioStats.id=n.id+"recv",t.receiveAudioStats.type=n.type+"",t.receiveAudioStats.mediaType=n.mediaType+"",t.receiveAudioStats.packetsReceived=n.packetsReceived+"",t.receiveAudioStats.bytesReceived=n.bytesReceived+"",t.receiveAudioStats.packetsLost=n.packetsLost+"",t.receiveAudioStats.googJitterReceived=n.jitter+""):n.type&&"inboundrtp"===n.type&&n.mediaType&&"video"===n.mediaType?(t.receiveVideoStats.id=n.id+"recv",t.receiveVideoStats.type=n.type+"",t.receiveVideoStats.mediaType=n.mediaType+"",t.receiveVideoStats.packetsReceived=n.packetsReceived+"",t.receiveVideoStats.bytesReceived=n.bytesReceived+"",t.receiveVideoStats.packetsLost=n.packetsLost+"",t.receiveVideoStats.googJitterBufferMs=n.jitter+"",t.receiveVideoStats.googPlisSent=n.pliCount+"",t.receiveVideoStats.googFirsSent=n.firCount+"",t.receiveVideoStats.googNacksSent=n.nackCount+""):n.remoteSource&&n.type&&"track"===n.type&&n.trackIdentifier&&-1!==n.trackIdentifier.indexOf("v")?(t.receiveVideoStats.googFrameHeightReceived=n.frameHeight+"",t.receiveVideoStats.googFrameWidthReceived=n.frameWidth+"",t.receiveVideoStats.googFrameRateDecoded=n.framesPerSecond+"",t.receiveVideoStats.googFrameRateOutput=n.framesPerSecond+"",t.receiveVideoStats.googFrameRateReceived=n.framesPerSecond+"",t.receiveVideoStats.googFramesDecoded=n.framesDecoded+"",t.receiveVideoStats.googFrameReceived=n.framesReceived+""):n.remoteSource&&n.type&&"track"===n.type&&n.trackIdentifier&&-1!==n.trackIdentifier.indexOf("a")&&(t.receiveAudioStats.audioOutputLevel=n.audioLevel+""):!n.isRemote&&n.type&&"outboundrtp"===n.type&&n.mediaType&&"audio"===n.mediaType?(t.sendAudioStats.id=n.id+"send",t.sendAudioStats.type=n.type+"",t.sendAudioStats.mediaType=n.mediaType+"",t.sendAudioStats.packetsSent=n.packetsSent+"",t.sendAudioStats.bytesSent=n.bytesSent+""):!n.isRemote&&n.type&&"outboundrtp"===n.type&&n.mediaType&&"video"===n.mediaType?(t.sendVideoStats.id=n.id+"send",t.sendVideoStats.type=n.type+"",t.sendVideoStats.mediaType=n.mediaType+"",t.sendVideoStats.packetsSent=n.packetsSent+"",t.sendVideoStats.bytesSent=n.bytesSent+"",t.sendVideoStats.googRtt=n.roundTripTime+"",t.sendVideoStats.googPlisReceived=n.pliCount+"",t.sendVideoStats.googFirsReceived=n.firCount+"",t.sendVideoStats.googNacksReceived=n.nackCount+""):!n.remoteSource&&n.type&&"track"===n.type&&n.framesSent&&0!==n.framesSent&&(t.sendVideoStats.googFrameHeightSent=n.frameHeight+"",t.sendVideoStats.googFrameHeightInput=n.frameHeight+"",t.sendVideoStats.googFrameWidthSent=n.frameWidth+"",t.sendVideoStats.googFrameWidthInput=n.frameWidth+"",t.sendVideoStats.googFramesEncoded=n.framesSent+"",t.sendVideoStats.googFrameRateSent=n.framesPerSecond+"")})),t.config.isSubscriber?(n.push(t.receiveVideoStats),n.push(t.receiveAudioStats)):(n.push(t.sendAudioStats),n.push(t.sendVideoStats)),n.push({id:"time",startTime:t.connectedTime,timestamp:Date.now()}),e&&e(n)}))},e.prototype.getStatsRate=function(e){this.getStats(e)},e.prototype.initPeecConnection=function(e){var t=e.stunServerUrl,n=e.turnServer,r=e.iceServers;return this.pcConfig={iceServers:[]},r instanceof Array?this.pcConfig.iceServers=e.iceServers:t&&(t instanceof Array?t.map((function(e){"string"==typeof e&&""!==e&&this.pcConfig.iceServers.push({urls:e})})):"string"==typeof t&&""!==t&&this.pcConfig.iceServers.push({urls:t})),n&&(n instanceof Array?n.map((function(e){"string"==typeof e.url&&""!==e.url&&this.pcConfig.iceServers.push({username:e.username,credential:e.credential,url:e.url})})):"auto"!==n.mode&&"manual"!==n.mode||(n.udpport&&this.pcConfig.iceServers.push({username:n.username,credential:n.credential,credentialType:"password",urls:"turn:"+n.url+":"+n.udpport+"?transport=udp"}),"string"==typeof n.tcpport&&""!==n.tcpport&&this.pcConfig.iceServers.push({username:n.username,credential:n.credential,credentialType:"password",urls:"turn:"+n.url+":"+n.tcpport+"?transport=tcp"}),!0===n.forceturn&&(this.pcConfig.iceTransportPolicy="relay"))),new c.RTCPeerConnection(this.pcConfig)},e.prototype._ontrack=function(e){this.onaddstream&&this.onaddstream(e,"ontrack")},e.prototype._onaddstream=function(e){this.onaddstream&&this.onaddstream(e,"onaddstream")},e.prototype._oniceconnectionstatechange=function(e){"connected"===e.currentTarget.iceConnectionState&&(this.state=a.ESTABLISHED,this.connectedTime=Date.now()),this.oniceconnectionstatechange&&this.oniceconnectionstatechange(e.currentTarget.iceConnectionState)},e.prototype._onicecandidate=function(e){!this.candidate&&e&&(this.candidate=e.candidate,this.peerConnection.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0}).then(this.editLocalSDP.bind(this)).then(this.setLocalSDP.bind(this)).then(this.sendOffer.bind(this)).catch())},e.prototype.setLocalSDP=function(e){return this.peerConnection.setLocalDescription(new RTCSessionDescription({sdp:e.sdp,type:"offer"})),this.state=a.PREPARING_OFFER,e},e.prototype.editLocalSDP=function(e){return e.sdp=this.setBandWidth(e.sdp),e.sdp=this.reviseOpus(e.sdp),e.sdp=this.addCandidate(e.sdp),e},e.prototype.setSendRecv=function(e){return e=(e=(e=e.replace(/a=recvonly\r\n/g,"a=sendrecv\r\n")).replace(/a=sendonly\r\n/g,"a=sendrecv\r\n")).replace(/a=inactive\r\n/g,"a=sendrecv\r\n")},e.prototype.setBandWidth=function(e){var t,n,r=this.config,i=r.codec,o=r.minVideoBW,a=r.maxVideoBW,c=r.maxAudioBW,d=r.clientId;if((t=e.match(/m=video.*\r\n/))&&o&&a){n=t[0]+"b=AS:"+a+"\r\n";var u=0,l=0;"h264"===i?(u=e.search(/a=rtpmap:(\d+) H264\/90000\r\n/),l=e.search(/H264\/90000\r\n/)):"vp8"===i?(u=e.search(/a=rtpmap:(\d+) VP8\/90000\r\n/),l=e.search(/VP8\/90000\r\n/)):"vp9"===i&&(u=e.search(/a=rtpmap:(\d+) VP9\/90000\r\n/),l=e.search(/VP9\/90000\r\n/)),-1!==u&&-1!==l&&l-u>10&&(n=n+"a=fmtp:"+e.slice(u+9,l-1)+" x-google-min-bitrate="+o+"\r\n"),e=e.replace(t[0],n),s.default.debug("["+d+"]Set Video Bitrate - min:"+o+" max:"+a)}return(t=e.match(/m=audio.*\r\n/))&&c&&(n=t[0]+"b=AS:"+c+"\r\n",e=e.replace(t[0],n)),e},e.prototype.reviseOpus=function(e){return e=(e=e.replace(/a=rtpmap:102 opus\/48000\/2/g,"a=rtpmap:111 opus/48000/2")).replace(/m=audio 9 UDP\/TLS\/RTP\/SAVPF 102 0 8 97 13 118 101/g,"m=audio 9 UDP/TLS/RTP/SAVPF 111 0 8 97 13 118 101")},e.prototype.addCandidate=function(e){return e+="a=candidate:2243255435 1 udp 2122194687 192.168.0.1 30000 typ host generation 0 network-id 1\r\n"},e.prototype.sendOffer=function(e){this.config.callback(JSON.stringify({sdp:e.sdp,messageType:"OFFER",tiebreaker:Math.floor(429496723*Math.random()+1)})),this.state=a.OFFER_SENT},e}();t.default=d},function(e,t,n){var r=n(65),i=n(66),o=n(34),a=n(67);e.exports=function(e,t){return r(e)||i(e,t)||o(e,t)||a()}},function(e,t,n){var r,i,o;i=this,o=function(){"use strict";var e,t=this;function n(e){t.console&&(t.console.error?t.console.error(e):t.console.log&&t.console.log(e))}function r(e,t,r,i){var o=i||n,a=e.createShader(r);return e.shaderSource(a,t),e.compileShader(a),e.getShaderParameter(a,e.COMPILE_STATUS)?a:(o("*** Error compiling shader '"+a+"':"+e.getShaderInfoLog(a)),e.deleteShader(a),null)}function i(e,t,r,i,o){var a=o||n,s=e.createProgram();return t.forEach((function(t){e.attachShader(s,t)})),r&&r.forEach((function(t,n){e.bindAttribLocation(s,i?i[n]:n,t)})),e.linkProgram(s),e.getProgramParameter(s,e.LINK_STATUS)?s:(a("Error in program linking:"+e.getProgramInfoLog(s)),e.deleteProgram(s),null)}(e=e||t)===e.top&&(console.log("%c%s","color:blue;font-weight:bold;","for more about webgl-utils.js see:"),console.log("%c%s","color:blue;font-weight:bold;","http://webglfundamentals.org/webgl/lessons/webgl-boilerplate.html"));var o,a=["VERTEX_SHADER","FRAGMENT_SHADER"];return!document.documentMode&&!!window.StyleMedia&&(HTMLCanvasElement.prototype.getContext=(o=HTMLCanvasElement.prototype.getContext,function(){var e=arguments,t=e[0];return"webgl"===t&&((e=[].slice.call(arguments))[0]="experimental-webgl"),o.apply(this,e)})),{createProgram:i,createProgramFromSources:function(e,t,n,o,s){for(var c=[],d=0;d<t.length;++d)c.push(r(e,t[d],e[a[d]],s));return i(e,c,n,o,s)}}},void 0===(r=function(){return o.call(i)}.apply(t,[]))||(e.exports=r)},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(68),s=n(4),c=o(n(0));t.getSupportedCodec=function(e){return r(void 0,void 0,void 0,(function(){var t,n,r,o,u;return i(this,(function(i){switch(i.label){case 0:return t={video:[],audio:[]},"undefined"!=typeof window?[3,1]:("NOT_BROWSER_ENV",c.default.error("getSupportedCodec: NOT_BROWSER_ENV"),[2,Promise.reject("NOT_BROWSER_ENV")]);case 1:try{n=a.createRTCPeerConnection({iceServers:[]})}catch(e){return c.default.error("Failed to init RTCPeerConnection",e),[2,Promise.reject(e)]}return n?[3,2]:(c.default.warning("getSupportedCodec: no RTCPeerConnection constructor is detected"),[2,Promise.resolve(t)]);case 2:return e&&e.stream?[3,7]:(r={mandatory:{OfferToReceiveAudio:!0,OfferToReceiveVideo:!0}},o=void 0,(s.isSafari()||s.isFireFox()||s.isWeChatBrowser())&&n.addTransceiver?(n.addTransceiver("audio"),n.addTransceiver("video"),[4,n.createOffer()]):[3,4]);case 3:return o=i.sent(),[3,6];case 4:return[4,new Promise((function(e,t){var i=setTimeout((function(){t("CREATEOFFER_TIMEOUT")}),3e3);n.createOffer((function(t){clearTimeout(i),e(t)}),(function(e){clearTimeout(i),t(e)}),r)}))];case 5:o=i.sent(),i.label=6;case 6:return n.close(),u=o.sdp,[2,d(u)];case 7:return e.stream.getTracks&&n.addTrack?e.stream.getTracks().forEach((function(t){n.addTrack(t,e.stream)})):n.addStream(e.stream),o=void 0,s.isSafari()||s.isFireFox()?[4,n.createOffer()]:[3,9];case 8:return o=i.sent(),[3,11];case 9:return[4,new Promise((function(e,t){n.createOffer(e,t)}))];case 10:o=i.sent(),i.label=11;case 11:return n.close(),u=o.sdp,[2,d(u)]}}))}))};var d=function(e){var t={video:[],audio:[]};return e.match(/ VP8/i)&&t.video.push("VP8"),e.match(/ VP9/i)&&t.video.push("VP9"),e.match(/ H264/i)&&t.video.push("H264"),e.match(/ opus/i)&&t.audio.push("OPUS"),Promise.resolve(t)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(10);function a(e){for(var t="",n=0;n<e.length;n+=1)t+=String.fromCharCode(e[n]);return window.btoa(t)}t.encryptRSA=function(e){return r(void 0,void 0,void 0,(function(){var t,n,r,s;return i(this,(function(i){switch(i.label){case 0:return t=o.base64ToUint8Array("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCMnXAHkKIGAM+x4N22gCI+Wyu\nSTM9ztkT3uYslTT2PuKmZfPzhH6kVdO7PTjGCOZnAsyb3oTtWat0KcxQ4jxvqQV+\nHvYl3iI1Yd4vl2c3qRMJPLtRDfNxa2Mcxgq7e9aEUibzdd0st+OJAy3tOj/Y0aVy\nxQiYDz3vqa6bP29adwIDAQAB"),[4,window.crypto.subtle.importKey("spki",t,{name:"RSA-OAEP",hash:"SHA-256"},!0,["encrypt"])];case 1:return n=i.sent(),c=e,r=(new TextEncoder).encode(c),[4,window.crypto.subtle.encrypt({name:"RSA-OAEP"},n,r)];case 2:return s=i.sent(),[2,a(new Uint8Array(s))]}var c}))}))}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(0)),s=n(75),c=n(24),d=n(1),u=n(27);t.addLiveStreamingCapability=function(e,t){var n=this,o=function(t){var n=t.type;if(!e.joinInfo)return new c.AgoraRTCError(c.AgoraRTCErrorCode.INVALID_OPERATION,"can not create live streaming client, please join channel first").throw();switch(n){case u.LiveStreamingServiceMode.INJECT:return e._injectStreamingClient||(e._injectStreamingClient=new s.AgoraRTCLiveStreamingClient(e.joinInfo),e._injectStreamingClient.onInjectStatusChange=function(t,n,r){e.gatewayClient.dispatchEvent({type:"streamInjectedStatus",url:r,status:t})}),e._injectStreamingClient;case u.LiveStreamingServiceMode.RAW:return e._liveRawStreamingClient||(e._liveRawStreamingClient=new s.AgoraRTCLiveStreamingClient(e.joinInfo),e._liveRawStreamingClient.setGatewayConnectionState(e.getConnectionState()),e.on("connection-state-change",(function(t){e._liveRawStreamingClient.setGatewayConnectionState(t.curState),"CONNECTING"===t.prevState&&"CONNECTED"===t.curState&&e._liveRawStreamingClient&&e._liveRawStreamingClient.resetAllTask()})),e._liveRawStreamingClient.onLiveStreamError=function(t,n){a.default.error("LIVE_STREAMING_ERROR",n.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingFailed",url:t,reason:n.code})},e._liveRawStreamingClient.onLiveStreamWarning=function(t,n){a.default.warning("LIVE_STREAMING_WARNING",n.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingWarning",url:t,reason:n.code})}),e._liveRawStreamingClient;case u.LiveStreamingServiceMode.TRANSCODE:return e._liveTranscodeStreamingClient||(e._liveTranscodeStreamingClient=new s.AgoraRTCLiveStreamingClient(e.joinInfo),e._liveTranscodeStreamingClient.setGatewayConnectionState(e.getConnectionState()),e.on("connection-state-change",(function(t){e._liveTranscodeStreamingClient.setGatewayConnectionState(t.curState),"CONNECTING"===t.prevState&&"CONNECTED"===t.curState&&e._liveTranscodeStreamingClient&&e._liveTranscodeStreamingClient.resetAllTask()})),e._liveTranscodeStreamingClient.onLiveStreamError=function(t,n){a.default.error("LIVE_STREAMING_ERROR",n.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingFailed",url:t,reason:n.code})},e._liveTranscodeStreamingClient.onLiveStreamWarning=function(t,n){a.default.warning("LIVE_STREAMING_WARNING",n.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingWarning",url:t,reason:n})}),e._liveTranscodeStreamingClient}};e.gatewayClient.addEventListener("join",(function(t){e._injectStreamingClient&&e._injectStreamingClient.resetAllTask()})),e.gatewayClient.addEventListener("stream-unpublished",(function(t){t.options&&0===t.options.streamType&&(e._liveRawStreamingClient&&e._liveRawStreamingClient.resetAllTask(),e._liveTranscodeStreamingClient&&e._liveTranscodeStreamingClient.resetAllTask())})),e.gatewayClient.addEventListener("stream-published",(function(e){})),e.startLiveStreaming=function(n,r){a.default.debug("startLiveStreaming");var i=d.report.reportApiInvoke(t.sessionId,{name:"Client.startLiveStreaming",options:arguments,tag:"tracer"});if(e.gatewayClient&&"audience"===e.gatewayClient.role){var o={code:403,reason:"AUDIENCE_STREAMING_FORBIDDEN"};throw i(o),o}var s=e._startLiveStreaming(n,r);return s.then((function(e){i(null,e)})).catch((function(t){a.default.error("LIVE_STREAMING_ERROR",t.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingFailed",url:n,reason:t.code}),i(t)})),s},e._startLiveStreaming=function(s,d){return r(n,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:return d||("vp8"===t.codec&&a.default.warning("VP8 is not supported by raw_streaming. Subscriber side will suffer"),"vp9"===t.codec&&a.default.warning("VP9 is not supported by raw_streaming. Subscriber side will suffer"),"rtc"===t.mode&&a.default.warning("RTC mode is not supported by raw_streaming. Subscriber side will suffer")),(e._liveRawStreamingClient&&e._liveRawStreamingClient.haveUrl(s)||e._liveTranscodeStreamingClient&&e._liveTranscodeStreamingClient.haveUrl(s))&&new c.AgoraRTCError(c.AgoraRTCErrorCode.LIVE_STREAMING_TASK_CONFLICT).throw(),n=d?u.LiveStreamingServiceMode.TRANSCODE:u.LiveStreamingServiceMode.RAW,[4,o({type:n}).startLiveStreamingTask(s,n)];case 1:return r.sent(),e.gatewayClient.dispatchEvent({type:"liveStreamingStarted",url:s}),[2]}}))}))},e.setLiveTranscoding=function(n){a.default.debug("setLiveTranscoding: "+JSON.stringify(n));var r=d.report.reportApiInvoke(t.sessionId,{name:"Client.setLiveTranscoding",options:arguments,tag:"tracer"}),i=o({type:u.LiveStreamingServiceMode.TRANSCODE});return i.setTranscodingConfig(n).then((function(){e.gatewayClient.dispatchEvent({type:"liveTranscodingUpdated"}),r(null)})).catch((function(t){a.default.error("SET_LIVE_TRANSCODING_ERROR",t.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingFailed",reason:t.code}),r(t)}))},e.stopLiveStreaming=function(n){var r=d.report.reportApiInvoke(t.sessionId,{name:"Client.stopLiveStreaming",options:arguments,tag:"tracer"}),i=e._stopLiveStreaming(n);return i.then((function(e){r(null,e)})).catch((function(t){a.default.error("STOP_LIVE_STREAMING_ERROR",t.toString()),e.gatewayClient.dispatchEvent({type:"liveStreamingFailed",url:n,reason:t.code}),r(t)})),i},e._stopLiveStreaming=function(t){return r(this,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:return a.default.debug("stopLiveStreaming: "+JSON.stringify(t)),n=[e._liveRawStreamingClient,e._liveTranscodeStreamingClient],[4,Promise.all(n.map((function(e){return e&&e.haveUrl(t)&&e.stopLiveStreamingTask(t)})))];case 1:return r.sent(),a.default.debug("stopLiveStreaming sucess: "+JSON.stringify(t)),e.gatewayClient.dispatchEvent({type:"liveStreamingStopped",url:t}),[2]}}))}))},e.addInjectStreamUrl=function(n,r){var i=d.report.reportApiInvoke(t.sessionId,{name:"Client.addInjectStreamUrl",options:[n,r],tag:"tracer"});if("audience"===e.gatewayClient.role){var o={code:403,reason:"AUDIENCE_INJECTING_FORBIDDEN"};throw i(o),o}var s=e._addInjectStreamUrl(n,r);return s.then((function(e){i(null,e)})).catch((function(e){a.default.error("ADD_INJECT_STREAM_ERROR",e.toString()),i(e)})),s},e._addInjectStreamUrl=function(e,t){return r(n,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:return(n=o({type:u.LiveStreamingServiceMode.INJECT})).setInjectStreamConfig(t,0),[4,n.startLiveStreamingTask(e,u.LiveStreamingServiceMode.INJECT)];case 1:return r.sent(),[2]}}))}))},e.removeInjectStreamUrl=function(n){return r(this,void 0,void 0,(function(){var r,o;return i(this,(function(i){return r=d.report.reportApiInvoke(t.sessionId,{name:"Client.removeInjectStreamUrl",options:[n],tag:"tracer"}),(o=e._removeInjectStreamUrl(n)).then((function(e){r(null,e)})).catch((function(e){a.default.error("REMOVE_INJECT_STREAM_ERROR",e.toString()),r(e)})),[2,o]}))}))},e._removeInjectStreamUrl=function(e){return r(n,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,o({type:u.LiveStreamingServiceMode.INJECT}).stopLiveStreamingTask(e)];case 1:return t.sent(),[2]}}))}))},e._terminateLiveStreaming=function(){return r(n,void 0,void 0,(function(){return i(this,(function(t){return[e._injectStreamingClient,e._liveRawStreamingClient,e._liveTranscodeStreamingClient].forEach((function(e){e&&e.terminate()})),[2]}))}))}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(5)),o=r(n(0)),a=n(10);t.default=function(e,t){void 0===t&&(t={width:160,height:120,framerate:15});var n=t.width,r=t.height,s=t.framerate,c=e.stream;if(!c)throw i.default.INVALID_LOCAL_STREAM;if(!c.getVideoTracks()[0])throw i.default.HIGH_STREAM_NOT_VIDEO_TRACE;var d=c.getVideoTracks()[0];o.default.debug("Start getLowStream");var u=document.createElement("video"),l=document.createElement("canvas");u.setAttribute("style","display:none"),u.setAttribute("muted",""),u.muted=!0,u.setAttribute("autoplay",""),u.autoplay=!0,u.setAttribute("playsinline",""),l.setAttribute("style","display:none"),l.setAttribute("width",n.toString()),l.setAttribute("height",r.toString());var f=l.getContext("2d");if(!f)throw new Error("not get canvas context");u.srcObject=c,document.body.append(u),document.body.append(l),u.play(),o.default.debug("Start render lowStream");var p=a.audioTimerLoop((function(){return function(){if(u.paused&&u.play(),u.videoHeight>2&&u.videoWidth>2){var t=u.videoWidth,n=u.videoHeight/t,r=l.width*n;Math.abs(r-l.height)>=2&&(o.default.debug("adjust low stream resolution",l.width+"x"+l.height+" -> "+l.width+"x"+r),l.height=r)}f.drawImage(u,0,0,l.width,l.height);var i=e.stream;if(i){var a=i.getVideoTracks()[0];d!==a&&(o.default.debug("adjust low stream track"),u.srcObject=i,d=a)}}()}),s),g=l.captureStream(s),m=g.getVideoTracks()[0];return m.requestFrame&&m.requestFrame(),g.clean=function(){o.default.debug("Start clean lowStream"),p(),(u||u.parentNode||u.parentNode.removeChild)&&u.parentNode.removeChild(u),(l||l.parentNode||l.parentNode.removeChild)&&l.parentNode.removeChild(l),o.default.debug("Clean lowStream")},g}},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var i=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,i=n;return[i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]]].join("")}},function(module,exports,__webpack_require__){(function(global,module){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;
/*!
 * protobuf.js v6.10.0 (c) 2016, daniel wirtz
 * compiled wed, 15 jul 2020 23:34:13 utc
 * licensed under the bsd-3-clause license
 * see: https://github.com/dcodeio/protobuf.js for details
 */!function(undefined){"use strict";!function(e,t,n){var r=function n(r){var i=t[r];return i||e[r][0].call(i=t[r]={exports:{}},n,i,i.exports),i.exports}(n[0]);r.util.global.protobuf=r,__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(61)],(__WEBPACK_AMD_DEFINE_RESULT__=function(e){return e&&e.isLong&&(r.util.Long=e,r.configure()),r}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))===undefined||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__),module&&module.exports&&(module.exports=r)}({1:[function(e,t,n){t.exports=function(e,t){var n=new Array(arguments.length-1),r=0,i=2,o=!0;for(;i<arguments.length;)n[r++]=arguments[i++];return new Promise((function(i,a){n[r]=function(e){if(o)if(o=!1,e)a(e);else{for(var t=new Array(arguments.length-1),n=0;n<t.length;)t[n++]=arguments[n];i.apply(null,t)}};try{e.apply(t||null,n)}catch(e){o&&(o=!1,a(e))}}))}},{}],2:[function(e,t,n){var r=n;r.length=function(e){var t=e.length;if(!t)return 0;for(var n=0;--t%4>1&&"="===e.charAt(t);)++n;return Math.ceil(3*e.length)/4-n};for(var i=new Array(64),o=new Array(123),a=0;a<64;)o[i[a]=a<26?a+65:a<52?a+71:a<62?a-4:a-59|43]=a++;r.encode=function(e,t,n){for(var r,o=null,a=[],s=0,c=0;t<n;){var d=e[t++];switch(c){case 0:a[s++]=i[d>>2],r=(3&d)<<4,c=1;break;case 1:a[s++]=i[r|d>>4],r=(15&d)<<2,c=2;break;case 2:a[s++]=i[r|d>>6],a[s++]=i[63&d],c=0}s>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,a)),s=0)}return c&&(a[s++]=i[r],a[s++]=61,1===c&&(a[s++]=61)),o?(s&&o.push(String.fromCharCode.apply(String,a.slice(0,s))),o.join("")):String.fromCharCode.apply(String,a.slice(0,s))};r.decode=function(e,t,n){for(var r,i=n,a=0,s=0;s<e.length;){var c=e.charCodeAt(s++);if(61===c&&a>1)break;if((c=o[c])===undefined)throw Error("invalid encoding");switch(a){case 0:r=c,a=1;break;case 1:t[n++]=r<<2|(48&c)>>4,r=c,a=2;break;case 2:t[n++]=(15&r)<<4|(60&c)>>2,r=c,a=3;break;case 3:t[n++]=(3&r)<<6|c,a=0}}if(1===a)throw Error("invalid encoding");return n-i},r.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}},{}],3:[function(e,t,n){function r(e,t){"string"==typeof e&&(t=e,e=undefined);var n=[];function i(e){if("string"!=typeof e){var t=o();if(r.verbose&&console.log("codegen: "+t),t="return "+t,e){for(var a=Object.keys(e),s=new Array(a.length+1),c=new Array(a.length),d=0;d<a.length;)s[d]=a[d],c[d]=e[a[d++]];return s[d]=t,Function.apply(null,s).apply(null,c)}return Function(t)()}for(var u=new Array(arguments.length-1),l=0;l<u.length;)u[l]=arguments[++l];if(l=0,e=e.replace(/%([%dfijs])/g,(function(e,t){var n=u[l++];switch(t){case"d":case"f":return String(Number(n));case"i":return String(Math.floor(n));case"j":return JSON.stringify(n);case"s":return String(n)}return"%"})),l!==u.length)throw Error("parameter count mismatch");return n.push(e),i}function o(r){return"function "+(r||t||"")+"("+(e&&e.join(",")||"")+"){\n  "+n.join("\n  ")+"\n}"}return i.toString=o,i}t.exports=r,r.verbose=!1},{}],4:[function(e,t,n){function r(){this._listeners={}}t.exports=r,r.prototype.on=function(e,t,n){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:n||this}),this},r.prototype.off=function(e,t){if(e===undefined)this._listeners={};else if(t===undefined)this._listeners[e]=[];else for(var n=this._listeners[e],r=0;r<n.length;)n[r].fn===t?n.splice(r,1):++r;return this},r.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<t.length;)t[r].fn.apply(t[r++].ctx,n)}return this}},{}],5:[function(e,t,n){t.exports=o;var r=e(1),i=e(7)("fs");function o(e,t,n){return"function"==typeof t?(n=t,t={}):t||(t={}),n?!t.xhr&&i&&i.readFile?i.readFile(e,(function(r,i){return r&&"undefined"!=typeof XMLHttpRequest?o.xhr(e,t,n):r?n(r):n(null,t.binary?i:i.toString("utf8"))})):o.xhr(e,t,n):r(o,this,e,t)}o.xhr=function(e,t,n){var r=new XMLHttpRequest;r.onreadystatechange=function(){if(4!==r.readyState)return undefined;if(0!==r.status&&200!==r.status)return n(Error("status "+r.status));if(t.binary){var e=r.response;if(!e){e=[];for(var i=0;i<r.responseText.length;++i)e.push(255&r.responseText.charCodeAt(i))}return n(null,"undefined"!=typeof Uint8Array?new Uint8Array(e):e)}return n(null,r.responseText)},t.binary&&("overrideMimeType"in r&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.responseType="arraybuffer"),r.open("GET",e),r.send()}},{1:1,7:7}],6:[function(e,t,n){function r(e){return"undefined"!=typeof Float32Array?function(){var t=new Float32Array([-0]),n=new Uint8Array(t.buffer),r=128===n[3];function i(e,r,i){t[0]=e,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3]}function o(e,r,i){t[0]=e,r[i]=n[3],r[i+1]=n[2],r[i+2]=n[1],r[i+3]=n[0]}function a(e,r){return n[0]=e[r],n[1]=e[r+1],n[2]=e[r+2],n[3]=e[r+3],t[0]}function s(e,r){return n[3]=e[r],n[2]=e[r+1],n[1]=e[r+2],n[0]=e[r+3],t[0]}e.writeFloatLE=r?i:o,e.writeFloatBE=r?o:i,e.readFloatLE=r?a:s,e.readFloatBE=r?s:a}():function(){function t(e,t,n,r){var i=t<0?1:0;if(i&&(t=-t),0===t)e(1/t>0?0:2147483648,n,r);else if(isNaN(t))e(2143289344,n,r);else if(t>34028234663852886e22)e((i<<31|2139095040)>>>0,n,r);else if(t<11754943508222875e-54)e((i<<31|Math.round(t/1401298464324817e-60))>>>0,n,r);else{var o=Math.floor(Math.log(t)/Math.LN2);e((i<<31|o+127<<23|8388607&Math.round(t*Math.pow(2,-o)*8388608))>>>0,n,r)}}function n(e,t,n){var r=e(t,n),i=2*(r>>31)+1,o=r>>>23&255,a=8388607&r;return 255===o?a?NaN:i*(1/0):0===o?1401298464324817e-60*i*a:i*Math.pow(2,o-150)*(a+8388608)}e.writeFloatLE=t.bind(null,i),e.writeFloatBE=t.bind(null,o),e.readFloatLE=n.bind(null,a),e.readFloatBE=n.bind(null,s)}(),"undefined"!=typeof Float64Array?function(){var t=new Float64Array([-0]),n=new Uint8Array(t.buffer),r=128===n[7];function i(e,r,i){t[0]=e,r[i]=n[0],r[i+1]=n[1],r[i+2]=n[2],r[i+3]=n[3],r[i+4]=n[4],r[i+5]=n[5],r[i+6]=n[6],r[i+7]=n[7]}function o(e,r,i){t[0]=e,r[i]=n[7],r[i+1]=n[6],r[i+2]=n[5],r[i+3]=n[4],r[i+4]=n[3],r[i+5]=n[2],r[i+6]=n[1],r[i+7]=n[0]}function a(e,r){return n[0]=e[r],n[1]=e[r+1],n[2]=e[r+2],n[3]=e[r+3],n[4]=e[r+4],n[5]=e[r+5],n[6]=e[r+6],n[7]=e[r+7],t[0]}function s(e,r){return n[7]=e[r],n[6]=e[r+1],n[5]=e[r+2],n[4]=e[r+3],n[3]=e[r+4],n[2]=e[r+5],n[1]=e[r+6],n[0]=e[r+7],t[0]}e.writeDoubleLE=r?i:o,e.writeDoubleBE=r?o:i,e.readDoubleLE=r?a:s,e.readDoubleBE=r?s:a}():function(){function t(e,t,n,r,i,o){var a=r<0?1:0;if(a&&(r=-r),0===r)e(0,i,o+t),e(1/r>0?0:2147483648,i,o+n);else if(isNaN(r))e(0,i,o+t),e(2146959360,i,o+n);else if(r>17976931348623157e292)e(0,i,o+t),e((a<<31|2146435072)>>>0,i,o+n);else{var s;if(r<22250738585072014e-324)e((s=r/5e-324)>>>0,i,o+t),e((a<<31|s/4294967296)>>>0,i,o+n);else{var c=Math.floor(Math.log(r)/Math.LN2);1024===c&&(c=1023),e(4503599627370496*(s=r*Math.pow(2,-c))>>>0,i,o+t),e((a<<31|c+1023<<20|1048576*s&1048575)>>>0,i,o+n)}}}function n(e,t,n,r,i){var o=e(r,i+t),a=e(r,i+n),s=2*(a>>31)+1,c=a>>>20&2047,d=4294967296*(1048575&a)+o;return 2047===c?d?NaN:s*(1/0):0===c?5e-324*s*d:s*Math.pow(2,c-1075)*(d+4503599627370496)}e.writeDoubleLE=t.bind(null,i,0,4),e.writeDoubleBE=t.bind(null,o,4,0),e.readDoubleLE=n.bind(null,a,0,4),e.readDoubleBE=n.bind(null,s,4,0)}(),e}function i(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}function o(e,t,n){t[n]=e>>>24,t[n+1]=e>>>16&255,t[n+2]=e>>>8&255,t[n+3]=255&e}function a(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function s(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}t.exports=r(r)},{}],7:[function(require,module,exports){function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}module.exports=inquire},{}],8:[function(e,t,n){var r=n,i=r.isAbsolute=function(e){return/^(?:\/|\w+:)/.test(e)},o=r.normalize=function(e){var t=(e=e.replace(/\\/g,"/").replace(/\/{2,}/g,"/")).split("/"),n=i(e),r="";n&&(r=t.shift()+"/");for(var o=0;o<t.length;)".."===t[o]?o>0&&".."!==t[o-1]?t.splice(--o,2):n?t.splice(o,1):++o:"."===t[o]?t.splice(o,1):++o;return r+t.join("/")};r.resolve=function(e,t,n){return n||(t=o(t)),i(t)?t:(n||(e=o(e)),(e=e.replace(/(?:\/|^)[^/]+$/,"")).length?o(e+"/"+t):t)}},{}],9:[function(e,t,n){t.exports=function(e,t,n){var r=n||8192,i=r>>>1,o=null,a=r;return function(n){if(n<1||n>i)return e(n);a+n>r&&(o=e(r),a=0);var s=t.call(o,a,a+=n);return 7&a&&(a=1+(7|a)),s}}},{}],10:[function(e,t,n){var r=n;r.length=function(e){for(var t=0,n=0,r=0;r<e.length;++r)(n=e.charCodeAt(r))<128?t+=1:n<2048?t+=2:55296==(64512&n)&&56320==(64512&e.charCodeAt(r+1))?(++r,t+=4):t+=3;return t},r.read=function(e,t,n){if(n-t<1)return"";for(var r,i=null,o=[],a=0;t<n;)(r=e[t++])<128?o[a++]=r:r>191&&r<224?o[a++]=(31&r)<<6|63&e[t++]:r>239&&r<365?(r=((7&r)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,o[a++]=55296+(r>>10),o[a++]=56320+(1023&r)):o[a++]=(15&r)<<12|(63&e[t++])<<6|63&e[t++],a>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,o)),a=0);return i?(a&&i.push(String.fromCharCode.apply(String,o.slice(0,a))),i.join("")):String.fromCharCode.apply(String,o.slice(0,a))},r.write=function(e,t,n){for(var r,i,o=n,a=0;a<e.length;++a)(r=e.charCodeAt(a))<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):55296==(64512&r)&&56320==(64512&(i=e.charCodeAt(a+1)))?(r=65536+((1023&r)<<10)+(1023&i),++a,t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128);return n-o}},{}],11:[function(e,t,n){var r=n,i=e(14),o=e(33);function a(e,t,n,r){if(t.resolvedType)if(t.resolvedType instanceof i){e("switch(d%s){",r);for(var o=t.resolvedType.values,a=Object.keys(o),s=0;s<a.length;++s)t.repeated&&o[a[s]]===t.typeDefault&&e("default:"),e("case%j:",a[s])("case %i:",o[a[s]])("m%s=%j",r,o[a[s]])("break");e("}")}else e('if(typeof d%s!=="object")',r)("throw TypeError(%j)",t.fullName+": object expected")("m%s=types[%i].fromObject(d%s)",r,n,r);else{var c=!1;switch(t.type){case"double":case"float":e("m%s=Number(d%s)",r,r);break;case"uint32":case"fixed32":e("m%s=d%s>>>0",r,r);break;case"int32":case"sint32":case"sfixed32":e("m%s=d%s|0",r,r);break;case"uint64":c=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":e("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j",r,r,c)('else if(typeof d%s==="string")',r)("m%s=parseInt(d%s,10)",r,r)('else if(typeof d%s==="number")',r)("m%s=d%s",r,r)('else if(typeof d%s==="object")',r)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)",r,r,r,c?"true":"");break;case"bytes":e('if(typeof d%s==="string")',r)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)",r,r,r)("else if(d%s.length)",r)("m%s=d%s",r,r);break;case"string":e("m%s=String(d%s)",r,r);break;case"bool":e("m%s=Boolean(d%s)",r,r)}}return e}function s(e,t,n,r){if(t.resolvedType)t.resolvedType instanceof i?e("d%s=o.enums===String?types[%i].values[m%s]:m%s",r,n,r,r):e("d%s=types[%i].toObject(m%s,o)",r,n,r);else{var o=!1;switch(t.type){case"double":case"float":e("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s",r,r,r,r);break;case"uint64":o=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":e('if(typeof m%s==="number")',r)("d%s=o.longs===String?String(m%s):m%s",r,r,r)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s",r,r,r,r,o?"true":"",r);break;case"bytes":e("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s",r,r,r,r,r);break;default:e("d%s=m%s",r,r)}}return e}r.fromObject=function(e){var t=e.fieldsArray,n=o.codegen(["d"],e.name+"$fromObject")("if(d instanceof this.ctor)")("return d");if(!t.length)return n("return new this.ctor");n("var m=new this.ctor");for(var r=0;r<t.length;++r){var s=t[r].resolve(),c=o.safeProp(s.name);s.map?(n("if(d%s){",c)('if(typeof d%s!=="object")',c)("throw TypeError(%j)",s.fullName+": object expected")("m%s={}",c)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){",c),a(n,s,r,c+"[ks[i]]")("}")("}")):s.repeated?(n("if(d%s){",c)("if(!Array.isArray(d%s))",c)("throw TypeError(%j)",s.fullName+": array expected")("m%s=[]",c)("for(var i=0;i<d%s.length;++i){",c),a(n,s,r,c+"[i]")("}")("}")):(s.resolvedType instanceof i||n("if(d%s!=null){",c),a(n,s,r,c),s.resolvedType instanceof i||n("}"))}return n("return m")},r.toObject=function(e){var t=e.fieldsArray.slice().sort(o.compareFieldsById);if(!t.length)return o.codegen()("return {}");for(var n=o.codegen(["m","o"],e.name+"$toObject")("if(!o)")("o={}")("var d={}"),r=[],a=[],c=[],d=0;d<t.length;++d)t[d].partOf||(t[d].resolve().repeated?r:t[d].map?a:c).push(t[d]);if(r.length){for(n("if(o.arrays||o.defaults){"),d=0;d<r.length;++d)n("d%s=[]",o.safeProp(r[d].name));n("}")}if(a.length){for(n("if(o.objects||o.defaults){"),d=0;d<a.length;++d)n("d%s={}",o.safeProp(a[d].name));n("}")}if(c.length){for(n("if(o.defaults){"),d=0;d<c.length;++d){var u=c[d],l=o.safeProp(u.name);if(u.resolvedType instanceof i)n("d%s=o.enums===String?%j:%j",l,u.resolvedType.valuesById[u.typeDefault],u.typeDefault);else if(u.long)n("if(util.Long){")("var n=new util.Long(%i,%i,%j)",u.typeDefault.low,u.typeDefault.high,u.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n",l)("}else")("d%s=o.longs===String?%j:%i",l,u.typeDefault.toString(),u.typeDefault.toNumber());else if(u.bytes){var f="["+Array.prototype.slice.call(u.typeDefault).join(",")+"]";n("if(o.bytes===String)d%s=%j",l,String.fromCharCode.apply(String,u.typeDefault))("else{")("d%s=%s",l,f)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)",l,l)("}")}else n("d%s=%j",l,u.typeDefault)}n("}")}var p=!1;for(d=0;d<t.length;++d){u=t[d];var g=e._fieldsArray.indexOf(u);l=o.safeProp(u.name);u.map?(p||(p=!0,n("var ks2")),n("if(m%s&&(ks2=Object.keys(m%s)).length){",l,l)("d%s={}",l)("for(var j=0;j<ks2.length;++j){"),s(n,u,g,l+"[ks2[j]]")("}")):u.repeated?(n("if(m%s&&m%s.length){",l,l)("d%s=[]",l)("for(var j=0;j<m%s.length;++j){",l),s(n,u,g,l+"[j]")("}")):(n("if(m%s!=null&&m.hasOwnProperty(%j)){",l,u.name),s(n,u,g,l),u.partOf&&n("if(o.oneofs)")("d%s=%j",o.safeProp(u.partOf.name),u.name)),n("}")}return n("return d")}},{14:14,33:33}],12:[function(e,t,n){t.exports=function(e){var t=o.codegen(["r","l"],e.name+"$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor"+(e.fieldsArray.filter((function(e){return e.map})).length?",k,value":""))("while(r.pos<c){")("var t=r.uint32()");e.group&&t("if((t&7)===4)")("break");t("switch(t>>>3){");for(var n=0;n<e.fieldsArray.length;++n){var s=e._fieldsArray[n].resolve(),c=s.resolvedType instanceof r?"int32":s.type,d="m"+o.safeProp(s.name);t("case %i:",s.id),s.map?(t("if(%s===util.emptyObject)",d)("%s={}",d)("var c2 = r.uint32()+r.pos"),i.defaults[s.keyType]!==undefined?t("k=%j",i.defaults[s.keyType]):t("k=null"),i.defaults[c]!==undefined?t("value=%j",i.defaults[c]):t("value=null"),t("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break",s.keyType)("case 2:"),i.basic[c]===undefined?t("value=types[%i].decode(r,r.uint32())",n):t("value=r.%s()",c),t("break")("default:")("r.skipType(tag2&7)")("break")("}")("}"),i.long[s.keyType]!==undefined?t('%s[typeof k==="object"?util.longToHash(k):k]=value',d):t("%s[k]=value",d)):s.repeated?(t("if(!(%s&&%s.length))",d,d)("%s=[]",d),i.packed[c]!==undefined&&t("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())",d,c)("}else"),i.basic[c]===undefined?t(s.resolvedType.group?"%s.push(types[%i].decode(r))":"%s.push(types[%i].decode(r,r.uint32()))",d,n):t("%s.push(r.%s())",d,c)):i.basic[c]===undefined?t(s.resolvedType.group?"%s=types[%i].decode(r)":"%s=types[%i].decode(r,r.uint32())",d,n):t("%s=r.%s()",d,c),t("break")}for(t("default:")("r.skipType(t&7)")("break")("}")("}"),n=0;n<e._fieldsArray.length;++n){var u=e._fieldsArray[n];u.required&&t("if(!m.hasOwnProperty(%j))",u.name)("throw util.ProtocolError(%j,{instance:m})",a(u))}return t("return m")};var r=e(14),i=e(32),o=e(33);function a(e){return"missing required '"+e.name+"'"}},{14:14,32:32,33:33}],13:[function(e,t,n){t.exports=function(e){for(var t,n=o.codegen(["m","w"],e.name+"$encode")("if(!w)")("w=Writer.create()"),s=e.fieldsArray.slice().sort(o.compareFieldsById),c=0;c<s.length;++c){var d=s[c].resolve(),u=e._fieldsArray.indexOf(d),l=d.resolvedType instanceof r?"int32":d.type,f=i.basic[l];t="m"+o.safeProp(d.name),d.map?(n("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){",t,d.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){",t)("w.uint32(%i).fork().uint32(%i).%s(ks[i])",(d.id<<3|2)>>>0,8|i.mapKey[d.keyType],d.keyType),f===undefined?n("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()",u,t):n(".uint32(%i).%s(%s[ks[i]]).ldelim()",16|f,l,t),n("}")("}")):d.repeated?(n("if(%s!=null&&%s.length){",t,t),d.packed&&i.packed[l]!==undefined?n("w.uint32(%i).fork()",(d.id<<3|2)>>>0)("for(var i=0;i<%s.length;++i)",t)("w.%s(%s[i])",l,t)("w.ldelim()"):(n("for(var i=0;i<%s.length;++i)",t),f===undefined?a(n,d,u,t+"[i]"):n("w.uint32(%i).%s(%s[i])",(d.id<<3|f)>>>0,l,t)),n("}")):(d.optional&&n("if(%s!=null&&Object.hasOwnProperty.call(m,%j))",t,d.name),f===undefined?a(n,d,u,t):n("w.uint32(%i).%s(%s)",(d.id<<3|f)>>>0,l,t))}return n("return w")};var r=e(14),i=e(32),o=e(33);function a(e,t,n,r){return t.resolvedType.group?e("types[%i].encode(%s,w.uint32(%i)).uint32(%i)",n,r,(t.id<<3|3)>>>0,(t.id<<3|4)>>>0):e("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()",n,r,(t.id<<3|2)>>>0)}},{14:14,32:32,33:33}],14:[function(e,t,n){t.exports=a;var r=e(22);((a.prototype=Object.create(r.prototype)).constructor=a).className="Enum";var i=e(21),o=e(33);function a(e,t,n,i,o){if(r.call(this,e,n),t&&"object"!=typeof t)throw TypeError("values must be an object");if(this.valuesById={},this.values=Object.create(this.valuesById),this.comment=i,this.comments=o||{},this.reserved=undefined,t)for(var a=Object.keys(t),s=0;s<a.length;++s)"number"==typeof t[a[s]]&&(this.valuesById[this.values[a[s]]=t[a[s]]]=a[s])}a.fromJSON=function(e,t){var n=new a(e,t.values,t.options,t.comment,t.comments);return n.reserved=t.reserved,n},a.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return o.toObject(["options",this.options,"values",this.values,"reserved",this.reserved&&this.reserved.length?this.reserved:undefined,"comment",t?this.comment:undefined,"comments",t?this.comments:undefined])},a.prototype.add=function(e,t,n){if(!o.isString(e))throw TypeError("name must be a string");if(!o.isInteger(t))throw TypeError("id must be an integer");if(this.values[e]!==undefined)throw Error("duplicate name '"+e+"' in "+this);if(this.isReservedId(t))throw Error("id "+t+" is reserved in "+this);if(this.isReservedName(e))throw Error("name '"+e+"' is reserved in "+this);if(this.valuesById[t]!==undefined){if(!this.options||!this.options.allow_alias)throw Error("duplicate id "+t+" in "+this);this.values[e]=t}else this.valuesById[this.values[e]=t]=e;return this.comments[e]=n||null,this},a.prototype.remove=function(e){if(!o.isString(e))throw TypeError("name must be a string");var t=this.values[e];if(null==t)throw Error("name '"+e+"' does not exist in "+this);return delete this.valuesById[t],delete this.values[e],delete this.comments[e],this},a.prototype.isReservedId=function(e){return i.isReservedId(this.reserved,e)},a.prototype.isReservedName=function(e){return i.isReservedName(this.reserved,e)}},{21:21,22:22,33:33}],15:[function(e,t,n){t.exports=d;var r=e(22);((d.prototype=Object.create(r.prototype)).constructor=d).className="Field";var i,o=e(14),a=e(32),s=e(33),c=/^required|optional|repeated$/;function d(e,t,n,i,o,d,u){if(s.isObject(i)?(u=o,d=i,i=o=undefined):s.isObject(o)&&(u=d,d=o,o=undefined),r.call(this,e,d),!s.isInteger(t)||t<0)throw TypeError("id must be a non-negative integer");if(!s.isString(n))throw TypeError("type must be a string");if(i!==undefined&&!c.test(i=i.toString().toLowerCase()))throw TypeError("rule must be a string rule");if(o!==undefined&&!s.isString(o))throw TypeError("extend must be a string");this.rule=i&&"optional"!==i?i:undefined,this.type=n,this.id=t,this.extend=o||undefined,this.required="required"===i,this.optional=!this.required,this.repeated="repeated"===i,this.map=!1,this.message=null,this.partOf=null,this.typeDefault=null,this.defaultValue=null,this.long=!!s.Long&&a.long[n]!==undefined,this.bytes="bytes"===n,this.resolvedType=null,this.extensionField=null,this.declaringField=null,this._packed=null,this.comment=u}d.fromJSON=function(e,t){return new d(e,t.id,t.type,t.rule,t.extend,t.options,t.comment)},Object.defineProperty(d.prototype,"packed",{get:function(){return null===this._packed&&(this._packed=!1!==this.getOption("packed")),this._packed}}),d.prototype.setOption=function(e,t,n){return"packed"===e&&(this._packed=null),r.prototype.setOption.call(this,e,t,n)},d.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return s.toObject(["rule","optional"!==this.rule&&this.rule||undefined,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",t?this.comment:undefined])},d.prototype.resolve=function(){if(this.resolved)return this;if((this.typeDefault=a.defaults[this.type])===undefined&&(this.resolvedType=(this.declaringField?this.declaringField.parent:this.parent).lookupTypeOrEnum(this.type),this.resolvedType instanceof i?this.typeDefault=null:this.typeDefault=this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]),this.options&&null!=this.options.default&&(this.typeDefault=this.options.default,this.resolvedType instanceof o&&"string"==typeof this.typeDefault&&(this.typeDefault=this.resolvedType.values[this.typeDefault])),this.options&&(!0!==this.options.packed&&(this.options.packed===undefined||!this.resolvedType||this.resolvedType instanceof o)||delete this.options.packed,Object.keys(this.options).length||(this.options=undefined)),this.long)this.typeDefault=s.Long.fromNumber(this.typeDefault,"u"===this.type.charAt(0)),Object.freeze&&Object.freeze(this.typeDefault);else if(this.bytes&&"string"==typeof this.typeDefault){var e;s.base64.test(this.typeDefault)?s.base64.decode(this.typeDefault,e=s.newBuffer(s.base64.length(this.typeDefault)),0):s.utf8.write(this.typeDefault,e=s.newBuffer(s.utf8.length(this.typeDefault)),0),this.typeDefault=e}return this.map?this.defaultValue=s.emptyObject:this.repeated?this.defaultValue=s.emptyArray:this.defaultValue=this.typeDefault,this.parent instanceof i&&(this.parent.ctor.prototype[this.name]=this.defaultValue),r.prototype.resolve.call(this)},d.d=function(e,t,n,r){return"function"==typeof t?t=s.decorateType(t).name:t&&"object"==typeof t&&(t=s.decorateEnum(t).name),function(i,o){s.decorateType(i.constructor).add(new d(o,e,t,n,{default:r}))}},d._configure=function(e){i=e}},{14:14,22:22,32:32,33:33}],16:[function(e,t,n){var r=t.exports=e(17);r.build="light",r.load=function(e,t,n){return"function"==typeof t?(n=t,t=new r.Root):t||(t=new r.Root),t.load(e,n)},r.loadSync=function(e,t){return t||(t=new r.Root),t.loadSync(e)},r.encoder=e(13),r.decoder=e(12),r.verifier=e(36),r.converter=e(11),r.ReflectionObject=e(22),r.Namespace=e(21),r.Root=e(26),r.Enum=e(14),r.Type=e(31),r.Field=e(15),r.OneOf=e(23),r.MapField=e(18),r.Service=e(30),r.Method=e(20),r.Message=e(19),r.wrappers=e(37),r.types=e(32),r.util=e(33),r.ReflectionObject._configure(r.Root),r.Namespace._configure(r.Type,r.Service,r.Enum),r.Root._configure(r.Type),r.Field._configure(r.Type)},{11:11,12:12,13:13,14:14,15:15,17:17,18:18,19:19,20:20,21:21,22:22,23:23,26:26,30:30,31:31,32:32,33:33,36:36,37:37}],17:[function(e,t,n){var r=n;function i(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}r.build="minimal",r.Writer=e(38),r.BufferWriter=e(39),r.Reader=e(24),r.BufferReader=e(25),r.util=e(35),r.rpc=e(28),r.roots=e(27),r.configure=i,i()},{24:24,25:25,27:27,28:28,35:35,38:38,39:39}],18:[function(e,t,n){t.exports=a;var r=e(15);((a.prototype=Object.create(r.prototype)).constructor=a).className="MapField";var i=e(32),o=e(33);function a(e,t,n,i,a,s){if(r.call(this,e,t,i,undefined,undefined,a,s),!o.isString(n))throw TypeError("keyType must be a string");this.keyType=n,this.resolvedKeyType=null,this.map=!0}a.fromJSON=function(e,t){return new a(e,t.id,t.keyType,t.type,t.options,t.comment)},a.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return o.toObject(["keyType",this.keyType,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",t?this.comment:undefined])},a.prototype.resolve=function(){if(this.resolved)return this;if(i.mapKey[this.keyType]===undefined)throw Error("invalid key type: "+this.keyType);return r.prototype.resolve.call(this)},a.d=function(e,t,n){return"function"==typeof n?n=o.decorateType(n).name:n&&"object"==typeof n&&(n=o.decorateEnum(n).name),function(r,i){o.decorateType(r.constructor).add(new a(i,e,t,n))}}},{15:15,32:32,33:33}],19:[function(e,t,n){t.exports=i;var r=e(35);function i(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)this[t[n]]=e[t[n]]}i.create=function(e){return this.$type.create(e)},i.encode=function(e,t){return this.$type.encode(e,t)},i.encodeDelimited=function(e,t){return this.$type.encodeDelimited(e,t)},i.decode=function(e){return this.$type.decode(e)},i.decodeDelimited=function(e){return this.$type.decodeDelimited(e)},i.verify=function(e){return this.$type.verify(e)},i.fromObject=function(e){return this.$type.fromObject(e)},i.toObject=function(e,t){return this.$type.toObject(e,t)},i.prototype.toJSON=function(){return this.$type.toObject(this,r.toJSONOptions)}},{35:35}],20:[function(e,t,n){t.exports=o;var r=e(22);((o.prototype=Object.create(r.prototype)).constructor=o).className="Method";var i=e(33);function o(e,t,n,o,a,s,c,d){if(i.isObject(a)?(c=a,a=s=undefined):i.isObject(s)&&(c=s,s=undefined),t!==undefined&&!i.isString(t))throw TypeError("type must be a string");if(!i.isString(n))throw TypeError("requestType must be a string");if(!i.isString(o))throw TypeError("responseType must be a string");r.call(this,e,c),this.type=t||"rpc",this.requestType=n,this.requestStream=!!a||undefined,this.responseType=o,this.responseStream=!!s||undefined,this.resolvedRequestType=null,this.resolvedResponseType=null,this.comment=d}o.fromJSON=function(e,t){return new o(e,t.type,t.requestType,t.responseType,t.requestStream,t.responseStream,t.options,t.comment)},o.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return i.toObject(["type","rpc"!==this.type&&this.type||undefined,"requestType",this.requestType,"requestStream",this.requestStream,"responseType",this.responseType,"responseStream",this.responseStream,"options",this.options,"comment",t?this.comment:undefined])},o.prototype.resolve=function(){return this.resolved?this:(this.resolvedRequestType=this.parent.lookupType(this.requestType),this.resolvedResponseType=this.parent.lookupType(this.responseType),r.prototype.resolve.call(this))}},{22:22,33:33}],21:[function(e,t,n){t.exports=u;var r=e(22);((u.prototype=Object.create(r.prototype)).constructor=u).className="Namespace";var i,o,a,s=e(15),c=e(33);function d(e,t){if(!e||!e.length)return undefined;for(var n={},r=0;r<e.length;++r)n[e[r].name]=e[r].toJSON(t);return n}function u(e,t){r.call(this,e,t),this.nested=undefined,this._nestedArray=null}function l(e){return e._nestedArray=null,e}u.fromJSON=function(e,t){return new u(e,t.options).addJSON(t.nested)},u.arrayToJSON=d,u.isReservedId=function(e,t){if(e)for(var n=0;n<e.length;++n)if("string"!=typeof e[n]&&e[n][0]<=t&&e[n][1]>t)return!0;return!1},u.isReservedName=function(e,t){if(e)for(var n=0;n<e.length;++n)if(e[n]===t)return!0;return!1},Object.defineProperty(u.prototype,"nestedArray",{get:function(){return this._nestedArray||(this._nestedArray=c.toArray(this.nested))}}),u.prototype.toJSON=function(e){return c.toObject(["options",this.options,"nested",d(this.nestedArray,e)])},u.prototype.addJSON=function(e){if(e)for(var t,n=Object.keys(e),r=0;r<n.length;++r)t=e[n[r]],this.add((t.fields!==undefined?i.fromJSON:t.values!==undefined?a.fromJSON:t.methods!==undefined?o.fromJSON:t.id!==undefined?s.fromJSON:u.fromJSON)(n[r],t));return this},u.prototype.get=function(e){return this.nested&&this.nested[e]||null},u.prototype.getEnum=function(e){if(this.nested&&this.nested[e]instanceof a)return this.nested[e].values;throw Error("no such enum: "+e)},u.prototype.add=function(e){if(!(e instanceof s&&e.extend!==undefined||e instanceof i||e instanceof a||e instanceof o||e instanceof u))throw TypeError("object must be a valid nested object");if(this.nested){var t=this.get(e.name);if(t){if(!(t instanceof u&&e instanceof u)||t instanceof i||t instanceof o)throw Error("duplicate name '"+e.name+"' in "+this);for(var n=t.nestedArray,r=0;r<n.length;++r)e.add(n[r]);this.remove(t),this.nested||(this.nested={}),e.setOptions(t.options,!0)}}else this.nested={};return this.nested[e.name]=e,e.onAdd(this),l(this)},u.prototype.remove=function(e){if(!(e instanceof r))throw TypeError("object must be a ReflectionObject");if(e.parent!==this)throw Error(e+" is not a member of "+this);return delete this.nested[e.name],Object.keys(this.nested).length||(this.nested=undefined),e.onRemove(this),l(this)},u.prototype.define=function(e,t){if(c.isString(e))e=e.split(".");else if(!Array.isArray(e))throw TypeError("illegal path");if(e&&e.length&&""===e[0])throw Error("path must be relative");for(var n=this;e.length>0;){var r=e.shift();if(n.nested&&n.nested[r]){if(!((n=n.nested[r])instanceof u))throw Error("path conflicts with non-namespace objects")}else n.add(n=new u(r))}return t&&n.addJSON(t),n},u.prototype.resolveAll=function(){for(var e=this.nestedArray,t=0;t<e.length;)e[t]instanceof u?e[t++].resolveAll():e[t++].resolve();return this.resolve()},u.prototype.lookup=function(e,t,n){if("boolean"==typeof t?(n=t,t=undefined):t&&!Array.isArray(t)&&(t=[t]),c.isString(e)&&e.length){if("."===e)return this.root;e=e.split(".")}else if(!e.length)return this;if(""===e[0])return this.root.lookup(e.slice(1),t);var r=this.get(e[0]);if(r){if(1===e.length){if(!t||t.indexOf(r.constructor)>-1)return r}else if(r instanceof u&&(r=r.lookup(e.slice(1),t,!0)))return r}else for(var i=0;i<this.nestedArray.length;++i)if(this._nestedArray[i]instanceof u&&(r=this._nestedArray[i].lookup(e,t,!0)))return r;return null===this.parent||n?null:this.parent.lookup(e,t)},u.prototype.lookupType=function(e){var t=this.lookup(e,[i]);if(!t)throw Error("no such type: "+e);return t},u.prototype.lookupEnum=function(e){var t=this.lookup(e,[a]);if(!t)throw Error("no such Enum '"+e+"' in "+this);return t},u.prototype.lookupTypeOrEnum=function(e){var t=this.lookup(e,[i,a]);if(!t)throw Error("no such Type or Enum '"+e+"' in "+this);return t},u.prototype.lookupService=function(e){var t=this.lookup(e,[o]);if(!t)throw Error("no such Service '"+e+"' in "+this);return t},u._configure=function(e,t,n){i=e,o=t,a=n}},{15:15,22:22,33:33}],22:[function(e,t,n){t.exports=o,o.className="ReflectionObject";var r,i=e(33);function o(e,t){if(!i.isString(e))throw TypeError("name must be a string");if(t&&!i.isObject(t))throw TypeError("options must be an object");this.options=t,this.parsedOptions=null,this.name=e,this.parent=null,this.resolved=!1,this.comment=null,this.filename=null}Object.defineProperties(o.prototype,{root:{get:function(){for(var e=this;null!==e.parent;)e=e.parent;return e}},fullName:{get:function(){for(var e=[this.name],t=this.parent;t;)e.unshift(t.name),t=t.parent;return e.join(".")}}}),o.prototype.toJSON=function(){throw Error()},o.prototype.onAdd=function(e){this.parent&&this.parent!==e&&this.parent.remove(this),this.parent=e,this.resolved=!1;var t=e.root;t instanceof r&&t._handleAdd(this)},o.prototype.onRemove=function(e){var t=e.root;t instanceof r&&t._handleRemove(this),this.parent=null,this.resolved=!1},o.prototype.resolve=function(){return this.resolved||this.root instanceof r&&(this.resolved=!0),this},o.prototype.getOption=function(e){return this.options?this.options[e]:undefined},o.prototype.setOption=function(e,t,n){return n&&this.options&&this.options[e]!==undefined||((this.options||(this.options={}))[e]=t),this},o.prototype.setParsedOption=function(e,t,n){this.parsedOptions||(this.parsedOptions=[]);var r=this.parsedOptions;if(n){var o=r.find((function(t){return Object.prototype.hasOwnProperty.call(t,e)}));if(o){var a=o[e];i.setProperty(a,n,t)}else(o={})[e]=i.setProperty({},n,t),r.push(o)}else{var s={};s[e]=t,r.push(s)}return this},o.prototype.setOptions=function(e,t){if(e)for(var n=Object.keys(e),r=0;r<n.length;++r)this.setOption(n[r],e[n[r]],t);return this},o.prototype.toString=function(){var e=this.constructor.className,t=this.fullName;return t.length?e+" "+t:e},o._configure=function(e){r=e}},{33:33}],23:[function(e,t,n){t.exports=a;var r=e(22);((a.prototype=Object.create(r.prototype)).constructor=a).className="OneOf";var i=e(15),o=e(33);function a(e,t,n,i){if(Array.isArray(t)||(n=t,t=undefined),r.call(this,e,n),t!==undefined&&!Array.isArray(t))throw TypeError("fieldNames must be an Array");this.oneof=t||[],this.fieldsArray=[],this.comment=i}function s(e){if(e.parent)for(var t=0;t<e.fieldsArray.length;++t)e.fieldsArray[t].parent||e.parent.add(e.fieldsArray[t])}a.fromJSON=function(e,t){return new a(e,t.oneof,t.options,t.comment)},a.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return o.toObject(["options",this.options,"oneof",this.oneof,"comment",t?this.comment:undefined])},a.prototype.add=function(e){if(!(e instanceof i))throw TypeError("field must be a Field");return e.parent&&e.parent!==this.parent&&e.parent.remove(e),this.oneof.push(e.name),this.fieldsArray.push(e),e.partOf=this,s(this),this},a.prototype.remove=function(e){if(!(e instanceof i))throw TypeError("field must be a Field");var t=this.fieldsArray.indexOf(e);if(t<0)throw Error(e+" is not a member of "+this);return this.fieldsArray.splice(t,1),(t=this.oneof.indexOf(e.name))>-1&&this.oneof.splice(t,1),e.partOf=null,this},a.prototype.onAdd=function(e){r.prototype.onAdd.call(this,e);for(var t=0;t<this.oneof.length;++t){var n=e.get(this.oneof[t]);n&&!n.partOf&&(n.partOf=this,this.fieldsArray.push(n))}s(this)},a.prototype.onRemove=function(e){for(var t,n=0;n<this.fieldsArray.length;++n)(t=this.fieldsArray[n]).parent&&t.parent.remove(t);r.prototype.onRemove.call(this,e)},a.d=function(){for(var e=new Array(arguments.length),t=0;t<arguments.length;)e[t]=arguments[t++];return function(t,n){o.decorateType(t.constructor).add(new a(n,e)),Object.defineProperty(t,n,{get:o.oneOfGetter(e),set:o.oneOfSetter(e)})}}},{15:15,22:22,33:33}],24:[function(e,t,n){t.exports=c;var r,i=e(35),o=i.LongBits,a=i.utf8;function s(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function c(e){this.buf=e,this.pos=0,this.len=e.length}var d,u="undefined"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new c(e);throw Error("illegal buffer")}:function(e){if(Array.isArray(e))return new c(e);throw Error("illegal buffer")},l=function(){return i.Buffer?function(e){return(c.create=function(e){return i.Buffer.isBuffer(e)?new r(e):u(e)})(e)}:u};function f(){var e=new o(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw s(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw s(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}function p(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function g(){if(this.pos+8>this.len)throw s(this,8);return new o(p(this.buf,this.pos+=4),p(this.buf,this.pos+=4))}c.create=l(),c.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,c.prototype.uint32=(d=4294967295,function(){if(d=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return d;if(d=(d|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return d;if((this.pos+=5)>this.len)throw this.pos=this.len,s(this,10);return d}),c.prototype.int32=function(){return 0|this.uint32()},c.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},c.prototype.bool=function(){return 0!==this.uint32()},c.prototype.fixed32=function(){if(this.pos+4>this.len)throw s(this,4);return p(this.buf,this.pos+=4)},c.prototype.sfixed32=function(){if(this.pos+4>this.len)throw s(this,4);return 0|p(this.buf,this.pos+=4)},c.prototype.float=function(){if(this.pos+4>this.len)throw s(this,4);var e=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},c.prototype.double=function(){if(this.pos+8>this.len)throw s(this,4);var e=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},c.prototype.bytes=function(){var e=this.uint32(),t=this.pos,n=this.pos+e;if(n>this.len)throw s(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,n):t===n?new this.buf.constructor(0):this._slice.call(this.buf,t,n)},c.prototype.string=function(){var e=this.bytes();return a.read(e,0,e.length)},c.prototype.skip=function(e){if("number"==typeof e){if(this.pos+e>this.len)throw s(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw s(this)}while(128&this.buf[this.pos++]);return this},c.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},c._configure=function(e){r=e,c.create=l(),r._configure();var t=i.Long?"toLong":"toNumber";i.merge(c.prototype,{int64:function(){return f.call(this)[t](!1)},uint64:function(){return f.call(this)[t](!0)},sint64:function(){return f.call(this).zzDecode()[t](!1)},fixed64:function(){return g.call(this)[t](!0)},sfixed64:function(){return g.call(this)[t](!1)}})}},{35:35}],25:[function(e,t,n){t.exports=o;var r=e(24);(o.prototype=Object.create(r.prototype)).constructor=o;var i=e(35);function o(e){r.call(this,e)}o._configure=function(){i.Buffer&&(o.prototype._slice=i.Buffer.prototype.slice)},o.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))},o._configure()},{24:24,35:35}],26:[function(e,t,n){t.exports=l;var r=e(21);((l.prototype=Object.create(r.prototype)).constructor=l).className="Root";var i,o,a,s=e(15),c=e(14),d=e(23),u=e(33);function l(e){r.call(this,"",e),this.deferred=[],this.files=[]}function f(){}l.fromJSON=function(e,t){return t||(t=new l),e.options&&t.setOptions(e.options),t.addJSON(e.nested)},l.prototype.resolvePath=u.path.resolve,l.prototype.fetch=u.fetch,l.prototype.load=function e(t,n,r){"function"==typeof n&&(r=n,n=undefined);var i=this;if(!r)return u.asPromise(e,i,t,n);var s=r===f;function c(e,t){if(r){var n=r;if(r=null,s)throw e;n(e,t)}}function d(e){var t=e.lastIndexOf("google/protobuf/");if(t>-1){var n=e.substring(t);if(n in a)return n}return null}function l(e,t){try{if(u.isString(t)&&"{"===t.charAt(0)&&(t=JSON.parse(t)),u.isString(t)){o.filename=e;var r,a=o(t,i,n),l=0;if(a.imports)for(;l<a.imports.length;++l)(r=d(a.imports[l])||i.resolvePath(e,a.imports[l]))&&p(r);if(a.weakImports)for(l=0;l<a.weakImports.length;++l)(r=d(a.weakImports[l])||i.resolvePath(e,a.weakImports[l]))&&p(r,!0)}else i.setOptions(t.options).addJSON(t.nested)}catch(e){c(e)}s||g||c(null,i)}function p(e,t){if(!(i.files.indexOf(e)>-1))if(i.files.push(e),e in a)s?l(e,a[e]):(++g,setTimeout((function(){--g,l(e,a[e])})));else if(s){var n;try{n=u.fs.readFileSync(e).toString("utf8")}catch(e){return void(t||c(e))}l(e,n)}else++g,i.fetch(e,(function(n,o){--g,r&&(n?t?g||c(null,i):c(n):l(e,o))}))}var g=0;u.isString(t)&&(t=[t]);for(var m,h=0;h<t.length;++h)(m=i.resolvePath("",t[h]))&&p(m);return s?i:(g||c(null,i),undefined)},l.prototype.loadSync=function(e,t){if(!u.isNode)throw Error("not supported");return this.load(e,t,f)},l.prototype.resolveAll=function(){if(this.deferred.length)throw Error("unresolvable extensions: "+this.deferred.map((function(e){return"'extend "+e.extend+"' in "+e.parent.fullName})).join(", "));return r.prototype.resolveAll.call(this)};var p=/^[A-Z]/;function g(e,t){var n=t.parent.lookup(t.extend);if(n){var r=new s(t.fullName,t.id,t.type,t.rule,undefined,t.options);return r.declaringField=t,t.extensionField=r,n.add(r),!0}return!1}l.prototype._handleAdd=function(e){if(e instanceof s)e.extend===undefined||e.extensionField||g(0,e)||this.deferred.push(e);else if(e instanceof c)p.test(e.name)&&(e.parent[e.name]=e.values);else if(!(e instanceof d)){if(e instanceof i)for(var t=0;t<this.deferred.length;)g(0,this.deferred[t])?this.deferred.splice(t,1):++t;for(var n=0;n<e.nestedArray.length;++n)this._handleAdd(e._nestedArray[n]);p.test(e.name)&&(e.parent[e.name]=e)}},l.prototype._handleRemove=function(e){if(e instanceof s){if(e.extend!==undefined)if(e.extensionField)e.extensionField.parent.remove(e.extensionField),e.extensionField=null;else{var t=this.deferred.indexOf(e);t>-1&&this.deferred.splice(t,1)}}else if(e instanceof c)p.test(e.name)&&delete e.parent[e.name];else if(e instanceof r){for(var n=0;n<e.nestedArray.length;++n)this._handleRemove(e._nestedArray[n]);p.test(e.name)&&delete e.parent[e.name]}},l._configure=function(e,t,n){i=e,o=t,a=n}},{14:14,15:15,21:21,23:23,33:33}],27:[function(e,t,n){t.exports={}},{}],28:[function(e,t,n){n.Service=e(29)},{29:29}],29:[function(e,t,n){t.exports=i;var r=e(35);function i(e,t,n){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");r.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(n)}(i.prototype=Object.create(r.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function e(t,n,i,o,a){if(!o)throw TypeError("request must be specified");var s=this;if(!a)return r.asPromise(e,s,t,n,i,o);if(!s.rpcImpl)return setTimeout((function(){a(Error("already ended"))}),0),undefined;try{return s.rpcImpl(t,n[s.requestDelimited?"encodeDelimited":"encode"](o).finish(),(function(e,n){if(e)return s.emit("error",e,t),a(e);if(null===n)return s.end(!0),undefined;if(!(n instanceof i))try{n=i[s.responseDelimited?"decodeDelimited":"decode"](n)}catch(e){return s.emit("error",e,t),a(e)}return s.emit("data",n,t),a(null,n)}))}catch(e){return s.emit("error",e,t),setTimeout((function(){a(e)}),0),undefined}},i.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},{35:35}],30:[function(e,t,n){t.exports=s;var r=e(21);((s.prototype=Object.create(r.prototype)).constructor=s).className="Service";var i=e(20),o=e(33),a=e(28);function s(e,t){r.call(this,e,t),this.methods={},this._methodsArray=null}function c(e){return e._methodsArray=null,e}s.fromJSON=function(e,t){var n=new s(e,t.options);if(t.methods)for(var r=Object.keys(t.methods),o=0;o<r.length;++o)n.add(i.fromJSON(r[o],t.methods[r[o]]));return t.nested&&n.addJSON(t.nested),n.comment=t.comment,n},s.prototype.toJSON=function(e){var t=r.prototype.toJSON.call(this,e),n=!!e&&Boolean(e.keepComments);return o.toObject(["options",t&&t.options||undefined,"methods",r.arrayToJSON(this.methodsArray,e)||{},"nested",t&&t.nested||undefined,"comment",n?this.comment:undefined])},Object.defineProperty(s.prototype,"methodsArray",{get:function(){return this._methodsArray||(this._methodsArray=o.toArray(this.methods))}}),s.prototype.get=function(e){return this.methods[e]||r.prototype.get.call(this,e)},s.prototype.resolveAll=function(){for(var e=this.methodsArray,t=0;t<e.length;++t)e[t].resolve();return r.prototype.resolve.call(this)},s.prototype.add=function(e){if(this.get(e.name))throw Error("duplicate name '"+e.name+"' in "+this);return e instanceof i?(this.methods[e.name]=e,e.parent=this,c(this)):r.prototype.add.call(this,e)},s.prototype.remove=function(e){if(e instanceof i){if(this.methods[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.methods[e.name],e.parent=null,c(this)}return r.prototype.remove.call(this,e)},s.prototype.create=function(e,t,n){for(var r,i=new a.Service(e,t,n),s=0;s<this.methodsArray.length;++s){var c=o.lcFirst((r=this._methodsArray[s]).resolve().name).replace(/[^$\w_]/g,"");i[c]=o.codegen(["r","c"],o.isReserved(c)?c+"_":c)("return this.rpcCall(m,q,s,r,c)")({m:r,q:r.resolvedRequestType.ctor,s:r.resolvedResponseType.ctor})}return i}},{20:20,21:21,28:28,33:33}],31:[function(e,t,n){t.exports=E;var r=e(21);((E.prototype=Object.create(r.prototype)).constructor=E).className="Type";var i=e(14),o=e(23),a=e(15),s=e(18),c=e(30),d=e(19),u=e(24),l=e(38),f=e(33),p=e(13),g=e(12),m=e(36),h=e(11),v=e(37);function E(e,t){r.call(this,e,t),this.fields={},this.oneofs=undefined,this.extensions=undefined,this.reserved=undefined,this.group=undefined,this._fieldsById=null,this._fieldsArray=null,this._oneofsArray=null,this._ctor=null}function S(e){return e._fieldsById=e._fieldsArray=e._oneofsArray=null,delete e.encode,delete e.decode,delete e.verify,e}Object.defineProperties(E.prototype,{fieldsById:{get:function(){if(this._fieldsById)return this._fieldsById;this._fieldsById={};for(var e=Object.keys(this.fields),t=0;t<e.length;++t){var n=this.fields[e[t]],r=n.id;if(this._fieldsById[r])throw Error("duplicate id "+r+" in "+this);this._fieldsById[r]=n}return this._fieldsById}},fieldsArray:{get:function(){return this._fieldsArray||(this._fieldsArray=f.toArray(this.fields))}},oneofsArray:{get:function(){return this._oneofsArray||(this._oneofsArray=f.toArray(this.oneofs))}},ctor:{get:function(){return this._ctor||(this.ctor=E.generateConstructor(this)())},set:function(e){var t=e.prototype;t instanceof d||((e.prototype=new d).constructor=e,f.merge(e.prototype,t)),e.$type=e.prototype.$type=this,f.merge(e,d,!0),this._ctor=e;for(var n=0;n<this.fieldsArray.length;++n)this._fieldsArray[n].resolve();var r={};for(n=0;n<this.oneofsArray.length;++n)r[this._oneofsArray[n].resolve().name]={get:f.oneOfGetter(this._oneofsArray[n].oneof),set:f.oneOfSetter(this._oneofsArray[n].oneof)};n&&Object.defineProperties(e.prototype,r)}}}),E.generateConstructor=function(e){for(var t,n=f.codegen(["p"],e.name),r=0;r<e.fieldsArray.length;++r)(t=e._fieldsArray[r]).map?n("this%s={}",f.safeProp(t.name)):t.repeated&&n("this%s=[]",f.safeProp(t.name));return n("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]")},E.fromJSON=function(e,t){var n=new E(e,t.options);n.extensions=t.extensions,n.reserved=t.reserved;for(var d=Object.keys(t.fields),u=0;u<d.length;++u)n.add((void 0!==t.fields[d[u]].keyType?s.fromJSON:a.fromJSON)(d[u],t.fields[d[u]]));if(t.oneofs)for(d=Object.keys(t.oneofs),u=0;u<d.length;++u)n.add(o.fromJSON(d[u],t.oneofs[d[u]]));if(t.nested)for(d=Object.keys(t.nested),u=0;u<d.length;++u){var l=t.nested[d[u]];n.add((l.id!==undefined?a.fromJSON:l.fields!==undefined?E.fromJSON:l.values!==undefined?i.fromJSON:l.methods!==undefined?c.fromJSON:r.fromJSON)(d[u],l))}return t.extensions&&t.extensions.length&&(n.extensions=t.extensions),t.reserved&&t.reserved.length&&(n.reserved=t.reserved),t.group&&(n.group=!0),t.comment&&(n.comment=t.comment),n},E.prototype.toJSON=function(e){var t=r.prototype.toJSON.call(this,e),n=!!e&&Boolean(e.keepComments);return f.toObject(["options",t&&t.options||undefined,"oneofs",r.arrayToJSON(this.oneofsArray,e),"fields",r.arrayToJSON(this.fieldsArray.filter((function(e){return!e.declaringField})),e)||{},"extensions",this.extensions&&this.extensions.length?this.extensions:undefined,"reserved",this.reserved&&this.reserved.length?this.reserved:undefined,"group",this.group||undefined,"nested",t&&t.nested||undefined,"comment",n?this.comment:undefined])},E.prototype.resolveAll=function(){for(var e=this.fieldsArray,t=0;t<e.length;)e[t++].resolve();var n=this.oneofsArray;for(t=0;t<n.length;)n[t++].resolve();return r.prototype.resolveAll.call(this)},E.prototype.get=function(e){return this.fields[e]||this.oneofs&&this.oneofs[e]||this.nested&&this.nested[e]||null},E.prototype.add=function(e){if(this.get(e.name))throw Error("duplicate name '"+e.name+"' in "+this);if(e instanceof a&&e.extend===undefined){if(this._fieldsById?this._fieldsById[e.id]:this.fieldsById[e.id])throw Error("duplicate id "+e.id+" in "+this);if(this.isReservedId(e.id))throw Error("id "+e.id+" is reserved in "+this);if(this.isReservedName(e.name))throw Error("name '"+e.name+"' is reserved in "+this);return e.parent&&e.parent.remove(e),this.fields[e.name]=e,e.message=this,e.onAdd(this),S(this)}return e instanceof o?(this.oneofs||(this.oneofs={}),this.oneofs[e.name]=e,e.onAdd(this),S(this)):r.prototype.add.call(this,e)},E.prototype.remove=function(e){if(e instanceof a&&e.extend===undefined){if(!this.fields||this.fields[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.fields[e.name],e.parent=null,e.onRemove(this),S(this)}if(e instanceof o){if(!this.oneofs||this.oneofs[e.name]!==e)throw Error(e+" is not a member of "+this);return delete this.oneofs[e.name],e.parent=null,e.onRemove(this),S(this)}return r.prototype.remove.call(this,e)},E.prototype.isReservedId=function(e){return r.isReservedId(this.reserved,e)},E.prototype.isReservedName=function(e){return r.isReservedName(this.reserved,e)},E.prototype.create=function(e){return new this.ctor(e)},E.prototype.setup=function(){for(var e=this.fullName,t=[],n=0;n<this.fieldsArray.length;++n)t.push(this._fieldsArray[n].resolve().resolvedType);this.encode=p(this)({Writer:l,types:t,util:f}),this.decode=g(this)({Reader:u,types:t,util:f}),this.verify=m(this)({types:t,util:f}),this.fromObject=h.fromObject(this)({types:t,util:f}),this.toObject=h.toObject(this)({types:t,util:f});var r=v[e];if(r){var i=Object.create(this);i.fromObject=this.fromObject,this.fromObject=r.fromObject.bind(i),i.toObject=this.toObject,this.toObject=r.toObject.bind(i)}return this},E.prototype.encode=function(e,t){return this.setup().encode(e,t)},E.prototype.encodeDelimited=function(e,t){return this.encode(e,t&&t.len?t.fork():t).ldelim()},E.prototype.decode=function(e,t){return this.setup().decode(e,t)},E.prototype.decodeDelimited=function(e){return e instanceof u||(e=u.create(e)),this.decode(e,e.uint32())},E.prototype.verify=function(e){return this.setup().verify(e)},E.prototype.fromObject=function(e){return this.setup().fromObject(e)},E.prototype.toObject=function(e,t){return this.setup().toObject(e,t)},E.d=function(e){return function(t){f.decorateType(t,e)}}},{11:11,12:12,13:13,14:14,15:15,18:18,19:19,21:21,23:23,24:24,30:30,33:33,36:36,37:37,38:38}],32:[function(e,t,n){var r=n,i=e(33),o=["double","float","int32","uint32","sint32","fixed32","sfixed32","int64","uint64","sint64","fixed64","sfixed64","bool","string","bytes"];function a(e,t){var n=0,r={};for(t|=0;n<e.length;)r[o[n+t]]=e[n++];return r}r.basic=a([1,5,0,0,0,5,5,0,0,0,1,1,0,2,2]),r.defaults=a([0,0,0,0,0,0,0,0,0,0,0,0,!1,"",i.emptyArray,null]),r.long=a([0,0,0,1,1],7),r.mapKey=a([0,0,0,5,5,0,0,0,1,1,0,2],2),r.packed=a([1,5,0,0,0,5,5,0,0,0,1,1,0])},{33:33}],33:[function(e,t,n){var r,i,o=t.exports=e(35),a=e(27);o.codegen=e(3),o.fetch=e(5),o.path=e(8),o.fs=o.inquire("fs"),o.toArray=function(e){if(e){for(var t=Object.keys(e),n=new Array(t.length),r=0;r<t.length;)n[r]=e[t[r++]];return n}return[]},o.toObject=function(e){for(var t={},n=0;n<e.length;){var r=e[n++],i=e[n++];i!==undefined&&(t[r]=i)}return t};var s=/\\/g,c=/"/g;o.isReserved=function(e){return/^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(e)},o.safeProp=function(e){return!/^[$\w_]+$/.test(e)||o.isReserved(e)?'["'+e.replace(s,"\\\\").replace(c,'\\"')+'"]':"."+e},o.ucFirst=function(e){return e.charAt(0).toUpperCase()+e.substring(1)};var d=/_([a-z])/g;o.camelCase=function(e){return e.substring(0,1)+e.substring(1).replace(d,(function(e,t){return t.toUpperCase()}))},o.compareFieldsById=function(e,t){return e.id-t.id},o.decorateType=function(t,n){if(t.$type)return n&&t.$type.name!==n&&(o.decorateRoot.remove(t.$type),t.$type.name=n,o.decorateRoot.add(t.$type)),t.$type;r||(r=e(31));var i=new r(n||t.name);return o.decorateRoot.add(i),i.ctor=t,Object.defineProperty(t,"$type",{value:i,enumerable:!1}),Object.defineProperty(t.prototype,"$type",{value:i,enumerable:!1}),i};var u=0;o.decorateEnum=function(t){if(t.$type)return t.$type;i||(i=e(14));var n=new i("Enum"+u++,t);return o.decorateRoot.add(n),Object.defineProperty(t,"$type",{value:n,enumerable:!1}),n},o.setProperty=function(e,t,n){if("object"!=typeof e)throw TypeError("dst must be an object");if(!t)throw TypeError("path must be specified");return function e(t,n,r){var i=n.shift();if(n.length>0)t[i]=e(t[i]||{},n,r);else{var o=t[i];o&&(r=[].concat(o).concat(r)),t[i]=r}return t}(e,t=t.split("."),n)},Object.defineProperty(o,"decorateRoot",{get:function(){return a.decorated||(a.decorated=new(e(26)))}})},{14:14,26:26,27:27,3:3,31:31,35:35,5:5,8:8}],34:[function(e,t,n){t.exports=i;var r=e(35);function i(e,t){this.lo=e>>>0,this.hi=t>>>0}var o=i.zero=new i(0,0);o.toNumber=function(){return 0},o.zzEncode=o.zzDecode=function(){return this},o.length=function(){return 1};var a=i.zeroHash="\0\0\0\0\0\0\0\0";i.fromNumber=function(e){if(0===e)return o;var t=e<0;t&&(e=-e);var n=e>>>0,r=(e-n)/4294967296>>>0;return t&&(r=~r>>>0,n=~n>>>0,++n>4294967295&&(n=0,++r>4294967295&&(r=0))),new i(n,r)},i.from=function(e){if("number"==typeof e)return i.fromNumber(e);if(r.isString(e)){if(!r.Long)return i.fromNumber(parseInt(e,10));e=r.Long.fromString(e)}return e.low||e.high?new i(e.low>>>0,e.high>>>0):o},i.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,n=~this.hi>>>0;return t||(n=n+1>>>0),-(t+4294967296*n)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(e){return r.Long?new r.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)}};var s=String.prototype.charCodeAt;i.fromHash=function(e){return e===a?o:new i((s.call(e,0)|s.call(e,1)<<8|s.call(e,2)<<16|s.call(e,3)<<24)>>>0,(s.call(e,4)|s.call(e,5)<<8|s.call(e,6)<<16|s.call(e,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},i.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},i.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:n<128?9:10}},{35:35}],35:[function(e,t,n){var r=n;function i(e,t,n){for(var r=Object.keys(t),i=0;i<r.length;++i)e[r[i]]!==undefined&&n||(e[r[i]]=t[r[i]]);return e}function o(e){function t(e,n){if(!(this instanceof t))return new t(e,n);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),n&&i(this,n)}return(t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,"name",{get:function(){return e}}),t.prototype.toString=function(){return this.name+": "+this.message},t}r.asPromise=e(1),r.base64=e(2),r.EventEmitter=e(4),r.float=e(6),r.inquire=e(7),r.utf8=e(10),r.pool=e(9),r.LongBits=e(34),r.isNode=Boolean(void 0!==global&&global&&global.process&&global.process.versions&&global.process.versions.node),r.global=r.isNode&&global||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||this,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},r.isString=function(e){return"string"==typeof e||e instanceof String},r.isObject=function(e){return e&&"object"==typeof e},r.isset=r.isSet=function(e,t){var n=e[t];return!(null==n||!e.hasOwnProperty(t))&&("object"!=typeof n||(Array.isArray(n)?n.length:Object.keys(n).length)>0)},r.Buffer=function(){try{var e=r.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(e){return"number"==typeof e?r.Buffer?r._Buffer_allocUnsafe(e):new r.Array(e):r.Buffer?r._Buffer_from(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},r.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(e){return e?r.LongBits.from(e).toHash():r.LongBits.zeroHash},r.longFromHash=function(e,t){var n=r.LongBits.fromHash(e);return r.Long?r.Long.fromBits(n.lo,n.hi,t):n.toNumber(Boolean(t))},r.merge=i,r.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},r.newError=o,r.ProtocolError=o("ProtocolError"),r.oneOfGetter=function(e){for(var t={},n=0;n<e.length;++n)t[e[n]]=1;return function(){for(var e=Object.keys(this),n=e.length-1;n>-1;--n)if(1===t[e[n]]&&this[e[n]]!==undefined&&null!==this[e[n]])return e[n]}},r.oneOfSetter=function(e){return function(t){for(var n=0;n<e.length;++n)e[n]!==t&&delete this[e[n]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var e=r.Buffer;e?(r._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,n){return new e(t,n)},r._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t)}):r._Buffer_from=r._Buffer_allocUnsafe=null}},{1:1,10:10,2:2,34:34,4:4,6:6,7:7,9:9}],36:[function(e,t,n){t.exports=function(e){var t=i.codegen(["m"],e.name+"$verify")('if(typeof m!=="object"||m===null)')("return%j","object expected"),n=e.oneofsArray,r={};n.length&&t("var p={}");for(var c=0;c<e.fieldsArray.length;++c){var d=e._fieldsArray[c].resolve(),u="m"+i.safeProp(d.name);if(d.optional&&t("if(%s!=null&&m.hasOwnProperty(%j)){",u,d.name),d.map)t("if(!util.isObject(%s))",u)("return%j",o(d,"object"))("var k=Object.keys(%s)",u)("for(var i=0;i<k.length;++i){"),s(t,d,"k[i]"),a(t,d,c,u+"[k[i]]")("}");else if(d.repeated)t("if(!Array.isArray(%s))",u)("return%j",o(d,"array"))("for(var i=0;i<%s.length;++i){",u),a(t,d,c,u+"[i]")("}");else{if(d.partOf){var l=i.safeProp(d.partOf.name);1===r[d.partOf.name]&&t("if(p%s===1)",l)("return%j",d.partOf.name+": multiple values"),r[d.partOf.name]=1,t("p%s=1",l)}a(t,d,c,u)}d.optional&&t("}")}return t("return null")};var r=e(14),i=e(33);function o(e,t){return e.name+": "+t+(e.repeated&&"array"!==t?"[]":e.map&&"object"!==t?"{k:"+e.keyType+"}":"")+" expected"}function a(e,t,n,i){if(t.resolvedType)if(t.resolvedType instanceof r){e("switch(%s){",i)("default:")("return%j",o(t,"enum value"));for(var a=Object.keys(t.resolvedType.values),s=0;s<a.length;++s)e("case %i:",t.resolvedType.values[a[s]]);e("break")("}")}else e("{")("var e=types[%i].verify(%s);",n,i)("if(e)")("return%j+e",t.name+".")("}");else switch(t.type){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":e("if(!util.isInteger(%s))",i)("return%j",o(t,"integer"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":e("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))",i,i,i,i)("return%j",o(t,"integer|Long"));break;case"float":case"double":e('if(typeof %s!=="number")',i)("return%j",o(t,"number"));break;case"bool":e('if(typeof %s!=="boolean")',i)("return%j",o(t,"boolean"));break;case"string":e("if(!util.isString(%s))",i)("return%j",o(t,"string"));break;case"bytes":e('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))',i,i,i)("return%j",o(t,"buffer"))}return e}function s(e,t,n){switch(t.keyType){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":e("if(!util.key32Re.test(%s))",n)("return%j",o(t,"integer key"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":e("if(!util.key64Re.test(%s))",n)("return%j",o(t,"integer|Long key"));break;case"bool":e("if(!util.key2Re.test(%s))",n)("return%j",o(t,"boolean key"))}return e}},{14:14,33:33}],37:[function(e,t,n){var r=n,i=e(19);r[".google.protobuf.Any"]={fromObject:function(e){if(e&&e["@type"]){var t=e["@type"].substring(e["@type"].lastIndexOf("/")+1),n=this.lookup(t);if(n){var r="."===e["@type"].charAt(0)?e["@type"].substr(1):e["@type"];return-1===r.indexOf("/")&&(r="/"+r),this.create({type_url:r,value:n.encode(n.fromObject(e)).finish()})}}return this.fromObject(e)},toObject:function(e,t){var n="",r="";if(t&&t.json&&e.type_url&&e.value){r=e.type_url.substring(e.type_url.lastIndexOf("/")+1),n=e.type_url.substring(0,e.type_url.lastIndexOf("/")+1);var o=this.lookup(r);o&&(e=o.decode(e.value))}if(!(e instanceof this.ctor)&&e instanceof i){var a=e.$type.toObject(e,t);return""===n&&(n="type.googleapis.com/"),r=n+("."===e.$type.fullName[0]?e.$type.fullName.substr(1):e.$type.fullName),a["@type"]=r,a}return this.toObject(e,t)}}},{19:19}],38:[function(e,t,n){t.exports=l;var r,i=e(35),o=i.LongBits,a=i.base64,s=i.utf8;function c(e,t,n){this.fn=e,this.len=t,this.next=undefined,this.val=n}function d(){}function u(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function l(){this.len=0,this.head=new c(d,0,0),this.tail=this.head,this.states=null}var f=function(){return i.Buffer?function(){return(l.create=function(){return new r})()}:function(){return new l}};function p(e,t,n){t[n]=255&e}function g(e,t){this.len=e,this.next=undefined,this.val=t}function m(e,t,n){for(;e.hi;)t[n++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[n++]=127&e.lo|128,e.lo=e.lo>>>7;t[n++]=e.lo}function h(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}l.create=f(),l.alloc=function(e){return new i.Array(e)},i.Array!==Array&&(l.alloc=i.pool(l.alloc,i.Array.prototype.subarray)),l.prototype._push=function(e,t,n){return this.tail=this.tail.next=new c(e,t,n),this.len+=t,this},g.prototype=Object.create(c.prototype),g.prototype.fn=function(e,t,n){for(;e>127;)t[n++]=127&e|128,e>>>=7;t[n]=e},l.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new g((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},l.prototype.int32=function(e){return e<0?this._push(m,10,o.fromNumber(e)):this.uint32(e)},l.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},l.prototype.uint64=function(e){var t=o.from(e);return this._push(m,t.length(),t)},l.prototype.int64=l.prototype.uint64,l.prototype.sint64=function(e){var t=o.from(e).zzEncode();return this._push(m,t.length(),t)},l.prototype.bool=function(e){return this._push(p,1,e?1:0)},l.prototype.fixed32=function(e){return this._push(h,4,e>>>0)},l.prototype.sfixed32=l.prototype.fixed32,l.prototype.fixed64=function(e){var t=o.from(e);return this._push(h,4,t.lo)._push(h,4,t.hi)},l.prototype.sfixed64=l.prototype.fixed64,l.prototype.float=function(e){return this._push(i.float.writeFloatLE,4,e)},l.prototype.double=function(e){return this._push(i.float.writeDoubleLE,8,e)};var v=i.Array.prototype.set?function(e,t,n){t.set(e,n)}:function(e,t,n){for(var r=0;r<e.length;++r)t[n+r]=e[r]};l.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(p,1,0);if(i.isString(e)){var n=l.alloc(t=a.length(e));a.decode(e,n,0),e=n}return this.uint32(t)._push(v,t,e)},l.prototype.string=function(e){var t=s.length(e);return t?this.uint32(t)._push(s.write,t,e):this._push(p,1,0)},l.prototype.fork=function(){return this.states=new u(this),this.head=this.tail=new c(d,0,0),this.len=0,this},l.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new c(d,0,0),this.len=0),this},l.prototype.ldelim=function(){var e=this.head,t=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=e.next,this.tail=t,this.len+=n),this},l.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),n=0;e;)e.fn(e.val,t,n),n+=e.len,e=e.next;return t},l._configure=function(e){r=e,l.create=f(),r._configure()}},{35:35}],39:[function(e,t,n){t.exports=o;var r=e(38);(o.prototype=Object.create(r.prototype)).constructor=o;var i=e(35);function o(){r.call(this)}function a(e,t,n){e.length<40?i.utf8.write(e,t,n):t.utf8Write?t.utf8Write(e,n):t.write(e,n)}o._configure=function(){o.alloc=i._Buffer_allocUnsafe,o.writeBytesBuffer=i.Buffer&&i.Buffer.prototype instanceof Uint8Array&&"set"===i.Buffer.prototype.set.name?function(e,t,n){t.set(e,n)}:function(e,t,n){if(e.copy)e.copy(t,n,0,e.length);else for(var r=0;r<e.length;)t[n++]=e[r++]}},o.prototype.bytes=function(e){i.isString(e)&&(e=i._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(o.writeBytesBuffer,t,e),this},o.prototype.string=function(e){var t=i.Buffer.byteLength(e);return this.uint32(t),t&&this._push(a,t,e),this},o._configure()},{35:35,38:38}]},{},[16])}()}).call(this,__webpack_require__(33),__webpack_require__(60)(module))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function i(e){return!0===(e&&e.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=i;var o={},a={};function s(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=d(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=o[e])?r:(n=d(e,e<0?-1:0,!1),i&&(o[e]=n),n)}function c(e,t){if(isNaN(e))return t?E:v;if(t){if(e<0)return E;if(e>=g)return T}else{if(e<=-m)return I;if(e+1>=m)return R}return e<0?c(-e,t).neg():d(e%p|0,e/p|0,t)}function d(e,t,n){return new r(e,t,n)}r.fromInt=s,r.fromNumber=c,r.fromBits=d;var u=Math.pow;function l(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return v;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return l(e.substring(1),t,n).neg();for(var i=c(u(n,8)),o=v,a=0;a<e.length;a+=8){var s=Math.min(8,e.length-a),d=parseInt(e.substring(a,a+s),n);if(s<8){var f=c(u(n,s));o=o.mul(f).add(c(d))}else o=(o=o.mul(i)).add(c(d))}return o.unsigned=t,o}function f(e,t){return"number"==typeof e?c(e,t):"string"==typeof e?l(e,t):d(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=l,r.fromValue=f;var p=4294967296,g=p*p,m=g/2,h=s(1<<24),v=s(0);r.ZERO=v;var E=s(0,!0);r.UZERO=E;var S=s(1);r.ONE=S;var _=s(1,!0);r.UONE=_;var y=s(-1);r.NEG_ONE=y;var R=d(-1,2147483647,!1);r.MAX_VALUE=R;var T=d(-1,-1,!0);r.MAX_UNSIGNED_VALUE=T;var I=d(0,-2147483648,!1);r.MIN_VALUE=I;var b=r.prototype;b.toInt=function(){return this.unsigned?this.low>>>0:this.low},b.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},b.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=c(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=c(u(e,6),this.unsigned),o=this,a="";;){var s=o.div(i),d=(o.sub(s.mul(i)).toInt()>>>0).toString(e);if((o=s).isZero())return d+a;for(;d.length<6;)d="0"+d;a=""+d+a}},b.getHighBits=function(){return this.high},b.getHighBitsUnsigned=function(){return this.high>>>0},b.getLowBits=function(){return this.low},b.getLowBitsUnsigned=function(){return this.low>>>0},b.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},b.isZero=function(){return 0===this.high&&0===this.low},b.eqz=b.isZero,b.isNegative=function(){return!this.unsigned&&this.high<0},b.isPositive=function(){return this.unsigned||this.high>=0},b.isOdd=function(){return 1==(1&this.low)},b.isEven=function(){return 0==(1&this.low)},b.equals=function(e){return i(e)||(e=f(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},b.eq=b.equals,b.notEquals=function(e){return!this.eq(e)},b.neq=b.notEquals,b.ne=b.notEquals,b.lessThan=function(e){return this.comp(e)<0},b.lt=b.lessThan,b.lessThanOrEqual=function(e){return this.comp(e)<=0},b.lte=b.lessThanOrEqual,b.le=b.lessThanOrEqual,b.greaterThan=function(e){return this.comp(e)>0},b.gt=b.greaterThan,b.greaterThanOrEqual=function(e){return this.comp(e)>=0},b.gte=b.greaterThanOrEqual,b.ge=b.greaterThanOrEqual,b.compare=function(e){if(i(e)||(e=f(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},b.comp=b.compare,b.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(S)},b.neg=b.negate,b.add=function(e){i(e)||(e=f(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,a=e.high>>>16,s=65535&e.high,c=e.low>>>16,u=0,l=0,p=0,g=0;return p+=(g+=o+(65535&e.low))>>>16,l+=(p+=r+c)>>>16,u+=(l+=n+s)>>>16,u+=t+a,d((p&=65535)<<16|(g&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},b.subtract=function(e){return i(e)||(e=f(e)),this.add(e.neg())},b.sub=b.subtract,b.multiply=function(e){if(this.isZero())return v;if(i(e)||(e=f(e)),n)return d(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return v;if(this.eq(I))return e.isOdd()?I:v;if(e.eq(I))return this.isOdd()?I:v;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(h)&&e.lt(h))return c(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,o=this.low>>>16,a=65535&this.low,s=e.high>>>16,u=65535&e.high,l=e.low>>>16,p=65535&e.low,g=0,m=0,E=0,S=0;return E+=(S+=a*p)>>>16,m+=(E+=o*p)>>>16,E&=65535,m+=(E+=a*l)>>>16,g+=(m+=r*p)>>>16,m&=65535,g+=(m+=o*l)>>>16,m&=65535,g+=(m+=a*u)>>>16,g+=t*p+r*l+o*u+a*s,d((E&=65535)<<16|(S&=65535),(g&=65535)<<16|(m&=65535),this.unsigned)},b.mul=b.multiply,b.divide=function(e){if(i(e)||(e=f(e)),e.isZero())throw Error("division by zero");var t,r,o;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?d((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?E:v;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return E;if(e.gt(this.shru(1)))return _;o=E}else{if(this.eq(I))return e.eq(S)||e.eq(y)?I:e.eq(I)?S:(t=this.shr(1).div(e).shl(1)).eq(v)?e.isNegative()?S:y:(r=this.sub(e.mul(t)),o=t.add(r.div(e)));if(e.eq(I))return this.unsigned?E:v;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();o=v}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(t)/Math.LN2),s=a<=48?1:u(2,a-48),l=c(t),p=l.mul(e);p.isNegative()||p.gt(r);)p=(l=c(t-=s,this.unsigned)).mul(e);l.isZero()&&(l=S),o=o.add(l),r=r.sub(p)}return o},b.div=b.divide,b.modulo=function(e){return i(e)||(e=f(e)),n?d((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},b.mod=b.modulo,b.rem=b.modulo,b.not=function(){return d(~this.low,~this.high,this.unsigned)},b.and=function(e){return i(e)||(e=f(e)),d(this.low&e.low,this.high&e.high,this.unsigned)},b.or=function(e){return i(e)||(e=f(e)),d(this.low|e.low,this.high|e.high,this.unsigned)},b.xor=function(e){return i(e)||(e=f(e)),d(this.low^e.low,this.high^e.high,this.unsigned)},b.shiftLeft=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?d(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):d(0,this.low<<e-32,this.unsigned)},b.shl=b.shiftLeft,b.shiftRight=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?d(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):d(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},b.shr=b.shiftRight,b.shiftRightUnsigned=function(e){if(i(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?d(this.low>>>e|t<<32-e,t>>>e,this.unsigned):d(32===e?t:t>>>e-32,0,this.unsigned)},b.shru=b.shiftRightUnsigned,b.shr_u=b.shiftRightUnsigned,b.toSigned=function(){return this.unsigned?d(this.low,this.high,!1):this},b.toUnsigned=function(){return this.unsigned?this:d(this.low,this.high,!0)},b.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},b.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},b.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},function(e){e.exports=JSON.parse('{"PeerPublishStatus":408,"JoinChannelTimeout":407,"OnUpdateStream":356,"OnRemoveStream":355,"OnAddVideoStream":353,"OnAddAudioStream":352,"FirstAudioDecode":351,"FirstVideoDecode":350,"FirstAudioReceived":349,"FirstVideoReceived":348,"ReqUserAccount":196,"ApiInvoke":41,"RequestProxyWorkerManager":36,"RequestProxyAppCenter":35,"VideoSendingStopped":34,"AudioSendingStopped":33,"StreamSwitch":32,"FirstFrame":31,"Publish":30,"Subscribe":29,"JoinGateway":28,"JoinChooseServer":27,"Session":26,"APWorkerEvent":160,"WorkerEvent":156,"JoinWebProxyAP":700,"WebSocketQuit":671}')},function(e){e.exports=JSON.parse('{"nested":{"protobuf":{"nested":{"Session":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"version":{"type":"string","id":11},"browser":{"type":"string","id":12},"appid":{"type":"string","id":13},"mode":{"type":"string","id":14},"extend":{"type":"string","id":15},"process":{"type":"string","id":16},"build":{"type":"string","id":17},"ipv6":{"type":"string","id":18},"sourceHost":{"type":"string","id":19},"sourcePath":{"type":"string","id":20},"collectorHost":{"type":"string","id":21},"collectorName":{"type":"string","id":22}}},"JoinChooseServer":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"chooseServerAddr":{"type":"string","id":11},"chooseServerAddrList":{"type":"string","id":12},"errorCode":{"type":"string","id":13},"eventElapse":{"type":"int64","id":14},"chooseServerIp":{"type":"string","id":15}}},"JoinGateway":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"gatewayAddr":{"type":"string","id":11},"errorCode":{"type":"string","id":12},"eventElapse":{"type":"int64","id":13},"firstSuccess":{"type":"bool","id":14}}},"Subscribe":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"localSdp":{"type":"string","id":11},"remoteSdp":{"type":"string","id":12},"extend":{"type":"string","id":13},"errorCode":{"type":"string","id":14},"eventElapse":{"type":"int64","id":15},"video":{"type":"bool","id":16},"audio":{"type":"bool","id":17},"subscribeRequestid":{"type":"int32","id":18},"p2pid":{"type":"int32","id":19}}},"Publish":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"localSdp":{"type":"string","id":11},"remoteSdp":{"type":"string","id":12},"extend":{"type":"string","id":13},"errorCode":{"type":"string","id":14},"eventElapse":{"type":"int64","id":15},"videoName":{"type":"string","id":16},"audioName":{"type":"string","id":17},"screenName":{"type":"string","id":18},"video":{"type":"bool","id":19},"audio":{"type":"bool","id":20},"publishRequestid":{"type":"int32","id":21},"p2pid":{"type":"int32","id":22},"screenshare":{"type":"bool","id":23}}},"FirstFrame":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"extend":{"type":"string","id":11},"errorCode":{"type":"string","id":12},"width":{"type":"int64","id":13},"height":{"type":"int64","id":14}}},"StreamSwitch":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"isDual":{"type":"bool","id":11}}},"AudioSendingStopped":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"reason":{"type":"string","id":10},"eventType":{"type":"string","id":11}}},"VideoSendingStopped":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"reason":{"type":"string","id":10},"eventType":{"type":"string","id":11}}},"RequestProxyAppCenter":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"APAddr":{"type":"string","id":11},"workerManagerList":{"type":"string","id":12},"errorCode":{"type":"string","id":13},"eventElapse":{"type":"int64","id":14},"extend":{"type":"string","id":15},"response":{"type":"string","id":16}}},"RequestProxyWorkerManager":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"eventType":{"type":"string","id":10},"workerManagerAddr":{"type":"string","id":11},"errorCode":{"type":"string","id":12},"eventElapse":{"type":"int64","id":13},"extend":{"type":"string","id":14},"response":{"type":"string","id":15}}},"ApiInvoke":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"apiName":{"type":"string","id":9},"errorCode":{"type":"string","id":10},"options":{"type":"string","id":11},"execElapse":{"type":"int64","id":12},"execStates":{"type":"string","id":13},"execResult":{"type":"string","id":14},"invokeId":{"type":"int64","id":15}}},"ReqUserAccount":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"eventType":{"type":"string","id":9},"serverAddress":{"type":"string","id":10},"stringUid":{"type":"string","id":11},"errorCode":{"type":"string","id":12},"extend":{"type":"string","id":13}}},"FirstVideoReceived":{"fields":{"lts":{"type":"int64","id":1},"peer":{"type":"int64","id":2},"elapse":{"type":"int64","id":3},"sid":{"type":"string","id":4},"cname":{"type":"string","id":5},"cid":{"type":"int64","id":6},"uid":{"type":"int64","id":8},"subscribeRequestid":{"type":"int32","id":9},"p2pid":{"type":"int32","id":10},"subscribeElapse":{"type":"int64","id":11}}},"FirstAudioReceived":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7},"elapse":{"type":"int64","id":8},"subscribeRequestid":{"type":"int32","id":9},"p2pid":{"type":"int32","id":10},"subscribeElapse":{"type":"int64","id":11}}},"FirstVideoDecode":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7},"elapse":{"type":"int64","id":8},"videowidth":{"type":"int32","id":9},"videoheight":{"type":"int32","id":10},"subscribeRequestid":{"type":"int32","id":11},"p2pid":{"type":"int32","id":12},"subscribeElapse":{"type":"int64","id":13}}},"FirstAudioDecode":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7},"elapse":{"type":"int64","id":8},"subscribeRequestid":{"type":"int32","id":9},"p2pid":{"type":"int32","id":10},"subscribeElapse":{"type":"int64","id":11}}},"OnAddAudioStream":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7}}},"OnAddVideoStream":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7}}},"OnRemoveStream":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7}}},"OnUpdateStream":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":6},"peer":{"type":"int64","id":7},"audio":{"type":"bool","id":8},"video":{"type":"bool","id":9}}},"JoinChannelTimeout":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":5},"elapse":{"type":"int64","id":6},"timeout":{"type":"int32","id":7}}},"PeerPublishStatus":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":5},"peer":{"type":"int64","id":6},"elapse":{"type":"int64","id":7},"peerPublishDuration":{"type":"int64","id":8},"joinChannelSuccessElapse":{"type":"int64","id":9},"subscribeElapse":{"type":"int64","id":10},"audiotag":{"type":"int32","id":11},"videotag":{"type":"int32","id":12},"screensharetag":{"type":"int32","id":13},"firsttimetag":{"type":"int32","id":14}}},"WebSocketQuit":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"uid":{"type":"int64","id":5},"elapse":{"type":"int64","id":6},"succ":{"type":"int32","id":7},"errorCode":{"type":"string","id":8},"ip":{"type":"string","id":9}}},"Message":{"fields":{"id":{"type":"int64","id":1},"msg":{"type":"bytes","id":2}}},"ProtoRaws":{"fields":{"sendTs":{"type":"int64","id":1},"payloads":{"rule":"repeated","type":"Message","id":2},"vid":{"type":"int32","id":3}}},"APWorkerEvent":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"ec":{"type":"int32","id":10},"sc":{"type":"int32","id":11},"serverIp":{"type":"string","id":12},"firstSuccess":{"type":"bool","id":13},"responseTime":{"type":"int32","id":14},"serviceName":{"type":"string","id":15},"responseDetail":{"type":"string","id":16}}},"WorkerEvent":{"fields":{"sid":{"type":"string","id":1},"cname":{"type":"string","id":2},"cid":{"type":"int64","id":3},"lts":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"success":{"type":"bool","id":7},"elapse":{"type":"int64","id":8},"peer":{"type":"int64","id":9},"command":{"type":"string","id":10},"actionType":{"type":"string","id":11},"url":{"type":"string","id":12},"payload":{"type":"string","id":13},"serverCode":{"type":"int32","id":14},"code":{"type":"int32","id":15},"traceId":{"type":"string","id":16},"workerType":{"type":"int32","id":17},"responseTime":{"type":"int32","id":18},"requestId":{"type":"int64","id":19},"packIndex":{"type":"int32","id":20},"requestByUser":{"type":"bool","id":21},"tid":{"type":"string","id":22}}},"JoinWebProxyAP":{"fields":{"lts":{"type":"int64","id":1},"sid":{"type":"string","id":2},"cname":{"type":"string","id":3},"cid":{"type":"int64","id":4},"ip":{"type":"string","id":5},"uid":{"type":"int64","id":6},"sucess":{"type":"int32","id":7},"elapse":{"type":"int64","id":8},"eventType":{"type":"string","id":9},"apServerAddr":{"type":"string","id":10},"turnServerAddrList":{"type":"string","id":11},"errorCode":{"type":"string","id":12}}}}}}}')},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(e,t,n,r){var i=t&&t.prototype instanceof u?t:u,o=Object.create(i.prototype),a=new R(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return I()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=S(a,n);if(s){if(s===d)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===d)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,a),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var d={};function u(){}function l(){}function f(){}var p={};p[i]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(T([])));m&&m!==t&&n.call(m,i)&&(p=m);var h=f.prototype=u.prototype=Object.create(p);function v(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function E(e,t){var r;this._invoke=function(i,o){function a(){return new t((function(r,a){!function r(i,o,a,s){var d=c(e[i],e,o);if("throw"!==d.type){var u=d.arg,l=u.value;return l&&"object"==typeof l&&n.call(l,"__await")?t.resolve(l.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(l).then((function(e){u.value=e,a(u)}),(function(e){return r("throw",e,a,s)}))}s(d.arg)}(i,o,r,a)}))}return r=r?r.then(a,a):a()}}function S(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method))return d;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var r=c(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,d;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,d):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,d)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function y(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function T(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return l.prototype=h.constructor=f,f.constructor=l,f[a]=l.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===l||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create(h),e},e.awrap=function(e){return{__await:e}},v(E.prototype),E.prototype[o]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,i,o){void 0===o&&(o=Promise);var a=new E(s(t,n,r,i),o);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(h),h[a]="Generator",h[i]=function(){return this},h.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(y),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),d},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),y(n),d}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;y(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:T(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),d}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="object"==typeof window&&window.RTCPeerConnection,i="object"==typeof window&&window.webkitRTCPeerConnection,o="object"==typeof window&&window.mozRTCPeerConnection;t.createRTCPeerConnection=function(e){var t=r||i||o;return t?new t(e):null}},function(e,t,n){var r;
/*!
 * EventEmitter v5.2.9 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - https://oli.me.uk/
 * @preserve
 */!function(t){"use strict";function i(){}var o=i.prototype,a=t.EventEmitter;function s(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function c(e){return function(){return this[e].apply(this,arguments)}}o.getListeners=function(e){var t,n,r=this._getEvents();if(e instanceof RegExp)for(n in t={},r)r.hasOwnProperty(n)&&e.test(n)&&(t[n]=r[n]);else t=r[e]||(r[e]=[]);return t},o.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},o.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&((t={})[e]=n),t||n},o.addListener=function(e,t){if(!function e(t){return"function"==typeof t||t instanceof RegExp||!(!t||"object"!=typeof t)&&e(t.listener)}(t))throw new TypeError("listener must be a function");var n,r=this.getListenersAsObject(e),i="object"==typeof t;for(n in r)r.hasOwnProperty(n)&&-1===s(r[n],t)&&r[n].push(i?t:{listener:t,once:!1});return this},o.on=c("addListener"),o.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},o.once=c("addOnceListener"),o.defineEvent=function(e){return this.getListeners(e),this},o.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},o.removeListener=function(e,t){var n,r,i=this.getListenersAsObject(e);for(r in i)i.hasOwnProperty(r)&&-1!==(n=s(i[r],t))&&i[r].splice(n,1);return this},o.off=c("removeListener"),o.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},o.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},o.manipulateListeners=function(e,t,n){var r,i,o=e?this.removeListener:this.addListener,a=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(r=n.length;r--;)o.call(this,t,n[r]);else for(r in t)t.hasOwnProperty(r)&&(i=t[r])&&("function"==typeof i?o.call(this,r,i):a.call(this,r,i));return this},o.removeEvent=function(e){var t,n=typeof e,r=this._getEvents();if("string"===n)delete r[e];else if(e instanceof RegExp)for(t in r)r.hasOwnProperty(t)&&e.test(t)&&delete r[t];else delete this._events;return this},o.removeAllListeners=c("removeEvent"),o.emitEvent=function(e,t){var n,r,i,o,a=this.getListenersAsObject(e);for(o in a)if(a.hasOwnProperty(o))for(n=a[o].slice(0),i=0;i<n.length;i++)!0===(r=n[i]).once&&this.removeListener(e,r.listener),r.listener.apply(this,t||[])===this._getOnceReturnValue()&&this.removeListener(e,r.listener);return this},o.trigger=c("emitEvent"),o.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},o.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},o._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},o._getEvents=function(){return this._events||(this._events={})},i.noConflict=function(){return t.EventEmitter=a,i},void 0===(r=function(){return i}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof window?window:this||{})},function(e,t,n){var r=n(35);e.exports=function(e){if(Array.isArray(e))return r(e)}},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){(function(t){var r;e.exports=(r=r||function(e,r){var i;if("undefined"!=typeof window&&window.crypto&&(i=window.crypto),"undefined"!=typeof self&&self.crypto&&(i=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(i=globalThis.crypto),!i&&"undefined"!=typeof window&&window.msCrypto&&(i=window.msCrypto),!i&&void 0!==t&&t.crypto&&(i=t.crypto),!i)try{i=n(74)}catch(e){}var o=function(){if(i){if("function"==typeof i.getRandomValues)try{return i.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof i.randomBytes)try{return i.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},a=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),s={},c=s.lib={},d=c.Base={extend:function(e){var t=a(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=c.WordArray=d.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||f).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,i=e.sigBytes;if(this.clamp(),r%4)for(var o=0;o<i;o++){var a=n[o>>>2]>>>24-o%4*8&255;t[r+o>>>2]|=a<<24-(r+o)%4*8}else for(var s=0;s<i;s+=4)t[r+s>>>2]=n[s>>>2];return this.sigBytes+=i,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=d.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(o());return new u.init(t,e)}}),l=s.enc={},f=l.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i++){var o=t[i>>>2]>>>24-i%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new u.init(n,t/2)}},p=l.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i++){var o=t[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new u.init(n,t)}},g=l.Utf8={stringify:function(e){try{return decodeURIComponent(escape(p.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return p.parse(unescape(encodeURIComponent(e)))}},m=c.BufferedBlockAlgorithm=d.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=g.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,r=this._data,i=r.words,o=r.sigBytes,a=this.blockSize,s=o/(4*a),c=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*a,d=e.min(4*c,o);if(c){for(var l=0;l<c;l+=a)this._doProcessBlock(i,l);n=i.splice(0,c),r.sigBytes-=d}return new u.init(n,d)},clone:function(){var e=d.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),h=(c.Hasher=m.extend({cfg:d.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){m.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new h.HMAC.init(e,n).finalize(t)}}}),s.algo={});return s}(Math),r)}).call(this,n(33))},function(e,t){},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(76),c=n(27),d=n(95),u=n(20),l=n(24),f=n(31),p=a(n(0)),g=a(n(37)),m=function(){function e(e){this.retryTimeout=1e4,this.streamingTasks=new Map,this.isStartingStreamingTask=!1,this.taskMutex=new d.PromiseMutex("LS"),this.cancelToken=g.default.CancelToken.source(),this.injectConfig=r({},c.DEFAULT_INJECT_CONFIG),this.injectLoopTimes=0,this.lastTaskId=1,this.statusError=new Map,this.spec=e}return Object.defineProperty(e.prototype,"isNeedReset",{get:function(){for(var e=this,t=0,n=Array.from(this.streamingTasks.values());t<n.length;t++){var r=n[t];if(r.mode===c.LiveStreamingServiceMode.INJECT)return!0;if(r.mode===c.LiveStreamingServiceMode.TRANSCODE)if((this.transcodingConfig&&(this.transcodingConfig.userConfigs||this.transcodingConfig.transcodingUsers)||[]).find((function(t){return t.uid===e.spec.uid})))return!0}return!1},enumerable:!0,configurable:!0}),e.prototype.setTranscodingConfig=function(e){return i(this,void 0,void 0,(function(){var t,n,i,a,s,d=this;return o(this,(function(o){switch(o.label){case 0:(t=r(r({},c.DEFAULT_TRANSCODING_CONFIG),e)).transcodingUsers||(t.transcodingUsers=t.userConfigs),66!==t.videoCodecProfile&&77!==t.videoCodecProfile&&100!==t.videoCodecProfile&&(p.default.debug("["+this.spec.clientId+"] set transcoding config, fix video codec profile: "+t.videoCodecProfile+" -> 100"),t.videoCodecProfile=100),t.transcodingUsers&&(t.transcodingUsers=t.transcodingUsers.map((function(e){return r(r(r({},c.DEFAULT_LIVE_STREAMING_TRANSCODING_USER),e),{zOrder:e.zOrder?e.zOrder+1:1})}))),t.images&&(t.images=t.images.map((function(e){return r(r({},c.DEFAULT_LIVE_STREAMING_TRANSCODING_WATERMARK),e)})));try{c.isLiveStreamingTranscodingConfig(t)}catch(e){throw e}return t.transcodingUsers&&(t.userConfigs=t.transcodingUsers.map((function(e){return r({},e)})),t.userCount=t.transcodingUsers.length,delete t.transcodingUsers),n=(t.userConfigs||[]).map((function(e){return"number"==typeof e.uid?Promise.resolve(e.uid):u.getUserAccount(d.spec,null,e.uid)})),[4,this.taskMutex.lock()];case 1:return i=o.sent(),[4,Promise.all(n)];case 2:if(o.sent().forEach((function(e,n){t.userConfigs&&t.userConfigs[n]&&(t.userConfigs[n].uid=e&&e.uid||e)})),this.transcodingConfig=t,!this.connection)return i(),[2];o.label=3;case 3:return o.trys.push([3,5,,6]),[4,this.connection.request("request",{clientRequest:{command:"UpdateTranscoding",transcodingConfig:this.transcodingConfig}},!1,{command:"UpdateTranscoding",workerType:1,requestByUser:!0,tid:Array.from(this.streamingTasks.values()).map((function(e){return e.taskId})).join("#")})];case 4:return a=o.sent(),i(),p.default.debug("["+this.spec.clientId+"] update live transcoding config success, code: "+a.code+", config:",JSON.stringify(this.transcodingConfig)),[3,6];case 5:if(s=o.sent(),i(),!s.data||!s.data.retry)throw s;return s.data.changeAddress&&this.connection.tryNextAddress(),this.streamingTasks.forEach((function(e){p.default.warning("["+d.spec.clientId+"] live streaming receive error",s.toString(),"try to republish",e.url),d.startLiveStreamingTask(e.url,e.mode,s).then((function(){p.default.debug("["+d.spec.clientId+"] live streaming republish "+e.url+" success")})).catch((function(t){p.default.error("["+d.spec.clientId+"] live streaming republish failed",e.url,t.toString()),d.onLiveStreamError&&d.onLiveStreamError(e.url,t)}))})),[3,6];case 6:return[2]}}))}))},e.prototype.setInjectStreamConfig=function(e,t){this.injectConfig=Object.assign({},this.injectConfig,e),this.injectLoopTimes=t},e.prototype.startLiveStreamingTask=function(e,t,n){return i(this,void 0,void 0,(function(){var i,a,s,d,u,g,m,h,v=this;return o(this,(function(o){switch(o.label){case 0:return Array.from(this.streamingTasks.values()).find((function(e){return e.mode===c.LiveStreamingServiceMode.INJECT}))&&t===c.LiveStreamingServiceMode.INJECT?[2,new l.AgoraRTCError(l.AgoraRTCErrorCode.LIVE_STREAMING_TASK_CONFLICT,"inject stream over limit").throw()]:(i={command:"PublishStream",ts:Date.now(),url:e,uid:this.spec.uid.toString(),autoDestroyTime:30},p.default.debug("["+this.spec.clientId+"] start live streaming "+e+", mode: "+t),[4,this.taskMutex.lock()]);case 1:if(a=o.sent(),!this.transcodingConfig&&t===c.LiveStreamingServiceMode.TRANSCODE)throw a(),new l.AgoraRTCError(l.AgoraRTCErrorCode.INVALID_OPERATION,"[LiveStreaming] no transcoding config found, can not start transcoding streaming task");if(!this.connection&&n)return a(),[2];if(this.streamingTasks.get(e)&&!n)return a(),[2,new l.AgoraRTCError(l.AgoraRTCErrorCode.LIVE_STREAMING_TASK_CONFLICT).throw()];if(!this.transcodingConfig&&t===c.LiveStreamingServiceMode.TRANSCODE)throw a(),new l.AgoraRTCError(l.AgoraRTCErrorCode.INVALID_OPERATION,"[LiveStreaming] no transcoding config found, can not start transcoding streaming task");o.label=2;case 2:return o.trys.push([2,5,,6]),this.connection?[3,4]:(s=this,[4,this.connect(t)]);case 3:s.connection=o.sent(),o.label=4;case 4:return[3,6];case 5:throw d=o.sent(),a(),d;case 6:switch(t){case c.LiveStreamingServiceMode.TRANSCODE:i.transcodingConfig=r({},this.transcodingConfig);break;case c.LiveStreamingServiceMode.RAW:break;case c.LiveStreamingServiceMode.INJECT:i={cname:this.spec.cname,command:"InjectStream",sid:this.spec.sid,transcodingConfig:this.injectConfig,ts:Date.now(),url:e,loopTimes:this.injectLoopTimes}}this.uapResponse&&this.uapResponse.vid&&(i.vid=this.uapResponse.vid),this.isStartingStreamingTask=!0,u=this.lastTaskId++,o.label=7;case 7:return o.trys.push([7,9,,14]),g=new Promise((function(t,r){f.wait(v.retryTimeout).then((function(){if(n)return r(n);var t=v.statusError.get(e);return t?(v.statusError.delete(e),r(t)):void 0}))})),[4,Promise.race([this.connection.request("request",{clientRequest:i},!0,{url:e,command:"PublishStream",workerType:t===c.LiveStreamingServiceMode.TRANSCODE?1:2,requestByUser:!n,tid:u.toString()}),g])];case 8:return m=o.sent(),this.isStartingStreamingTask=!1,p.default.debug("["+this.spec.clientId+"] live streaming started, code: "+m.code),this.streamingTasks.set(e,{clientRequest:i,mode:t,url:e,taskId:u}),a(),[3,14];case 9:if(h=o.sent(),a(),this.isStartingStreamingTask=!1,!h.data||!h.data.retry||n)throw h;return h.data.changeAddress?[3,11]:[4,this.startLiveStreamingTask(e,t,h)];case 10:return[2,o.sent()];case 11:return this.connection.tryNextAddress(),[4,this.startLiveStreamingTask(e,t,h)];case 12:return[2,o.sent()];case 13:return[3,14];case 14:return[2]}}))}))},e.prototype.stopLiveStreamingTask=function(e){var t=this;return new Promise((function(n,r){var i=t.streamingTasks.get(e);if(!i||!t.connection)return new l.AgoraRTCError(l.AgoraRTCErrorCode.UNEXPECTED_ERROR,"can not find streaming task to stop").throw();var o=i.mode;i.abortTask=function(){p.default.debug("["+t.spec.clientId+"] stop live streaming success(worker exception)"),t.streamingTasks.delete(e),n()},p.default.debug("stop live streaming task request: "+JSON.stringify(e)),t.connection.request("request",{clientRequest:{command:o===c.LiveStreamingServiceMode.INJECT?"UninjectStream":"UnpublishStream",url:i.url}},!1,{url:e,command:"UnPublishStream",workerType:o===c.LiveStreamingServiceMode.TRANSCODE?1:2,requestByUser:!0,tid:(t.lastTaskId++).toString()}).then((function(r){p.default.debug("["+t.spec.clientId+"] stop live streaming success, code: "+r.code),t.streamingTasks.delete(e),0===t.streamingTasks.size&&o!==c.LiveStreamingServiceMode.INJECT&&(t.connection.close(),t.connection=void 0),n()})).catch(r)}))},e.prototype.controlInjectStream=function(e,t,n,r){return i(this,void 0,void 0,(function(){var i;return o(this,(function(o){switch(o.label){case 0:if(!(i=this.streamingTasks.get(e))||!this.connection||i.mode!==c.LiveStreamingServiceMode.INJECT)throw new l.AgoraRTCError(l.AgoraRTCErrorCode.INVALID_OPERATION,"can not find inject stream task to control");return[4,this.connection.request("request",{clientRequest:{command:"ControlStream",url:e,control:t,audioVolume:n,position:r}})];case 1:return[2,o.sent().serverResponse]}}))}))},e.prototype.resetAllTask=function(){var e=this,t=Array.from(this.streamingTasks.values());this.terminate();for(var n=function(t){r.startLiveStreamingTask(t.url,t.mode).catch((function(n){e.onLiveStreamError&&e.onLiveStreamError(t.url,n)}))},r=this,i=0,o=t;i<o.length;i++){n(o[i])}},e.prototype.setGatewayConnectionState=function(e){this.connection&&(this.connection.gatewayConnectionState=e)},e.prototype.terminate=function(){this.cancelToken&&this.cancelToken.cancel(),this.streamingTasks=new Map,this.isStartingStreamingTask=!1,this.statusError=new Map,this.cancelToken=g.default.CancelToken.source(),this.uapResponse=void 0,this.connection&&this.connection.close(),this.connection=void 0},e.prototype.connect=function(e){return i(this,void 0,void 0,(function(){var t,n=this;return o(this,(function(r){switch(r.label){case 0:if(this.connection)throw new l.AgoraRTCError(l.AgoraRTCErrorCode.UNEXPECTED_ERROR,"live streaming connection has already connected");return[4,f.getLiveStreamingWorkerMangerResult(e,this.spec,this.cancelToken.token)];case 1:return t=r.sent(),this.uapResponse=t,this.connection=new s.AgoraLiveStreamingUapSignal(t.workerToken,this.spec,e),this.connection.on(c.LiveStreamingUapSignalEvents.WARNING,(function(e,t){return n.onLiveStreamWarning&&n.onLiveStreamWarning(t,e)})),this.connection.on(c.LiveStreamingUapSignalEvents.PUBLISH_STREAM_STATUS,(function(e){return n.handlePublishStreamServer(e)})),this.connection.on(c.LiveStreamingUapSignalEvents.INJECT_STREAM_STATUS,(function(e){return n.handleInjectStreamServerStatus(e)})),this.connection.on(c.LiveStreamingUapSignalEvents.REQUEST_NEW_ADDRESS,(function(t,r){if(!n.connection)return r(new l.AgoraRTCError(l.AgoraRTCErrorCode.UNEXPECTED_ERROR,"can not get new live streaming address list"));f.getLiveStreamingWorkerMangerResult(e,n.spec,n.cancelToken.token).then((function(e){n.uapResponse=e,t(e.addressList)})).catch(r)})),[4,this.connection.init(t.addressList)];case 2:return r.sent(),[2,this.connection]}}))}))},e.prototype.handlePublishStreamServer=function(e){var t=this,n=e.serverStatus&&e.serverStatus.url;if(!n)throw new l.AgoraRTCError(l.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"empty url",{code:e.code});var r=this.streamingTasks.get(n);switch(e.code){case c.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:case c.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:case c.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:case c.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH:var i=new l.AgoraRTCError(l.AgoraRTCErrorCode.LIVE_STREAMING_CDN_ERROR,"",{code:e.code});if(r)return p.default.error(i.toString()),this.onLiveStreamError&&this.onLiveStreamError(n,i);if(!this.isStartingStreamingTask)return;this.statusError.set(n,i);case c.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_WORKER_LOST:case c.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_WORKER_QUIT:if(!this.connection||0===this.streamingTasks.size)return;this.connection.tryNextAddress();for(var o=Array.from(this.streamingTasks.values()),a=function(n){if(n.abortTask)return n.abortTask(),"continue";p.default.warning("["+s.spec.clientId+"] publish stream status code",e.code,"try to republish",n.url),s.startLiveStreamingTask(n.url,n.mode,new l.AgoraRTCError(l.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"",{code:e.code})).then((function(){p.default.debug("["+t.spec.clientId+"] republish live stream success",n.url)})).catch((function(e){p.default.error(e.toString()),t.onLiveStreamError&&t.onLiveStreamError(n.url,e)}))},s=this,d=0,u=o;d<u.length;d++){a(u[d])}return}},e.prototype.handleInjectStreamServerStatus=function(e){var t=Number(e.uid),n=e.serverStatus&&e.serverStatus.url;switch(e.code){case 200:return void(this.onInjectStatusChange&&this.onInjectStatusChange(0,t,n));case 451:return this.onInjectStatusChange&&this.onInjectStatusChange(1,t,n),void this.streamingTasks.delete(n);case 453:return this.onInjectStatusChange&&this.onInjectStatusChange(2,t,n),void this.streamingTasks.delete(n);case 470:return this.onInjectStatusChange&&this.onInjectStatusChange(10,t,n),void this.streamingTasks.delete(n);case 499:return this.onInjectStatusChange&&this.onInjectStatusChange(3,t,n),void this.streamingTasks.delete(n);default:return void p.default.debug("inject stream server status",e)}},e.prototype.haveUrl=function(e){return this.streamingTasks.has(e)||void 0},e}();t.AgoraRTCLiveStreamingClient=m},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var d=n(27),u=n(77),l=n(36),f=n(24),p=n(2),g=c(n(0)),m=n(1),h=n(31),v=function(e){function t(t,n,r){var i=e.call(this)||this;return i._gatewayConnectionState="CONNECTED",i.reconnectMode="retry",i.reqId=0,i.commandReqId=0,i.waitingResponseList=[],i.handleWebSocketOpen=function(){i.reconnectMode="retry",i.startPingPong()},i.handleWebSocketMessage=function(e){if(e.data){var t=JSON.parse(e.data);if(t.requestId)i.emit("@"+t.requestId,t);else if(i.serviceMode===d.LiveStreamingServiceMode.INJECT)i.emit(d.LiveStreamingUapSignalEvents.INJECT_STREAM_STATUS,t);else{m.report.requestWorkerEvent(i.spec.sid,{actionType:"status",serverCode:t.code,workerType:i.serviceMode===d.LiveStreamingServiceMode.TRANSCODE?1:2});var n=t.serverStatus&&t.serverStatus.url;n&&i.waitingResponseList.includes(n)&&200===t.code&&i.emit(n),i.emit(d.LiveStreamingUapSignalEvents.PUBLISH_STREAM_STATUS,t)}}},i.spec=n,i.token=t,i.serviceMode=r,i.websocket=new u.AgoraWebSocketManager("live-streaming"),i.websocket.on(d.WebSocketManagerEvents.CONNECTED,i.handleWebSocketOpen),i.websocket.on(d.WebSocketManagerEvents.ON_MESSAGE,i.handleWebSocketMessage),i.websocket.on(d.WebSocketManagerEvents.REQUEST_NEW_URLS,(function(e,t){l.emitAsPromise(i,d.LiveStreamingUapSignalEvents.REQUEST_NEW_ADDRESS).then(e).catch(t)})),i.websocket.on(d.WebSocketManagerEvents.RECONNECTING,(function(){i.websocket.reconnectMode=i.reconnectMode})),i}return i(t,e),Object.defineProperty(t.prototype,"gatewayConnectionState",{get:function(){return this._gatewayConnectionState},set:function(e){this._gatewayConnectionState=e,"CONNECTED"===e&&this.emit("gateway-connected",e)},enumerable:!0,configurable:!0}),t.prototype.init=function(e){return this.websocket.init(e)},t.prototype.request=function(e,t,n,r){return a(this,void 0,void 0,(function(){var i,a,c,u,l,g,v,E,S,_,y=this;return s(this,(function(s){switch(s.label){case 0:if(this.reqId+=1,i=this.reqId,"request"===e&&(this.commandReqId+=1),a=this.commandReqId,!i||!this.websocket)throw new f.AgoraRTCError(f.AgoraRTCErrorCode.UNEXPECTED_ERROR);if(c=p.VERSION,"closed"===this.websocket.state)throw new f.AgoraRTCError(f.AgoraRTCErrorCode.WS_DISCONNECT);return u=function(){return new Promise((function(e,t){var n=function(){"CONNECTED"===y.gatewayConnectionState&&"connected"===y.websocket.state&&(y.off("gateway-connected",n),y.websocket.off(d.WebSocketManagerEvents.CONNECTED,n),e(void 0))};y.on("gateway-connected",n),y.websocket.once(d.WebSocketManagerEvents.CLOSED,(function(){return t(new f.AgoraRTCError(f.AgoraRTCErrorCode.WS_ABORT))})),y.websocket.on(d.WebSocketManagerEvents.CONNECTED,n)}))},"connected"===this.websocket.state&&"CONNECTED"===this.gatewayConnectionState?[3,2]:[4,u()];case 1:s.sent(),s.label=2;case 2:l=Promise.race([new Promise((function(e,t){var n=function(){t(new f.AgoraRTCError(f.AgoraRTCErrorCode.WS_ABORT))};y.websocket.once(d.WebSocketManagerEvents.RECONNECTING,n),y.websocket.once(d.WebSocketManagerEvents.CLOSED,n),y.once("@"+i,(function(t){e(t)}))})),h.wait(p.getParameter("LIVE_STREAMING_TIMEOUT")).then((function(){return!1}))]),(g=o({command:e,sdkVersion:c,seq:i,requestId:i,allocate:n,cname:this.spec.cname,appId:this.spec.appId,sid:this.spec.sid,uid:this.spec.uid.toString(),ts:Math.floor(Date.now()/1e3)},t)).clientRequest&&(g.clientRequest.workerToken=this.token),r&&m.report.requestWorkerEvent(this.spec.sid,o(o({},r),{requestId:a,actionType:"request",payload:JSON.stringify(t.clientRequest),serverCode:0,code:0})),v=Date.now(),this.websocket.sendMessage(g),E=null,s.label=3;case 3:return s.trys.push([3,5,,8]),[4,l];case 4:return E=s.sent(),[3,8];case 5:if(S=s.sent(),"closed"===this.websocket.state)throw S;return[4,u()];case 6:return s.sent(),[4,this.request(e,t,n,r)];case 7:return[2,s.sent()];case 8:if(!1===E)throw _=new f.AgoraRTCError(f.AgoraRTCErrorCode.NETWORK_TIMEOUT,(t&&t.clientRequest&&t.clientRequest.command)+" timeout",{changeAddress:!0,retry:!0}),this.emit(d.LiveStreamingUapSignalEvents.WARNING,_,r&&r.url||"unknown url"),r&&m.report.requestWorkerEvent(this.spec.sid,o(o({},r),{requestId:a,actionType:"response",payload:"TIMEOUT",serverCode:0,success:0,responseTime:Date.now()-v})),_;return r&&m.report.requestWorkerEvent(this.spec.sid,o(o({},r),{requestId:a,actionType:"response",payload:JSON.stringify(E.serverResponse),serverCode:E.code,success:200===E.code,responseTime:Date.now()-v})),200===E.code?[3,10]:[4,this.handleResponseError(E)];case 9:s.sent(),s.label=10;case 10:return[2,E]}}))}))},t.prototype.tryNextAddress=function(){this.reconnectMode="tryNext",this.websocket.reconnect("tryNext")},t.prototype.close=function(){var e="__VERSION__"===p.VERSION?"0.0.1":p.VERSION;this.reqId+=1,"connected"===this.websocket.state?(this.websocket.sendMessage({command:"request",appId:this.spec.appId,cname:this.spec.cname,uid:this.spec.uid.toString(),sdkVersion:e,sid:this.spec.sid,seq:this.reqId,ts:Math.floor(Date.now()/1e3),requestId:this.reqId,clientRequest:{command:"DestroyWorker"}}),this.websocket.close(!1,!0)):this.websocket.close(!1),this.pingpongTimer&&(window.clearInterval(this.pingpongTimer),this.pingpongTimer=void 0)},t.prototype.handleResponseError=function(e){return a(this,void 0,void 0,(function(){var t,n,r,i,o=this;return s(this,(function(a){switch(g.default.debug("[live-streaming] receive response error "+e.code),e.code){case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM:return g.default.warning("live stream response already exists stream"),t=e.serverResponse.url,this.emit(d.LiveStreamingUapSignalEvents.WARNING,"live stream response already exists stream, code 454",t),this.waitingResponseList.includes(t)||this.waitingResponseList.push(t),[2,new Promise((function(n,r){o.once(t,(function(){o.waitingResponseList.splice(o.waitingResponseList.indexOf(t),1),n()})),setTimeout((function(){o.waitingResponseList.splice(o.waitingResponseList.indexOf(t),1),r(new f.AgoraRTCError(f.AgoraRTCErrorCode.TIMEOUT,"live stream timeout waiting 454",{code:e.code}))}),1e4)}))];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR:case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_BAD_STREAM:case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR:return[2,new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INVALID_ARGUMENT,"",{code:e.code}).throw()];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_INGNORE_MESSAGE:throw new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INVALID_ARGUMENT,"",{retry:!0,changeAddress:!0});case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST:if("UnpublishStream"===e.serverResponse.command||"UninjectStream"===e.serverResponse.command)return[2];throw new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"live stream response wm worker not exist",{retry:!0});case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED:return[2,new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED,"",{code:e.code}).throw()];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE:return n=new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE),[2,this.emit(d.LiveStreamingUapSignalEvents.WARNING,n,e.serverResponse.url)];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN:return n=new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_WARN_FREQUENT_REQUEST),[2,this.emit(d.LiveStreamingUapSignalEvents.WARNING,n,e.serverResponse.url)];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH:throw new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"live stream response wm worker not exist",{retry:!0});case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_NOT_SUPPORTED:return[2,new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_TRANSCODING_NOT_SUPPORT,"",{code:e.code}).throw()];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM:return n=new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT),[2,this.emit(d.LiveStreamingUapSignalEvents.WARNING,n,e.serverResponse.url)];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR:return[2,new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"",{code:e.code}).throw()];case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT:throw new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"live stream resource limit",{retry:!0,changeAddress:!0});case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_WORKER_LOST:case d.LIVE_STREAM_ERROR_CODE.LIVE_STREAM_RESPONSE_WORKER_QUIT:if("UnpublishStream"===e.serverResponse.command||"UninjectStream"===e.serverResponse.command)return[2];throw new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"error fail send message",{retry:!0,changeAddress:!0});case d.LIVE_STREAM_ERROR_CODE.ERROR_FAIL_SEND_MESSAGE:if("UnpublishStream"===e.serverResponse.command||"UninjectStream"===e.serverResponse.command)return[2];if("UpdateTranscoding"===e.serverResponse.command||"ControlStream"===e.serverResponse.command)return[2,new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"error fail send message",{code:e.code}).throw()];throw new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_INTERNAL_SERVER_ERROR,"error fail send message",{retry:!0,changeAddress:!0});case d.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:case d.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:case d.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:case d.LIVE_STREAM_ERROR_CODE.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH:return r=e.serverResponse.url,this.waitingResponseList.includes(r)||this.waitingResponseList.push(r),i=new f.AgoraRTCError(f.AgoraRTCErrorCode.LIVE_STREAMING_CDN_ERROR,"",{code:e.code}),this.emit(d.LiveStreamingUapSignalEvents.WARNING,i,r),[2,new Promise((function(e,t){o.once(r,(function(){o.waitingResponseList.splice(o.waitingResponseList.indexOf(r),1),e()})),setTimeout((function(){o.waitingResponseList.splice(o.waitingResponseList.indexOf(r),1),t(i)}),1e4)}))]}return[2]}))}))},t.prototype.startPingPong=function(){var e=this;this.pingpongTimer&&window.clearInterval(this.pingpongTimer),this.pingpongTimer=window.setInterval((function(){"connected"===e.websocket.state&&e.request("ping",{}).catch((function(){}))}),6e3)},t}(l.EventEmitter);t.AgoraLiveStreamingUapSignal=v},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=n(24),d=n(36),u=n(31),l=n(27),f=s(n(0)),p=function(e){function t(t){var n=e.call(this)||this;return n.connectionID=0,n.currentURLIndex=0,n.reconnectMode="tryNext",n._state="closed",n.retryConfig=u.DEFAULT_RETRY_CONFIG,n.reconnectCount=0,n.name=t,n}return i(t,e),Object.defineProperty(t.prototype,"url",{get:function(){return this.websocket?this.websocket.url:null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"state",{get:function(){return this._state},set:function(e){e!==this._state&&(this._state=e,"reconnecting"===this._state?this.emit(l.WebSocketManagerEvents.RECONNECTING,this.reconnectMode):"connected"===this._state?this.emit(l.WebSocketManagerEvents.CONNECTED):"closed"===this._state?this.emit(l.WebSocketManagerEvents.CLOSED):"failed"===this._state&&this.emit(l.WebSocketManagerEvents.FAILED))},enumerable:!0,configurable:!0}),t.prototype.init=function(e){var t=this;return new Promise((function(n,r){t.urls=e;var i=t.urls[t.currentURLIndex];t.state="connecting",t.createWebSocketConnection(i).then(n).catch(r),t.once(l.WebSocketManagerEvents.CLOSED,(function(){return r(new c.AgoraRTCError(c.AgoraRTCErrorCode.WS_DISCONNECT))})),t.once(l.WebSocketManagerEvents.CONNECTED,(function(){return n()}))}))},t.prototype.close=function(e,t){if(this.currentURLIndex=0,this.reconnectCount=0,this.websocket){this.websocket.onclose=null,this.websocket.onopen=null,this.websocket.onmessage=null;var n=this.websocket;t?setTimeout((function(){return n.close()}),500):n.close(),this.websocket=void 0}this.state=e?"failed":"closed"},t.prototype.reconnect=function(e){if(this.websocket){void 0!==e&&(this.reconnectMode=e);var t=this.websocket.onclose;this.websocket.onclose=null,this.websocket.close(),t&&t.bind(this.websocket)({code:9999})}else f.default.warning("["+this.name+"] can not reconnect, no websocket")},t.prototype.sendMessage=function(e){if(!this.websocket||this.websocket.readyState!==WebSocket.OPEN)throw new c.AgoraRTCError(c.AgoraRTCErrorCode.WS_ABORT,"websocket is not ready");var t=JSON.stringify(e);try{this.websocket.send(t)}catch(e){throw new c.AgoraRTCError(c.AgoraRTCErrorCode.WS_ERR,"send websocket message error"+e.toString())}},t.prototype.createWebSocketConnection=function(e){return o(this,void 0,void 0,(function(){var t,n=this;return a(this,(function(r){return this.connectionID+=1,t=this.connectionID,[2,new Promise((function(r,i){n.websocket&&(n.websocket.onclose=null,n.websocket.close()),f.default.debug("["+n.name+"] start connect, url: "+e);try{n.websocket=new WebSocket(e),n.websocket.binaryType="arraybuffer"}catch(e){var s=new c.AgoraRTCError(c.AgoraRTCErrorCode.WS_ERR,"init websocket failed! Error: "+e.toString());return f.default.error("["+n.name+"]"+s),void i(s)}u.wait(5e3).then((function(){t===n.connectionID&&n.websocket&&n.websocket.readyState!==WebSocket.OPEN&&n.websocket&&n.websocket.close()})),n.websocket.onopen=function(){f.default.debug("["+n.name+"] websockect opened:",e),n.reconnectMode="retry",n.state="connected",n.reconnectCount=0,r()},n.websocket.onclose=function(e){return o(n,void 0,void 0,(function(){var t,n;return a(this,(function(o){switch(o.label){case 0:return f.default.debug("["+this.name+"] websocket close "+(this.websocket&&this.websocket.url)+", code: "+e.code+", reason: "+e.reason+", current mode: "+this.reconnectMode),this.reconnectCount<this.retryConfig.maxRetryCount?("connected"===this.state&&(this.state="reconnecting"),t=d.emitAsInvokerNoResponse(this,l.WebSocketManagerEvents.WILL_RECONNECT,this.reconnectMode)||this.reconnectMode,[4,this.reconnectWithAction(t)]):[3,2];case 1:return n=o.sent(),"closed"===this.state?(f.default.debug("["+this.connectionID+"] ws is closed, no need to reconnect"),[2]):n?(r(),[3,3]):(i(new c.AgoraRTCError(c.AgoraRTCErrorCode.WS_DISCONNECT,"websocket reconnect failed: "+e.code)),this.close(!0),[2]);case 2:i(new c.AgoraRTCError(c.AgoraRTCErrorCode.WS_DISCONNECT,"websocket close: "+e.code)),this.close(),o.label=3;case 3:return[2]}}))}))},n.websocket.onmessage=function(e){n.emit(l.WebSocketManagerEvents.ON_MESSAGE,e)}}))]}))}))},t.prototype.reconnectWithAction=function(e,t){return o(this,void 0,void 0,(function(){var n,r,i,o;return a(this,(function(a){switch(a.label){case 0:return!t&&this.reconnectCount>=this.retryConfig.maxRetryCount?[2,!1]:this.urls?"closed"===this.state?[2,!1]:(n=u.getRetryWaitTime(this.reconnectCount,this.retryConfig),f.default.debug("["+this.name+"] wait "+n+"ms to reconnect websocket, mode: "+e),[4,u.wait(n)]):[2,!1];case 1:if(a.sent(),"closed"===this.state)return[2,!1];this.reconnectCount+=1,a.label=2;case 2:return a.trys.push([2,12,,14]),"retry"!==e?[3,4]:(i=this.urls[this.currentURLIndex],[4,this.createWebSocketConnection(i)]);case 3:return a.sent(),[3,11];case 4:return"tryNext"!==e?[3,8]:(this.currentURLIndex+=1,this.currentURLIndex>=this.urls.length?[4,this.reconnectWithAction("recover")]:[3,6]);case 5:return[2,a.sent()];case 6:return f.default.debug("["+this.name+"] websocket url length: "+this.urls.length+" current index: "+this.currentURLIndex),i=this.urls[this.currentURLIndex],[4,this.createWebSocketConnection(i)];case 7:return a.sent(),[3,11];case 8:return"recover"!==e?[3,11]:(f.default.debug("["+this.name+"] request new urls"),r=this,[4,d.emitAsPromise(this,l.WebSocketManagerEvents.REQUEST_NEW_URLS)]);case 9:return r.urls=a.sent(),this.currentURLIndex=0,i=this.urls[this.currentURLIndex],[4,this.createWebSocketConnection(i)];case 10:a.sent(),a.label=11;case 11:return[2,!0];case 12:return o=a.sent(),f.default.error("["+this.name+"] reconnect failed",o.toString()),[4,this.reconnectWithAction(e)];case 13:return[2,a.sent()];case 14:return[2]}}))}))},t}(d.EventEmitter);t.AgoraWebSocketManager=p},function(e,t,n){"use strict";var r=n(18),i=n(38),o=n(79),a=n(44);function s(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var c=s(n(41));c.Axios=o,c.create=function(e){return s(a(c.defaults,e))},c.Cancel=n(45),c.CancelToken=n(93),c.isCancel=n(40),c.all=function(e){return Promise.all(e)},c.spread=n(94),e.exports=c,e.exports.default=c},function(e,t,n){"use strict";var r=n(18),i=n(39),o=n(80),a=n(81),s=n(44);function c(e){this.defaults=e,this.interceptors={request:new o,response:new o}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=s(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,i){return this.request(r.merge(i||{},{method:e,url:t,data:n}))}})),e.exports=c},function(e,t,n){"use strict";var r=n(18);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";var r=n(18),i=n(82),o=n(40),a=n(41);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(s(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,d=[],u=!1,l=-1;function f(){u&&c&&(u=!1,c.length?d=c.concat(d):l=-1,d.length&&p())}function p(){if(!u){var e=s(f);u=!0;for(var t=d.length;t;){for(c=d,d=[];++l<t;)c&&c[l].run();l=-1,t=d.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new g(e,t)),1!==d.length||u||s(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(43);e.exports=function(e,t,n){var i=n.config.validateStatus;!i||i(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(88),i=n(89);e.exports=function(e,t){return e&&!r(t)?i(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(18),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,a={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(18);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(45);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),o=1,a=function(){function e(e){this.lockingPromise=Promise.resolve(),this.locks=0,this.name="",this.lockId=o++,e&&(this.name=e),i.default.debug("[lock-"+this.name+"-"+this.lockId+"] is created.")}return Object.defineProperty(e.prototype,"isLocked",{get:function(){return this.locks>0},enumerable:!0,configurable:!0}),e.prototype.lock=function(){var e,t=this;this.locks+=1,i.default.debug("[lock-"+this.name+"-"+this.lockId+"] is locked, current queue "+this.locks+".");var n=new Promise((function(n){e=function(){t.locks-=1,i.default.debug("[lock-"+t.name+"-"+t.lockId+"] is not locked, current queue "+t.locks+"."),n()}})),r=this.lockingPromise.then((function(){return e}));return this.lockingPromise=this.lockingPromise.then((function(){return n})),r},e}();t.PromiseMutex=a},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(0),o=n(1),a=n(8),s=n(4),c=function(){};c.prototype.set=function(e,t){["BatteryLevel"].indexOf(e)>-1&&(this[e]=t)};var d=function(){var e=o.report.reportApiInvoke(null,{name:"checkSystemRequirements",options:arguments,tag:"tracer"}),t=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,n=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.msGetUserMedia||navigator.mozGetUserMedia||navigator.mediaDevices&&navigator.mediaDevices.getUserMedia,r=window.WebSocket,i=!!t&&!!n&&!!r,a=!1;s.isChrome()&&s.getBrowserVersion()>=58&&"iOS"!==s.getBrowserOS()&&(a=!0),s.isFireFox()&&s.getBrowserVersion()>=56&&(a=!0),s.isOpera()&&s.getBrowserVersion()>=45&&(a=!0),s.isSafari()&&s.getBrowserVersion()>=11&&(a=!0),s.isEdge()&&(a=!0),(s.isWeChatBrowser()||s.isQQBrowser())&&"iOS"!==s.getBrowserOS()&&(a=!0),s.isSupportedPC()||s.isSupportedMobile()||(a=!1);var c=i&&a;return e(null,c),c},u=new function(){var e=Object(a.b)();return e.states={UNINIT:"UNINIT",INITING:"INITING",INITED:"INITED"},e.state=e.states.UNINIT,e.batteryManager=null,e._init=function(t,n){e.state=e.states.INITING,navigator.getBattery?navigator.getBattery().then((function(n){e.batteryManager=n,t&&setTimeout((function(){t()}),0)})).catch((function(e){i.default.debug("navigator.getBattery is disabled",e),t&&t()})):(e.state=e.states.INITED,t&&t())},e._getBatteryStats=function(){var t={};return e.batteryManager&&e.batteryManager.level?t.BatteryLevel=Math.floor(100*e.batteryManager.level):t.BatteryLevel="UNSUPPORTED",t},e.getStats=function(t,n){var r=new c,i=e._getBatteryStats();i&&i.BatteryLevel&&r.set("BatteryLevel",i.BatteryLevel),t&&t(r)},e._init(),e},l=n(22),f=n(19),p=n(26),g=n(53),m=n(9),h=["live","rtc","web","interop","h264_interop","web-only"],v=["vp8","vp9","h264"],E=["aes-128-gcm","aes-256-gcm","aes-128-xts","aes-256-xts","aes-128-ecb","sm4-128-ecb","aes-256-gcm2","aes-128-gcm2"],S=n(11),_=n.n(S),y=n(7),R=n.n(y),T=n(13),I=n(5),b=n(10),A=n(20),O=n(6),C=n(14),N={1001:"FRAMERATE_INPUT_TOO_LOW",1002:"FRAMERATE_SENT_TOO_LOW",1003:"SEND_VIDEO_BITRATE_TOO_LOW",1005:"RECV_VIDEO_DECODE_FAILED",2001:"AUDIO_INPUT_LEVEL_TOO_LOW",2002:"AUDIO_OUTPUT_LEVEL_TOO_LOW",2003:"SEND_AUDIO_BITRATE_TOO_LOW",2005:"RECV_AUDIO_DECODE_FAILED",3001:"FRAMERATE_INPUT_TOO_LOW_RECOVER",3002:"FRAMERATE_SENT_TOO_LOW_RECOVER",3003:"SEND_VIDEO_BITRATE_TOO_LOW_RECOVER",3005:"RECV_VIDEO_DECODE_FAILED_RECOVER",4001:"AUDIO_INPUT_LEVEL_TOO_LOW_RECOVER",4002:"AUDIO_OUTPUT_LEVEL_TOO_LOW_RECOVER",4003:"SEND_AUDIO_BITRATE_TOO_LOW_RECOVER",4005:"RECV_AUDIO_DECODE_FAILED_RECOVER"},w={FramerateInput:1001,FramerateSent:1002,SendVideoBitrate:1003,VideoDecode:1005,AudioIntputLevel:2001,AudioOutputLevel:2002,SendAudioBitrate:2003,AudioDecode:2005},L=function(e){var t={remoteStreamStorage:{},localStreamStorage:{}};return t.gatewayClient=e,t.checkAudioOutputLevel=function(e){return!(e&&parseInt(e.audioRecvBytesDelta)>0&&parseInt(e.audioDecodingNormalDelta)>0&&0===parseInt(e.audioOutputLevel))},t.checkAudioIntputLevel=function(e){return!e||0!==parseInt(e.audioInputLevel)},t.checkFramerateInput=function(e,t){if(!e||!t.attributes)return!0;var n=parseInt(t.attributes.maxFrameRate),r=parseInt(e.googFrameRateInput);return!n||!r||!(n>10&&r<5||n<10&&n>=5&&r<=1)},t.checkFramerateSent=function(e){return!(e&&parseInt(e.googFrameRateInput)>5&&parseInt(e.googFrameRateSent)<=1)},t.checkSendVideoBitrate=function(e){return!e||0!==parseInt(e.videoSendBytesDelta)},t.checkSendAudioBitrate=function(e){return!e||0!==parseInt(e.audioSendBytesDelta)},t.checkVideoDecode=function(e){return!e||0===parseInt(e.videoRecvBytesDelta)||0!==parseInt(e.googFrameRateDecoded)},t.checkAudioDecode=function(e){return!e||0===parseInt(e.audioRecvBytesDelta)||0!==parseInt(e.audioDecodingNormalDelta)},t.record=function(e,n,r,i,o){r[e]||(r[e]={isPrevNormal:!0,record:[]});var a=r[e],s=t["check"+e](n,o);if(a.record.push(s),a.record.length>=5){a.isCurNormal=-1!==a.record.indexOf(!0);var c=w[e];a.isPrevNormal&&!a.isCurNormal&&t.gatewayClient.dispatchEvent({type:"exception",code:c,msg:N[c],uid:i}),!a.isPrevNormal&&a.isCurNormal&&t.gatewayClient.dispatchEvent({type:"exception",code:c+2e3,msg:N[c+2e3],uid:i}),a.isPrevNormal=a.isCurNormal,a.record=[]}},t.setLocalStats=function(e){var n={};Object.keys(e).map((function(r){var i=e[r],o=t.gatewayClient.localStreams[parseInt(r)],a=t.localStreamStorage[r]||{};o&&o.hasVideo()&&(t.record("SendVideoBitrate",i.videoStats,a,r),t.record("FramerateInput",i.videoStats,a,r,o),t.record("FramerateSent",i.videoStats,a,r)),o&&o.hasAudio()&&(t.record("AudioIntputLevel",i.audioStats,a,r),t.record("SendAudioBitrate",i.audioStats,a,r)),n[r]=a})),t.localStreamStorage=n},t.setRemoteStats=function(n){var r={};Object.keys(n).map((function(i){var o=n[i],a=e.remoteStreams[i],s=t.remoteStreamStorage[i]||{};a&&a.hasVideo()&&a.isPlaying()&&t.record("VideoDecode",o.videoStats,s,i),a&&a.hasAudio()&&a.isPlaying()&&(t.record("AudioOutputLevel",o.audioStats,s,i),t.record("AudioDecode",o.audioStats,s,i)),r[i]=s})),t.remoteStreamStorage=r},t};function D(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return k(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i,o=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){a=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(a)throw i}}}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var M,P=n(3),x=new function(){var e=Object(a.b)();return e.states={UNINIT:"UNINIT",INITING:"INITING",INITED:"INITED"},e.state=e.states.UNINIT,e.type=null,e.lastConnectedAt=null,e.lastDisconnectedAt=null,e.lastTypeChangedAt=null,e.networkChangeTimer=null,e._init=function(t,n){if(e.state=e.states.INITING,navigator.connection&&navigator.connection.addEventListener){var r=e._getNetworkInfo();e.type=r&&r.type,e.state=e.states.INITED,t&&t()}else e.state=e.states.UNINIT,n&&n("DO_NOT_SUPPORT")},e._getNetworkInfo=function(){return navigator.connection},e._reloadNetworkInfo=function(){var t=e._getNetworkInfo(),n=t&&t.type||"UNSUPPORTED",r=Date.now();if(n!==e.type){e.lastTypeChangedAt=r,"none"==n?e.lastDisconnectedAt=r:"none"==e.type&&(e.lastConnectedAt=r),e.type=n;var i={type:"networkTypeChanged",networkType:n};e.dispatchEvent(i)}},e.getStats=function(t,n){var r={},i=e._getNetworkInfo();i&&(r.NetworkType=i.type||"UNSUPPORTED"),setTimeout((function(){t(r)}),0)},e._init((function(){navigator.connection.addEventListener("change",(function(){e._reloadNetworkInfo()})),e.networkChangeTimer=setInterval((function(){e._reloadNetworkInfo()}),5e3)}),(function(e){})),e},U=n(55),j=n(16),V=n(56),B=n.n(V),F=n(21),W=function(){return"HTTPS"===(M||M||(M=(window.location.protocol.split(":")[0]||"").toUpperCase()))},G=function(){return void 0!==window.isSecureContext},H="host",q=function(e){var t={key:void 0,highStream:null,lowStream:null,lowStreamParameter:null,isDualStream:!1,highStreamState:2,lowStreamState:2,proxyServer:null,turnServers:[],useProxyServer:!1,useLocalAccessPoint:!1};t.mode=e.mode,t.codec=e.codec,t.clientId=Object(b.generateSessionId)().slice(0,5),t.uintUid=null,t.customReportCount=0;e=R()({},e);if(t.aespassword=null,t.aesmode="none",t.hasPublished=!1,t.getSessionId=function(){return e.sessionId},t.startChannelMediaRelay=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{callback:function(e){if(e)return r&&r(e);r&&r()},name:"Client.startChannelMediaRelay",options:arguments,tag:"tracer"});if(!(n instanceof m.ChannelMediaRelayConfiguration))throw"Configration should be instance of [ChannelMediaRelayConfiguration]";var a=n.getSrcChannelMediaInfo(),s=n.getDestChannelMediaInfos();if(Object(P.isEmpty)(a))throw"srcChannelMediaInfo should not be empty";if(Object(P.isEmpty)(s)||0===s.length)throw"destChannelMediaInfos should not be empty";if(!Object(b.is32Uint)(a.uid))throw"Invalid uid in srcChannelMediaInfo";if(!Object(P.isValidChannelName)(a.channelName))throw"Invalid channelName in srcChannelMediaInfo";if(a.token&&!Object(P.isValidToken)(a.token))throw"Invalid token in srcChannelMediaInfo";if(s.forEach((function(e){if(!Object(b.is32Uint)(e.uid))throw"Invalid uid in destChannelMediaInfo";if(!Object(P.isValidChannelName)(e.channelName))throw"Invalid channelName in destChannelMediaInfo";if(e.token&&!Object(P.isValidToken)(e.token))throw"Invalid token in destChannelMediaInfo"})),t.gatewayClient.state!==T.a.CONNECTED)throw"startChannelMediaRelay should be used after join";t.gatewayClient.startChannelMediaRelay(n).then((function(){i&&i()})).catch((function(e){i&&i(e)}))},t.updateChannelMediaRelay=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{callback:function(e){if(e)return r&&r(e);r&&r()},name:"Client.updateChannelMediaRelay",options:arguments,tag:"tracer"});if(!(n instanceof m.ChannelMediaRelayConfiguration))throw"Configration should be instance of [ChannelMediaRelayConfiguration]";var a=n.getSrcChannelMediaInfo(),s=n.getDestChannelMediaInfos();if(Object(P.isEmpty)(a))throw"srcChannelMediaInfo should not be empty";if(Object(P.isEmpty)(s)||0===s.length)throw"destChannelMediaInfos should not be empty";if(!Object(b.is32Uint)(a.uid))throw"Invalid uid in srcChannelMediaInfo";if(!Object(P.isValidChannelName)(a.channelName))throw"Invalid channelName in srcChannelMediaInfo";if(a.token&&!Object(P.isValidToken)(a.token))throw"Invalid token in srcChannelMediaInfo";if(s.forEach((function(e){if(!Object(b.is32Uint)(e.uid))throw"Invalid uid in destChannelMediaInfo";if(!Object(P.isValidChannelName)(e.channelName))throw"Invalid channelName in destChannelMediaInfo";if(e.token&&!Object(P.isValidToken)(e.token))throw"Invalid token in destChannelMediaInfo"})),t.gatewayClient.state!==T.a.CONNECTED)throw"updateChannelMediaRelay should be used after join";t.gatewayClient.updateChannelMediaRelay(n).then((function(){i&&i()})).catch((function(e){i&&i(e)}))},t.stopChannelMediaRelay=function(n){var r=o.report.reportApiInvoke(e.sessionId,{callback:function(e){if(e)return n&&n(e);n&&n()},name:"Client.stopChannelMediaRelay",options:arguments,tag:"tracer"});t.gatewayClient.stopChannelMediaRelay().then((function(){r&&r()})).catch((function(e){r&&r(e)}))},t.getConnectionState=function(){var n=o.report.reportApiInvoke(e.sessionId,{name:"Client.getConnectionState",options:arguments,tag:"tracer"}),r=T.a.connetionStateMap[t.gatewayClient.state];return n(),r},t.setClientRole=function(n,r){var a=o.report.reportApiInvoke(e.sessionId,{callback:r,name:"Client.setClientRole",options:arguments,tag:"tracer"});if(Object(P.checkValidEnum)(n,"setClientRole",[H,"audience"]),"rtc"===t.mode){var s="RTC mode can not use setClientRole";return i.default.warning("[".concat(t.clientId,"] ").concat(s)),a&&a(s)}t.gatewayClient&&t.gatewayClient.state===T.a.CONNECTED?("audience"===n&&(0===this.highStreamState?this._unpublish(this.highStream,(function(){a&&a(null,{role:n})}),(function(e){a&&a(e)})):t.gatewayClient.setClientRole("audience",a)),n===H&&t.gatewayClient.setClientRole(H,a)):(t.gatewayClient.role=n,a&&a(null,{role:n}))},t.getGatewayInfo=function(e){if(t.gatewayClient.state!==T.a.CONNECTED){var n="Client is not in connected state";return i.default.error("[".concat(t.clientId,"] ").concat(n)),void e(n)}t.gatewayClient.getGatewayInfo((function(t){e(null,t)}),e)},t.renewToken=function(n,r,a){var s=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return i.default.error("Failed to renew token ".concat(e),t),a&&a(e);r&&r(t)},name:"Client.renewToken",options:arguments,tag:"tracer"});if(!Object(P.isValidToken)(n))throw new Error("Invalid token: Token is of the string type .Length of the string: [1,255]. ASCII characters only.");return t.gatewayClient?t.key?(t.key=n,void t.gatewayClient.renewToken(n,(function(e){return s(null,e)}),s)):(i.default.error("[".concat(t.clientId,"] renewToken should not be called before user join")),s(I.default.INVALID_OPERATION)):(i.default.error("[".concat(t.clientId,"] renewToken Failed. GatewayClient not Exist")),s(I.default.INVALID_OPERATION))},t.setLowStreamParameter=function(n){var r=o.report.reportApiInvoke(e.sessionId,{name:"Client.setLowStreamParameter",options:arguments,tag:"tracer"});Object(P.checkValidObject)(n,"param");var a=n.width,s=n.height,c=n.framerate,d=n.bitrate;Object(P.isEmpty)(a)||Object(P.checkValidNumber)(a,"width"),Object(P.isEmpty)(s)||Object(P.checkValidNumber)(s,"height"),Object(P.isEmpty)(c)||Object(P.checkValidNumber)(c,"framerate"),Object(P.isEmpty)(d)||Object(P.checkValidNumber)(d,"bitrate",1,1e7),(!a&&s||a&&!s)&&i.default.warning("[".concat(t.clientId,"] The width and height parameters take effect only when both are set")),t.lowStreamParameter=n,r()},t.init=function(t,n,r){var i=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return r&&r(e);n&&n(t)},name:"Client.init",options:arguments,tag:"tracer"});Object(P.checkValidString)(t),Object(s.isChromeKernel)()&&Object(s.getChromeKernelVersion)()<=48?r?i(I.default.BAD_ENVIRONMENT):Object(b.popBanTip)():(e.appId=t,e.sessionId=Object(b.generateSessionId)(),i())},t.setTurnServer=function(n){var r=o.report.reportApiInvoke(e.sessionId,{name:"Client.setTurnServer",options:arguments,tag:"tracer"});if(t.gatewayClient&&t.gatewayClient.state!==T.a.DISCONNECTED)throw new Error("Set turn server before join channel");if(t.useProxyServer)throw new Error("You have already set the proxy");if(t.useLocalAccessPoint)throw new Error("You have already set the local proxy");n instanceof Array||(n=[n]);var a=[];n.map((function(e,n){Object(P.checkValidObject)(e,"turnServer");var r=e.turnServerURL,o=e.username,s=e.password,c=e.udpport,d=e.forceturn,u=e.tcpport;if(Object(P.checkValidString)(r,"turnServerURL"),Object(P.checkValidString)(o,"username"),Object(P.checkValidString)(s,"password"),Object(P.checkValidString)(c,"udpport"),0===parseInt(c))throw new Error("udpport should not be ".concat(c));Object(P.isEmpty)(d)||Object(P.checkValidBoolean)(d,"forceturn");var l={mode:"manual"};if(l.url=r,l.udpport=c,l.username=o,l.credential=s,l.forceturn=d||!1,!Object(P.isEmpty)(u)){if(Object(P.checkValidString)(u,"tcpport"),0===parseInt(u))throw new Error("tcpport should not be ".concat(u));l.tcpport=u,i.default.info("[".concat(t.clientId,"] Set turnserver[").concat(n,"] tcpurl. ").concat(l.url,":").concat(l.tcpport))}i.default.info("[".concat(t.clientId,"] Set turnserver[").concat(n,"] udpurl. ").concat(l.url,":").concat(l.udpport,",username: ").concat(l.username)),a.push(l)})),t.turnServers=a,r()},t.setProxyServer=function(n){var r=o.report.reportApiInvoke(e.sessionId,{name:"Client.setProxyServer",options:arguments,tag:"tracer"});if(t.gatewayClient&&t.gatewayClient.state!==T.a.DISCONNECTED)throw new Error("Set proxy server before join channel");if(!n)throw new Error("Do not set the proxyServer parameter as empty");if(t.useProxyServer)throw new Error("You have already set the proxy");if(t.useLocalAccessPoint)throw new Error("You have already set the local proxy");Object(P.checkValidString)(n,"proxyServer"),t.proxyServer=n,o.report.setProxyServer(n),i.default.setProxyServer(n),r()},t.startProxyServer=function(n){var r=o.report.reportApiInvoke(e.sessionId,{name:"Client.startProxyServer",options:arguments,tag:"tracer"});if(t.gatewayClient&&t.gatewayClient.state!==T.a.DISCONNECTED)throw new Error("Start proxy server before join channel");if(t.proxyServer)throw new Error("You have already set the proxy");if(t.useLocalAccessPoint)throw new Error("You have already set the local proxy");t.useProxyServer=!0,t.proxyServerType=n||1,r()},t.stopProxyServer=function(){var n=o.report.reportApiInvoke(e.sessionId,{name:"Client.stopProxyServer",options:arguments,tag:"tracer"});if(t.gatewayClient&&t.gatewayClient.state!==T.a.DISCONNECTED)throw new Error("Stop proxy server after leave channel");o.report.setProxyServer(),i.default.setProxyServer(),t.turnServers=[],t.proxyServer=null,t.useProxyServer=!1,t.proxyServerType=null,n()},t.setEncryptionSecret=function(n){var r=o.report.reportApiInvoke(e.sessionId,{name:"Client.setEncryptionSecret",options:arguments,tag:"tracer"});Object(P.checkValidString)(n,"password");var a=new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})");a.test(n)||i.default.warning("The secret is not strong:\n      The secret must contain at least 1 lowercase alphabetical character,\n      The secret must contain at least 1 uppercase alphabetical character,\n      The secret must contain at least 1 numeric character,\n      The secret must contain at least one special character,\n      The secret must be eight characters or longer,\n      "),t.aespassword=n,r()},t.setEncryptionMode=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{name:"Client.setEncryptionMode",options:arguments,tag:"tracer"});if(Object(P.checkValidString)(n,"encryptionMode"),-1===E.indexOf(n))throw new Error('Invalid encryptionMode: encryptionMode should be "aes-128-xts" | "aes-256-xts" | "aes-128-ecb" | "sm4-128-ecb" | "aes-128-gcm" | "aes-256-gcm" | "aes-128-gcm2" | "aes-256-gcm2"');var a=["aes-128-gcm2","aes-256-gcm2"];if(-1!==a.indexOf(n)){if(!r||!(r instanceof Uint8Array&&32===r.length))throw Error("salt must be an Uint8Array and exactly equal to 32 bytes")}else if(r)throw new Error("Only ".concat("aes-128-gcm2"," and ").concat("aes-256-gcm2"," support use salt"));r&&(t.aesSalt=Object(b.uint8ArrayToBase64)(r)),t.aesmode=n,i()},t.configPublisher=function(n){var r=o.report.reportApiInvoke(e.sessionId,{name:"Client.configPublisher",options:arguments,tag:"tracer"});Object(P.checkValidObject)(n,"config");var i=n.width,a=n.height,s=n.framerate,c=n.bitrate,d=n.publisherUrl;Object(P.checkValidNumber)(i,"width"),Object(P.checkValidNumber)(a,"height"),Object(P.checkValidNumber)(s,"framerate"),Object(P.checkValidNumber)(c,"bitrate",1,1e7),d&&Object(P.checkValidString)(d,"publisherUrl"),t.gatewayClient.configPublisher(n),r()},t.enableDualStream=function(n,r){var a=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return r&&r(e);n&&n(t)},name:"Client.enableDualStream",options:arguments,tag:"tracer"});return"iOS"===Object(s.getBrowserOS)()?(o.report.streamSwitch(e.sessionId,{lts:(new Date).getTime(),isdual:!0,succ:!1}),a(I.default.IOS_NOT_SUPPORT)):Object(s.isWeChatBrowser)()?(o.report.streamSwitch(e.sessionId,{lts:(new Date).getTime(),isdual:!0,succ:!1}),a(I.default.WECHAT_NOT_SUPPORT)):(o.report.streamSwitch(e.sessionId,{lts:(new Date).getTime(),isdual:!0,succ:!0}),t.isDualStream=!0,t.highStream&&(t.highStream.isDualStream=!0),void(0===t.highStreamState?t._publishLowStream((function(e){return a(null,e)}),(function(e){i.default.warning("[".concat(t.clientId,"]"),e),a(I.default.ENABLE_DUALSTREAM_FAILED)})):1===t.highStreamState?a(I.default.STILL_ON_PUBLISHING):a(null)))},t.disableDualStream=function(n,r){var a=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return r&&r(e);n&&n(t)},name:"Client.disableDualStream",options:arguments,tag:"tracer"});o.report.streamSwitch(e.sessionId,{lts:(new Date).getTime(),isdual:!1,succ:!0}),t.isDualStream=!1,t.highStream&&(t.highStream.isDualStream=!1),0===t.highStreamState?t._unpublishLowStream((function(){t.highStream.lowStream=null,a()}),(function(e){i.default.warning("[".concat(t.clientId,"]"),e),a(I.default.DISABLE_DUALSTREAM_FAILED)})):1===t.highStreamState?a(I.default.STILL_ON_PUBLISHING):a()},t._getLowStream=function(e,n){t.lowStream?e(t.lowStream):t._createLowStream((function(n){t.lowStream=n,e(t.lowStream)}),n)},t._createLowStream=function(e,n){if(t.highStream&&t.highStream.stream){var r=R()({},t.highStream.params);if(r.streamID+=1,r.audio=!1,r.video)if(t.highStream.stream.getVideoTracks()[0]){var i=new l.a(r);i.isLowStream=!0,i.streamId=t.highStream.getId()+1;var o={};t.lowStreamParameter&&(o=R()({},t.lowStreamParameter)),o.width&&o.height||(o.width=160,o.height=120),o.framerate=o.framerate||15,o.bitrate=o.bitrate||50,i.setVideoProfileCustomPlus(o);try{var a=B()(t.highStream,{width:i.videoConstraint.width.ideal,height:i.videoConstraint.height.ideal,framerate:i.videoConstraint.frameRate});return i.stream=a,t.highStream.lowStream=i,t.highStream.userMuteVideo&&i.muteVideo(),e&&e(i)}catch(e){return n&&n(e)}}else n&&n(I.default.HIGH_STREAM_NOT_VIDEO_TRACE);else n&&n(I.default.HIGH_STREAM_NOT_VIDEO_TRACE)}else n&&n(I.default.HIGH_STREAM_NOT_VIDEO_TRACE)},t._publishLowStream=function(e,n){return 2!==t.lowStreamState?n&&n(I.default.LOW_STREAM_ALREADY_PUBLISHED):t.highStream&&t.highStream.hasScreen()?n&&n(I.default.SHARING_SCREEN_NOT_SUPPORT):void t._getLowStream((function(r){t.lowStreamState=1,t.gatewayClient.publish(r,{streamType:1},(function(){t.lowStreamState=0,e&&e()}),(function(e){1===t.lowStreamState&&(t.lowStreamState=2),i.default.debug("[".concat(t.clientId,"] publish low stream failed")),n&&n(e)}))}),n)},t._unpublishLowStream=function(e,n){if(0!==t.lowStreamState)return n&&n(I.default.LOW_STREAM_NOT_YET_PUBLISHED);t.lowStream&&(t.gatewayClient.unpublish(t.lowStream,{streamType:1},(function(){}),(function(e){i.default.debug("[".concat(t.clientId,"] unpublish low stream failed")),n&&n(e)})),t.lowStream.close(),t.lowStream=null,t.lowStreamState=2,e&&e())},t.join=function(n,r,a,c,u,l){c&&"function"==typeof c&&(l=u,u=c,c=null);var f=d(),p=Object(s.getBrowserInfo)();i.default.debug(p,",Support: "+f);var g=W(),m="The website must be running in a secure context (About secure context: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts ), otherwise the media collection will be restricted by the browser",h=G()?window.isSecureContext:"Browser Not Support",v=function(){i.default.warning(m)};G()?window.isSecureContext||v():g||v();var E=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return l&&l(e);u&&u(t)},name:"Client.join",options:arguments,getStates:function(){return{isHttps:g,isSecureContext:h}},tag:"tracer"});if(n&&!Object(P.isValidToken)(n))return i.default.warning("[".concat(t.clientId,"] Param channelKey should be string")),E(I.default.INVALID_PARAMETER);if(!Object(P.isValidChannelName)(r))return i.default.error("Invalid Channel Name ".concat(r)),i.default.warning("[".concat(t.clientId,"] The length must be within 64 bytes. The supported characters: a-z,A-Z,0-9,space,!, #, $, %, &, (, ), +, -, :, ;, <, =, ., >, ?, @, [, ], ^, _,  {, }, |, ~, ,")),E(I.default.INVALID_PARAMETER);if("string"==typeof r&&""===r)return i.default.warning("[".concat(t.clientId,"] Param channel should not be empty")),E(I.default.INVALID_PARAMETER);if(c&&!Object(P.isValidString)(c))return i.default.warning("[".concat(t.clientId,"] optionalInfo should be string")),E(I.default.INVALID_PARAMETER);if(a&&!Object(b.is32Uint)(a)&&!Object(P.isValidString)(a,1,255))return i.default.error("Invalid UID ".concat(a," ").concat(_()(a))),i.default.warning("[".concat(t.clientId,"] [String uid] Length of the string: [1,255]. ASCII characters only. [Number uid] The value range is 32Uint")),E(I.default.INVALID_PARAMETER);if("string"==typeof a&&0==a.length)return i.default.warning("[".concat(t.clientId,"] String uid should not be empty")),E(I.default.INVALID_PARAMETER);if("string"==typeof a&&a.length>256)return i.default.warning("[".concat(t.clientId,"] Length of string uid should be less than 255")),E(I.default.INVALID_PARAMETER);i.default.stopWaitJoin(),t.highStream=null,t.lowStream=null,t.lowStreamParameter=null,t.isDualStream=!1,t.highStreamState=2,t.lowStreamState=2;var S=Date.now(),y=setTimeout((function(){if(1!=t.gatewayClient.hasJoined){i.default.debug("[".concat(t.clientId,"] The time to join the channel is greater than 5 seconds "));var n=Date.now();o.report.joinChannelTimeOut({lts:n,sid:e.sessionId,cname:r,cid:O&&O.cid,uid:O.uid||("string"==typeof a?void 0:a),elapse:n-S,timeout:5})}}),5e3),O={clientId:t.clientId,appId:e.appId,sid:e.sessionId,cname:r,uid:a,turnServers:t.turnServers.concat(),proxyServer:t.proxyServer,token:n||e.appId,useProxyServer:t.useProxyServer,useLocalAccessPoint:t.useLocalAccessPoint,proxyServerType:t.proxyServerType,optionalInfo:c};if("string"==typeof a&&(O.stringUid=a,t.uintUid?(O.uid=t.uintUid,delete t.uintUid):O.uid=0),t.aespassword&&"none"!==t.aesmode&&R()(O,{aespassword:t.aespassword,aesmode:t.aesmode}),t.aesSalt&&(O.aes_salt=t.aesSalt),o.report.sessionInit(e.sessionId,{lts:(new Date).getTime(),cname:r,appid:e.appId,mode:e.mode,succ:!0}),t.onSuccess=function(e){clearTimeout(y),t.rtcStatsCollector.startNetworkQualityTimer(),t.onSuccess=null,E(null,e)},t.onFailure=function(e){return E(e)},t.channel=r,t.gatewayClient.state!==T.a.DISCONNECTED)return i.default.error("[".concat(t.clientId,"] Client already in connecting/connected state")),E(I.default.INVALID_OPERATION),void o.report.joinGateway(e.sessionId,{lts:Date.now(),succ:!1,ec:I.default.INVALID_OPERATION,addr:null});t.gatewayClient.state=T.a.CONNECTING;var C=function(o,a){i.default.info("[".concat(t.clientId,"] Joining channel: ").concat(r)),t.gatewayClient.dispatchEvent({type:"config-distribute",config:a,joinInfo:O}),t.key=n||e.appId,O.cid=o.cid,O.uid||(O.uid=o.uid),O.vid=o.vid,O.clientId=t.clientId,O.apResponse=o.res,o.uni_lbs_ip&&o.uni_lbs_ip[1]&&(O.uni_lbs_ip=o.uni_lbs_ip[1]),O.gatewayAddr=o.gateway_addr,t.joinInfo=O,t.gatewayClient.join(O,t.key,(function(e){i.default.info("[".concat(t.clientId,"] Join channel ").concat(r," success, join with uid: ").concat(e,".")),t.onSuccess=null,t.rtcStatsCollector.startNetworkQualityTimer(),E(null,e)}),(function(e){return E(e)}))};O.stringUid&&!O.uid?(t.userAccountReq&&!t.userAccountReq.isFinished()&&t.userAccountReq.cancel(),t.userAccountReq=Object(A.getUserAccount)(O,t.gatewayClient),t.userAccountReq.then((function(e){i.default.debug("getUserAccount Success ".concat(e.url," ").concat(O.stringUid," => ").concat(e.uid)),O.uid=e.uid,Object(A.getGatewayList)(O,C,(function(e){return E(e)}))})).catch((function(e){i.default.error("getUserAccount rejected",e),E(e)}))):Object(A.getGatewayList)(O,C,(function(e){return E(e)}))},t.renewChannelKey=function(n,r,a){var s=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return a&&a(e);r&&r(t)},name:"Client.renewChannelKey",options:arguments,tag:"tracer"});Object(P.checkValidString)(n,"key",1,2047),void 0===t.key?(i.default.error("[".concat(t.clientId,"] renewChannelKey should not be called before user join")),s(I.default.INVALID_OPERATION)):(t.key=n,t.gatewayClient.joinInfo.token=n,t.gatewayClient.key=n,t.gatewayClient.recover(),s())},t.leave=function(n,a){t.gatewayClient.isFirstSuccess=!0,t.gatewayClient.hasInvokeLeave=!0;var s=!1,c=o.report.reportApiInvoke(e.sessionId,{callback:function(e,r){if(e)return a&&a(e);t.gatewayClient.reconnectingCS=!1,t.gatewayClient.state=T.a.DISCONNECTED,clearTimeout(Object(A._getReconnectCSTimer)(t.clientId)),t._renewSession(),t.rtcStatsCollector.clearNetworkQualityTimer(),n&&n(r)},name:"Client.leave",options:arguments,tag:"tracer"});i.default.info("[".concat(t.clientId,"] Leaving channel")),t.userAccountReq&&!t.userAccountReq.isFinished()&&(t.userAccountReq.cancel(),t.gatewayClient.state===T.a.CONNECTING&&(t.gatewayClient.state=T.a.DISCONNECTED)),t._terminateLiveStreaming(),t.gatewayClient.leave((function(e){s=!0,c(null,e)}),c),setTimeout((function(){s||(t.gatewayClient.socket&&(t.gatewayClient.socket.close(),t.gatewayClient.socket=null),t.gatewayClient.state=T.a.DISCONNECTED,c(null,"LEAVE_MSG_TIMEOUT"))}),Object(r.getParameter)("LEAVE_MSG_TIMEOUT"))},t._renewSession=function(){var n=Object(b.generateSessionId)();if(i.default.debug("renewSession ".concat(e.sessionId," => ").concat(n)),e.sessionId=n,t.gatewayClient.peerPublishDurationMap.clear(),t.joinInfo&&(t.joinInfo.sid=n),t.gatewayClient&&(t.gatewayClient.joinInfo&&(t.gatewayClient.joinInfo.sid=n),t.gatewayClient.localStreams))for(var r in t.gatewayClient.localStreams){var o=t.gatewayClient.localStreams[r];o&&(o.sid=n)}},t._publish=function(n,o,a,s){if(2!==t.highStreamState)return i.default.warning("[".concat(t.clientId,"] Can't publish stream when stream already publish ").concat(n.getId())),a&&a(I.default.STREAM_ALREADY_PUBLISHED);if(0===t.turnServers.length&&Object(r.getParameter)("FORCE_TURN")&&!Object(r.getParameter)("TURN_ENABLE_TCP")&&!Object(r.getParameter)("TURN_ENABLE_UDP"))throw new Error("force TURN With No TURN Configuration");i.default.info("[".concat(t.clientId,"] Publishing stream, uid ").concat(n.getId())),t.highStream=n,t.highStreamState=1,t.highStream.streamId=t.joinInfo.stringUid||t.joinInfo.uid,t.hasPublished=!1;var c=function(n,r,o){t.gatewayClient.publish(n,{streamType:0},(function(){n.sid=e.sessionId,t.highStreamState=0,i.default.info("[".concat(t.clientId,"] Publish success, uid: ").concat(n.getId())),t.highStream&&(t.highStream.isDualStream=t.isDualStream),t.isDualStream?t._publishLowStream((function(){r&&r()}),(function(e){i.default.warning("[".concat(t.clientId,"] "),e),j.a.replaceWithCanvasTrack(n).then((function(){r&&r()}))})):j.a.replaceWithCanvasTrack(n).then((function(){r&&r()}))}),o)};"audience"!==t.gatewayClient.role||"live"!==t.mode||s?c(n,o,a):t.gatewayClient.setClientRole(H,(function(e){if(e)return a&&a(e);c(n,o,a)}))},t._unpublish=function(e,n,r,o){if(0!==t.highStreamState)return i.default.warning("[".concat(t.clientId,"] Can't unpublish stream when stream not publish")),r&&r(I.default.STREAM_NOT_YET_PUBLISHED);i.default.info("[".concat(t.clientId,"] Unpublish stream, uid ").concat(e.getId()));var a=function(e,n,r){t.isDualStream&&t.lowStream&&t._unpublishLowStream(null,r),t.gatewayClient.unpublish(e,{streamType:0},(function(){t.highStreamState=2,i.default.info("[".concat(t.clientId,"] Unpublish stream success, uid: ").concat(e.getId())),t.gatewayClient.dispatchEvent({type:"stream-unpublished",stream:e}),n&&n()}),(function(n){i.default.info("[".concat(t.clientId,"] Unpublish stream fail, uid: ").concat(e.getId())),r&&r(n)}))};t.gatewayClient.role!==H||"live"!==t.mode||o?a(e,n,r):t.gatewayClient.setClientRole("audience",(function(t){if(t)return r&&r(t);a(e,n,r)}))},t.publish=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{callback:function(e,n){if(e)return 1===t.highStreamState&&"REQUEST_ABORT"!==e&&(t.highStreamState=2),r&&r(e)},name:"Client.publish",tag:"tracer",options:{stream:"too long to show",onFailure:!!r}});2===t.highStreamState?n._hasVideoTracks()||n._hasAudioTracks()?(t.gatewayClient.publishRequestId=Object(b.generateId)(),t._publish(n,(function(e){return i(null,e)}),(function(e){return i(e)}))):i(I.default.NO_TRACK_IN_STREAM):i(I.default.STREAM_ALREADY_PUBLISHED)},t.unpublish=function(n,r,i){var a=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return r&&r(e);i&&i(t)},name:"Client.unpublish",tag:"tracer",options:{stream:"too long to show",onFailure:!!r}});0===t.highStreamState?(t.gatewayClient.publishRequestId=null,t._unpublish(n,(function(e){return a(null,e)}),(function(e){return a(e)}))):a(I.default.STREAM_NOT_YET_PUBLISHED)},t.subscribe=function(n,r,a){var c=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return a&&a(e)},name:"Client.subscribe",tag:"tracer",options:{stream:"too long to show",options:r,onFailure:!!a}});"function"==typeof r&&(a=r,r=null),Object(P.checkValidObject)(n,"stream"),Object(P.isEmpty)(r)||(Object(P.checkValidObject)(r,"options"),Object(P.isEmpty)(r.video)||Object(P.checkValidBoolean)(r.video,"options.video"),Object(P.isEmpty)(r.audio)||Object(P.checkValidBoolean)(r.audio,"options.audio"));var d={video:!0,audio:!0};if(!Object(P.isEmpty)(r)){if(Object(s.isSafari)()&&(!r.video||!r.audio)){var u="SAFARI_NOT_SUPPORTED_FOR_TRACK_SUBSCRIPTION";return i.default.error("[".concat(t.clientId,"] "),u),void c(u)}if(!Object(P.isEmpty)(r.video)&&!Object(P.isValidBoolean)(r.video)||!Object(P.isEmpty)(r.audio)&&!Object(P.isValidBoolean)(r.audio)||!1===r.audio&&!1===r.video){u="INVALID_PARAMETER ".concat(JSON.stringify(r));return i.default.error("[".concat(t.clientId,"] "),u),void c(u)}}n.subscribeOptions?(R()(n.subscribeOptions,d,r),t.gatewayClient.subscribeChange(n,(function(e){return c(null,e)}),c)):(t.gatewayClient.subscribeRequestId.set(n.getId(),Object(b.generateId)()),n.subscribeOptions=R()({},d,r),t.gatewayClient.subscribe(n,(function(e){return c(null,e)}),c))},t.unsubscribe=function(n,r){var a=o.report.reportApiInvoke(e.sessionId,{callback:function(e,t){if(e)return r&&r(e)},name:"Client.unsubscribe",tag:"tracer",options:{stream:"too long to show",onFailure:!!r}});i.default.info("[".concat(t.clientId,"] Unsubscribe stream, uid: ").concat(n.getId())),t.gatewayClient.subscribeRequestId.delete(n.getId()),t.gatewayClient.unsubscribe(n,(function(e){return a(null,e)}),a)},t.setRemoteVideoStreamType=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{name:"Client.setRemoteVideoStreamType",tag:"tracer",options:{stream:"too long to show",streamType:r}});Object(P.checkValidEnum)(r,"streamType",[0,1]),t.gatewayClient.setRemoteVideoStreamType(n,r),i()},t.setStreamFallbackOption=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{name:"Client.setStreamFallbackOption",tag:"tracer",options:{stream:"too long to show",fallbackType:r}});Object(P.checkValidEnum)(r,"fallbackType",[0,1,2]),t.gatewayClient.setStreamFallbackOption(n,r),i()},t.enableAudioVolumeIndicator=function(n,r){var a=o.report.reportApiInvoke(e.sessionId,{name:"Client.enableAudioVolumeIndicator",options:arguments,tag:"tracer"});n=n||2e3,r=r||3,Object(P.checkValidNumber)(r,"smooth",1,100),Object(P.checkValidNumber)(n,"interval",50,1e5),t.audioVolumeIndication=t.audioVolumeIndication||{enabled:!0},t.audioVolumeIndication.interval=n,t.audioVolumeIndication.smooth=r,t.audioVolumeIndication={interval:n,smooth:r},i.default.info("[".concat(t.clientId,"] enableAudioVolumeIndicator interval ").concat(n," smooth ").concat(r)),t.gatewayClient.enableAudioVolumeIndicator(n,r),a()},t.getNetworkStats=function(e,n){return i.default.deprecate("[".concat(t.clientId,"] client.getNetworkStats is deprecated. Use client.getTransportStats instead.")),x.getStats(e,n)},t.getSystemStats=function(e,t){return u.getStats(e,t)},t.getRecordingDevices=function(e,t){return f.a.getRecordingDevices(e,t)},t.getPlayoutDevices=function(e,t){return f.a.getPlayoutDevices(e,t)},t.getCameras=function(e,t){return f.a.getCameras(e,t)},t.getRemoteAudioStats=function(e,n){return t.rtcStatsCollector.getRemoteAudioStats(e,n)},t.getLocalAudioStats=function(e,n){return t.rtcStatsCollector.getLocalAudioStats(e,n)},t.getRemoteVideoStats=function(e,n){return t.rtcStatsCollector.getRemoteVideoStats(e,n)},t.getLocalVideoStats=function(e,n){return t.rtcStatsCollector.getLocalVideoStats(e,n)},t._getRemoteVideoQualityStats=function(e,n){return t.rtcStatsCollector.getRemoteVideoQualityStats(e,n)},t._getRemoteAudioQualityStats=function(e,n){return t.rtcStatsCollector.getRemoteAudioQualityStats(e,n)},t.getTransportStats=function(e,n){return t.rtcStatsCollector.getTransportStats((function(t){return x.getStats((function(n){var r=R()({},t,n);e&&e(r)}),n)}),n)},t.getSessionStats=function(e,n){return t.rtcStatsCollector.getSessionStats(e,n)},t.onNetworkQuality=function(){return t.rtcStatsCollector.onNetworkQuality(onSuccess,onFailure)},t.sendMetadata=function(n,r){var i=o.report.reportApiInvoke(e.sessionId,{name:"Client.sendMetadata",tag:"tracer",callback:function(e){if(e)return r&&r(e);r&&r()}});t.gatewayClient.sendMetadata(n,i)},t.sendCustomReportMessage=function(n,a,s,c,d,u){Object(r.getParameter)("CR")?t.customReportCount>Object(r.getParameter)("CRL")?u&&u("REPORT_LIMITED"):(t.gatewayClient.hasJoined||(i.default.WARNING("Should invoke Client.sendCustomReportMessage after join"),u&&u("REPORT_BEFORE_JOINED")),t.customReportTimer||(t.customReportTimer=setInterval((function(){t.customReportCount=0}),Object(r.getParameter)("CRI"))),Object(P.checkValidString)(n,"reportId",0,100,!1),Object(P.checkValidString)(a,"category",0,100,!1),Object(P.checkValidString)(s,"event",0,100,!1),Object(P.checkValidString)(c,"label",0,100,!1),Object(P.checkValidNumber)(d,"value",Number.MIN_SAFE_INTEGER,Number.MAX_SAFE_INTEGER),t.customReportCount++,o.report.sendCustomReportMessage(e.sessionId,{reportId:n,category:a,event:s,label:c,value:d,lts:Date.now()},(function(e){e?u&&u("REPORT_FAILED"):u&&u()}))):u&&u("REPORT_FORBIDDEN")},t.setLocalAccessPoints=function(n,i){var a=o.report.reportApiInvoke(e.sessionId,{name:"Client.setLocalAccessPoints",tag:"tracer"});if(Object(P.checkValidArray)(n,"serverList"),Object(P.checkValidString)(i,"domain"),t.useProxyServer)throw new Error("You have already set the proxy");var s=/^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;n=n.map((function(e){return s.test(e)?"".concat(e.replace(/\./g,"-"),".").concat(i):e})),t.useLocalAccessPoint=!0,Object(r.setParameter)("WEBCS_DOMAIN",n),Object(r.setParameter)("WEBCS_DOMAIN_BACKUP_LIST",n),Object(r.setParameter)("GATEWAY_DOMAINS",[i]),Object(r.setParameter)("EVENT_REPORT_DOMAIN",n[Math.floor(Math.random()*n.length)]),Object(r.setParameter)("EVENT_REPORT_BACKUP_DOMAIN",n[Math.floor(Math.random()*n.length)]),Object(r.setParameter)("LOG_UPLOAD_SERVER","".concat(n[Math.floor(Math.random()*n.length)],":6444")),a()},e.clientId=t.clientId,t.gatewayClient=Object(T.a)(e),t.listenerLoggerTimer=null,t.listenerLoggerCache=[],t.on=function(e,n){t.gatewayClient.on(e,n),t.listenerLoggerCache.push("".concat(e).concat(n.name?":"+n.name:"")),t.listenerLoggerTimer?clearTimeout(t.listenerLoggerTimer):i.default.info("[".concat(t.clientId,"] Adding event handler on ").concat(e)),t.listenerLoggerTimer=setTimeout((function(){t.listenerLoggerCache.length&&(t.listenerLoggerTimer=null,i.default.info("[".concat(t.clientId,"] Added event handler on ").concat(t.listenerLoggerCache.join(", "))),t.listenerLoggerCache=[])}),0)},t.off=function(e,n){i.default.info("remove event handler from [".concat(e,"]")),t.gatewayClient.removeEventListener(e,n)},t.rtcStatsCollector=function(e){var t=Object(a.b)();return t.gatewayClient=e,t.exceptionMonitor=new L(e),t.localStats={},t.remoteStats={},t.session={sendBytes:0,recvBytes:0,WSSendBytes:0,WSSendBytesDelta:0,WSRecvBytes:0,WSRecvBytesDelta:0,HTTPSendBytes:0,HTTPSendBytesDelta:0,HTTPRecvBytes:0,HTTPRecvBytesDelta:0},t.getRemoteAudioStats=function(e){var n=t.gatewayClient.traffic_stats,r={};for(var i in t.remoteStats){var o={},a=t.remoteStats[i];if(Object(O.b)(o,"End2EndDelay",a.peer_delay&&a.peer_delay.audio_delay),Object(O.b)(o,"TransportDelay",a.peer_delay&&a.peer_delay.e2e_delay),Object(O.b)(o,"PacketLossRate",a.peer_delay&&a.peer_delay.e2e_audio_lost_ratio_400ms),Object(O.b)(o,"RecvLevel",a.audioStats&&a.audioStats.audioOutputLevel),Object(O.b)(o,"RecvBitrate",a.audioRecvBitrate),Object(O.b)(o,"CodecType",a.audioStats&&a.audioStats.googCodecName),Object(O.b)(o,"MuteState",a.audioDisabled),Object(O.b)(o,"TotalFreezeTime",a.audioStats&&a.audioStats.audioTotalFreezeTime),Object(O.b)(o,"TotalPlayDuration",a.audioStats&&a.audioStats.audioTotalPlayDuration),n&&n.peer_delay){var s=n.peer_delay.find((function(e){return e.peer_uid==i}));if(s){var c=s.peer_publish_audio_duration+(Date.now()-n.timestamp);Object(O.b)(o,"AudioPublishDuration",c)}else Object(O.b)(o,"AudioPublishDuration",-1)}r[i]=o}e&&e(r)},t.getLocalAudioStats=function(e){var n={};for(var r in t.localStats){var i={},o=t.localStats[r];Object(O.b)(i,"RecordingLevel",o.audioStats&&o.audioStats.audioInputLevel),Object(O.b)(i,"SendLevel",o.audioStats&&o.audioStats.totalAudioEnergy),Object(O.b)(i,"SamplingRate",o.audioStats&&o.audioStats.totalSamplesDuration),Object(O.b)(i,"SendBitrate",o.audioSendBitrate),Object(O.b)(i,"CodecType",o.audioStats&&o.audioStats.googCodecName),Object(O.b)(i,"MuteState",o.audioDisabled),Object(O.b)(i,"audioSendPacketsLost",o.audioStats&&o.audioStats.packetsLost);var a=t.gatewayClient.localStreams[r];a&&a.isPlaying()&&Object(O.b)(i,"MuteState",a.userMuteAudio?"1":"0"),n[r]=i}e&&e(n)},t.getRemoteVideoStats=function(e){var n=t.gatewayClient.traffic_stats,r={};for(var i in t.remoteStats){var o={},a=t.remoteStats[i];if(Object(O.b)(o,"End2EndDelay",a.peer_delay&&a.peer_delay.video_delay),Object(O.b)(o,"TransportDelay",a.peer_delay&&a.peer_delay.e2e_delay),Object(O.b)(o,"PacketLossRate",a.peer_delay&&a.peer_delay.e2e_video_lost_ratio_400ms),Object(O.b)(o,"RecvBitrate",a.videoRecvBitrate),Object(O.b)(o,"RecvResolutionWidth",a.videoStats&&a.videoStats.googFrameWidthReceived),Object(O.b)(o,"RecvResolutionHeight",a.videoStats&&a.videoStats.googFrameHeightReceived),Object(O.b)(o,"RenderResolutionWidth",a.videoStats&&a.videoStats.renderRemoteWidth),Object(O.b)(o,"RenderResolutionHeight",a.videoStats&&a.videoStats.renderRemoteHeight),Object(O.b)(o,"RenderFrameRate",a.videoStats&&a.videoStats.googFrameRateOutput),Object(O.b)(o,"MuteState",a.videoDisabled),Object(O.b)(o,"TotalFreezeTime",a.videoStats&&a.videoStats.videoTotalFreezeTime),Object(O.b)(o,"TotalPlayDuration",a.videoStats&&a.videoStats.videoTotalPlayDuration),n&&n.peer_delay){var s=n.peer_delay.find((function(e){return e.peer_uid==i}));if(s){var c=s.peer_publish_video_duration+(Date.now()-n.timestamp);Object(O.b)(o,"VideoPublishDuration",c)}else Object(O.b)(o,"VideoPublishDuration",-1)}r[i]=o}e&&e(r)},t.getLocalVideoStats=function(e){var n={};for(var r in t.localStats){var i={},o=t.localStats[r];Object(O.b)(i,"TargetSendBitrate",o.videoTargetSendBitrate),Object(O.b)(i,"SendFrameRate",o.videoStats&&o.videoStats.googFrameRateSent),Object(O.b)(i,"SendBitrate",o.videoSendBitrate),Object(O.b)(i,"SendResolutionWidth",o.videoStats&&o.videoStats.googFrameWidthSent),Object(O.b)(i,"SendResolutionHeight",o.videoStats&&o.videoStats.googFrameHeightSent),Object(O.b)(i,"CaptureResolutionWidth",o.videoStats&&o.videoStats.googFrameWidthInput),Object(O.b)(i,"CaptureResolutionHeight",o.videoStats&&o.videoStats.googFrameHeightInput),Object(O.b)(i,"EncodeDelay",o.videoStats&&o.videoStats.googAvgEncodeMs),Object(O.b)(i,"MuteState",o.videoDisabled),Object(O.b)(i,"TotalFreezeTime",o.videoStats&&o.videoStats.videoTotalFreezeTime),Object(O.b)(i,"TotalDuration",o.videoStats&&o.videoStats.videoTotalPlayDuration),Object(O.b)(i,"CaptureFrameRate",o.videoStats&&o.videoStats.googFrameRateSent),Object(O.b)(i,"videoSendPacketsLost",o.videoStats&&o.videoStats.packetsLost),o.videoStats&&!o.videoStats.googFrameWidthInput&&Object(O.b)(i,"CaptureResolutionWidth",o.videoStats&&o.videoStats.renderLocalWidth),o.videoStats&&!o.videoStats.googFrameHeightInput&&Object(O.b)(i,"CaptureResolutionHeight",o.videoStats&&o.videoStats.renderLocalHeight),n[r]=i}e&&e(n)},t.getRemoteVideoQualityStats=function(e){var n={};for(var r in t.remoteStats){var i={},o=t.remoteStats[r];Object(O.b)(i,"videoReceiveDelay",o.videoStats&&o.videoStats.googCurrentDelayMs),Object(O.b)(i,"VideoFreezeRate",o.videoStats&&o.videoStats.videoFreezeRate),Object(O.b)(i,"FirstFrameTime",o.firstFrameTime),n[r]=i}e&&e(n)},t.getRemoteAudioQualityStats=function(e){var n={};for(var r in t.remoteStats){var i={},o=t.remoteStats[r];Object(O.b)(i,"audioReceiveDelay",o.audioStats&&o.audioStats.googCurrentDelayMs),Object(O.b)(i,"AudioFreezeRate",o.videoStats&&o.videoStats.videoFreezeRate),n[r]=i}e&&e(n)},t.getTransportStats=function(e){var n={},r={},i=t.gatewayClient.traffic_stats,o=i.peer_delay;if(Object(O.b)(n,"OutgoingAvailableBandwidth",t.gatewayClient.OutgoingAvailableBandwidth/1e3),Object(O.b)(n,"RTT",i&&2*i.access_delay),o){var a,s=D(o);try{for(s.s();!(a=s.n()).done;){var c=a.value;c.downlink_estimate_bandwidth&&(r[c.peer_uid]=c.downlink_estimate_bandwidth/1e3+"")}}catch(e){s.e(e)}finally{s.f()}}n.IncomingAvailableBandwidth=r,e&&e(n)},t.getSessionStats=function(e){var n={},r=t.gatewayClient.traffic_stats,i=t.gatewayClient.socket,o=0,a=0;for(var s in t.remoteStats){(c=t.remoteStats[s])&&c.videoStats&&c.videoStats.videoRecvBytesDelta&&(a+=parseInt(c.videoStats.videoRecvBytesDelta)),c&&c.audioStats&&c.audioStats.audioRecvBytesDelta&&(a+=parseInt(c.audioStats.audioRecvBytesDelta))}for(var s in t.localStats){var c;(c=t.localStats[s])&&c.videoStats&&c.videoStats.videoSendBytesDelta&&(o+=parseInt(c.videoStats.videoSendBytesDelta)),c&&c.audioStats&&c.audioStats.audioSendBytesDelta&&(o+=parseInt(c.audioStats.audioSendBytesDelta))}var d=o+t.session.WSSendBytesDelta+t.session.HTTPSendBytesDelta,u=a+t.session.WSRecvBytesDelta+t.session.HTTPRecvBytesDelta,l=t.session.sendBytes+Object(C.getHTTPSendBytes)(),f=t.session.recvBytes+Object(C.getHTTPRecvBytes)();t.gatewayClient.socket&&t.gatewayClient.socket.state===t.gatewayClient.CONNECTED&&(l+=i.getSendBytes(),f+=i.getRecvBytes());var p=1;r.peer_delay&&(p=r.peer_delay.length,p+=1),i?Object(O.b)(n,"Duration",i.getDuration()):Object(O.b)(n,"Duration",0),Object(O.b)(n,"UserCount",p),Object(O.b)(n,"SendBytes",l),Object(O.b)(n,"RecvBytes",f),Object(O.b)(n,"SendBitrate",8*d/1e3),Object(O.b)(n,"RecvBitrate",8*u/1e3),e&&e(n)},t.isLocalVideoFreeze=function(e,t){var n=0,r=0;if(!e||!t)return!1;if(Object(s.isChrome)()||Object(s.isOpera)())n=e.googFrameRateInput,r=e.googFrameRateSent;else if(Object(s.isSafari)())n=parseInt(e.framerateMean),r=parseInt(e.framesEncoded)-parseInt(t.framesEncoded);else{if(!Object(s.isFireFox)())return!1;n=parseInt(e.framerateMean),r=parseInt(e.framesEncoded)-parseInt(t.framesEncoded)}return n>5&&r<3},t.isRemoteVideoFreeze=function(e,t){var n=0,r=0;if(!e||!t)return!1;if(Object(s.isChrome)()||Object(s.isOpera)())n=e.googFrameRateReceived,r=e.googFrameRateDecoded;else if(Object(s.isSafari)())n=e.framerateMean,r=parseInt(e.framesDecoded)-parseInt(t.framesDecoded);else{if(!Object(s.isFireFox)())return!1;n=parseInt(e.framesReceived)-parseInt(t.framesReceived),r=parseInt(e.framesDecoded)-parseInt(t.framesDecoded)}return n>5&&n<10&&r<3||(n>10&&n<20&&r<4||n>20&&r<5)},t.isAudioFreeze=function(e){if(Object(s.isChrome)()&&e){if(e.googDecodingPLC&&e.googDecodingPLCCNG&&e.googDecodingCTN)return(parseInt(e.googDecodingPLC)+parseInt(e.googDecodingPLCCNG))/parseInt(e.googDecodingCTN)>.2}else if((Object(s.isSafari)()||Object(s.isFireFox)())&&e.packetsLost&&e.packetsReceived)return parseInt(e.packetsLost)/(parseInt(e.packetsLost)+parseInt(e.packetsReceived))>.2;return!1},t.isAudioDecodeFailed=function(e){return!!((Object(s.isChrome)()||Object(s.isOpera)())&&e&&parseInt(e.bytesReceived)>0&&0===parseInt(e.googDecodingNormal))},t.startNetworkQualityTimer=function(){t.clearNetworkQualityTimer(),t.networkQualityTimer=setInterval((function(){if(t.gatewayClient.state===T.a.CONNECTED&&navigator.onLine){var e=t.gatewayClient.traffic_stats;t.gatewayClient.dispatchEvent({type:"network-quality",uplinkNetworkQuality:t.networkQualityTrans(e.uplink_network_quality),downlinkNetworkQuality:t.networkQualityTrans(e.downlink_network_quality)})}else t.gatewayClient.dispatchEvent({type:"network-quality",uplinkNetworkQuality:0,downlinkNetworkQuality:0})}),2e3)},t.clearNetworkQualityTimer=function(){t.networkQualityTimer&&clearInterval(t.networkQualityTimer)},t.networkQualityTrans=function(e){return e>=0&&e<.17?1:e>=.17&&e<.36?2:e>=.36&&e<.59?3:e>=.59&&e<=1?4:e>1?5:0},t.getStatsTimer=setInterval((function(){var e=t.gatewayClient.traffic_stats,n=Date.now();t.gatewayClient.dispatchEvent({type:"_testException"}),Object.keys(t.localStats).length&&t.exceptionMonitor.setLocalStats(t.localStats),Object.keys(t.remoteStats).length&&t.exceptionMonitor.setRemoteStats(t.remoteStats);var r={};Object.keys(t.gatewayClient.remoteStreams).forEach((function(i){var o=t.gatewayClient.remoteStreams[i],a=t.remoteStats[i],s={id:i,updatedAt:n};r[i]=s,s.firstFrameTime=o.firstFrameTime,a?(s.audioTotalPlayDuration=a.audioTotalPlayDuration+1,s.audioTotalFreezeTime=a.audioTotalFreezeTime,s.isAudioFreeze=!1,s.isAudioDecodeFailed=!1,s.videoTotalPlayDuration=a.videoTotalPlayDuration+1,s.videoTotalFreezeTime=a.videoTotalFreezeTime,s.isVideoFreeze=!1):(s.audioTotalPlayDuration=1,s.audioTotalFreezeTime=0,s.videoTotalPlayDuration=1,s.videoTotalFreezeTime=0);var c=e&&e.peer_delay&&e.peer_delay.find((function(e){return e.peer_uid==i}));c&&(s.peer_delay=c),o&&(o.isPlaying()&&(s.audioDisabled=o.userMuteAudio||o.peerMuteAudio?"1":"0",s.videoDisabled=o.userMuteVideo||o.peerMuteVideo?"1":"0"),a&&a.peer_delay&&c&&a.peer_delay.stream_type!==c.stream_type&&t.gatewayClient.dispatchEvent({type:"streamTypeChange",uid:i,streamType:c.stream_type}),o.pc&&"established"==o.pc.state&&o.pc.getStats((function(e){if(s.pcStats=e,s.audioStats=e.find((function(e){return"audio"==e.mediaType&&(e.id.indexOf("_recv")>-1||e.id.toLowerCase().indexOf("inbound")>-1)})),s.videoStats=e.find((function(e){return"video"==e.mediaType&&(e.id.indexOf("_recv")>-1||e.id.toLowerCase().indexOf("inbound")>-1)})),a&&a.audioStats&&s.audioStats){var n=parseInt(s.audioStats.bytesReceived)-parseInt(a.audioStats.bytesReceived),r=parseInt(s.audioStats.googDecodingNormal)-parseInt(a.audioStats.googDecodingNormal);if(s.audioStats.audioRecvBytesDelta=n,s.audioStats.audioDecodingNormalDelta=r,t.session.recvBytes+=n,isFinite(n)&&s.audioStats.timestamp){var i=s.audioStats.timestamp.getTime()-a.audioStats.timestamp.getTime();s.audioRecvBitrate=Math.floor(8*n/i)}t.isAudioFreeze(s.audioStats)&&s.audioTotalPlayDuration>10&&(s.audioTotalFreezeTime++,s.isAudioFreeze=!0),t.isAudioDecodeFailed(s.audioStats)&&s.audioTotalPlayDuration>10&&(s.isAudioDecodeFailed=!0),s.audioStats.audioTotalFreezeTime=s.audioTotalFreezeTime,s.audioStats.audioTotalPlayDuration=s.audioTotalPlayDuration,s.audioStats.audioFreezeRate=Math.ceil(100*s.audioTotalFreezeTime/s.audioTotalPlayDuration)}if(a&&a.videoStats&&s.videoStats){var c=parseInt(s.videoStats.bytesReceived)-parseInt(a.videoStats.bytesReceived);if(s.videoStats.videoRecvBytesDelta=c,t.session.recvBytes+=c,isFinite(c)&&s.videoStats.timestamp){i=s.videoStats.timestamp.getTime()-a.videoStats.timestamp.getTime();s.videoRecvBitrate=Math.floor(8*c/i)}t.isRemoteVideoFreeze(s.videoStats,a.videoStats)&&(s.videoTotalFreezeTime++,s.isVideoFreeze=!0),s.videoStats.videoTotalFreezeTime=s.videoTotalFreezeTime,s.videoStats.videoTotalPlayDuration=s.videoTotalPlayDuration,s.videoStats.videoFreezeRate=Math.ceil(100*s.videoTotalFreezeTime/s.videoTotalPlayDuration),o.player&&o.player.video&&o.player.video.videoWidth&&o.player.video.videoHeight?(s.videoStats.renderRemoteWidth=o.player.video.videoWidth,s.videoStats.renderRemoteHeight=o.player.video.videoHeight):(s.videoStats.renderRemoteWidth=o.videoWidth||s.videoStats.googFrameWidthReceived,s.videoStats.renderRemoteHeight=o.videoHeight||s.videoStats.googFrameHeightReceived)}})))})),t.remoteStats=r;var i={};if(Object.keys(t.gatewayClient.localStreams).forEach((function(e){var r=t.gatewayClient.localStreams[e],o=t.localStats[e],a={id:e,updatedAt:n};i[e]=a,o?(a.videoTotalPlayDuration=o.videoTotalPlayDuration+1,a.videoTotalFreezeTime=o.videoTotalFreezeTime,a.isVideoFreeze=!1):(a.videoTotalPlayDuration=1,a.videoTotalFreezeTime=0),r&&(r.isPlaying()&&(a.audioDisabled=r.userMuteAudio?"1":"0",a.videoDisabled=r.userMuteVideo?"1":"0"),r.video&&r.attributes.maxVideoBW?a.videoTargetSendBitrate=r.attributes.maxVideoBW:r.video&&r.screenAttributes&&(a.videoTargetSendBitrate=r.screenAttributes.maxVideoBW),r.pc&&"established"==r.pc.state&&r.pc.getStats((function(e){if(a.pcStats=e.reverse(),a.audioStats=e.find((function(e){return"audio"==e.mediaType&&(e.id.indexOf("_send")>-1||e.id.toLowerCase().indexOf("outbound")>-1)})),a.videoStats=e.find((function(e){return"video"==e.mediaType&&(e.id.indexOf("_send")>-1||e.id.toLowerCase().indexOf("outbound")>-1)})),a.audioStats&&o&&o.audioStats){var n=parseInt(a.audioStats.bytesSent)-parseInt(o.audioStats.bytesSent);if(a.audioStats.audioSendBytesDelta=n,t.session.sendBytes+=n,isFinite(n)&&a.audioStats.timestamp){var i=a.audioStats.timestamp.getTime()-o.audioStats.timestamp.getTime();a.audioSendBitrate=Math.floor(8*n/i)}}if(a.videoStats&&o&&o.videoStats){var s=parseInt(a.videoStats.bytesSent)-parseInt(o.videoStats.bytesSent);if(a.videoStats.videoSendBytesDelta=s,t.session.sendBytes+=s,isFinite(s)&&a.videoStats.timestamp){i=a.videoStats.timestamp.getTime()-o.videoStats.timestamp.getTime();a.videoSendBitrate=Math.floor(8*s/i)}t.isLocalVideoFreeze(a.videoStats,o.videoStats)&&(a.videoTotalFreezeTime++,a.isVideoFreeze=!0),a.videoStats.videoTotalFreezeTime=a.videoTotalFreezeTime,a.videoStats.videoTotalPlayDuration=a.videoTotalPlayDuration,a.videoStats.videoFreezeRate=Math.ceil(100*a.videoTotalFreezeTime/a.videoTotalPlayDuration),a.videoStats.renderLocalWidth=r.videoWidth||a.videoStats.googFrameWidthSent,a.videoStats.renderLocalHeight=r.videoHeight||a.videoStats.googFrameHeightSent}})))})),t.localStats=i,t.session.HTTPSendBytesDelta=Object(C.getHTTPSendBytes)()-t.session.HTTPSendBytes,t.session.HTTPSendBytes=Object(C.getHTTPSendBytes)(),t.session.HTTPRecvBytesDelta=Object(C.getHTTPRecvBytes)()-t.session.HTTPRecvBytes,t.session.HTTPRecvBytes=Object(C.getHTTPRecvBytes)(),t.gatewayClient.socket&&t.gatewayClient.socket.state===t.gatewayClient.CONNECTED){var o=t.gatewayClient.socket;t.session.WSSendBytesDelta=o.getSendBytes()-t.session.WSSendBytes,t.session.WSSendBytes=o.getSendBytes(),t.session.WSRecvBytesDelta=o.getRecvBytes()-t.session.WSRecvBytes,t.session.WSRecvBytes=o.getRecvBytes()}}),1e3),t.gatewayClient.on("join",(function(){t.session={sendBytes:0,recvBytes:0,WSSendBytes:0,WSSendBytesDelta:0,WSRecvBytes:0,WSRecvBytesDelta:0,HTTPSendBytes:0,HTTPSendBytesDelta:0,HTTPRecvBytes:0,HTTPRecvBytesDelta:0}})),t}(t.gatewayClient),t.configDistributManager=function(e){var t={};return t.client=e,t.client.gatewayClient&&t.client.gatewayClient.on("config-distribute",(function(n){var a=n.joinInfo,s=n.config;if(s){Object(P.isEmpty)(s.uploadLog)||(Object(r.setParameter)("UPLOAD_LOG",s.uploadLog),o.report.reportApiInvoke(a.sid,{name:"_configDistribute",options:{feature:"uploadLog",value:s.uploadLog}})()),Object(P.isEmpty)(s.dualStream)||(e.isDualStream=s.dualStream,o.report.reportApiInvoke(a.sid,{name:"_configDistribute",options:{feature:"dualStream",value:s.dualStream}})()),Object(P.isEmpty)(s.streamFallbackOption)||t.client.gatewayClient&&t.client.gatewayClient.on("stream-subscribed",(function(e){var n=e.stream;n?(t.client.gatewayClient.setStreamFallbackOption(n,s.streamFallbackOption),o.report.reportApiInvoke(a.sid,{name:"_configDistribute",options:{feature:"streamFallbackOption",value:s.streamFallbackOption,streamId:n.getId()}})()):o.report.reportApiInvoke(a.sid,{name:"_configDistribute",options:{feature:"streamFallbackOption",value:s.streamFallbackOption,streamId:n.getId(),err:"invalid stream"}})()}));try{i.default.debug("[".concat(e.clientId,"] setParameter in distribution: ").concat(JSON.stringify(s))),Object.keys(s).map((function(e){return Object(r.setParameter)(e,s[e])}))}catch(t){i.default.debug("[".concat(e.clientId,"] setParameter in distribution failed: ").concat(JSON.stringify(s)))}}})),t}(t),Object(U.addLiveStreamingCapability)(t,e),e.areaCode){var n=e,c=n.areaCode,p=n.excludedArea,g=Object(F.getAreaCodeByConfig)({areaCode:c,excludedArea:p});Object(r.setParameter)("AREA_SETTING",g);var h=Object(F.getAreaDomainConfig)(g);Object.keys(h).map((function(e){var t=h[e];"LOG_UPLOAD_SERVER"==e||"EVENT_REPORT_DOMAIN"==e||"EVENT_REPORT_BACKUP_DOMAIN"==e||"NGINX"==e?Object(r.setParameter)(e,t[0]):Object(r.setParameter)(e,t)}))}return Object(P.isEmpty)(e.turnServer)||t.setTurnServer(e.turnServer),Object(P.isEmpty)(e.proxyServer)||t.setProxyServer(e.proxyServer),"live"===t.mode&&(t.gatewayClient.role="audience"),"rtc"===t.mode&&(t.gatewayClient.role=H),t.gatewayClient.on("onMultiIP",(function(e){t.gatewayClient.closeGateway(),t.gatewayClient.socket=void 0,t.gatewayClient.hasChangeBGPAddress=!0,t.joinInfo.multiIP=e.option,t.gatewayClient.state=T.a.CONNECTING;var n=function(e){i.default.info("[".concat(t.clientId,"] Joining channel: ").concat(t.channel)),t.joinInfo.cid=e.cid,t.joinInfo.uid||(t.joinInfo.uid=e.uid),t.joinInfo.uni_lbs_ip=e.uni_lbs_ip,t.joinInfo.gatewayAddr=e.gateway_addr,t.onSuccess?t.gatewayClient.join(t.joinInfo,t.key,(function(e){i.default.info("[".concat(t.clientId,"] Join channel ").concat(t.channel," success"));var n=t.onSuccess;t.onSuccess=null,t.onFailure=null,n(e)}),t.onFailure):(t.gatewayClient.joinInfo=R()({},t.joinInfo),t.gatewayClient.rejoin())};t.joinInfo.stringUid&&!t.joinInfo.uid?(t.userAccountReq&&!t.userAccountReq.isFinished()&&t.userAccountReq.cancel(),t.userAccountReq=Object(A.getUserAccount)(joinInfo,t.gatewayClient),t.userAccountReq.then((function(e){i.default.error("getUserAccount Success ".concat(e.url," ").concat(joinInfo.stringUid," => ").concat(e.uid)),t.joinInfo.uid=e.uid,Object(A.getGatewayList)(t.joinInfo,n,t.onFailure)})).catch((function(e){i.default.error("getUserAccount rejected",e),t.onFailure(e)}))):Object(A.getGatewayList)(t.joinInfo,n,t.onFailure)})),t.gatewayClient.on("rejoin-start",(function(){t._renewSession(),o.report.sessionInit(e.sessionId,{lts:(new Date).getTime(),extend:{rejoin:!0},cname:t.channel,appid:e.appId,mode:e.mode,succ:!0})})),t.gatewayClient.on("recover",(function(){t._renewSession(),i.default.debug("[".concat(t.clientId,"]"),"recover",e.sessionId),o.report.sessionInit(e.sessionId,{lts:(new Date).getTime(),extend:{recover:!0},cname:t.channel,appid:e.appId,mode:e.mode,succ:!0})})),t.gatewayClient.on("rejoin",(function(){var e=t.highStreamState;if(i.default.debug("[".concat(t.clientId,"] Client local stream preState: ").concat(e)),t.onSuccess){var n=t.onSuccess;t.onSuccess=null,t.onFailure=null,n(t.joinInfo.uid)}!t.highStream||0!==e&&1!==e||(i.default.info("[".concat(t.clientId,"] publish after rejoin")),t.highStreamState=2,t.lowStreamState=2,t.publish(t.highStream,(function(e){e&&i.default.info("[".concat(t.clientId,"] "),e)})))})),t.gatewayClient.on("streamPublished",(function(e){t.hasPublished||(t.hasPublished=!0,t.gatewayClient.dispatchEvent({type:"stream-published",stream:e.stream,proxy:e.proxy}))})),t.gatewayClient.on("pubP2PLost",(function(e){i.default.debug("[".concat(t.clientId,"] Start reconnect local peerConnection: ").concat(t.highStream.getId())),t.gatewayClient.dispatchEvent({type:"stream-reconnect-start",uid:t.highStream.getId()}),1===t.highStreamState&&(t.highStreamState=0,t.lowStreamState=0),t._unpublish(t.highStream,(function(){t._publish(t.highStream,(function(){i.default.debug("[".concat(t.clientId,"] Reconnect local peerConnection success: ").concat(t.highStream.getId())),t.gatewayClient.dispatchEvent({type:"stream-reconnect-end",uid:t.highStream.getId(),success:!0,reason:""})}),(function(e){i.default.debug("[".concat(t.clientId,"] Reconnect local peerConnection failed: ").concat(e)),t.gatewayClient.dispatchEvent({type:"stream-reconnect-end",uid:t.highStream.getId(),success:!1,reason:e})}),!0)}),(function(e){i.default.debug("[".concat(t.clientId,"] Reconnect local peerConnection failed: ").concat(e)),t.gatewayClient.dispatchEvent({type:"stream-reconnect-end",uid:t.highStream.getId(),success:!1,reason:e})}),!0)})),t.gatewayClient.on("subP2PLost",(function(e){i.default.debug("[".concat(t.clientId,"] Start reconnect remote peerConnection: ").concat(e.stream.getId()," ").concat(e.stream.subscribeOptions)),t.gatewayClient.dispatchEvent({type:"stream-reconnect-start",uid:e.stream.getId()});var n=e.stream.subscribeOptions;i.default.debug("[".concat(t.clientId,"]"),"Re-subscribe stream",JSON.stringify(n)),t.gatewayClient.unsubscribe(e.stream,(function(){e.stream.subscribeOptions=n,t.gatewayClient.subscribe(e.stream,(function(){i.default.debug("[".concat(t.clientId,"] Reconnect remote peerConnection success: ").concat(e.stream.getId())),t.gatewayClient.dispatchEvent({type:"stream-reconnect-end",uid:e.stream.getId(),success:!0,reason:""})}),(function(n){i.default.debug("[".concat(t.clientId,"] Reconnect remote peerConnection failed: "),n),t.gatewayClient.dispatchEvent({type:"stream-reconnect-end",uid:e.stream.getId(),success:!1,reason:n})}))}),(function(n){i.default.debug("[".concat(t.clientId,"] Reconnect remote peerConnection failed: "),n),t.gatewayClient.dispatchEvent({type:"stream-reconnect-end",uid:e.stream.getId(),success:!1,reason:n})}))})),x.on("networkTypeChanged",(function(e){t.gatewayClient&&t.gatewayClient.dispatchEvent(e);var n=R()({},e,{type:"network-type-changed"});t.gatewayClient.dispatchEvent(n)})),f.a.on("recordingDeviceChanged",(function(e){t.gatewayClient&&t.gatewayClient.dispatchEvent(e);var n=R()({},e,{type:"recording-device-changed"});t.gatewayClient.dispatchEvent(n)})),f.a.on("playoutDeviceChanged",(function(e){t.gatewayClient&&t.gatewayClient.dispatchEvent(e);var n=R()({},e,{type:"playout-device-changed"});t.gatewayClient.dispatchEvent(n)})),f.a.on("cameraChanged",(function(e){t.gatewayClient&&t.gatewayClient.dispatchEvent(e);var n=R()({},e,{type:"camera-changed"});t.gatewayClient.dispatchEvent(n)})),t.gatewayClient.on("streamTypeChange",(function(n){var r=R()({},n,{type:"stream-type-changed"});t.gatewayClient.dispatchEvent(r),o.report.reportApiInvoke(e.sessionId,{name:"streamTypeChange"})(null,JSON.stringify(n))})),t},J={width:640,height:360,videoBitrate:400,videoFramerate:15,lowLatency:!1,audioSampleRate:48e3,audioBitrate:48,audioChannels:1,videoGop:30,videoCodecProfile:100,userCount:0,userConfigExtraInfo:{},backgroundColor:0,transcodingUsers:[]},Y=function(e){switch(e){case"h264_interop":return"h264";default:return"vp8"}},z=function(e){return-1===h.indexOf(e.mode)?I.default.INVALID_CLIENT_MODE:-1===v.indexOf(e.codec)?I.default.INVALID_CLIENT_CODEC:"h264_interop"==e.mode&&"h264"!==e.codec&&I.default.CLIENT_MODE_CODEC_MISMATCH},K=function(e){switch(e.mode){case"interop":case"h264_interop":e.mode="live";break;case"web-only":e.mode="rtc"}},X=f.a.getDevices,Q=p.a.getScreenSources,Z=JSON.parse(JSON.stringify(r.SUPPORT_RESOLUTION_LIST));t.default={TranscodingUser:{uid:0,x:0,y:0,width:0,height:0,zOrder:0,alpha:1},LiveTranscoding:J,createClient:function(e){var t=o.report.reportApiInvoke(null,{name:"createClient",options:arguments,tag:"tracer"});(e=R()({},e||{})).codec||(e.codec=Y(e.mode));var n=z(e);if(n)throw i.default.error("Invalid parameter setting MODE: ".concat(e.mode," CODEC: ").concat(e.codec," ERROR ").concat(n)),t(n),new Error(n);return i.default.info("Creating client, MODE: ".concat(e.mode," CODEC: ").concat(e.codec)),K(e),t(null,e),q(e)},createStream:l.b,Logger:i.default,report:o.report,getDevices:X,getScreenSources:Q,getParameter:r.getParameter,setParameter:r.setParameter,checkSystemRequirements:d,getSupportedCodec:g.getSupportedCodec,ChannelMediaRelayConfiguration:m.ChannelMediaRelayConfiguration,VERSION:r.VERSION,BUILD:r.BUILD,PROFILE_TABLE:Z,AUDIO_SAMPLE_RATE_32000:32e3,AUDIO_SAMPLE_RATE_44100:44100,AUDIO_SAMPLE_RATE_48000:48e3,VIDEO_CODEC_PROFILE_BASELINE:66,VIDEO_CODEC_PROFILE_MAIN:77,VIDEO_CODEC_PROFILE_HIGH:100,REMOTE_VIDEO_STREAM_HIGH:0,REMOTE_VIDEO_STREAM_LOW:1,REMOTE_VIDEO_STREAM_MEDIUM:2,AREAS:F.AREAS,AREA_VERSION:"global"}}]).default}));
/*
 @preserve
 AgoraRTM Web SDK 1.4.5 - commit: v1.4.5-0-g9cf39592
 Copyright (C) 2018-2022 Agora Lab.
 This file is licensed under the AGORA, INC. SDK LICENSE AGREEMENT
 A copy of this license may be found at https://www.agora.io/en/sdk-license-agreement/
*/
"use strict";!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).AgoraRTM=t()}(this,(function(){function oe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function wa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oe(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function um(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function J(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){function o(e){um(s,r,i,o,a,"next",e)}function a(e){um(s,r,i,o,a,"throw",e)}var s=e.apply(t,n);o(void 0)}))}}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function vm(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ia(e,t,n){return t&&vm(e.prototype,t),n&&vm(e,n),e}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ja(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wf(e,t)}function Fd(e){return(Fd=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wf(e,t){return(wf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wm(){if("undefined"==typeof Reflect||!Reflect.construct||Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function wi(e,t,n){return(wi=wm()?Reflect.construct:function(e,t,n){var r=[null];return r.push.apply(r,t),e=new(Function.bind.apply(e,r)),n&&wf(e,n.prototype),e}).apply(null,arguments)}function xf(e){var t="function"==typeof Map?new Map:void 0;return(xf=function(e){function n(){return wi(e,arguments,Fd(this).constructor)}if(null===e||-1===Function.toString.call(e).indexOf("[native code]"))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),wf(n,e)})(e)}function yf(e,t){if(null==e)return{};if(null==e)var n={};else{n={};var r,i=Object.keys(e);for(r=0;r<i.length;r++){var o=i[r];0<=t.indexOf(o)||(n[o]=e[o])}}if(Object.getOwnPropertySymbols)for(r=Object.getOwnPropertySymbols(e),o=0;o<r.length;o++)i=r[o],0<=t.indexOf(i)||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i]);return n}function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ka(e){var t=wm();return function(){var r=Fd(e);if(t){var i=Fd(this).constructor;r=Reflect.construct(r,arguments,i)}else r=r.apply(this,arguments);return r=!r||"object"!=typeof r&&"function"!=typeof r?n(this):r}}function xi(e,t,n){return(xi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Fd(e)););if(e)return(t=Object.getOwnPropertyDescriptor(e,t)).get?t.get.call(n):t.value})(e,t,n||e)}function ua(e,t){var n=Array.isArray(e)?e:void 0;if(!n)if(null==(n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"])))n=void 0;else{var r,i=[],o=!0,a=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(e){a=!0;var s=e}finally{try{o||null==n.return||n.return()}finally{if(a)throw s}}n=i}if(!(e=n||xm(e,t)))throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");return e}function G(e){var t=Array.isArray(e)?yi(e):void 0;if(t||(t="undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"]?Array.from(e):void 0),!(e=t||xm(e)))throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");return e}function xm(e,t){if(e){if("string"==typeof e)return yi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if("Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return yi(e,t)}}function yi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function la(e,t,n,r,i){var o={};return Object.keys(r).forEach((function(e){o[e]=r[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce((function(n,r){return r(e,t,n)||n}),o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,t,o),o=null),o}function cb(e){var t={exports:{}};return e(t,t.exports),t.exports}function pe(e){e||(e={});var t=e.ua;if(t||"undefined"==typeof navigator||(t=navigator.userAgent),t&&t.headers&&"string"==typeof t.headers["user-agent"]&&(t=t.headers["user-agent"]),"string"!=typeof t)return!1;var n=iu.test(t)&&!ju.test(t)||!!e.tablet&&ku.test(t);return!n&&e.tablet&&e.featureDetect&&navigator&&1<navigator.maxTouchPoints&&-1!==t.indexOf("Macintosh")&&-1!==t.indexOf("Safari")&&(n=!0),n}function ym(e,t){var n,r=3>arguments.length?e:arguments[2];return sa(e)===r?e[t]:(n=Jb.f(e,t))?Q(n,"value")?n.value:void 0===n.get?void 0:n.get.call(r):ha(n=ac(e))?ym(n,t,r):void 0}function lu(e){var t=e.charCodeAt(0)<<24,n=0|mu(~t),r=0,i=0|e.length,o="";if(5>n&&i>=n){for(t=t<<n>>>24+n,r=1;r<n;r=r+1|0)t=t<<6|63&e.charCodeAt(r);65535>=t?o+=Gd(t):1114111>=t?o+=Gd(55296+((t=t-65536|0)>>10)|0,56320+(1023&t)|0):r=0}for(;r<i;r=r+1|0)o+="�";return o}function zm(){}function nu(e){var t=0|e.charCodeAt(0);if(55296<=t&&56319>=t){var n=0|e.charCodeAt(1);if(!(n==n&&56320<=n&&57343>=n))return Gd(239,191,189);if(65535<(t=(t-55296<<10)+n-56320+65536|0))return Gd(240|t>>>18,128|t>>>12&63,128|t>>>6&63,128|63&t)}return 127>=t?e:2047>=t?Gd(192|t>>>6,128|63&t):Gd(224|t>>>12,128|t>>>6&63,128|63&t)}function Am(){}function ia(){ia.init.call(this)}function Kg(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+V(e))}function Bm(e,t,n,r){Kg(n);var i=e._events;if(void 0===i)i=e._events=Object.create(null),e._eventsCount=0;else{void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events);var o=i[t]}return void 0===o?(i[t]=n,++e._eventsCount):("function"==typeof o?o=i[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),0<(n=void 0===e._maxListeners?ia.defaultMaxListeners:e._maxListeners)&&o.length>n&&!o.warned&&(o.warned=!0,(n=Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit")).name="MaxListenersExceededWarning",n.emitter=e,n.type=t,n.count=o.length,console&&console.warn&&console.warn(n))),e}function ou(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Cm(e,t,n){return e={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},(t=ou.bind(e)).listener=n,e.wrapFn=t}function Dm(e,t,n){if(void 0===(e=e._events))return[];if(void 0===(t=e[t]))return[];if("function"==typeof t)return n?[t.listener||t]:[t];if(n)for(n=Array(t.length),e=0;e<n.length;++e)n[e]=t[e].listener||t[e];else n=Em(t,t.length);return n}function Fm(e){var t=this._events;if(void 0!==t){if("function"==typeof(e=t[e]))return 1;if(void 0!==e)return e.length}return 0}function Em(e,t){for(var n=Array(t),r=0;r<t;++r)n[r]=e[r];return n}function pu(e,t,n){"function"==typeof e.on&&Gm(e,"error",t,n)}function Gm(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+V(e));e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}function qu(e){return e?G(e):ru((function(){return[]}),(function(e,t){return e.push(t),e}))}function Hm(e,t){var n,r,i,o;return x.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:n=Im(e)([Jm,Jm,function(e,t){return t}])[2],r=0;case 2:if(!(r<t.length)){a.next=17;break}if(i=t[r],!((o=n(zi,i))instanceof Lg)){a.next=11;break}if((o=Ai(o.deref()))===zi){a.next=10;break}return a.next=10,o;case 10:return a.abrupt("return");case 11:if(o===zi){a.next=14;break}return a.next=14,o;case 14:r++,a.next=2;break;case 17:case"end":return a.stop()}}),su)}function Mg(e,t){return null!=t&&"function"==typeof t[Symbol.iterator]?Hm(Mg(e),t):function(t){var n=t[2];return tu(t,(function(t,r){return n(t,e(r))}))}}function Jc(e){return Object.prototype.toString.call(e).slice(8,-1)}function Hd(e){return"Object"===Jc(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function Km(e){var t;return(t="Boolean"===Jc(e)||"Null"===Jc(e)||"Undefined"===Jc(e))||(t="Number"===Jc(e)&&!isNaN(e)),t||"String"===Jc(e)||"Symbol"===Jc(e)}function Id(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function qe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function re(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function zf(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ng;++t<n;)this.add(e[t])}function se(e){this.size=(this.__data__=new Og(e)).size}function te(e,t,n,r,i,o){var a,s=1&t,u=2&t,c=4&t;if(n&&(a=i?n(e,r,i,o):n(e)),void 0!==a)return a;if(!ob(e))return e;if(r=Za(e)){if(a=uu(e),!s)return Bi(e,a)}else{var l=Af(e),f="[object Function]"==l||"[object GeneratorFunction]"==l;if(Bf(e))return Lm(e,s);if("[object Object]"==l||"[object Arguments]"==l||f&&!i){if(a=u||f?{}:Mm(e),!s)return u?vu(e,wu(a,e)):xu(e,yu(a,e))}else{if(!xa[l])return i?e:{};a=zu(e,l,s)}}if(o||(o=new ue),i=o.get(e))return i;o.set(e,a),Au(e)?e.forEach((function(r){a.add(te(r,t,n,r,e,o))})):Bu(e)&&e.forEach((function(r,i){a.set(i,te(r,t,n,i,e,o))})),u=c?u?Nm:Ci:u?Cf:Jd;var h=r?void 0:u(e);return Cu(h||e,(function(r,i){h&&(r=e[i=r]),Om(a,i,te(r,t,n,i,e,o))})),a}function Di(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function n(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;return o.has(i)?o.get(i):(r=e.apply(this,r),n.cache=o.set(i,r)||o,r)};return n.cache=new(Di.Cache||Ng),n}function Pm(e){if("string"==typeof e)return e;if(Za(e))return ve(e,Pm)+"";if(we(e))return Qm?Qm.call(e):"";var t=e+"";return"0"==t&&1/e==-Du?"-0":t}function Ei(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=Eu),i||(i=[]);++o<a;){var s=e[o];0<t&&n(s)?1<t?Ei(s,t-1,n,r,i):Fi(i,s):r||(i[i.length]=s)}return i}function xe(e,t,n,r,i){if(e===t)t=!0;else if(null==e||null==t||!oc(e)&&!oc(t))t=e!=e&&t!=t;else e:{var o=Za(e),a=Za(t),s=o?"[object Array]":Af(e),u=a?"[object Array]":Af(t),c="[object Object]"==(s="[object Arguments]"==s?"[object Object]":s);if(a="[object Object]"==(u="[object Arguments]"==u?"[object Object]":u),(u=s==u)&&Bf(e)){if(!Bf(t)){t=!1;break e}o=!0,c=!1}if(u&&!c)i||(i=new ue),t=o||Gi(e)?Rm(e,t,n,r,xe,i):Fu(e,t,s,n,r,xe,i);else{if(!(1&n)&&(o=c&&Sm.call(e,"__wrapped__"),s=a&&Sm.call(t,"__wrapped__"),o||s)){e=o?e.value():e,t=s?t.value():t,i||(i=new ue),t=xe(e,t,n,r,i);break e}if(u)t:if(i||(i=new ue),o=1&n,s=Ci(e),a=s.length,u=Ci(t).length,a==u||o){for(u=a;u--;){var l=s[u];if(!(o?l in t:Gu.call(t,l))){t=!1;break t}}if(c=i.get(e),l=i.get(t),c&&l)t=c==t&&l==e;else{c=!0,i.set(e,t),i.set(t,e);for(var f=o;++u<a;){var h=e[l=s[u]],p=t[l];if(r)var d=o?r(p,h,l,t,e,i):r(h,p,l,e,t,i);if(void 0===d?h!==p&&!xe(h,p,n,r,i):!d){c=!1;break}f||(f="constructor"==l)}c&&!f&&((n=e.constructor)!=(r=t.constructor)&&"constructor"in e&&"constructor"in t&&!("function"==typeof n&&n instanceof n&&"function"==typeof r&&r instanceof r)&&(c=!1)),i.delete(e),i.delete(t),t=c}}else t=!1;else t=!1}}return t}function ya(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function pb(e){return!0===(e&&e.__isLong__)}function Kd(e,t){var n;if(t){if((t=0<=(e>>>=0)&&256>e)&&(n=Tm[e]))return n;n=za(e,0>(0|e)?-1:0,!0),t&&(Tm[e]=n)}else{if((t=-128<=(e|=0)&&128>e)&&(n=Um[e]))return n;n=za(e,0>e?-1:0,!1),t&&(Um[e]=n)}return n}function Kb(e,t){if(isNaN(e))return t?Ld:Lb;if(t){if(0>e)return Ld;if(e>=Vm)return Wm}else{if(e<=-Xm)return qb;if(e+1>=Xm)return Ym}return 0>e?Kb(-e,t).neg():za(e%ye|0,e/ye|0,t)}function za(e,t,n){return new ya(e,t,n)}function Hi(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Lb;if("number"==typeof t?(n=t,t=!1):t=!!t,2>(n=n||10)||36<n)throw RangeError("radix");var r;if(0<(r=e.indexOf("-")))throw Error("interior hyphen");if(0===r)return Hi(e.substring(1),t,n).neg();r=Kb(Pg(n,8));for(var i=Lb,o=0;o<e.length;o+=8){var a=Math.min(8,e.length-o),s=parseInt(e.substring(o,o+a),n);8>a?(a=Kb(Pg(n,a)),i=i.mul(a).add(Kb(s))):i=(i=i.mul(r)).add(Kb(s))}return i.unsigned=t,i}function bc(e,t){return"number"==typeof e?Kb(e,t):"string"==typeof e?Hi(e,t):za(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}function O(e,t){function n(){this.constructor=e}Ii(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function ze(e){return"function"==typeof e}function Ae(e){setTimeout((function(){throw e}),0)}function Ji(e){return null!==e&&"object"===V(e)}function Zm(e){return e.reduce((function(e,t){return e.concat(t instanceof Df?t.errors:t)}),[])}function Ki(e){for(;e;){var t=e.destination,n=e.isStopped;if(e.closed||n)return!1;e=t&&t instanceof ma?t:null}return!0}function ed(e){return e}function Li(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return $m(e)}function $m(e){return 0===e.length?ed:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}function an(e){if(e||(e=Mb.Promise||Promise),!e)throw Error("no Promise impl found");return e}function bn(){return function(e){return e.lift(new Hu(e))}}function Ef(e){return e?Iu(e):yb}function Iu(e){return new Y((function(t){return e.schedule((function(){return t.complete()}))}))}function fd(e){return e&&"function"==typeof e.schedule}function Mi(e,t){return new Y((function(n){var r=new Ta,i=0;return r.add(t.schedule((function(){i===e.length?n.complete():(n.next(e[i++]),n.closed||r.add(this.schedule()))}))),r}))}function Ff(e,t){return t?Mi(e,t):new Y(cn(e))}function eb(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return fd(t=e[e.length-1])?(e.pop(),Mi(e,t)):Ff(e)}function Z(e,t){return new Y(t?function(n){return t.schedule(Ju,0,{error:e,subscriber:n})}:function(t){return t.error(e)})}function Ju(e){e.subscriber.error(e.error)}function Ku(e,t){return void 0===t&&(t=0),function(n){return n.lift(new Lu(e,t))}}function dn(e){return e in Ni&&(delete Ni[e],!0)}function pc(){}function ea(e,t){return function(n){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Mu(e,t))}}function en(e,t,n){if(t){if(!fd(t))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return en(e,n).apply(void 0,r).pipe(ea((function(e){return Nb(e)?t.apply(void 0,e):t(e)})))};n=t}return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,o=this,a={context:o,subject:i,callbackFunc:e,scheduler:n};return new Y((function(r){if(n)return n.schedule(Nu,0,{args:t,subscriber:r,params:a});if(!i){i=new Gf;try{e.apply(o,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i.next(1>=e.length?e[0]:e),i.complete()}]))}catch(e){Ki(i)?i.error(e):console.warn(e)}}return i.subscribe(r)}))}}function Nu(e){var t=this,n=e.args,r=e.subscriber,i=e.params;e=i.callbackFunc;var o=i.context,a=i.scheduler,s=i.subject;if(!s){s=i.subject=new Gf,i=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t.add(a.schedule(Ou,0,{value:1>=e.length?e[0]:e,subject:s}))};try{e.apply(o,n.concat([i]))}catch(e){s.error(e)}}this.add(s.subscribe(r))}function Ou(e){var t=e.subject;t.next(e.value),t.complete()}function fn(e,t,n){if(t){if(!fd(t))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return fn(e,n).apply(void 0,r).pipe(ea((function(e){return Nb(e)?t.apply(void 0,e):t(e)})))};n=t}return function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i={subject:void 0,args:t,callbackFunc:e,scheduler:n,context:this};return new Y((function(r){var o=i.context,a=i.subject;if(n)return n.schedule(Pu,0,{params:i,subscriber:r,context:o});if(!a){a=i.subject=new Gf;try{e.apply(o,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];(t=e.shift())?a.error(t):(a.next(1>=e.length?e[0]:e),a.complete())}]))}catch(e){Ki(a)?a.error(e):console.warn(e)}}return a.subscribe(r)}))}}function Pu(e){var t=this,n=e.params,r=e.subscriber;e=e.context;var i=n.callbackFunc,o=n.args,a=n.scheduler,s=n.subject;if(!s){s=n.subject=new Gf,n=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];(n=e.shift())?t.add(a.schedule(gn,0,{err:n,subject:s})):t.add(a.schedule(Qu,0,{value:1>=e.length?e[0]:e,subject:s}))};try{i.apply(e,o.concat([n]))}catch(e){this.add(a.schedule(gn,0,{err:e,subject:s}))}}this.add(s.subscribe(r))}function Qu(e){var t=e.subject;t.next(e.value),t.complete()}function gn(e){e.subject.error(e.err)}function hn(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}function Oi(e,t,n,r,i){if(void 0===i&&(i=new Ru(e,n,r)),!i.closed)return t instanceof Y?t.subscribe(i):Hf(t)(i)}function Su(e,t){return new Y((function(n){var r=new Ta;return r.add(t.schedule((function(){var i=e[Be]();r.add(i.subscribe({next:function(e){r.add(t.schedule((function(){return n.next(e)})))},error:function(e){r.add(t.schedule((function(){return n.error(e)})))},complete:function(){r.add(t.schedule((function(){return n.complete()})))}}))}))),r}))}function Tu(e,t){return new Y((function(n){var r=new Ta;return r.add(t.schedule((function(){return e.then((function(e){r.add(t.schedule((function(){n.next(e),r.add(t.schedule((function(){return n.complete()})))})))}),(function(e){r.add(t.schedule((function(){return n.error(e)})))}))}))),r}))}function Uu(e,t){if(!e)throw Error("Iterable cannot be null");return new Y((function(n){var r,i=new Ta;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(t.schedule((function(){r=e[gd](),i.add(t.schedule((function(){if(!n.closed){try{var e=r.next(),t=e.value,i=e.done}catch(e){return void n.error(e)}i?n.complete():(n.next(t),this.schedule())}})))}))),i}))}function jn(e,t){if(null!=e){if(e&&"function"==typeof e[Be])return Su(e,t);if(hn(e))return Tu(e,t);if(kn(e))return Mi(e,t);if(e&&"function"==typeof e[gd]||"string"==typeof e)return Uu(e,t)}throw new TypeError((null!==e&&V(e)||e)+" is not observable")}function Ob(e,t){return t?jn(e,t):e instanceof Y?e:new Y(Hf(e))}function qc(e,t){if(!t.closed){if(e instanceof Y)return e.subscribe(t);try{var n=Hf(e)(t)}catch(e){t.error(e)}return n}}function fb(e,t,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof t?function(r){return r.pipe(fb((function(n,r){return Ob(e(n,r)).pipe(ea((function(e,i){return t(n,e,r,i)})))}),n))}:("number"==typeof t&&(n=t),function(t){return t.lift(new Vu(e,n))})}function Qg(e){return void 0===e&&(e=Number.POSITIVE_INFINITY),fb(ed,e)}function ln(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Qg(1)(eb.apply(void 0,e))}function hd(e){return new Y((function(t){try{var n=e()}catch(e){return void t.error(e)}return(n?Ob(n):Ef()).subscribe(t)}))}function mn(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){var n=e[0];if(Nb(n))return Rg(n,null);if(Ji(n)&&Object.getPrototypeOf(n)===Object.prototype)return Rg((e=Object.keys(n)).map((function(e){return n[e]})),e)}if("function"==typeof e[e.length-1]){var r=e.pop();return Rg(e=1===e.length&&Nb(e[0])?e[0]:e,null).pipe(ea((function(e){return r.apply(void 0,e)})))}return Rg(e,null)}function Rg(e,t){return new Y((function(n){var r=e.length;if(0===r)n.complete();else for(var i=Array(r),o=0,a=0,s=function(s){var u=Ob(e[s]),c=!1;n.add(u.subscribe({next:function(e){c||(c=!0,a++),i[s]=e},error:function(e){return n.error(e)},complete:function(){++o!==r&&c||(a===r&&n.next(t?t.reduce((function(e,t,n){return e[t]=i[n],e}),{}):i),n.complete())}}))},u=0;u<r;u++)s(u)}))}function jb(e,t,n,r){return ze(n)&&(r=n,n=void 0),r?jb(e,t,n).pipe(ea((function(e){return Nb(e)?r.apply(void 0,e):r(e)}))):new Y((function(r){nn(e,t,(function(e){1<arguments.length?r.next(Array.prototype.slice.call(arguments)):r.next(e)}),r,n)}))}function nn(e,t,n,r,i){if(e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener){e.addEventListener(t,n,i);var o=function(){return e.removeEventListener(t,n,i)}}else if(e&&"function"==typeof e.on&&"function"==typeof e.off)e.on(t,n),o=function(){return e.off(t,n)};else if(e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener)e.addListener(t,n),o=function(){return e.removeListener(t,n)};else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var a=0,s=e.length;a<s;a++)nn(e[a],t,n,r,i)}r.add(o)}function on(e,t,n){return n?on(e,t).pipe(ea((function(e){return Nb(e)?n.apply(void 0,e):n(e)}))):new Y((function(n){var r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.next(1===e.length?e[0]:e)};try{var i=e(r)}catch(e){return void n.error(e)}if(ze(t))return function(){return t(r,i)}}))}function Wu(e){var t=e.subscriber,n=e.condition;if(!t.closed){if(e.needIterate)try{e.state=e.iterate(e.state)}catch(e){return void t.error(e)}else e.needIterate=!0;if(n){var r=void 0;try{r=n(e.state)}catch(e){return void t.error(e)}if(!r)return void t.complete();if(t.closed)return}try{var i=e.resultSelector(e.state)}catch(e){return void t.error(e)}if(!t.closed&&(t.next(i),!t.closed))return this.schedule(e)}}function Pi(e){return!Nb(e)&&0<=e-parseFloat(e)+1}function pn(e,t){return void 0===e&&(e=0),void 0===t&&(t=id),(!Pi(e)||0>e)&&(e=0),t&&"function"==typeof t.schedule||(t=id),new Y((function(n){return n.add(t.schedule(Xu,e,{subscriber:n,counter:0,period:e})),n}))}function Xu(e){var t=e.subscriber,n=e.counter;e=e.period,t.next(n),this.schedule({subscriber:t,counter:n+1,period:e},e)}function cc(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];t=Number.POSITIVE_INFINITY;var n=null,r=e[e.length-1];return fd(r)?(n=e.pop(),1<e.length&&"number"==typeof e[e.length-1]&&(t=e.pop())):"number"==typeof r&&(t=e.pop()),null===n&&1===e.length&&e[0]instanceof Y?e[0]:Qg(t)(Ff(e,n))}function Qi(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)return yb;var n=e[0],r=e.slice(1);return 1===e.length&&Nb(n)?Qi.apply(void 0,n):new Y((function(e){var t=function(){return e.add(Qi.apply(void 0,r).subscribe(e))};return Ob(n).subscribe({next:function(t){e.next(t)},error:t,complete:t})}))}function Yu(e){var t=e.keys,n=e.index,r=e.subscriber,i=e.subscription;if(e=e.obj,!r.closed)if(n<t.length){var o=t[n];r.next([o,e[o]]),i.add(this.schedule({keys:t,index:n+1,subscriber:r,subscription:i,obj:e}))}else r.complete()}function Zu(e,t){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=e,n.thisArg=t,n}function zb(e,t){return function(n){return n.lift(new $u(e,t))}}function Da(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){if(!Nb(e[0]))return e[0];e=e[0]}return Ff(e,void 0).lift(new av)}function bv(e){var t=e.start,n=e.index,r=e.subscriber;n>=e.count?r.complete():(r.next(t),r.closed||(e.index=n+1,e.start=t+1,this.schedule(e)))}function Kc(e,t,n){void 0===e&&(e=0);var r=-1;return Pi(t)?r=1>Number(t)?1:Number(t):fd(t)&&(n=t),fd(n)||(n=id),new Y((function(t){var i=Pi(e)?e:+e-n.now();return n.schedule(cv,i,{index:0,period:r,subscriber:t})}))}function cv(e){var t=e.index,n=e.period,r=e.subscriber;if(r.next(t),!r.closed){if(-1===n)return r.complete();e.index=t+1,this.schedule(e,n)}}function Ri(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return"function"==typeof(t=e[e.length-1])&&e.pop(),Ff(e,void 0).lift(new dv(t))}function Ja(e){return function(t){var n=new ev(e);return t=t.lift(n),n.caught=t}}function Si(e,t){return fb(e,t,1)}function qn(e){return void 0===e&&(e=null),function(t){return t.lift(new fv(e))}}function jd(e,t){void 0===t&&(t=id);var n=e instanceof Date&&!isNaN(+e)?+e-t.now():Math.abs(e);return function(e){return e.lift(new gv(n,t))}}function rn(e,t){return function(n){return n.lift(new hv(e,t))}}function Md(e){return void 0===e&&(e=iv),function(t){return t.lift(new jv(e))}}function iv(){return new Sg}function Pa(e){return function(t){return 0===e?Ef():t.lift(new kv(e))}}function sn(e,t){return t?function(n){return n.pipe(sn((function(n,r){return Ob(e(n,r)).pipe(ea((function(e,i){return t(n,e,r,i)})))})))}:function(t){return t.lift(new lv(e))}}function Tg(e){return function(t){return t.lift(new mv(e))}}function aa(e,t){var n=2<=arguments.length;return function(r){return r.pipe(e?zb((function(t,n){return e(t,n,r)})):ed,Pa(1),n?qn(t):Md((function(){return new Sg})))}}function nv(){return function(e){return e.lift(new ov)}}function tn(e){return function(t){return 0===e?Ef():t.lift(new pv(e))}}function If(e){return function(t){return t.lift(new qv(e))}}function Ug(e,t){var n=!1;return 2<=arguments.length&&(n=!0),function(r){return r.lift(new rv(e,t,n))}}function un(e,t){return 2<=arguments.length?function(n){return Li(Ug(e,t),tn(1),qn(t))(n)}:function(t){return Li(Ug((function(t,n,r){return e(t,n,r+1)})),tn(1))(t)}}function sv(e,t){return function(n){var r="function"==typeof e?e:function(){return e};if("function"==typeof t)return n.lift(new tv(r,t));var i=Object.create(n,uv);return i.source=n,i.subjectFactory=r,i}}function Ce(e){return function(t){return t.lift(new vv(e,t))}}function wv(){return new Ua}function De(){return function(e){return bn()(sv(wv)(e))}}function vn(e,t,n){var r=e&&"object"===V(e)?e:{bufferSize:e,windowTime:t,refCount:!1,scheduler:n};return function(e){return e.lift(xv(r))}}function xv(e){var t,n,r=e.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=void 0===(r=e.windowTime)?Number.POSITIVE_INFINITY:r,a=e.refCount,s=e.scheduler,u=0,c=!1,l=!1;return function(e){if(u++,!t||c){c=!1;var r=(t=new Ee(i,o,s)).subscribe(this);n=e.subscribe({next:function(e){t.next(e)},error:function(e){c=!0,t.error(e)},complete:function(){l=!0,n=void 0,t.complete()}}),l&&(n=void 0)}else r=t.subscribe(this);this.add((function(){u--,r.unsubscribe(),r=void 0,n&&!l&&a&&0===u&&(n.unsubscribe(),t=n=void 0)}))}}function Lc(e,t){return"function"==typeof t?function(n){return n.pipe(Lc((function(n,r){return Ob(e(n,r)).pipe(ea((function(e,i){return t(n,e,r,i)})))})))}:function(t){return t.lift(new yv(e))}}function rb(e){return function(t){return t.lift(new zv(e))}}function Av(e,t){return void 0===t&&(t=!1),function(n){return n.lift(new Bv(e,t))}}function ba(e,t,n){return function(r){return r.lift(new Cv(e,t,n))}}function Dv(e,t,n){return void 0===t&&(t=id),void 0===n&&(n=Ev),function(r){return r.lift(new Fv(e,t,n.leading,n.trailing))}}function Gv(e){e.subscriber.clearThrottle()}function Hv(e,t,n){return void 0===n&&(n=id),function(r){var i=e instanceof Date&&!isNaN(+e),o=i?+e-n.now():Math.abs(e);return r.lift(new Iv(o,i,t,n))}}function kb(e,t){return void 0===t&&(t=id),Hv(e,Z(new sb),t)}function Jv(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){var n;return"function"==typeof e[e.length-1]&&(n=e.pop()),t.lift(new Kv(e,n))}}function wn(e){(Ti||e)&&(xn.abort(),e&&(xn=new AbortController),Ti=e)}function yn(e,t,n,r,i){e!==t&&zn(t,(function(o,a){if(i||(i=new ue),ob(o)){o=i;var s=Ui(e,a),u=Ui(t,a),c=o.get(u);if(c)Vi(e,a,c);else{var l=void 0===(c=r?r(s,u,a+"",e,t,o):void 0);if(l){var f=Za(u),h=!f&&Bf(u),p=!f&&!h&&Gi(u);c=u,f||h||p?Za(s)?c=s:oc(s)&&Nd(s)?c=Bi(s):h?(l=!1,c=Lm(u,!0)):p?(l=!1,c=An(u,!0)):c=[]:Bn(u)||Jf(u)?(c=s,Jf(s)?c=Fe(s,Cf(s)):ob(s)&&!Wi(s)||(c=Mm(u))):l=!1}l&&(o.set(u,c),yn(c,u,n,r,o),o.delete(u)),Vi(e,a,c)}}else void 0===(s=r?r(Ui(e,a),o,a+"",e,t,i):void 0)&&(s=o),Vi(e,a,s)}),Cf)}function Lv(e){var t=1,n=Xi;1==(1>=arguments.length?0:arguments.length-1)?"number"==typeof(1>=arguments.length?void 0:arguments[1])?t=1>=arguments.length?void 0:arguments[1]:n=1>=arguments.length?void 0:arguments[1]:2==(1>=arguments.length?0:arguments.length-1)&&(t=1>=arguments.length?void 0:arguments[1],n=2>=arguments.length?void 0:arguments[2]);var r=t||1;return function(t){return t.pipe(Ug((function(t,i){var o=n.now(),a=o-e;if((t=t.filter((function(e){return e.until>a}))).length>=r){var s=t[t.length-1],u=t[0].until+e*Math.floor(t.length/r);t.push({delay:s.until<o?u-o:u-s.until,until:u,value:i})}else t.push({delay:0,until:o,value:i});return t}),[]),ea((function(e){return e[e.length-1]})),Si((function(e){var t=eb(e.value);return e.delay?t.pipe(jd(e.delay,n)):t})))}}function Mv(e,t){var n=(t=void 0===t?{protocols:Cn,makeWebSocket:Dn}:t).protocols,r=void 0===n?Cn:n,i=void 0===(t=t.makeWebSocket)?Dn:t;return new Y((function(t){var n,o=new Ua,a=i(e,r),s=!1,u=!1,c=!1,l=function(e){if(n)throw s=!0,e=Error("Web socket message factory function called more than once"),t.error(e),e;return n=e.subscribe((function(e){a.send(e)})),o};return a.onopen=function(){c=!0,u?(s=!0,a.close()):t.next(l)},a.onmessage=function(e){o.next(e.data)},a.onerror=function(e){s=!0,t.error(Error(e.message))},a.onclose=function(e){s||(s=!0,u?(t.complete(),o.complete()):t.error(Error(1e3===e.code?"Normal closure":e.reason)))},function(){u=!0,n&&n.unsubscribe(),s||(s=!0,c&&a.close())}}))}function Vg(){this._listeners={}}function En(e){return"undefined"!=typeof Float32Array?function(){function t(e,t,n){o[0]=e,t[n]=a[0],t[n+1]=a[1],t[n+2]=a[2],t[n+3]=a[3]}function n(e,t,n){o[0]=e,t[n]=a[3],t[n+1]=a[2],t[n+2]=a[1],t[n+3]=a[0]}function r(e,t){return a[0]=e[t],a[1]=e[t+1],a[2]=e[t+2],a[3]=e[t+3],o[0]}function i(e,t){return a[3]=e[t],a[2]=e[t+1],a[1]=e[t+2],a[0]=e[t+3],o[0]}var o=new Float32Array([-0]),a=new Uint8Array(o.buffer),s=128===a[3];e.writeFloatLE=s?t:n,e.writeFloatBE=s?n:t,e.readFloatLE=s?r:i,e.readFloatBE=s?i:r}():function(){function t(e,t,n,r){var i=0>t?1:0;if(i&&(t=-t),0===t)e(0<1/t?0:2147483648,n,r);else if(isNaN(t))e(2143289344,n,r);else if(34028234663852886e22<t)e((i<<31|2139095040)>>>0,n,r);else if(11754943508222875e-54>t)e((i<<31|Math.round(t/1401298464324817e-60))>>>0,n,r);else{var o=Math.floor(Math.log(t)/Math.LN2);e((i<<31|o+127<<23|8388607&Math.round(t*Math.pow(2,-o)*8388608))>>>0,n,r)}}function n(e,t,n){return n=e(t,n),e=2*(n>>31)+1,t=n>>>23&255,n&=8388607,255===t?n?NaN:1/0*e:0===t?1401298464324817e-60*e*n:e*Math.pow(2,t-150)*(n+8388608)}e.writeFloatLE=t.bind(null,Fn),e.writeFloatBE=t.bind(null,Gn),e.readFloatLE=n.bind(null,Hn),e.readFloatBE=n.bind(null,In)}(),"undefined"!=typeof Float64Array?function(){function t(e,t,n){o[0]=e,t[n]=a[0],t[n+1]=a[1],t[n+2]=a[2],t[n+3]=a[3],t[n+4]=a[4],t[n+5]=a[5],t[n+6]=a[6],t[n+7]=a[7]}function n(e,t,n){o[0]=e,t[n]=a[7],t[n+1]=a[6],t[n+2]=a[5],t[n+3]=a[4],t[n+4]=a[3],t[n+5]=a[2],t[n+6]=a[1],t[n+7]=a[0]}function r(e,t){return a[0]=e[t],a[1]=e[t+1],a[2]=e[t+2],a[3]=e[t+3],a[4]=e[t+4],a[5]=e[t+5],a[6]=e[t+6],a[7]=e[t+7],o[0]}function i(e,t){return a[7]=e[t],a[6]=e[t+1],a[5]=e[t+2],a[4]=e[t+3],a[3]=e[t+4],a[2]=e[t+5],a[1]=e[t+6],a[0]=e[t+7],o[0]}var o=new Float64Array([-0]),a=new Uint8Array(o.buffer),s=128===a[7];e.writeDoubleLE=s?t:n,e.writeDoubleBE=s?n:t,e.readDoubleLE=s?r:i,e.readDoubleBE=s?i:r}():function(){function t(e,t,n,r,i,o){var a=0>r?1:0;if(a&&(r=-r),0===r)e(0,i,o+t),e(0<1/r?0:2147483648,i,o+n);else if(isNaN(r))e(0,i,o+t),e(2146959360,i,o+n);else if(17976931348623157e292<r)e(0,i,o+t),e((a<<31|2146435072)>>>0,i,o+n);else if(22250738585072014e-324>r)e((r/=5e-324)>>>0,i,o+t),e((a<<31|r/4294967296)>>>0,i,o+n);else{var s=Math.floor(Math.log(r)/Math.LN2);1024===s&&(s=1023),e(4503599627370496*(r*=Math.pow(2,-s))>>>0,i,o+t),e((a<<31|s+1023<<20|1048576*r&1048575)>>>0,i,o+n)}}function n(e,t,n,r,i){return t=e(r,i+t),r=e(r,i+n),e=2*(r>>31)+1,t=4294967296*(1048575&r)+t,2047===(n=r>>>20&2047)?t?NaN:1/0*e:0===n?5e-324*e*t:e*Math.pow(2,n-1075)*(t+4503599627370496)}e.writeDoubleLE=t.bind(null,Fn,0,4),e.writeDoubleBE=t.bind(null,Gn,4,0),e.readDoubleLE=n.bind(null,Hn,0,4),e.readDoubleBE=n.bind(null,In,4,0)}(),e}function Fn(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}function Gn(e,t,n){t[n]=e>>>24,t[n+1]=e>>>16&255,t[n+2]=e>>>8&255,t[n+3]=255&e}function Hn(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function In(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}function $a(e,t){this.lo=e>>>0,this.hi=t>>>0}function Kf(e,t,n){this.fn=e,this.len=t,this.next=void 0,this.val=n}function Yi(){}function Nv(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function na(){this.len=0,this.tail=this.head=new Kf(Yi,0,0),this.states=null}function Zi(e,t,n){t[n]=255&e}function $i(e,t){this.len=e,this.next=void 0,this.val=t}function aj(e,t,n){for(;e.hi;)t[n++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;127<e.lo;)t[n++]=127&e.lo|128,e.lo>>>=7;t[n++]=e.lo}function bj(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24}function rc(){cj.call(this)}function Ov(e,t,n){40>e.length?W.utf8.write(e,t,n):t.utf8Write?t.utf8Write(e,n):t.write(e,n)}function dc(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function Qa(e){this.buf=e,this.pos=0,this.len=e.length}function dj(){var e=new Jn(0,0),t=0;if(!(4<this.len-this.pos)){for(;3>t;++t){if(this.pos>=this.len)throw dc(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,128>this.buf[this.pos++])return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;4>t;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,128>this.buf[this.pos++])return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,128>this.buf[this.pos++])return e;if(t=0,4<this.len-this.pos){for(;5>t;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,128>this.buf[this.pos++])return e}else for(;5>t;++t){if(this.pos>=this.len)throw dc(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,128>this.buf[this.pos++])return e}throw Error("invalid varint encoding")}function Wg(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function Kn(){if(this.pos+8>this.len)throw dc(this,8);return new Jn(Wg(this.buf,this.pos+=4),Wg(this.buf,this.pos+=4))}function Od(e){ej.call(this,e)}function Lf(e,t,n){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");W.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=!!t,this.responseDelimited=!!n}function Aa(e){return"string"==typeof e&&/^[\s\w!#$%&()+,.:;<=>?@[\]^{|}~-]{1,64}$/.test(e)&&"null"!==e}function Ln(e){try{var t=e.split(".").map((function(e){return Number(e)}))}catch(e){return!1}if(4!==t.length||0===t[0])return!1;for(e=0;e<t.length;e++){var n=t[e];if(!Number.isInteger(n)||0>n||255<n)return!1}return!0}function Mn(e,t){if(!Array.isArray(t)||0===t.length||32<t.length||t.some((function(e){return 0===e.length||32<e.length})))throw new H("arguments is not valid",Oa);if(!Aa(e))throw new H("ID is invalid",Oa)}function Mf(e){var t=e.attributes,n=e.attrSizeMap,r=e.maxAttrsCount,i=e.maxAttrValueSize;if(e=e.maxTotalSize,!Hd(t))throw new H("attributes must be an object",Oa);if(Object.keys(t).length>r)throw new lb("Exceed the limit of ".concat(r," attributes"),Ge);if(0===Object.keys(t).length)throw new H("The attributes is an empty object",Oa);var o=0,a=0;for(t=Object.entries(t);a<t.length;a++){var s=ua(t[a],2),u=s[1];s=new Blob([s[0]]).size;var c=new Blob([u]).size;if(0===s||32<s)throw new H("Invalid attribute key",Oa);if(c>i)throw new lb("Invalid attribute value, over the limit of ".concat(i," bytes"),Ge);if("string"!=typeof u||0===u.length)throw new H("Invalid attribute value",Oa);o+=s,o+=c}if(o>e)throw new lb("The attributes size overflow",Ge);if(void 0!==n){if(Object.keys(n).length>r)throw new lb("Exceed the limit of ".concat(r," attributes"),Ge);for(o=r=0,n=Object.entries(n);o<n.length;o++){if(a=(t=ua(n[o],2))[1],0===(t=new Blob([t[0]]).size))throw new H("Invalid attribute key",Oa);if(a>i)throw new lb("Invalid attribute value, over the limit of ".concat(i," bytes"),Ge);r+=t,r+=a}if(r>e)throw new lb("The attributes size overflow",Ge)}}function Xg(e,t){return Math.floor(Math.random()*(Math.floor(t)-Math.ceil(e)+1))+e}function Yg(){var e=Xg(0,4294967295),t=Xg(1,4294967295);return new U(e,t,!0)}function ab(e){return e.toString().padEnd(32,"0")}function Nn(e,t){return new TypeError("Unexpected ".concat(e,": ").concat(t))}function On(e,t){return e=e.split(".").map((function(e){return Number(e)})),t=t.split(".").map((function(e){return Number(e)})),Math.sqrt(1e3*Math.pow(e[0]-t[0],2)+100*Math.pow(e[1]-t[1],2)+10*Math.pow(e[2]-t[2],2)+1*Math.pow(e[3]-t[3],2))}function Pn(e){return e.lessThanOrEqual(Number.MAX_SAFE_INTEGER)?e.toNumber():e.toString()}function fj(e,t){t="".concat(e).concat(t||"");var n=Qn.get(t)||1;return Qn.set(t,n+1),"".concat(e).concat(n)}function Rn(e,t){var n="number"==typeof t?t:void 0!==t&&"string"!=typeof t?t.code:void 0;return t="number"!=typeof t&&"string"!=typeof t&&void 0!==t&&void 0!==t.serverCode?t.serverCode:void 0,n="".concat(void 0!==n?" Error Code ".concat(n):"").concat(void 0!==t?", server Code ".concat(t):""),e="string"==typeof e&&e?Zg(e):Array.isArray(e)&&"string"==typeof e[0]&&e[0]?Zg(Sn.apply(void 0,[e[0]].concat(G(e.slice(1))))):"","".concat(""===n?"":"".concat(n," - ")).concat(e)}function gj(e,t){return hj.apply(this,arguments)}function hj(){return(hj=J(x.mark((function e(t,n){return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n||!n.aborted){e.next=2;break}return e.abrupt("return");case 2:return e.abrupt("return",new Promise((function(e){setTimeout(e,t),null==n||n.addEventListener("abort",e)})));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Tn(e){return e instanceof Blob||"[object Blob]"===Object.prototype.toString.call(e)}function $g(e){var t=255&e,n=e>>8&255,r=e>>16&255;return"".concat(e>>24&255,".").concat(r,".").concat(n,".").concat(t)}function He(e,t,n){return ij.apply(this,arguments)}function ij(){return(ij=J(x.mark((function e(t,n,r){var i,o,a,s,u,c,l,f,h,p,d,v,b,g,y,m,E,w,_,O,A,I,k,R,T,S;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=n.body,o=n.headers,a=void 0===o?{}:o,s=n.timeout,u=void 0===s?1e4:s,c=n.signal,l=n.withCredentials,f=void 0!==l&&l,h=(r||{}).useBinaryResponse,p=void 0!==h&&h,(d=new XMLHttpRequest).open("POST",t,!0),d.responseType=p?"arraybuffer":"text",d.withCredentials=f,d.timeout=u,v=i instanceof FormData,b=i instanceof Uint8Array,!(1<(g=Object.keys(a).filter((function(e){return"content-type"===e.toLowerCase()}))).length)){e.next=14;break}throw new RangeError("multiple content-type");case 14:0===g.length&&(b?a["Content-Type"]="application/octet-stream":v||(a["Content-Type"]="application/json"));case 15:if("setRequestHeader"in d){e.next=46;break}return d.abort(),e.next=19,fetch(t,{body:v||b?i:JSON.stringify(i),cache:"no-cache",credentials:f?"include":"same-origin",headers:a,method:"POST",mode:"cors",referrer:"no-referrer",signal:c});case 19:if(y=e.sent,!(200<=(m=y.status)&&300>m||304===m)){e.next=31;break}if(!p){e.next=27;break}return e.next=25,y.arrayBuffer();case 25:return E=e.sent,e.abrupt("return",{status:m,responseData:E});case 27:return e.next=29,y.text();case 29:return w=e.sent,e.abrupt("return",{status:m,responseText:w});case 31:return _=new da(["Post XHR failure, status %d",m]),e.prev=32,e.next=35,y.text();case 35:throw O=e.sent,_.statusCode=m,_.message=O||"Request failed, status ".concat(m),_;case 41:throw e.prev=41,e.t0=e.catch(32),_.statusCode=m,_.message="Request failed, status ".concat(m),_;case 46:if(0!==Object.keys(a).length)for(A=0,I=Object.entries(a);A<I.length;A++)k=ua(I[A],2),R=k[0],T=k[1],d.setRequestHeader(R,T);return void 0!==c&&(S=function e(){d.abort(),c.removeEventListener("abort",e)},c.addEventListener("abort",S)),v||b?d.send(i):d.send(JSON.stringify(i)),e.abrupt("return",new Promise((function(e,t){d.onload=function(){var n=d.status;if(200<=n&&300>n||304===n)e(p?{status:n,responseData:d.response}:{status:n,responseText:d.responseText});else{var r=new da(["Post XHR failure, status %d",n]);r.statusCode=n,r.message=d.response||"Request failed, status ".concat(d.status),t(r)}},d.ontimeout=function(e){t(new gb(["XHR request timed out after %d ms",u],{originalError:e}))},d.onerror=function(){var e=new da(["Post XHR failure, status %d",d.status]);e.statusCode=d.status,e.message=d.response||"Request failed, status ".concat(d.status),t(e)},d.onabort=function(){try{t(new DOMException("The request aborted.","AbortError"))}catch(n){var e=Error("The request aborted.");e.name="AbortError",t(e)}}})));case 50:case"end":return e.stop()}}),e,null,[[32,41]])})))).apply(this,arguments)}function Un(e){return nj.apply(this,arguments)}function nj(){return(nj=J(x.mark((function e(t){var n;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new Image).src=t,e.abrupt("return",new Promise((function(e,t){n.onload=function(){e({width:n.width,height:n.height})},n.onerror=t})));case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Sv(e,t){return oj.apply(this,arguments)}function oj(){return(oj=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l,f,h;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.thumbnailHeight,i=void 0===r?0:r,o=t.thumbnailWidth,a=void 0===o?0:o,s=t.width,u=void 0===s?0:s,c=t.height,l=void 0===c?0:c,f=t.thumbnail,h=[],"number"==typeof i&&"number"==typeof a&&"number"==typeof u&&"number"==typeof l){e.next=5;break}throw new H("Invalid message params",Of);case 5:return 0>=u&&0>=l&&h.push(Un(Vn(n)).then((function(e){u=e.width,l=e.height}))),0>=a&&0>=i&&void 0!==f&&h.push(pj(f).then(function(){var e=J(x.mark((function e(t){var n;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Un(Vn(t));case 2:n=e.sent,a=n.width,i=n.height;case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())),e.next=9,Promise.all(h).catch((function(){}));case 9:return e.abrupt("return",{width:u,height:l,thumbnailWidth:a,thumbnailHeight:i});case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Wn(e,t){if(!Hd(e))throw new H("message object is not a plain object",t);if(void 0===e.messageType)if(e.rawMessage instanceof Uint8Array){if(e.messageType="RAW",void 0!==e.text)throw new H("Raw messages cannot have text property. Use description instead",t)}else{if("string"!=typeof e.text)throw new H("messageType is undefined",t);if(e.messageType="TEXT",void 0!==e.rawMessage)throw new H("Text messages cannot have rawMessage property",t)}}function dh(e){return qj.apply(this,arguments)}function qj(){return(qj=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l,f,h,p,d,v,b,g,y,m,E,w,_;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.message,r=t.peerId,i=t.toPeer,o=t.session,a=t.errorCodes,s=t.diff,u=t.logger,c=t.options,void 0!==o){e.next=3;break}throw new L("The client is not logged in. Cannot do the operation",a.NOT_LOGGED_IN);case 3:if(l=!1,"TEXT"!==n.messageType||!n.text.startsWith("AgoraRTMLegacyEndcallCompatibleMessagePrefix")||!i){e.next=11;break}if(f=n.text.split("_"),h=ua(f,3),p=h[0],d=h[1],void 0!==h[2]&&Aa(d)&&"AgoraRTMLegacyEndcallCompatibleMessagePrefix"===p){e.next=10;break}throw new H("Message is not valid",Ie);case 10:l=!0;case 11:if(v=Date.now(),b=o.messageSentTimes.length-1,!((g=o.messageSentTimes[b])&&g+3e3<v)){e.next=18;break}o.messageSentTimes=[v],e.next=29;break;case 18:y=b;case 19:if(!(0<=y)){e.next=28;break}if(!(o.messageSentTimes[y]+3e3<v)){e.next=23;break}return o.messageSentTimes=o.messageSentTimes.slice(y+1,b+1),e.abrupt("break",28);case 23:if(!(180<=b-y+1)){e.next=25;break}throw new lb("Message sent failed, exceeded the 180 message in 3 seconds",a.TOO_OFTEN);case 25:y--,e.next=19;break;case 28:o.messageSentTimes.push(v);case 29:e.t0=n.messageType,e.next="TEXT"===e.t0?32:"RAW"===e.t0?37:"FILE"===e.t0||"IMAGE"===e.t0?39:40;break;case 32:if(!l){e.next=36;break}return m=n.text.split("_"),E=ua(m,3),w=E[1],_=E[2],u.info("[rtm-API] EndCall message send api is called"),e.abrupt("return",o.sendInvitationMessage({peerId:r,type:"CallCancel",extra:_,channelId:w,callId:"0"}));case 36:return e.abrupt("return",o.sendTextMessage(n.text,r,i,c,1e4-s));case 37:return void 0===n.description&&(n.description=""),e.abrupt("return",o.sendRawMessage(n.rawMessage,n.description,r,i,c,1e4-s));case 39:return e.abrupt("return",o.sendMediaMessage(n.messageType,n,r,i,c,1e4-s));case 40:throw new H("Invalid message type",Ie);case 41:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Tv(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=e.replace(/(https?:\/\/)?(www.)?/i,"");return t||(n=n.split(".").slice(e.length-2).join(".")),-1!==n.indexOf("/")?n.split("/")[0]:n}function pa(e){if("string"!=typeof e)return"[Sensitive Info]";var t=Math.floor(.7*e.length),n=e.length;return Xn(e,t,n,"*".repeat(n-t))}function Yn(e,t,n){function r(i){if(void 0===e)return e;if(Km(i))return i;if(Array.isArray(i))return i.map(r);var o={},a=0;for(i=eh(i);a<i.length;a++){var s=ua(i[a],2),u=s[0];if("string"==typeof(s=s[1])&&n.includes(u)){o[u]="string"==typeof s?pa(s):"[Sensitive Info]";break}t.includes(u)?o[u]="[Hidden Info]":o[u]=null==s?s:n.includes(u)?"[Sensitive Info]":r(s)}return o}return Array.isArray(e)?e.map(r):r(e)}function Zn(e){return Object.getOwnPropertyNames(e).forEach((function(t){"object"==V(t=e[t])&&null!==t&&Zn(t)})),Object.freeze(e)}function ra(e){return new TextDecoder("utf-8").decode(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))}function fh(e){return(new TextEncoder).encode(e).length}function $n(){for(var e=0,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];for(t=0;t<n.length;t++)e+=n[t].length;for(e=new Uint8Array(e),r=t=0;r<n.length;r++){var i=n[r];e.set(i,t),t+=i.length}return e}function Je(e,t,n){var r=e.match(/([^?#]+)(\?[^#]*)?(#.*)?/);if(e=null==r?void 0:r[1],r=null==r?void 0:r[2]){var i;for(r=r.substr(1).split("&"),i=0;i<r.length;i++)if(r[i].split("=")[0]==t){r[i]=t+"="+encodeURIComponent(n);break}return i==r.length&&r.push(t+"="+encodeURIComponent(n)),e+"?"+r.join("&")}return e+"?"+t+"="+encodeURIComponent(n)}function pj(e){return new Promise((function(t,n){var r=new FileReader;r.onloadend=function(){var e=r.result||new ArrayBuffer(0);t(e)},r.onerror=n,r.readAsArrayBuffer(e)}))}function Uv(e,t){e=e=[e],"string"==typeof(t=t||{})&&(t={type:t});try{var n=new Blob(e,t)}catch(i){if("TypeError"!==i.name)throw i;n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder);for(var r=0;r<e.length;r+=1)n.append(e[r]);n=n.getBlob(t.type)}return n}function Xn(e,t,n,r){return"string"!=typeof e?"[Sensitive Info]":e.substring(0,t)+r+e.substring(n)}function Pd(e){return"string"==typeof e&&0!==e.length&&"false"!==e&&"null"!==e&&"undefined"!==e}function ao(e){var t=[];return function e(n){if(null===n||"object"!==V(n))return n;if(-1!==t.indexOf(n))return"[Circular]";if(t.push(n),"function"==typeof n.toJSON)try{var r=e(n.toJSON());return t.pop(),r}catch(e){return"[Throws: "+(e?e.message:"?")+"]"}return Array.isArray(n)?(r=n.map(e),t.pop(),r):(r=Object.keys(n).reduce((function(t,r){e:{if(Vv.call(n,r))try{var i=n[r];break e}catch(e){i="[Throws: "+(e?e.message:"?")+"]";break e}i=n[r]}return t[r]=e(i),t}),{}),t.pop(),r)}(e)}function Wv(e){if(!(100<(e=String(e)).length)&&(e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e))){var t=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*t;case"weeks":case"week":case"w":return 6048e5*t;case"days":case"day":case"d":return 864e5*t;case"hours":case"hour":case"hrs":case"hr":case"h":return 36e5*t;case"minutes":case"minute":case"mins":case"min":case"m":return 6e4*t;case"seconds":case"second":case"secs":case"sec":case"s":return 1e3*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return t}}}function gh(e,t,n,r){return Math.round(e/n)+" "+r+(t>=1.5*n?"s":"")}function Xv(e){var t=e.areas,n=e.excludedArea;if(1===t.length&&t[0]===D.GLOBAL&&n===D.CHINA)return Ke([D.OVERSEA]);if(t.includes(D.GLOBAL)){if(e=Pf(hh).filter((function(e){return e!==D.GLOBAL&&e!==D.OVERSEA})),n in Qf){t=Qf[n];var r=[].concat(G(null!=t?t:[]),[n]);return Ke(e.filter((function(e){return!r.includes(e)})))}if(bo(n)){var i=Yv(n);return Ke(e.filter((function(e){return e!==n&&e!==i})))}}if(bo(n)||n in Qf)return Ke(t);throw new H("Invalid excludedArea area config")}function Ra(e,t,n){void 0===n&&(n=Object.getOwnPropertyDescriptor(e,t));var r=n.value;return n.value=function(){for(var e=this,n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];this.invokeTracker.apply(this,["%s: ".concat(0<i.length?"%s with args: ".concat(i.map((function(){return"%o"}))):"%s"),this.name,t].concat(G(i.map(Le))));try{var a=r.apply(this,i)}catch(e){throw this.logError.apply(this,["".concat(void 0!==e.code?"Error Code ".concat(e.code,": "):"","%s failed").concat(0<i.length?" with args: ".concat(i.map((function(){return"%o"}))):""),t].concat(G(i.map(Le)))),e.originalError&&this.logError(e.originalError),this.errorTracker(e),e}var s=Date.now();return J(x.mark((function n(){var r,o;return x.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,a;case 3:r=n.sent,n.next=12;break;case 6:return n.prev=6,n.t0=n.catch(0),e.logError.apply(e,["".concat(void 0!==n.t0.code?"Error Code ".concat(n.t0.code,": "):"","%s failed").concat(0<i.length?" with args: ".concat(i.map((function(){return"%o"}))):""),t].concat(G(i.map(Le)))),n.t0.originalError&&e.logError(n.t0.originalError),e.errorTracker(n.t0),n.abrupt("return");case 12:r!==a?void 0===r?e.resultTracker("%s promise resolves after %dms",t,Date.now()-s):e.resultTracker("%s promise resolves after %dms, result is %o",t,Date.now()-s,Le(r)):"Object"!==Jc(r)||Hd(r)?e.resultTracker("%s result is %o",t,Le(r)):e.resultTracker("%s result is %s",t,r.name||(null===(o=r.constructor)||void 0===o?void 0:o.name));case 13:case"end":return n.stop()}}),n,null,[[0,6]])})))(),a},n}function Qb(e,t,n){void 0===n&&(n=Object.getOwnPropertyDescriptor(e,t));var r=n.value;return n.value=function(){for(var e=this,n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];this.invokeTracker.apply(this,["%s: ".concat(0<i.length?"%s with args: ".concat(i.map((function(){return"%o"}))):"%s"),this.name,t].concat(i));try{var a=r.apply(this,i)}catch(e){throw this.logError.apply(this,["".concat(void 0!==e.code?"Error Code ".concat(e.code,": "):"","%s failed").concat(0<i.length?" with args: ".concat(i.map((function(){return"%o"}))):""),t].concat(i)),e.originalError&&this.logError(e.originalError),this.errorTracker(e),e}var s=Date.now();return J(x.mark((function n(){var r,o;return x.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,a;case 3:r=n.sent,n.next=12;break;case 6:return n.prev=6,n.t0=n.catch(0),e.logError.apply(e,["".concat(void 0!==n.t0.code?"Error Code ".concat(n.t0.code,": "):"","%s failed").concat(0<i.length?" with args: ".concat(i.map((function(){return"%o"}))):""),t].concat(i)),n.t0.originalError&&e.logError(n.t0.originalError),e.errorTracker(n.t0),n.abrupt("return");case 12:r!==a?void 0===r?e.resultTracker("%s promise resolves after %dms",t,Date.now()-s):e.resultTracker("%s promise resolves after %dms, result is %o",t,Date.now()-s,r):"Object"!==Jc(r)||Hd(r)?e.resultTracker("%s result is %o",t,r):e.resultTracker("%s result is %s",t,r.name||(null===(o=r.constructor)||void 0===o?void 0:o.name));case 13:case"end":return n.stop()}}),n,null,[[0,6]])})))(),a},n}function Zv(e,t){var n="".concat(e,"Uri");if("number"!=typeof(n=rj[n])||0===n)throw new TypeError("Got Unknown URI Name");return t=new(e=co[e])(t),t=e.encode(t).finish(),new $v({uri:n,data:t})}function eo(e,t){var n=Pd(null);return"".concat(e.split(".").join("-"),".edge.").concat(n?null:t?"sd-rtn.com":"agora.io")}function hb(e,t,n){return sj.apply(this,arguments)}function sj(){return(sj=J(x.mark((function e(t,n,r){var i,o,a,s=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=3<s.length&&void 0!==s[3]&&s[3],o=aw[t].encode(n).finish(),a=function(){var e=J(x.mark((function e(n){var s,u,c,l=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(3<(u=1<l.length&&void 0!==l[1]?l[1]:0))){e.next=3;break}return e.abrupt("return");case 3:if(c=Je(c=r?"https://".concat(null!==(s=null==P?void 0:P.PROXY_NGINX[0])&&void 0!==s?s:"webrtc-cloud-proxy.sd-rtn.com","/rs/?h=").concat(n,"&p=443&d=events/proto-raw"):"https://".concat(n,"/events/proto-raw"),"sentTs",Math.ceil(Date.now()/1e3).toString()),c=Je(c,"id",bw[t].toString()),!i){e.next=9;break}return e.next=9,gj(1e4);case 9:return e.next=11,He(c,{body:o,timeout:2e4,headers:{"Content-Type":"application/octet-stream"}}).catch((function(e){return a(n,u+1)}));case 11:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),e.prev=3,e.next=6,a((null==P?void 0:P.EVENT_REPORT_DOMAIN[0])||Pd(null)&&null||"webcollector-rtm.agora.io");case 6:e.next=12;break;case 8:return e.prev=8,e.t0=e.catch(3),e.next=12,a(P&&fo(1<(null==P?void 0:P.EVENT_REPORT_DOMAIN.length)?null==P?void 0:P.EVENT_REPORT_DOMAIN.slice(1):null==P?void 0:P.EVENT_REPORT_DOMAIN)||"rtm.statscollector.sd-rtn.com");case 12:case"end":return e.stop()}}),e,null,[[3,8]])})))).apply(this,arguments)}function ib(e){return void 0===e?U.fromNumber(0):U.fromNumber(Date.now()-e)}function cw(e){return btoa(String.fromCharCode.apply({},e.replace(/\r|\n/g,"").replace(/([\dA-Fa-f]{2}) ?/g,"0x$1 ").replace(/ +$/,"").split(" ").map((function(e){return parseInt(e,16)})))).replace(/={1,2}$/,"")}function ih(e,t){return U.fromValue(e).eq(t)}function jh(e,t){var n=void 0===t?e.val:t,r=e.isBoolean;t=e.isNumber;var i=e.oneof,o=e.len;if(2!==[r,t,i].filter((function(e){return!e})).length)throw new TypeError("invalid field type");if(void 0!==n&&(e=!1,void 0!==i&&(i=tj(i),dw(i,ih).length===i.length&&void 0!==ew(i,(function(e){return ih(n,e)}))&&(e=!0)),r=void 0!==r&&(0===n||1===n)&&1===o,t=void 0!==t&&n.toString(2).length<=o,!(e||r||t)))throw Error("invalid field value")}function go(e){return e.reduce((function(e,t){return e.concat(t instanceof kh.UnsubscriptionError?t.errors:t)}),[])}function fw(e,t){do{2147483647==Rf?Rf=0:Rf++}while(Me.hasOwnProperty(Rf));var n=Rf;return Me[n]={callback:e,parameters:Array.prototype.slice.call(arguments,2)},uj.postMessage({name:"setInterval",fakeId:n,time:t}),n}function ho(e){return function(){var t=e();if(!t)throw new L("Client is not logged in. Cannot do the operation");return t}}var Ka="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},lh=function(e){return e&&e.Math==Math&&e},C=lh("object"==typeof globalThis&&globalThis)||lh("object"==typeof window&&window)||lh("object"==typeof self&&self)||lh("object"==typeof Ka&&Ka)||function(){return this}()||Function("return this")(),R=function(e){try{return!!e()}catch(e){return!0}},fa=!R((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),io={}.propertyIsEnumerable,jo=Object.getOwnPropertyDescriptor,Sf=jo&&!io.call({1:2},1)?function(e){return!!(e=jo(this,e))&&e.enumerable}:io,sc=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},gw={}.toString,ec=function(e){return gw.call(e).slice(8,-1)},hw="".split,Tf=R((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==ec(e)?hw.call(e,""):Object(e)}:Object,mb=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e},tb=function(e){return Tf(mb(e))},ha=function(e){return"object"==typeof e?null!==e:"function"==typeof e},tc=function(e,t){if(!ha(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!ha(r=n.call(e))||"function"==typeof(n=e.valueOf)&&!ha(r=n.call(e))||!t&&"function"==typeof(n=e.toString)&&!ha(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")},Va=function(e){return Object(mb(e))},iw={}.hasOwnProperty,Q=function(e,t){return iw.call(Va(e),t)},Ne=C.document,mh=ha(Ne)&&ha(Ne.createElement),ko=!fa&&!R((function(){return 7!=Object.defineProperty(mh?Ne.createElement("div"):{},"a",{get:function(){return 7}}).a})),lo=Object.getOwnPropertyDescriptor,Jb={f:fa?lo:function(e,t){if(e=tb(e),t=tc(t,!0),ko)try{return lo(e,t)}catch(e){}if(Q(e,t))return sc(!Sf.call(e,t),e[t])}},sa=function(e){if(!ha(e))throw TypeError(String(e)+" is not an object");return e},mo=Object.defineProperty,Wa={f:fa?mo:function(e,t,n){if(sa(e),t=tc(t,!0),sa(n),ko)try{return mo(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},Sa=fa?function(e,t,n){return Wa.f(e,t,sc(1,n))}:function(e,t,n){return e[t]=n,e},vj=function(e,t){try{Sa(C,e,t)}catch(n){C[e]=t}return t},kd=C["__core-js_shared__"]||vj("__core-js_shared__",{}),jw=Function.toString;"function"!=typeof kd.inspectSource&&(kd.inspectSource=function(e){return jw.call(e)});var wj=kd.inspectSource,no=C.WeakMap,kw="function"==typeof no&&/native code/.test(wj(no)),ld=cb((function(e){(e.exports=function(e,t){return kd[e]||(kd[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.12.1",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),lw=0,mw=Math.random(),Oe=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++lw+mw).toString(36)},oo=ld("keys"),nh=function(e){return oo[e]||(oo[e]=Oe(e))},Pe={},nw=C.WeakMap;if(kw||kd.state)var Qd=kd.state||(kd.state=new nw),ow=Qd.get,po=Qd.has,pw=Qd.set,xj=function(e,t){if(po.call(Qd,e))throw new TypeError("Object already initialized");return t.facade=e,pw.call(Qd,e,t),t},oh=function(e){return ow.call(Qd,e)||{}},yj=function(e){return po.call(Qd,e)};else{var Qe=nh("state");Pe[Qe]=!0,xj=function(e,t){if(Q(e,Qe))throw new TypeError("Object already initialized");return t.facade=e,Sa(e,Qe,t),t},oh=function(e){return Q(e,Qe)?e[Qe]:{}},yj=function(e){return Q(e,Qe)}}var La={set:xj,get:oh,has:yj,enforce:function(e){return yj(e)?oh(e):xj(e,{})},getterFor:function(e){return function(t){var n;if(!ha(t)||(n=oh(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}},Ea=cb((function(e){var t=La.get,n=La.enforce,r=String(String).split("String");(e.exports=function(e,t,i,o){var a=!!o&&!!o.unsafe,s=!!o&&!!o.enumerable;if(o=!!o&&!!o.noTargetGet,"function"==typeof i){"string"!=typeof t||Q(i,"name")||Sa(i,"name",t);var u=n(i);u.source||(u.source=r.join("string"==typeof t?t:""))}e===C?s?e[t]=i:vj(t,i):(a?!o&&e[t]&&(s=!0):delete e[t],s?e[t]=i:Sa(e,t,i))})(Function.prototype,"toString",(function(){return"function"==typeof this&&t(this).source||wj(this)}))})),qo=function(e){return"function"==typeof e?e:void 0},Rb=function(e,t){return 2>arguments.length?qo(C[e])||qo(C[e]):C[e]&&C[e][t]||C[e]&&C[e][t]},qw=Math.ceil,rw=Math.floor,fc=function(e){return isNaN(e=+e)?0:(0<e?rw:qw)(e)},sw=Math.min,va=function(e){return 0<e?sw(fc(e),9007199254740991):0},tw=Math.max,uw=Math.min,Ab=function(e,t){return 0>(e=fc(e))?tw(e+t,0):uw(e,t)},ro=function(e){return function(t,n,r){t=tb(t);var i=va(t.length);if(r=Ab(r,i),e&&n!=n){for(;i>r;)if((n=t[r++])!=n)return!0}else for(;i>r;r++)if((e||r in t)&&t[r]===n)return e||r||0;return!e&&-1}},so=ro(!0),zj=ro(!1),to=function(e,t){e=tb(e);var n,r=0,i=[];for(n in e)!Q(Pe,n)&&Q(e,n)&&i.push(n);for(;t.length>r;)Q(e,n=t[r++])&&(~zj(i,n)||i.push(n));return i},ph="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),vw=ph.concat("length","prototype"),Rd={f:Object.getOwnPropertyNames||function(e){return to(e,vw)}},Uf={f:Object.getOwnPropertySymbols},uo=Rb("Reflect","ownKeys")||function(e){var t=Rd.f(sa(e)),n=Uf.f;return n?t.concat(n(e)):t},vo=function(e,t){for(var n=uo(t),r=Wa.f,i=Jb.f,o=0;o<n.length;o++){var a=n[o];Q(e,a)||r(e,a,i(t,a))}},ww=/#|\.prototype\./,uc=function(e,t){return(e=xw[yw(e)])==zw||e!=Aw&&("function"==typeof t?R(t):!!t)},yw=uc.normalize=function(e){return String(e).replace(ww,".").toLowerCase()},xw=uc.data={},Aw=uc.NATIVE="N",zw=uc.POLYFILL="P",Bw=Jb.f,M=function(e,t){var n,r,i,o=e.target,a=e.global,s=e.stat;if(r=a?C:s?C[o]||vj(o,{}):(C[o]||{}).prototype)for(i in t){var u=t[i],c=e.noTargetGet?(n=Bw(r,i))&&n.value:r[i];if(!(n=uc(a?i:o+(s?".":"#")+i,e.forced))&&void 0!==c){if(typeof u==typeof c)continue;vo(u,c)}(e.sham||c&&c.sham)&&Sa(u,"sham",!0);try{Ea(r,i,u,e)}catch(e){}}},Aj=function(){var e=sa(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},vc=R((function(){var e=RegExp("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),Cw=R((function(){var e=RegExp("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),qh=RegExp.prototype.exec,Dw=ld("native-string-replace",String.prototype.replace),wo=qh,Bj=(c=/a/,a=/b*/g,qh.call(c,"a"),qh.call(a,"a"),0!==c.lastIndex||0!==a.lastIndex),xo=vc||Cw,Cj=void 0!==/()??/.exec("")[1],c,a;(Bj||Cj||xo)&&(wo=function(e){var t,n=xo&&this.sticky,r=Aj.call(this),i=this.source,o=0,a=e;if(n){-1===(r=r.replace("y","")).indexOf("g")&&(r+="g"),a=String(e).slice(this.lastIndex),0<this.lastIndex&&(!this.multiline||this.multiline&&"\n"!==e[this.lastIndex-1])&&(i="(?: "+i+")",a=" "+a,o++);var s=new RegExp("^(?:"+i+")",r)}if(Cj&&(s=new RegExp("^"+i+"$(?!\\s)",r)),Bj)var u=this.lastIndex;var c=qh.call(n?s:this,a);return n?c?(c.input=c.input.slice(o),c[0]=c[0].slice(o),c.index=this.lastIndex,this.lastIndex+=c[0].length):this.lastIndex=0:Bj&&c&&(this.lastIndex=this.global?c.index+c[0].length:u),Cj&&c&&1<c.length&&Dw.call(c[0],s,(function(){for(t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(c[t]=void 0)})),c});var Vf=wo;M({target:"RegExp",proto:!0,forced:/./.exec!==Vf},{exec:Vf});var Re=Rb("navigator","userAgent")||"",yo=C.process,zo=yo&&yo.versions,Ao=zo&&zo.v8;if(Ao)var md=Ao.split("."),Dj=4>md[0]?1:md[0]+md[1];else Re&&(md=Re.match(/Edge\/(\d+)/),(!md||74<=md[1])&&(md=Re.match(/Chrome\/(\d+)/))&&(Dj=md[1]));var nd=Dj&&+Dj,wc=!!Object.getOwnPropertySymbols&&!R((function(){return!String(Symbol())||!Symbol.sham&&nd&&41>nd})),Bo=wc&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Wf=ld("wks"),Xf=C.Symbol,Ew=Bo?Xf:Xf&&Xf.withoutSetter||Oe,qa=function(e){return Q(Wf,e)&&(wc||"string"==typeof Wf[e])||(wc&&Q(Xf,e)?Wf[e]=Xf[e]:Wf[e]=Ew("Symbol."+e)),Wf[e]},Fw=qa("species"),Ej=RegExp.prototype,Gw=!R((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),Co="$0"==="a".replace(/./,"$0"),Do=qa("replace"),Eo=!!/./[Do]&&""===/./[Do]("a","$0"),Hw=!R((function(){var e=/(?:)/,t=e.exec;return e.exec=function(){return t.apply(this,arguments)},2!==(e="ab".split(e)).length||"a"!==e[0]||"b"!==e[1]})),rh=function(e,t,n,r){var i=qa(e),o=!R((function(){var t={};return t[i]=function(){return 7},7!=""[e](t)})),a=o&&!R((function(){var t=!1,n=/a/;return"split"===e&&((n={constructor:{}}).constructor[Fw]=function(){return n},n.flags="",n[i]=/./[i]),n.exec=function(){return t=!0,null},n[i](""),!t}));if(!o||!a||"replace"===e&&(!Gw||!Co||Eo)||"split"===e&&!Hw){var s=/./[i],u=(n=n(i,""[e],(function(e,t,n,r,i){var a=t.exec;return a===Vf||a===Ej.exec?o&&!i?{done:!0,value:s.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),{REPLACE_KEEPS_$0:Co,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:Eo}))[1];Ea(String.prototype,e,n[0]),Ea(Ej,i,2==t?function(e,t){return u.call(e,this,t)}:function(e){return u.call(e,this)})}r&&Sa(Ej[i],"sham",!0)},Iw=qa("match"),Fj=function(e){var t;return ha(e)&&(void 0!==(t=e[Iw])?!!t:"RegExp"==ec(e))},Bb=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e},Jw=qa("species"),od=function(e,t){var n;return void 0===(e=sa(e).constructor)||null==(n=sa(e)[Jw])?t:Bb(n)},Fo=function(e){return function(t,n){t=String(mb(t)),n=fc(n);var r,i=t.length;if(0>n||n>=i)return e?"":void 0;var o=t.charCodeAt(n);return 55296>o||56319<o||n+1===i||56320>(r=t.charCodeAt(n+1))||57343<r?e?t.charAt(n):o:e?t.slice(n,n+2):r-56320+(o-55296<<10)+65536}},Kw=Fo(!1),Go=Fo(!0),Gj=function(e,t,n){return t+(n?Go(e,t).length:1)},Se=function(e,t){var n=e.exec;if("function"==typeof n){if("object"!=typeof(e=n.call(e,t)))throw TypeError("RegExp exec method returned something other than an Object or null");return e}if("RegExp"!==ec(e))throw TypeError("RegExp#exec called on incompatible receiver");return Vf.call(e,t)},Lw=[].push,Mw=Math.min;rh("split",2,(function(e,t,n){var r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||1<".".split(/()()/).length||"".split(/.?/).length?function(e,n){var r=String(mb(this));if(0===(n=void 0===n?4294967295:n>>>0))return[];if(void 0===e)return[r];if(!Fj(e))return t.call(r,e,n);var i,o,a,s=[],u=0;for(e=new RegExp(e.source,(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":"")+"g");(i=Vf.call(e,r))&&!((o=e.lastIndex)>u&&(s.push(r.slice(u,i.index)),1<i.length&&i.index<r.length&&Lw.apply(s,i.slice(1)),a=i[0].length,u=o,s.length>=n));)e.lastIndex===i.index&&e.lastIndex++;return u===r.length?(a||!e.test(""))&&s.push(""):s.push(r.slice(u)),s.length>n?s.slice(0,n):s}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:t.call(this,e,n)}:t;return[function(t,n){var i=mb(this),o=null==t?void 0:t[e];return void 0!==o?o.call(t,i,n):r.call(String(i),t,n)},function(e,i){var o=n(r,e,this,i,r!==t);if(o.done)return o.value;var a=sa(e);e=String(this);var s=od(a,RegExp);if(o=a.unicode,a=new s(vc?"^(?:"+a.source+")":a,(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(vc?"g":"y")),0===(i=void 0===i?4294967295:i>>>0))return[];if(0===e.length)return null===Se(a,e)?[e]:[];var u=0,c=0;for(s=[];c<e.length;){a.lastIndex=vc?0:c;var l,f=Se(a,vc?e.slice(c):e);if(null===f||(l=Mw(va(a.lastIndex+(vc?c:0)),e.length))===u)c=Gj(e,c,o);else{if(s.push(e.slice(u,c)),s.length===i)return s;for(u=1;u<=f.length-1;u++)if(s.push(f[u]),s.length===i)return s;c=u=l}}return s.push(e.slice(u)),s}]}),vc);var Nw=/^[\t\n\x0B\f\r \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff][\t\n\x0B\f\r \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff]*/,Ow=/[\t\n\x0B\f\r \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff][\t\n\x0B\f\r \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff]*$/,Hj=function(e){return function(t){return t=String(mb(t)),1&e&&(t=t.replace(Nw,"")),2&e&&(t=t.replace(Ow,"")),t}};Hj(1),Hj(2);var Ij=Hj(3),sh=C.parseInt,Pw=/^[+-]?0[Xx]/,Ho=8!==sh("\t\n\v\f\r                　\u2028\u2029\ufeff08")||22!==sh("\t\n\v\f\r                　\u2028\u2029\ufeff0x16")?function(e,t){return e=Ij(String(e)),sh(e,t>>>0||(Pw.test(e)?16:10))}:sh;M({global:!0,forced:parseInt!=Ho},{parseInt:Ho});var pd=function(e,t,n){if(Bb(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}},qd=Array.isArray||function(e){return"Array"==ec(e)},Qw=qa("species"),th=function(e,t){if(qd(e)){var n=e.constructor;"function"!=typeof n||n!==Array&&!qd(n.prototype)?ha(n)&&(null===(n=n[Qw])&&(n=void 0)):n=void 0}return new(void 0===n?Array:n)(0===t?0:t)},Io=[].push,rd=function(e){var t=1==e,n=2==e,r=3==e,i=4==e,o=6==e,a=7==e,s=5==e||o;return function(u,c,l,f){var h=Va(u),p=Tf(h);c=pd(c,l,3),l=va(p.length);var d,v=0;for(f=f||th,u=t?f(u,l):n||a?f(u,0):void 0;l>v;v++)if((s||v in p)&&(d=c(f=p[v],v,h),e))if(t)u[v]=d;else if(d)switch(e){case 3:return!0;case 5:return f;case 6:return v;case 2:Io.call(u,f)}else switch(e){case 4:return!1;case 7:Io.call(u,f)}return o?-1:r||i?i:u}},Sd=rd(0),Jo=rd(1),Ko=rd(2),Rw=rd(3),Sw=rd(4),Lo=rd(5),Mo=rd(6);rd(7);var Tw=qa("species"),Yf=function(e){return 51<=nd||!R((function(){var t=[];return(t.constructor={})[Tw]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},Uw=Yf("filter");M({target:"Array",proto:!0,forced:!Uw},{filter:function(e){return Ko(this,e,1<arguments.length?arguments[1]:void 0)}});var Mc=Object.keys||function(e){return to(e,ph)},Vw=R((function(){Mc(1)}));M({target:"Object",stat:!0,forced:Vw},{keys:function(e){return Mc(Va(e))}});var Te=function(e,t){var n=[][e];return!!n&&R((function(){n.call(null,t||function(){throw 1},1)}))},Ww=[].join,Xw=Tf!=Object,Yw=Te("join",",");M({target:"Array",proto:!0,forced:Xw||!Yw},{join:function(e){return Ww.call(tb(this),void 0===e?",":e)}});var Zw=Yf("map");M({target:"Array",proto:!0,forced:!Zw},{map:function(e){return Jo(this,e,1<arguments.length?arguments[1]:void 0)}});var Jj=function(e){var t=e.return;if(void 0!==t)return sa(t.call(e)).value},Ue={},$w=qa("iterator"),ax=Array.prototype,Kj=function(e){return void 0!==e&&(Ue.Array===e||ax[$w]===e)},Ve=function(e,t,n){(t=tc(t))in e?Wa.f(e,t,sc(0,n)):e[t]=n},bx=qa("toStringTag"),No={};No[bx]="z";var Lj="[object z]"===String(No),cx=qa("toStringTag"),dx="Arguments"==ec(function(){return arguments}()),We=Lj?ec:function(e){var t;if(void 0===e)var n="Undefined";else{if(null===e)var r="Null";else{e:{var i=e=Object(e);try{r=i[cx];break e}catch(e){}r=void 0}r="string"==typeof(n=r)?n:dx?ec(e):"Object"==(t=ec(e))&&"function"==typeof e.callee?"Arguments":t}n=r}return n},ex=qa("iterator"),Zf=function(e){if(null!=e)return e[ex]||e["@@iterator"]||Ue[We(e)]},Td=function(e){var t,n=Va(e),r="function"==typeof this?this:Array,i=arguments.length,o=1<i?arguments[1]:void 0,a=void 0!==o,s=Zf(n),u=0;if(a&&(o=pd(o,2<i?arguments[2]:void 0,2)),null==s||r==Array&&Kj(s)){var c=va(n.length);for(r=new r(c);c>u;u++)s=a?o(n[u],u):n[u],Ve(r,u,s)}else for(i=(n=s.call(n)).next,r=new r;!(t=i.call(n)).done;u++){if(a){s=n;var l=o;t=[t.value,u];try{c=l(sa(t)[0],t[1])}catch(e){throw Jj(s),e}}else c=t.value;Ve(r,u,s=c)}return r.length=u,r},Oo=qa("iterator"),Po=!1;try{var fx=0,Qo={next:function(){return{done:!!fx++}},return:function(){Po=!0}};Qo[Oo]=function(){return this},Array.from(Qo,(function(){throw 2}))}catch(c){}var uh=function(e,t){if(!t&&!Po)return!1;var n=!1;try{(t={})[Oo]=function(){return{next:function(){return{done:n=!0}}}},e(t)}catch(e){}return n},gx=!uh((function(e){Array.from(e)}));M({target:"Array",stat:!0,forced:gx},{from:Td});var Ro=!R((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),So=nh("IE_PROTO"),hx=Object.prototype,ac=Ro?Object.getPrototypeOf:function(e){return e=Va(e),Q(e,So)?e[So]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?hx:null},Mj=qa("iterator"),To=!1,ix=function(){return this},Ud;if([].keys){var Uo=[].keys();if("next"in Uo){var Vo=ac(ac(Uo));Vo!==Object.prototype&&(Ud=Vo)}else To=!0}(null==Ud||R((function(){var e={};return Ud[Mj].call(e)!==e})))&&(Ud={}),Q(Ud,Mj)||Sa(Ud,Mj,ix);var vh=Ud,wh=To,Wo=fa?Object.defineProperties:function(e,t){sa(e);for(var n,r=Mc(t),i=r.length,o=0;i>o;)Wa.f(e,n=r[o++],t[n]);return e},Nj=Rb("document","documentElement"),Xo=nh("IE_PROTO"),Oj=function(){},Pj,xh=function(){try{Pj=document.domain&&new ActiveXObject("htmlfile")}catch(e){}if(Pj){var e=Pj;e.write("<script><\/script>"),e.close(),e=e.parentWindow.Object}else(e=mh?Ne.createElement("iframe"):{}).style.display="none",Nj.appendChild(e),e.src="javascript:",(e=e.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),e=e.F;for(xh=e,e=ph.length;e--;)delete xh.prototype[ph[e]];return xh()};Pe[Xo]=!0;var Sb=Object.create||function(e,t){if(null!==e){Oj.prototype=sa(e);var n=new Oj;Oj.prototype=null,n[Xo]=e}else n=xh();return void 0===t?n:Wo(n,t)},jx=Wa.f,Yo=qa("toStringTag"),gc=function(e,t,n){e&&!Q(e=n?e:e.prototype,Yo)&&jx(e,Yo,{configurable:!0,value:t})},kx=function(){return this},Zo=function(e,t,n){return t+=" Iterator",e.prototype=Sb(vh,{next:sc(1,n)}),gc(e,t,!1),Ue[t]=kx,e},Ya=Object.setPrototypeOf||("__proto__"in{}?function(){var e=!1,t={};try{var n=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set;n.call(t,[]),e=t instanceof Array}catch(e){}return function(t,r){if(sa(t),!ha(r)&&null!==r)throw TypeError("Can't set "+String(r)+" as a prototype");return e?n.call(t,r):t.__proto__=r,t}}():void 0),$f=qa("iterator"),lx=function(){return this},Qj=function(e,t,n,r,i,o,a){Zo(n,t,r),r=function(e){if(e===i&&h)return h;if(!wh&&e in l)return l[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}};var s,u=t+" Iterator",c=!1,l=e.prototype,f=l[$f]||l["@@iterator"]||i&&l[i],h=!wh&&f||r(i),p="Array"==t&&l.entries||f;if(p&&(e=ac(p.call(new e)),vh!==Object.prototype&&e.next&&(ac(e)!==vh&&(Ya?Ya(e,vh):"function"!=typeof e[$f]&&Sa(e,$f,lx)),gc(e,u,!0))),"values"==i&&f&&"values"!==f.name&&(c=!0,h=function(){return f.call(this)}),l[$f]!==h&&Sa(l,$f,h),Ue[t]=h,i){var d={values:r("values"),keys:o?h:r("keys"),entries:r("entries")};if(a)for(s in d)!wh&&!c&&s in l||Ea(l,s,d[s]);else M({target:t,proto:!0,forced:wh||c},d)}return d},mx=La.set,nx=La.getterFor("String Iterator");Qj(String,"String",(function(e){mx(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e=nx(this),t=e.string,n=e.index;return n>=t.length?{value:void 0,done:!0}:(t=Go(t,n),e.index+=t.length,{value:t,done:!1})}));var Rj=qa("unscopables"),Sj=Array.prototype;null==Sj[Rj]&&Wa.f(Sj,Rj,{configurable:!0,value:Sb(null)});var Vd=function(e){Sj[Rj][e]=!0},$o=!0;"find"in[]&&Array(1).find((function(){$o=!1})),M({target:"Array",proto:!0,forced:$o},{find:function(e){return Lo(this,e,1<arguments.length?arguments[1]:void 0)}}),Vd("find");var ap=function(e){var t=String(mb(this)),n="";if(0>(e=fc(e))||1/0==e)throw RangeError("Wrong number of repetitions");for(;0<e;(e>>>=1)&&(t+=t))1&e&&(n+=t);return n};M({target:"String",proto:!0},{repeat:ap});var bp=[].indexOf,cp=!!bp&&0>1/[1].indexOf(1,-0),ox=Te("indexOf");M({target:"Array",proto:!0,forced:cp||!ox},{indexOf:function(e){return cp?bp.apply(this,arguments)||0:zj(this,e,1<arguments.length?arguments[1]:void 0)}});var iu=/(android|bb\d+|meego).+mobile|armv7l|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|samsungbrowser|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i,ju=/CrOS/,ku=/android|ipad|playbook|silk/i;pe.isMobile=pe,pe.default=pe,M({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991}),M({target:"Number",stat:!0},{isNaN:function(e){return e!=e}}),C.Number.isNaN;var px=Lj?{}.toString:function(){return"[object "+We(this)+"]"};Lj||Ea(Object.prototype,"toString",px,{unsafe:!0});var Nc=C.Promise,Xe=function(e,t,n){for(var r in t)Ea(e,r,t[r],n);return e},dp=qa("species"),ag=function(e){e=Rb(e);var t=Wa.f;fa&&e&&!e[dp]&&t(e,dp,{configurable:!0,get:function(){return this}})},hc=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e},bg=function(e,t){this.stopped=e,this.result=t},yh=function(e,t,n){var r,i=!(!n||!n.AS_ENTRIES),o=!(!n||!n.IS_ITERATOR),a=!(!n||!n.INTERRUPTED),s=pd(t,n&&n.that,1+i+a),u=function(e){return c&&Jj(c),new bg(!0,e)};if(t=function(e){return i?(sa(e),a?s(e[0],e[1],u):s(e[0],e[1])):a?s(e,u):s(e)},o)var c=e;else{if("function"!=typeof(o=Zf(e)))throw TypeError("Target is not iterable");if(Kj(o)){for(o=0,n=va(e.length);n>o;o++)if((r=t(e[o]))&&r instanceof bg)return r;return new bg(!1)}c=o.call(e)}for(e=c.next;!(o=e.call(c)).done;){try{r=t(o.value)}catch(e){throw Jj(c),e}if("object"==typeof r&&r&&r instanceof bg)return r}return new bg(!1)},ep=/(?:iphone|ipod|ipad).*applewebkit/i.test(Re),Oc="process"==ec(C.process),zh=C.location,Tj=C.setImmediate,fp=C.clearImmediate,qx=C.process,gp=C.MessageChannel,Uj=C.Dispatch,Vj=0,cg={},Wj=function(e){if(cg.hasOwnProperty(e)){var t=cg[e];delete cg[e],t()}},Xj=function(e){return function(){Wj(e)}},hp=function(e){Wj(e.data)},ip=function(e){C.postMessage(e+"",zh.protocol+"//"+zh.host)};if(!Tj||!fp)if(Tj=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return cg[++Vj]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},dg(Vj),Vj},fp=function(e){delete cg[e]},Oc)var dg=function(e){qx.nextTick(Xj(e))};else if(Uj&&Uj.now)dg=function(e){Uj.now(Xj(e))};else if(gp&&!ep){var jp=new gp,kp=jp.port2;jp.port1.onmessage=hp,dg=pd(kp.postMessage,kp,1)}else C.addEventListener&&"function"==typeof postMessage&&!C.importScripts&&zh&&"file:"!==zh.protocol&&!R(ip)?(dg=ip,C.addEventListener("message",hp,!1)):dg="onreadystatechange"in(mh?Ne.createElement("script"):{})?function(e){Nj.appendChild(mh?Ne.createElement("script"):{}).onreadystatechange=function(){Nj.removeChild(this),Wj(e)}}:function(e){setTimeout(Xj(e),0)};var Yj=Tj,rx=/web0s(?!.*chrome)/i.test(Re),sx=Jb.f,lp=C.MutationObserver||C.WebKitMutationObserver,mp=C.document,np=C.process,Ah=C.Promise,op=sx(C,"queueMicrotask"),pp=op&&op.value,Wd,eg;if(!pp){var Ch=function(){var e;for(Oc&&(e=np.domain)&&e.exit();Wd;){var t=Wd.fn;Wd=Wd.next;try{t()}catch(e){throw Wd?Bh():eg=void 0,e}}eg=void 0,e&&e.enter()};if(ep||Oc||rx||!lp||!mp)if(Ah&&Ah.resolve){var Zj=Ah.resolve(void 0);Zj.constructor=Ah;var tx=Zj.then,Bh=function(){tx.call(Zj,Ch)}}else Bh=Oc?function(){np.nextTick(Ch)}:function(){Yj.call(C,Ch)};else{var qp=!0,rp=mp.createTextNode("");new lp(Ch).observe(rp,{characterData:!0}),Bh=function(){rp.data=qp=!qp}}}var sp=pp||function(e){e={fn:e,next:void 0},eg&&(eg.next=e),Wd||(Wd=e,Bh()),eg=e},ux=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=Bb(t),this.reject=Bb(n)},ak={f:function(e){return new ux(e)}},bk=function(e,t){return sa(e),ha(t)&&t.constructor===e?t:((0,(e=ak.f(e)).resolve)(t),e.promise)},vx=function(e,t){var n=C.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))},ck=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}},wx="object"==typeof window,xx=qa("species"),tp=La.get,yx=La.set,zx=La.getterFor("Promise"),Xd=Nc&&Nc.prototype,Cb=Nc,Dh=Xd,up=C.TypeError,dk=C.document,ek=C.process,Ye=ak.f,Ax=Ye,Bx=!!(dk&&dk.createEvent&&C.dispatchEvent),vp="function"==typeof PromiseRejectionEvent,wp=!1,fg=uc("Promise",(function(){var e=wj(Cb)!==String(Cb);if(!e&&66===nd)return!0;if(51<=nd&&/native code/.test(Cb))return!1;var t=new Cb((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(t.constructor={})[xx]=n,!(wp=t.then((function(){}))instanceof n)||!e&&wx&&!vp})),Cx=fg||!uh((function(e){Cb.all(e).catch((function(){}))})),xp=function(e){var t;return!(!ha(e)||"function"!=typeof(t=e.then))&&t},fk=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;sp((function(){for(var r=e.value,i=1==e.state,o=0;n.length>o;){var a,s=n[o++],u=i?s.ok:s.fail,c=s.resolve,l=s.reject,f=s.domain;try{if(u){if(i||(2===e.rejection&&Dx(e),e.rejection=1),!0===u)var h=r;else if(f&&f.enter(),h=u(r),f){f.exit();var p=!0}h===s.promise?l(up("Promise-chain cycle")):(a=xp(h))?a.call(h,c,l):c(h)}else l(r)}catch(e){f&&!p&&f.exit(),l(e)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&Ex(e)}))}},yp=function(e,t,n){var r;if(Bx){var i=dk.createEvent("Event");i.promise=t,i.reason=n,i.initEvent(e,!1,!0),C.dispatchEvent(i)}else i={promise:t,reason:n};!vp&&(r=C["on"+e])?r(i):"unhandledrejection"===e&&vx("Unhandled promise rejection",n)},Ex=function(e){Yj.call(C,(function(){var t=e.facade,n=e.value;if(1!==e.rejection&&!e.parent){var r=ck((function(){Oc?ek.emit("unhandledRejection",n,t):yp("unhandledrejection",t,n)}));if(e.rejection=Oc||1!==e.rejection&&!e.parent?2:1,r.error)throw r.value}}))},Dx=function(e){Yj.call(C,(function(){var t=e.facade;Oc?ek.emit("rejectionHandled",t):yp("rejectionhandled",t,e.value)}))},Ze=function(e,t,n){return function(r){e(t,r,n)}},$e=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,fk(e,!0))},gk=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw up("Promise can't be resolved itself");var r=xp(t);r?sp((function(){var n={done:!1};try{r.call(t,Ze(gk,n,e),Ze($e,n,e))}catch(t){$e(n,t,e)}})):(e.value=t,e.state=1,fk(e,!1))}catch(t){$e({done:!1},t,e)}}};if(fg){Cb=function(e){hc(this,Cb,"Promise"),Bb(e),hk.call(this);var t=tp(this);try{e(Ze(gk,t),Ze($e,t))}catch(e){$e(t,e)}},Dh=Cb.prototype;var hk=function(e){yx(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})};hk.prototype=Xe(Dh,{then:function(e,t){var n=zx(this),r=Ye(od(this,Cb));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=Oc?ek.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&fk(n,!1),r.promise},catch:function(e){return this.then(void 0,e)}});var Fx=function(){var e=new hk,t=tp(e);this.promise=e,this.resolve=Ze(gk,t),this.reject=Ze($e,t)};if(ak.f=Ye=function(e){return e===Cb||e===Gx?new Fx(e):Ax(e)},"function"==typeof Nc&&Xd!==Object.prototype){var Hx=Xd.then;wp||(Ea(Xd,"then",(function(e,t){var n=this;return new Cb((function(e,t){Hx.call(n,e,t)})).then(e,t)}),{unsafe:!0}),Ea(Xd,"catch",Dh.catch,{unsafe:!0}));try{delete Xd.constructor}catch(c){}Ya&&Ya(Xd,Dh)}}M({global:!0,wrap:!0,forced:fg},{Promise:Cb}),gc(Cb,"Promise",!1),ag("Promise");var Gx=Rb("Promise");M({target:"Promise",stat:!0,forced:fg},{reject:function(e){var t=Ye(this);return t.reject.call(void 0,e),t.promise}}),M({target:"Promise",stat:!0,forced:fg},{resolve:function(e){return bk(this,e)}}),M({target:"Promise",stat:!0,forced:Cx},{all:function(e){var t=this,n=Ye(t),r=n.resolve,i=n.reject,o=ck((function(){var n=Bb(t.resolve),o=[],a=0,s=1;yh(e,(function(e){var u=a++,c=!1;o.push(void 0),s++,n.call(t,e).then((function(e){c||(c=!0,o[u]=e,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(e){var t=this,n=Ye(t),r=n.reject,i=ck((function(){var i=Bb(t.resolve);yh(e,(function(e){i.call(t,e).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}});var Ix=Math.floor,Jx="".replace,Kx=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,Lx=/\$([$&'`]|\d{1,2})/g,Mx=function(e,t,n,r,i,o){var a=n+e.length,s=r.length,u=Lx;return void 0!==i&&(i=Va(i),u=Kx),Jx.call(o,u,(function(o,u){switch(u.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,n);case"'":return t.slice(a);case"<":o=i[u.slice(1,-1)];break;default:var c=+u;if(0===c)return o;if(c>s)return 0===(c=Ix(c/10))?o:c<=s?void 0===r[c-1]?u.charAt(1):r[c-1]+u.charAt(1):o;o=r[c-1]}return void 0===o?"":o}))},Nx=Math.max,Ox=Math.min,Px=function(e){return void 0===e?e:String(e)};rh("replace",2,(function(e,t,n,r){var i=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,o=r.REPLACE_KEEPS_$0,a=i?"$":"$0";return[function(n,r){var i=mb(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):t.call(String(i),n,r)},function(e,r){if(!i&&o||"string"==typeof r&&-1===r.indexOf(a)){var s=n(t,e,this,r);if(s.done)return s.value}var u=sa(e);e=String(this),(s="function"==typeof r)||(r=String(r));var c=u.global;if(c){var l=u.unicode;u.lastIndex=0}for(var f=[];;){var h=Se(u,e);if(null===h)break;if(f.push(h),!c)break;""===String(h[0])&&(u.lastIndex=Gj(e,va(u.lastIndex),l))}for(l="",c=u=0;c<f.length;c++){h=f[c];for(var p=String(h[0]),d=Nx(Ox(fc(h.index),e.length),0),v=[],b=1;b<h.length;b++)v.push(Px(h[b]));h=h.groups,s?(v=[p].concat(v,d,e),void 0!==h&&v.push(h),h=String(r.apply(void 0,v))):h=Mx(p,e,d,v,h,r),d>=u&&(l+=e.slice(u,d)+h,u=d+p.length)}return l+e.slice(u)}]}));var Qx=Yf("slice"),Rx=qa("species"),Sx=[].slice,Tx=Math.max;M({target:"Array",proto:!0,forced:!Qx},{slice:function(e,t){var n=tb(this),r=va(n.length);if(e=Ab(e,r),t=Ab(void 0===t?r:t,r),qd(n)){var i=n.constructor;if("function"!=typeof i||i!==Array&&!qd(i.prototype)?ha(i)&&(null===(i=i[Rx])&&(i=void 0)):i=void 0,i===Array||void 0===i)return Sx.call(n,e,t)}for(i=new(void 0===i?Array:i)(Tx(t-e,0)),r=0;e<t;e++,r++)e in n&&Ve(i,r,n[e]);return i.length=r,i}});var Ux=La.set,Vx=La.getterFor("Array Iterator"),sd=Qj(Array,"Array",(function(e,t){Ux(this,{type:"Array Iterator",target:tb(e),index:0,kind:t})}),(function(){var e=Vx(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");Ue.Arguments=Ue.Array,Vd("keys"),Vd("values"),Vd("entries");var zp="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView,af=function(e){if(void 0===e)return 0;e=fc(e);var t=va(e);if(e!==t)throw RangeError("Wrong length or index");return t},Wx=Math.abs,Pc=Math.pow,Xx=Math.floor,Yx=Math.log,Zx=Math.LN2,ik=function(e){var t=Va(this),n=va(t.length),r=arguments.length,i=Ab(1<r?arguments[1]:void 0,n);for(n=void 0===(r=2<r?arguments[2]:void 0)?n:Ab(r,n);n>i;)t[i++]=e;return t},$x=Rd.f,ay=Wa.f,bf=La.get,Ap=La.set,ic=C.ArrayBuffer,Db=ic,jc=C.DataView,Eh=jc&&jc.prototype,Bp=Object.prototype,Fh=C.RangeError,Cp=function(e,t,n){var r,i=Array(n),o=(1<<(n=8*n-t-1))-1,a=o>>1,s=23===t?Pc(2,-24)-Pc(2,-77):0,u=0>e||0===e&&0>1/e?1:0,c=0;if((e=Wx(e))!=e||1/0===e){e=e!=e?1:0;var l=o}else l=Xx(Yx(e)/Zx),1>e*(r=Pc(2,-l))&&(l--,r*=2),2<=(e=1<=l+a?e+s/r:e+s*Pc(2,1-a))*r&&(l++,r/=2),l+a>=o?(e=0,l=o):1<=l+a?(e=(e*r-1)*Pc(2,t),l+=a):(e=e*Pc(2,a-1)*Pc(2,t),l=0);for(;8<=t;i[c++]=255&e,e/=256,t-=8);for(l=l<<t|e,n+=t;0<n;i[c++]=255&l,l/=256,n-=8);return i[--c]|=128*u,i},Dp=function(e,t){var n=e.length,r=8*n-t-1,i=(1<<r)-1,o=i>>1;r-=7,--n;var a=e[n--],s=127&a;for(a>>=7;0<r;s=256*s+e[n],n--,r-=8);var u=s&(1<<-r)-1;for(s>>=-r,r+=t;0<r;u=256*u+e[n],n--,r-=8);if(0===s)s=1-o;else{if(s===i)return u?NaN:a?-1/0:1/0;u+=Pc(2,t),s-=o}return(a?-1:1)*u*Pc(2,s-t)},Ep=function(e){return[255&e]},Fp=function(e){return[255&e,e>>8&255]},Gp=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},Hp=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},by=function(e){return Cp(e,23,4)},cy=function(e){return Cp(e,52,8)},Gh=function(e,t){ay(e.prototype,t,{get:function(){return bf(this)[t]}})},td=function(e,t,n,r){n=af(n);var i=bf(e);if(n+t>i.byteLength)throw Fh("Wrong index");return e=bf(i.buffer).bytes,n+=i.byteOffset,t=e.slice(n,n+t),r?t:t.reverse()},ud=function(e,t,n,r,i,o){n=af(n);var a=bf(e);if(n+t>a.byteLength)throw Fh("Wrong index");for(e=bf(a.buffer).bytes,n+=a.byteOffset,r=r(+i),i=0;i<t;i++)e[n+i]=r[o?i:t-i-1]};if(zp){if(!R((function(){ic(1)}))||!R((function(){new ic(-1)}))||R((function(){return new ic,new ic(1.5),new ic(NaN),"ArrayBuffer"!=ic.name}))){Db=function(e){return hc(this,Db),new ic(af(e))};for(var dy=Db.prototype=ic.prototype,Ip=$x(ic),Jp=0,jk;Ip.length>Jp;)(jk=Ip[Jp++])in Db||Sa(Db,jk,ic[jk]);dy.constructor=Db}Ya&&ac(Eh)!==Bp&&Ya(Eh,Bp);var Hh=new jc(new Db(2)),Kp=Eh.setInt8;Hh.setInt8(0,2147483648),Hh.setInt8(1,2147483649),!Hh.getInt8(0)&&Hh.getInt8(1)||Xe(Eh,{setInt8:function(e,t){Kp.call(this,e,t<<24>>24)},setUint8:function(e,t){Kp.call(this,e,t<<24>>24)}},{unsafe:!0})}else Db=function(e){hc(this,Db,"ArrayBuffer"),e=af(e),Ap(this,{bytes:ik.call(Array(e),0),byteLength:e}),fa||(this.byteLength=e)},jc=function(e,t,n){hc(this,jc,"DataView"),hc(e,Db,"DataView");var r=bf(e).byteLength;if(0>(t=fc(t))||t>r)throw Fh("Wrong offset");if(t+(n=void 0===n?r-t:va(n))>r)throw Fh("Wrong length");Ap(this,{buffer:e,byteLength:n,byteOffset:t}),fa||(this.buffer=e,this.byteLength=n,this.byteOffset=t)},fa&&(Gh(Db,"byteLength"),Gh(jc,"buffer"),Gh(jc,"byteLength"),Gh(jc,"byteOffset")),Xe(jc.prototype,{getInt8:function(e){return td(this,1,e)[0]<<24>>24},getUint8:function(e){return td(this,1,e)[0]},getInt16:function(e){var t=td(this,2,e,1<arguments.length?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=td(this,2,e,1<arguments.length?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return Hp(td(this,4,e,1<arguments.length?arguments[1]:void 0))},getUint32:function(e){return Hp(td(this,4,e,1<arguments.length?arguments[1]:void 0))>>>0},getFloat32:function(e){return Dp(td(this,4,e,1<arguments.length?arguments[1]:void 0),23)},getFloat64:function(e){return Dp(td(this,8,e,1<arguments.length?arguments[1]:void 0),52)},setInt8:function(e,t){ud(this,1,e,Ep,t)},setUint8:function(e,t){ud(this,1,e,Ep,t)},setInt16:function(e,t){ud(this,2,e,Fp,t,2<arguments.length?arguments[2]:void 0)},setUint16:function(e,t){ud(this,2,e,Fp,t,2<arguments.length?arguments[2]:void 0)},setInt32:function(e,t){ud(this,4,e,Gp,t,2<arguments.length?arguments[2]:void 0)},setUint32:function(e,t){ud(this,4,e,Gp,t,2<arguments.length?arguments[2]:void 0)},setFloat32:function(e,t){ud(this,4,e,by,t,2<arguments.length?arguments[2]:void 0)},setFloat64:function(e,t){ud(this,8,e,cy,t,2<arguments.length?arguments[2]:void 0)}});gc(Db,"ArrayBuffer"),gc(jc,"DataView");var gg={ArrayBuffer:Db,DataView:jc},kk=gg.ArrayBuffer,Lp=gg.DataView,Mp=kk.prototype.slice,ey=R((function(){return!new kk(2).slice(1,void 0).byteLength}));M({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:ey},{slice:function(e,t){if(void 0!==Mp&&void 0===t)return Mp.call(sa(this),e);var n=sa(this).byteLength;e=Ab(e,n),t=Ab(void 0===t?n:t,n),n=new(od(this,kk))(va(t-e));for(var r=new Lp(this),i=new Lp(n),o=0;e<t;)i.setUint8(o++,r.getUint8(e++));return n}});var fy=Wa.f,Ih=C.Int8Array,lk=Ih&&Ih.prototype,Np=C.Uint8ClampedArray,Op=Np&&Np.prototype,xc=Ih&&ac(Ih),kc=lk&&ac(lk),Pp=Object.prototype,Qp=Pp.isPrototypeOf,Rp=qa("toStringTag"),mk=Oe("TYPED_ARRAY_TAG"),Qc=zp&&!!Ya&&"Opera"!==We(C.opera),Sp=!1,Eb,yc={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},gy={BigInt64Array:8,BigUint64Array:8},Jh=function(e){return!!ha(e)&&(e=We(e),Q(yc,e)||Q(gy,e))};for(Eb in yc)C[Eb]||(Qc=!1);if((!Qc||"function"!=typeof xc||xc===Function.prototype)&&(xc=function(){throw TypeError("Incorrect invocation")},Qc))for(Eb in yc)C[Eb]&&Ya(C[Eb],xc);if((!Qc||!kc||kc===Pp)&&(kc=xc.prototype,Qc))for(Eb in yc)C[Eb]&&Ya(C[Eb].prototype,kc);if(Qc&&ac(Op)!==kc&&Ya(Op,kc),fa&&!Q(kc,Rp))for(Eb in Sp=!0,fy(kc,Rp,{get:function(){return ha(this)?this[mk]:void 0}}),yc)C[Eb]&&Sa(C[Eb],mk,Eb);var hg=Qc,Tp=Sp&&mk,Fa=function(e){if(Jh(e))return e;throw TypeError("Target is not a typed array")},cf=function(e){if(Ya){if(Qp.call(xc,e))return e}else for(var t in yc)if(Q(yc,Eb)){var n=C[t];if(n&&(e===n||Qp.call(n,e)))return e}throw TypeError("Target is not a typed array constructor")},Ba=function(e,t,n){if(fa){if(n)for(var r in yc){var i=C[r];if(i&&Q(i.prototype,e))try{delete i.prototype[e]}catch(e){}}kc[e]&&!n||Ea(kc,e,n?t:Qc&&lk[e]||t)}},Up=function(e,t,n){var r,i;if(fa){if(Ya){if(n)for(r in yc)if((i=C[r])&&Q(i,e))try{delete i[e]}catch(e){}if(xc[e]&&!n)return;try{return Ea(xc,e,n?t:Qc&&xc[e]||t)}catch(e){}}for(r in yc)!(i=C[r])||i[e]&&!n||Ea(i,e,t)}},Vp=xc,ig=kc,hy=C.ArrayBuffer,Yd=C.Int8Array,nk=!hg||!R((function(){Yd(1)}))||!R((function(){new Yd(-1)}))||!uh((function(e){new Yd,new Yd(null),new Yd(1.5),new Yd(e)}),!0)||R((function(){return 1!==new Yd(new hy(2),1,void 0).length})),Kh=function(e,t){if(0>(e=fc(e)))throw RangeError("The argument can't be less than 0");if(e%t)throw RangeError("Wrong offset");return e},ok=function(e){var t=Va(e),n=arguments.length,r=1<n?arguments[1]:void 0,i=void 0!==r,o=Zf(t);if(null!=o&&!Kj(o)){var a=o.call(t),s=a.next;for(t=[];!(o=s.call(a)).done;)t.push(o.value)}for(i&&2<n&&(r=pd(r,arguments[2],2)),o=va(t.length),a=new(cf(this))(o),n=0;o>n;n++)a[n]=i?r(t[n],n):t[n];return a},Lh=function(e,t,n){var r,i;return Ya&&"function"==typeof(r=t.constructor)&&r!==n&&ha(i=r.prototype)&&i!==n.prototype&&Ya(e,i),e},jg=cb((function(e){var t=Rd.f,n=La.get,r=La.set,i=Wa.f,o=Jb.f,a=Math.round,s=C.RangeError,u=gg.ArrayBuffer,c=gg.DataView,l=function(e,t){var n=0,r=t.length;for(e=new(cf(e))(r);r>n;)e[n]=t[n++];return e},f=function(e,t){i(e,t,{get:function(){return n(this)[t]}})},h=function(e){var t;return e instanceof u||"ArrayBuffer"==(t=We(e))||"SharedArrayBuffer"==t},p=function(e,t){return Jh(e)&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},d=function(e,t){return p(e,t=tc(t,!0))?sc(2,e[t]):o(e,t)},v=function(e,t,n){return!(p(e,t=tc(t,!0))&&ha(n)&&Q(n,"value"))||Q(n,"get")||Q(n,"set")||n.configurable||Q(n,"writable")&&!n.writable||Q(n,"enumerable")&&!n.enumerable?i(e,t,n):(e[t]=n.value,e)};fa?(hg||(Jb.f=d,Wa.f=v,f(ig,"buffer"),f(ig,"byteOffset"),f(ig,"byteLength"),f(ig,"length")),M({target:"Object",stat:!0,forced:!hg},{getOwnPropertyDescriptor:d,defineProperty:v}),e.exports=function(e,o,f){var p=e.match(/\d+$/)[0]/8,d=e+(f?"Clamped":"")+"Array",v="get"+e,b="set"+e,g=C[d],y=g;e=y&&y.prototype;var m={},E=function(e,t){i(e,t,{get:function(){var e=n(this);return e.view[v](t*p+e.byteOffset,!0)},set:function(e){var r=n(this);f&&(e=0>(e=a(e))?0:255<e?255:255&e),r.view[b](t*p+r.byteOffset,e,!0)},enumerable:!0})};hg?nk&&(y=o((function(e,t,n,r){return hc(e,y,d),Lh(ha(t)?h(t)?void 0!==r?new g(t,Kh(n,p),r):void 0!==n?new g(t,Kh(n,p)):new g(t):Jh(t)?l(y,t):ok.call(y,t):new g(af(t)),e,y)})),Ya&&Ya(y,Vp),Sd(t(g),(function(e){e in y||Sa(y,e,g[e])})),y.prototype=e):(y=o((function(e,t,n,i){hc(e,y,d);var o=0,a=0;if(ha(t)){if(!h(t))return Jh(t)?l(y,t):ok.call(y,t);var f=t;if(a=Kh(n,p),t=t.byteLength,void 0===i){if(t%p)throw s("Wrong length");if(0>(i=t-a))throw s("Wrong length")}else if((i=va(i)*p)+a>t)throw s("Wrong length");t=i/p}else t=af(t),f=new u(i=t*p);for(r(e,{buffer:f,byteOffset:a,byteLength:i,length:t,view:new c(f)});o<t;)E(e,o++)})),Ya&&Ya(y,Vp),e=y.prototype=Sb(ig)),e.constructor!==y&&Sa(e,"constructor",y),Tp&&Sa(e,Tp,d),m[d]=y,M({global:!0,forced:y!=g,sham:!hg},m),"BYTES_PER_ELEMENT"in y||Sa(y,"BYTES_PER_ELEMENT",p),"BYTES_PER_ELEMENT"in e||Sa(e,"BYTES_PER_ELEMENT",p),ag(d)}):e.exports=function(){}}));jg("Uint8",(function(e){return function(t,n,r){return e(this,t,n,r)}}));var iy=Math.min,jy=[].copyWithin||function(e,t){var n=Va(this),r=va(n.length),i=Ab(e,r),o=Ab(t,r),a=2<arguments.length?arguments[2]:void 0;for(r=iy((void 0===a?r:Ab(a,r))-o,r-i),a=1,o<i&&i<o+r&&(a=-1,o+=r-1,i+=r-1);0<r--;)o in n?n[i]=n[o]:delete n[i],i+=a,o+=a;return n};Ba("copyWithin",(function(e,t){return jy.call(Fa(this),e,t,2<arguments.length?arguments[2]:void 0)})),Ba("every",(function(e){return Sw(Fa(this),e,1<arguments.length?arguments[1]:void 0)})),Ba("fill",(function(e){return ik.apply(Fa(this),arguments)})),Ba("filter",(function(e){var t=Ko(Fa(this),e,1<arguments.length?arguments[1]:void 0),n=od(this,this.constructor),r=0,i=t.length;for(n=new(cf(n))(i);i>r;)n[r]=t[r++];return n})),Ba("find",(function(e){return Lo(Fa(this),e,1<arguments.length?arguments[1]:void 0)})),Ba("findIndex",(function(e){return Mo(Fa(this),e,1<arguments.length?arguments[1]:void 0)})),Ba("forEach",(function(e){Sd(Fa(this),e,1<arguments.length?arguments[1]:void 0)})),Ba("includes",(function(e){return so(Fa(this),e,1<arguments.length?arguments[1]:void 0)})),Ba("indexOf",(function(e){return zj(Fa(this),e,1<arguments.length?arguments[1]:void 0)}));var Wp=qa("iterator"),Xp=C.Uint8Array,ky=sd.values,ly=sd.keys,my=sd.entries,pk=Xp&&Xp.prototype[Wp],Yp=!!pk&&("values"==pk.name||null==pk.name),Zp=function(){return ky.call(Fa(this))};Ba("entries",(function(){return my.call(Fa(this))})),Ba("keys",(function(){return ly.call(Fa(this))})),Ba("values",Zp,!Yp),Ba(Wp,Zp,!Yp);var ny=[].join;Ba("join",(function(e){return ny.apply(Fa(this),arguments)}));var oy=Math.min,qk=[].lastIndexOf,$p=!!qk&&0>1/[1].lastIndexOf(1,-0),py=Te("lastIndexOf"),qy=$p||!py?function(e){if($p)return qk.apply(this,arguments)||0;var t=tb(this),n=va(t.length),r=n-1;for(1<arguments.length&&(r=oy(r,fc(arguments[1]))),0>r&&(r=n+r);0<=r;r--)if(r in t&&t[r]===e)return r||0;return-1}:qk;Ba("lastIndexOf",(function(e){return qy.apply(Fa(this),arguments)})),Ba("map",(function(e){return Jo(Fa(this),e,1<arguments.length?arguments[1]:void 0,(function(e,t){return new(cf(od(e,e.constructor)))(t)}))}));var aq=function(e){return function(t,n,r,i){Bb(n),t=Va(t);var o=Tf(t),a=va(t.length),s=e?a-1:0,u=e?-1:1;if(2>r)for(;;){if(s in o){i=o[s],s+=u;break}if(s+=u,e?0>s:a<=s)throw TypeError("Reduce of empty array with no initial value")}for(;e?0<=s:a>s;s+=u)s in o&&(i=n(i,o[s],s,t));return i}},bq=aq(!1),ry=aq(!0);Ba("reduce",(function(e){return bq(Fa(this),e,arguments.length,1<arguments.length?arguments[1]:void 0)})),Ba("reduceRight",(function(e){return ry(Fa(this),e,arguments.length,1<arguments.length?arguments[1]:void 0)}));var sy=Math.floor;Ba("reverse",(function(){for(var e,t=Fa(this).length,n=sy(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this}));var ty=R((function(){new Int8Array(1).set({})}));Ba("set",(function(e){Fa(this);var t=Kh(1<arguments.length?arguments[1]:void 0,1),n=this.length,r=Va(e),i=va(r.length),o=0;if(i+t>n)throw RangeError("Wrong length");for(;o<i;)this[t+o]=r[o++]}),ty);var uy=[].slice,vy=R((function(){new Int8Array(1).slice()}));Ba("slice",(function(e,t){e=uy.call(Fa(this),e,t);var n=od(this,this.constructor);t=0;var r=e.length;for(n=new(cf(n))(r);r>t;)n[t]=e[t++];return n}),vy),Ba("some",(function(e){return Rw(Fa(this),e,1<arguments.length?arguments[1]:void 0)}));var wy=[].sort;Ba("sort",(function(e){return wy.call(Fa(this),e)})),Ba("subarray",(function(e,t){var n=Fa(this),r=n.length;return e=Ab(e,r),new(od(n,n.constructor))(n.buffer,n.byteOffset+e*n.BYTES_PER_ELEMENT,va((void 0===t?r:Ab(t,r))-e))}));var Mh=C.Int8Array,cq=[].toLocaleString,xy=[].slice,yy=!!Mh&&R((function(){cq.call(new Mh(1))})),zy=R((function(){return[1,2].toLocaleString()!=new Mh([1,2]).toLocaleString()}))||!R((function(){Mh.prototype.toLocaleString.call([1,2])}));Ba("toLocaleString",(function(){return cq.apply(yy?xy.call(Fa(this)):Fa(this),arguments)}),zy);var dq=C.Uint8Array,Ay=dq&&dq.prototype||{},Nh=[].toString,By=[].join;R((function(){Nh.call({})}))&&(Nh=function(){return By.call(this)}),Ba("toString",Nh,Ay.toString!=Nh);var eq=gg.ArrayBuffer;M({global:!0,forced:C.ArrayBuffer!==eq},{ArrayBuffer:eq}),ag("ArrayBuffer");var Cy=Wa.f,rk=Function.prototype,Dy=rk.toString,Ey=/^\s*function ([^ (]*)/;!fa||"name"in rk||Cy(rk,"name",{configurable:!0,get:function(){try{return Dy.call(this).match(Ey)[1]}catch(e){return""}}});var fq=RegExp.prototype,gq=fq.toString,Fy=R((function(){return"/a/b"!=gq.call({source:"a",flags:"b"})})),Gy="toString"!=gq.name;(Fy||Gy)&&Ea(RegExp.prototype,"toString",(function(){var e=sa(this),t=String(e.source),n=e.flags;return"/"+t+"/"+(e=String(void 0===n&&e instanceof RegExp&&!("flags"in fq)?Aj.call(e):n))}),{unsafe:!0});var Hy=Yf("splice"),Iy=Math.max,Jy=Math.min;M({target:"Array",proto:!0,forced:!Hy},{splice:function(e,t){var n,r,i=Va(this),o=va(i.length),a=Ab(e,o),s=arguments.length;if(0===s?s=n=0:1===s?(s=0,n=o-a):(s-=2,n=Jy(Iy(fc(t),0),o-a)),9007199254740991<o+s-n)throw TypeError("Maximum allowed length exceeded");var u=th(i,n);for(r=0;r<n;r++){var c=a+r;c in i&&Ve(u,r,i[c])}if(u.length=n,s<n){for(r=a;r<o-n;r++){var l=r+s;(c=r+n)in i?i[l]=i[c]:delete i[l]}for(r=o;r>o-n+s;r--)delete i[r-1]}else if(s>n)for(r=o-n;r>a;r--)l=r+s-1,(c=r+n-1)in i?i[l]=i[c]:delete i[l];for(r=0;r<s;r++)i[r+a]=arguments[r+2];return i.length=o-n+s,u}});var sk={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},tk=qa("iterator"),hq=qa("toStringTag"),uk=sd.values,Oh;for(Oh in sk){var iq=C[Oh],Rc=iq&&iq.prototype;if(Rc){if(Rc[tk]!==uk)try{Sa(Rc,tk,uk)}catch(c){Rc[tk]=uk}if(Rc[hq]||Sa(Rc,hq,Oh),sk[Oh])for(var df in sd)if(Rc[df]!==sd[df])try{Sa(Rc,df,sd[df])}catch(c){Rc[df]=sd[df]}}}var jq=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t};rh("search",1,(function(e,t,n){return[function(t){var n=mb(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;e=sa(e);var i=String(this);return r=e.lastIndex,jq(r,0)||(e.lastIndex=0),i=Se(e,i),jq(e.lastIndex,r)||(e.lastIndex=r),null===i?-1:i.index}]})),cb((function(e){!function(t,n){e.exports?e.exports=n(t):n(t)}("undefined"!=typeof self?self:Ka,(function(e){function t(e){return btoa(e).replace(/=+$/,"").replace(/\+/g,"-").replace(/\//g,"_")}function n(e){return e=(e+="===").slice(0,-e.length%4),atob(e.replace(/-/g,"+").replace(/_/g,"/"))}function r(e){for(var t=new Uint8Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function i(e){return e instanceof ArrayBuffer&&(e=new Uint8Array(e)),String.fromCharCode.apply(String,e)}function o(e){var t={name:(e.name||e||"").toUpperCase().replace("V","v")};switch(t.name){case"SHA-1":case"SHA-256":case"SHA-384":case"SHA-512":break;case"AES-CBC":case"AES-GCM":case"AES-KW":e.length&&(t.length=e.length);break;case"HMAC":e.hash&&(t.hash=o(e.hash)),e.length&&(t.length=e.length);break;case"RSAES-PKCS1-v1_5":e.publicExponent&&(t.publicExponent=new Uint8Array(e.publicExponent)),e.modulusLength&&(t.modulusLength=e.modulusLength);break;case"RSASSA-PKCS1-v1_5":case"RSA-OAEP":e.hash&&(t.hash=o(e.hash)),e.publicExponent&&(t.publicExponent=new Uint8Array(e.publicExponent)),e.modulusLength&&(t.modulusLength=e.modulusLength);break;default:throw new SyntaxError("Bad algorithm name")}return t}function a(e){return{HMAC:{"SHA-1":"HS1","SHA-256":"HS256","SHA-384":"HS384","SHA-512":"HS512"},"RSASSA-PKCS1-v1_5":{"SHA-1":"RS1","SHA-256":"RS256","SHA-384":"RS384","SHA-512":"RS512"},"RSAES-PKCS1-v1_5":{"":"RSA1_5"},"RSA-OAEP":{"SHA-1":"RSA-OAEP","SHA-256":"RSA-OAEP-256"},"AES-KW":{128:"A128KW",192:"A192KW",256:"A256KW"},"AES-GCM":{128:"A128GCM",192:"A192GCM",256:"A256GCM"},"AES-CBC":{128:"A128CBC",192:"A192CBC",256:"A256CBC"}}[e.name][(e.hash||{}).name||e.length||""]}function s(e){(e instanceof ArrayBuffer||e instanceof Uint8Array)&&(e=JSON.parse(decodeURIComponent(escape(i(e)))));var t={kty:e.kty,alg:e.alg,ext:e.ext||e.extractable};switch(t.kty){case"oct":t.k=e.k;case"RSA":"n e d p q dp dq qi oth".split(" ").forEach((function(n){n in e&&(t[n]=e[n])}));break;default:throw new TypeError("Unsupported key type")}return t}function u(e){return e=s(e),E&&(e.extractable=e.ext,delete e.ext),r(unescape(encodeURIComponent(JSON.stringify(e)))).buffer}function c(e){var n=l(e),r=!1;switch(2<n.length&&(r=!0,n.shift()),e={ext:!0},n[0][0]){case"1.2.840.113549.1.1.1":var o="n e d p q dp dq qi".split(" ");for(n=l(n[1]),r&&n.shift(),r=0;r<n.length;r++)n[r][0]||(n[r]=n[r].subarray(1)),e[o[r]]=t(i(n[r]));e.kty="RSA";break;default:throw new TypeError("Unsupported key type")}return e}function l(e,t){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),t||(t={pos:0,end:e.length}),2>t.end-t.pos||t.end>e.length)throw new RangeError("Malformed DER");var n=e[t.pos++],r=e[t.pos++];if(128<=r){if(r&=127,t.end-t.pos<r)throw new RangeError("Malformed DER");for(var o=0;r--;)o<<=8,o|=e[t.pos++];r=o}if(t.end-t.pos<r)throw new RangeError("Malformed DER");switch(n){case 2:n=e.subarray(t.pos,t.pos+=r);break;case 3:if(e[t.pos++])throw Error("Unsupported bit string");r--;case 4:n=new Uint8Array(e.subarray(t.pos,t.pos+=r)).buffer;break;case 5:n=null;break;case 6:if(!((e=btoa(i(e.subarray(t.pos,t.pos+=r))))in _))throw Error("Unsupported OBJECT ID "+e);n=_[e];break;case 48:for(n=[],r=t.pos+r;t.pos<r;)n.push(l(e,t));break;default:throw Error("Unsupported DER tag 0x"+n.toString(16))}return n}function f(e,t){t||(t=[]);var n=t.length+2;if(t.push(0,0),e instanceof Uint8Array)for(var i=2,o=e.length,a=0;a<o;a++)t.push(e[a]);else if(e instanceof ArrayBuffer)for(i=4,o=e.byteLength,e=new Uint8Array(e),a=0;a<o;a++)t.push(e[a]);else if(null===e)i=5,o=0;else if("string"==typeof e&&e in O)for(i=6,o=(e=r(atob(O[e]))).length,a=0;a<o;a++)t.push(e[a]);else if(e instanceof Array){for(a=0;a<e.length;a++)f(e[a],t);i=48,o=t.length-n}else{if(!("object"===V(e)&&3===e.tag&&e.value instanceof ArrayBuffer))throw Error("Unsupported DER value "+e);for(i=3,o=(e=new Uint8Array(e.value)).byteLength,t.push(0),a=0;a<o;a++)t.push(e[a]);o++}if(128<=o){for(a=o,o=4,t.splice(n,0,a>>24&255,a>>16&255,a>>8&255,255&a);1<o&&!(a>>24);)a<<=8,o--;4>o&&t.splice(n,4-o),o|=128}return t.splice(n-2,2,i,o),t}function h(e,t,n,r){Object.defineProperties(this,{_key:{value:e},type:{value:e.type,enumerable:!0},extractable:{value:void 0===n?e.extractable:n,enumerable:!0},algorithm:{value:void 0===t?e.algorithm:t,enumerable:!0},usages:{value:void 0===r?e.usages:r,enumerable:!0}})}function p(e){return"verify"===e||"encrypt"===e||"wrapKey"===e}function d(e){return"sign"===e||"decrypt"===e||"unwrapKey"===e}if("function"!=typeof Promise)throw"Promise support required";var v=e.crypto||e.msCrypto;if(v){var b=v.subtle||v.webkitSubtle;if(b){var g=e.Crypto||v.constructor||Object,y=e.SubtleCrypto||b.constructor||Object;e.CryptoKey||e.Key;var m=-1<e.navigator.userAgent.indexOf("Edge/"),E=!!e.msCrypto&&!m,w=!v.subtle&&!!v.webkitSubtle;if(E||w){var _={KoZIhvcNAQEB:"1.2.840.113549.1.1.1"},O={"1.2.840.113549.1.1.1":"KoZIhvcNAQEB"};if(["generateKey","importKey","unwrapKey"].forEach((function(e){var t=b[e];b[e]=function(i,l,f){var g=[].slice.call(arguments);switch(e){case"generateKey":var y=o(i),m=l,_=f;break;case"importKey":y=o(f),m=g[3],_=g[4],"jwk"===i&&((l=s(l)).alg||(l.alg=a(y)),l.key_ops||(l.key_ops="oct"!==l.kty?"d"in l?_.filter(d):_.filter(p):_.slice()),g[1]=u(l));break;case"unwrapKey":y=g[4],m=g[5],_=g[6],g[2]=f._key}if("generateKey"===e&&"HMAC"===y.name&&y.hash)return y.length=y.length||{"SHA-1":512,"SHA-256":512,"SHA-384":1024,"SHA-512":1024}[y.hash.name],b.importKey("raw",v.getRandomValues(new Uint8Array(y.length+7>>3)),y,m,_);if(w&&"generateKey"===e&&"RSASSA-PKCS1-v1_5"===y.name&&(!y.modulusLength||2048<=y.modulusLength))return(i=o(i)).name="RSAES-PKCS1-v1_5",delete i.hash,b.generateKey(i,!0,["encrypt","decrypt"]).then((function(e){return Promise.all([b.exportKey("jwk",e.publicKey),b.exportKey("jwk",e.privateKey)])})).then((function(e){return e[0].alg=e[1].alg=a(y),e[0].key_ops=_.filter(p),e[1].key_ops=_.filter(d),Promise.all([b.importKey("jwk",e[0],y,!0,e[0].key_ops),b.importKey("jwk",e[1],y,m,e[1].key_ops)])})).then((function(e){return{publicKey:e[0],privateKey:e[1]}}));if((w||E&&"SHA-1"===(y.hash||{}).name)&&"importKey"===e&&"jwk"===i&&"HMAC"===y.name&&"oct"===l.kty)return b.importKey("raw",r(n(l.k)),f,g[3],g[4]);if(w&&"importKey"===e&&("spki"===i||"pkcs8"===i))return b.importKey("jwk",c(l),f,g[3],g[4]);if(E&&"unwrapKey"===e)return b.decrypt(g[3],f,l).then((function(e){return b.importKey(i,e,g[4],g[5],g[6])}));try{var O=t.apply(b,g)}catch(e){return Promise.reject(e)}return E&&(O=new Promise((function(e,t){O.onabort=O.onerror=function(e){t(e)},O.oncomplete=function(t){e(t.target.result)}}))),O=O.then((function(e){return"HMAC"!==y.name||y.length||(y.length=8*e.algorithm.length),0==y.name.search("RSA")&&(y.modulusLength||(y.modulusLength=(e.publicKey||e).algorithm.modulusLength),y.publicExponent||(y.publicExponent=(e.publicKey||e).algorithm.publicExponent)),e.publicKey&&e.privateKey?{publicKey:new h(e.publicKey,y,m,_.filter(p)),privateKey:new h(e.privateKey,y,m,_.filter(d))}:new h(e,y,m,_)}))}})),["exportKey","wrapKey"].forEach((function(e){var o=b[e];b[e]=function(u,c,l){var h=[].slice.call(arguments);switch(e){case"exportKey":h[1]=c._key;break;case"wrapKey":h[1]=c._key,h[2]=l._key}if((w||E&&"SHA-1"===(c.algorithm.hash||{}).name)&&"exportKey"===e&&"jwk"===u&&"HMAC"===c.algorithm.name&&(h[0]="raw"),!w||"exportKey"!==e||"spki"!==u&&"pkcs8"!==u||(h[0]="jwk"),E&&"wrapKey"===e)return b.exportKey(u,c).then((function(e){return"jwk"===u&&(e=r(unescape(encodeURIComponent(JSON.stringify(s(e)))))),b.encrypt(h[3],l,e)}));try{var v=o.apply(b,h)}catch(e){return Promise.reject(e)}return E&&(v=new Promise((function(e,t){v.onabort=v.onerror=function(e){t(e)},v.oncomplete=function(t){e(t.target.result)}}))),"exportKey"===e&&"jwk"===u&&(v=v.then((function(e){return(w||E&&"SHA-1"===(c.algorithm.hash||{}).name)&&"HMAC"===c.algorithm.name?{kty:"oct",alg:a(c.algorithm),key_ops:c.usages.slice(),ext:!0,k:t(i(e))}:((e=s(e)).alg||(e.alg=a(c.algorithm)),e.key_ops||(e.key_ops="public"===c.type?c.usages.filter(p):"private"===c.type?c.usages.filter(d):c.usages.slice()),e)}))),!w||"exportKey"!==e||"spki"!==u&&"pkcs8"!==u||(v=v.then((function(e){var t=[["",null]],i=!1;switch((e=s(e)).kty){case"RSA":for(var o="n e d p q dp dq qi".split(" "),a=[],u=0;u<o.length&&o[u]in e;u++){var c=a[u]=r(n(e[o[u]]));128&c[0]&&(a[u]=new Uint8Array(c.length+1),a[u].set(c,1))}2<a.length&&(i=!0,a.unshift(new Uint8Array([0]))),t[0][0]="1.2.840.113549.1.1.1";break;default:throw new TypeError("Unsupported key type")}return t.push(new Uint8Array(f(a)).buffer),i?t.unshift(new Uint8Array([0])):t[1]={tag:3,value:t[1]},new Uint8Array(f(t)).buffer}))),v}})),["encrypt","decrypt","sign","verify"].forEach((function(e){var t=b[e];b[e]=function(n,r,i,a){if(E&&(!i.byteLength||a&&!a.byteLength))throw Error("Empty input is not allowed");var s=[].slice.call(arguments),u=o(n);if(!E||"sign"!==e&&"verify"!==e||"RSASSA-PKCS1-v1_5"!==n&&"HMAC"!==n||(s[0]={name:n}),E&&r.algorithm.hash&&(s[0].hash=s[0].hash||r.algorithm.hash),E&&"decrypt"===e&&"AES-GCM"===u.name){var c=n.tagLength>>3;s[2]=(i.buffer||i).slice(0,i.byteLength-c),n.tag=(i.buffer||i).slice(i.byteLength-c)}E&&"AES-GCM"===u.name&&void 0===s[0].tagLength&&(s[0].tagLength=128),s[1]=r._key;try{var l=t.apply(b,s)}catch(e){return Promise.reject(e)}return E&&(l=new Promise((function(t,n){l.onabort=l.onerror=function(e){n(e)},l.oncomplete=function(n){if(n=n.target.result,"encrypt"===e&&n instanceof AesGcmEncryptResult){var r=n.ciphertext,i=n.tag;(n=new Uint8Array(r.byteLength+i.byteLength)).set(new Uint8Array(r),0),n.set(new Uint8Array(i),r.byteLength),n=n.buffer}t(n)}}))),l}})),E){var A=b.digest;b.digest=function(e,t){if(!t.byteLength)throw Error("Empty input is not allowed");try{var n=A.call(b,e,t)}catch(e){return Promise.reject(e)}return n=new Promise((function(e,t){n.onabort=n.onerror=function(e){t(e)},n.oncomplete=function(t){e(t.target.result)}}))},e.crypto=Object.create(v,{getRandomValues:{value:function(e){return v.getRandomValues(e)}},subtle:{value:b}}),e.CryptoKey=h}w&&(v.subtle=b,e.Crypto=g,e.SubtleCrypto=y,e.CryptoKey=h)}}}}))})),function(e){e.console||(e.console={}),e=e.console;for(var t,n=function(){},r=["memory"],i="assert clear count debug dir dirxml error exception group groupCollapsed groupEnd info log markTimeline profile profiles profileEnd show table time timeEnd timeline timelineEnd timeStamp trace warn".split(" ");t=r.pop();)e[t]||(e[t]={});for(;t=i.pop();)e[t]||(e[t]=n)}("undefined"==typeof window?Ka:window),M({target:"Object",stat:!0},{setPrototypeOf:Ya});var Ky=R((function(){ac(1)}));M({target:"Object",stat:!0,forced:Ky,sham:!Ro},{getPrototypeOf:function(e){return ac(Va(e))}});var kq=[].slice,vk={},Ly=Function.bind||function(e){var t=Bb(this),n=kq.call(arguments,1),r=function(){var i=n.concat(kq.call(arguments));if(this instanceof r){var o=i.length;if(!(o in vk)){for(var a=[],s=0;s<o;s++)a[s]="a["+s+"]";vk[o]=Function("C,a","return new C("+a.join(",")+")")}i=vk[o](t,i)}else i=t.apply(e,i);return i};return ha(t.prototype)&&(r.prototype=t.prototype),r},wk=Rb("Reflect","construct"),lq=R((function(){function e(){}return!(wk((function(){}),[],e)instanceof e)})),mq=!R((function(){wk((function(){}))})),nq=lq||mq;M({target:"Reflect",stat:!0,forced:nq,sham:nq},{construct:function(e,t){Bb(e),sa(t);var n=3>arguments.length?e:Bb(arguments[2]);if(mq&&!lq)return wk(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}return(n=[null]).push.apply(n,t),new(Ly.apply(e,n))}n=n.prototype,n=Sb(ha(n)?n:Object.prototype);var r=Function.apply.call(e,n,t);return ha(r)?r:n}}),M({target:"Reflect",stat:!0},{get:ym});var oq=Jb.f,My=R((function(){oq(1)}));M({target:"Object",stat:!0,forced:!fa||My,sham:!fa},{getOwnPropertyDescriptor:function(e,t){return oq(tb(e),t)}});var pq=Rd.f,Ny={}.toString,qq="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],xk=function(e){if(qq&&"[object Window]"==Ny.call(e))try{var t=pq(e)}catch(e){t=qq.slice()}else t=pq(tb(e));return t},rq={f:qa},Oy=Wa.f,Ph=function(e){var t=C.Symbol||(C.Symbol={});Q(t,e)||Oy(t,e,{value:rq.f(e)})},ub=nh("hidden"),sq=qa("toPrimitive"),Py=La.set,tq=La.getterFor("Symbol"),Tb=Object.prototype,vb=C.Symbol,kg=Rb("JSON","stringify"),uq=Jb.f,vd=Wa.f,vq=xk,Qy=Sf,Sc=ld("symbols"),lg=ld("op-symbols"),yk=ld("string-to-symbol-registry"),zk=ld("symbol-to-string-registry"),Ry=ld("wks"),Ak=C.QObject,Bk=!Ak||!Ak.prototype||!Ak.prototype.findChild,Ck=fa&&R((function(){return 7!=Sb(vd({},"a",{get:function(){return vd(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=uq(Tb,t);r&&delete Tb[t],vd(e,t,n),r&&e!==Tb&&vd(Tb,t,r)}:vd,Dk=function(e,t){var n=Sc[e]=Sb(vb.prototype);return Py(n,{type:"Symbol",tag:e,description:t}),fa||(n.description=t),n},Ek=Bo?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof vb},Qh=function(e,t,n){return e===Tb&&Qh(lg,t,n),sa(e),t=tc(t,!0),sa(n),Q(Sc,t)?(n.enumerable?(Q(e,ub)&&e[ub][t]&&(e[ub][t]=!1),n=Sb(n,{enumerable:sc(0,!1)})):(Q(e,ub)||vd(e,ub,sc(1,{})),e[ub][t]=!0),Ck(e,t,n)):vd(e,t,n)},wq=function(e,t){sa(e);var n=tb(t);return t=Mc(n).concat(Fk(n)),Sd(t,(function(t){fa&&!Gk.call(n,t)||Qh(e,t,n[t])})),e},Gk=function(e){e=tc(e,!0);var t=Qy.call(this,e);return!(this===Tb&&Q(Sc,e)&&!Q(lg,e))&&(!(t||!Q(this,e)||!Q(Sc,e)||Q(this,ub)&&this[ub][e])||t)},xq=function(e,t){if(e=tb(e),t=tc(t,!0),e!==Tb||!Q(Sc,t)||Q(lg,t)){var n=uq(e,t);return!n||!Q(Sc,t)||Q(e,ub)&&e[ub][t]||(n.enumerable=!0),n}},yq=function(e){e=vq(tb(e));var t=[];return Sd(e,(function(e){Q(Sc,e)||Q(Pe,e)||t.push(e)})),t},Fk=function(e){var t=e===Tb;e=vq(t?lg:tb(e));var n=[];return Sd(e,(function(e){!Q(Sc,e)||t&&!Q(Tb,e)||n.push(Sc[e])})),n};if(wc||(vb=function(){if(this instanceof vb)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=Oe(e),n=function(e){this===Tb&&n.call(lg,e),Q(this,ub)&&Q(this[ub],t)&&(this[ub][t]=!1),Ck(this,t,sc(1,e))};return fa&&Bk&&Ck(Tb,t,{configurable:!0,set:n}),Dk(t,e)},Ea(vb.prototype,"toString",(function(){return tq(this).tag})),Ea(vb,"withoutSetter",(function(e){return Dk(Oe(e),e)})),Sf=Gk,Wa.f=Qh,Jb.f=xq,Rd.f=xk=yq,Uf.f=Fk,rq.f=function(e){return Dk(qa(e),e)},fa&&(vd(vb.prototype,"description",{configurable:!0,get:function(){return tq(this).description}}),Ea(Tb,"propertyIsEnumerable",Gk,{unsafe:!0}))),M({global:!0,wrap:!0,forced:!wc,sham:!wc},{Symbol:vb}),Sd(Mc(Ry),(function(e){Ph(e)})),M({target:"Symbol",stat:!0,forced:!wc},{for:function(e){if(e=String(e),Q(yk,e))return yk[e];var t=vb(e);return yk[e]=t,zk[t]=e,t},keyFor:function(e){if(!Ek(e))throw TypeError(e+" is not a symbol");if(Q(zk,e))return zk[e]},useSetter:function(){Bk=!0},useSimple:function(){Bk=!1}}),M({target:"Object",stat:!0,forced:!wc,sham:!fa},{create:function(e,t){return void 0===t?Sb(e):wq(Sb(e),t)},defineProperty:Qh,defineProperties:wq,getOwnPropertyDescriptor:xq}),M({target:"Object",stat:!0,forced:!wc},{getOwnPropertyNames:yq,getOwnPropertySymbols:Fk}),M({target:"Object",stat:!0,forced:R((function(){Uf.f(1)}))},{getOwnPropertySymbols:function(e){return Uf.f(Va(e))}}),kg){var Sy=!wc||R((function(){var e=vb();return"[null]"!=kg([e])||"{}"!=kg({a:e})||"{}"!=kg(Object(e))}));M({target:"JSON",stat:!0,forced:Sy},{stringify:function(e,t,n){for(var r,i=[e],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=t,(ha(t)||void 0!==e)&&!Ek(e))return qd(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!Ek(t))return t}),i[1]=t,kg.apply(null,i)}})}vb.prototype[sq]||Sa(vb.prototype,sq,vb.prototype.valueOf),gc(vb,"Symbol"),Pe[ub]=!0;var Ty=Wa.f,Tc=C.Symbol;if(fa&&"function"==typeof Tc&&(!("description"in Tc.prototype)||void 0!==Tc().description)){var zq={},mg=function(){var e=1>arguments.length||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof mg?new Tc(e):void 0===e?Tc():Tc(e);return""===e&&(zq[t]=!0),t};vo(mg,Tc);var Hk=mg.prototype=Tc.prototype;Hk.constructor=mg;var Uy=Hk.toString,Vy="Symbol(test)"==String(Tc("test")),Wy=/^Symbol\((.*)\)[^)]+$/;Ty(Hk,"description",{configurable:!0,get:function(){var e=ha(this)?this.valueOf():this,t=Uy.call(e);return Q(zq,e)?"":""===(e=Vy?t.slice(7,-1):t.replace(Wy,"$1"))?void 0:e}}),M({global:!0,forced:!0},{Symbol:mg})}Ph("toStringTag"),gc(C.JSON,"JSON",!0),gc(Math,"Math",!0),function(){function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct||Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n=i(e);if(t){var r=i(this).constructor;n=Reflect.construct(n,arguments,r)}else n=n.apply(this,arguments);return n=!n||"object"!==V(n)&&"function"!=typeof n?a(this):n}}function u(e,t,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=i(e)););if(e)return(t=Object.getOwnPropertyDescriptor(e,t)).get?t.get.call(n):t.value})(e,t,n||e)}var c=function(){function t(){e(this,t),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0})}return n(t,[{key:"addEventListener",value:function(e,t,n){e in this.listeners||(this.listeners[e]=[]),this.listeners[e].push({callback:t,options:n})}},{key:"removeEventListener",value:function(e,t){if(e in this.listeners)for(var n=0,r=(e=this.listeners[e]).length;n<r;n++)if(e[n].callback===t){e.splice(n,1);break}}},{key:"dispatchEvent",value:function(e){if(e.type in this.listeners){for(var t=this.listeners[e.type].slice(),n=0,r=t.length;n<r;n++){var i=t[n];try{i.callback.call(this,e)}catch(e){Promise.resolve().then((function(){throw e}))}i.options&&i.options.once&&this.removeEventListener(e.type,i.callback)}return!e.defaultPrevented}}}]),t}(),l=function(t){function o(){e(this,o);var t=l.call(this);return t.listeners||c.call(a(t)),Object.defineProperty(a(t),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(a(t),"onabort",{value:null,writable:!0,configurable:!0}),t}r(o,t);var l=s(o);return n(o,[{key:"toString",value:function(){return"[object AbortSignal]"}},{key:"dispatchEvent",value:function(e){"abort"===e.type&&(this.aborted=!0,"function"==typeof this.onabort&&this.onabort.call(this,e)),u(i(o.prototype),"dispatchEvent",this).call(this,e)}}]),o}(c),f=function(){function t(){e(this,t),Object.defineProperty(this,"signal",{value:new l,writable:!0,configurable:!0})}return n(t,[{key:"abort",value:function(){try{var e=new Event("abort")}catch(t){"undefined"!=typeof document?document.createEvent?(e=document.createEvent("Event")).initEvent("abort",!1,!1):(e=document.createEventObject()).type="abort":e={type:"abort",bubbles:!1,cancelable:!1}}this.signal.dispatchEvent(e)}},{key:"toString",value:function(){return"[object AbortController]"}}]),t}();"undefined"!=typeof Symbol&&Symbol.toStringTag&&(f.prototype[Symbol.toStringTag]="AbortController",l.prototype[Symbol.toStringTag]="AbortSignal"),function(e){if(e.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL){console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill");var t=!0}else t="function"==typeof e.Request&&!e.Request.prototype.hasOwnProperty("signal")||!e.AbortController;t&&(e.AbortController=f,e.AbortSignal=l)}("undefined"!=typeof self?self:Ka)}();var Xy=Math.floor,Yy=Math.log,Zy=Math.LOG2E;M({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-Xy(Yy(e+.5)*Zy):32}});var $y=Math.log,az=Math.LN2,mu=Math.clz32||function(e){return 31-$y(e>>>0)/az|0},Gd=String.fromCharCode,Aq={}.toString,Ik=window.Uint8Array,Jk=Ik||Array,bz=Aq.call((window.ArrayBuffer||Jk).prototype),Kk;zm.prototype.decode=function(e){if(e=e&&e.buffer||e,Aq.call(e)!==bz)throw Error("Failed to execute 'decode' on 'TextDecoder': The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");for(var t="",n=0,r=0|(e=Ik?new Jk(e):e).length;n<r;n=n+32768|0)t+=Gd.apply(0,e[Ik?"slice":"subarray"](n,n+32768|0));return t.replace(/[\xc0-\xff][\x80-\xbf]*/g,lu)},window.TextDecoder||(window.TextDecoder=zm),Am.prototype.encode=function(e){for(var t=0|(e=void 0===e?"":(""+e).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g,nu)).length,n=new Jk(t),r=0;r<t;r=r+1|0)n[r]=e.charCodeAt(r);return n},window.TextEncoder||(window.TextEncoder=Am),function(e){var t,n,r,i,o,a,s,u,c,l,f;!function(e){e.LOGIN="LOGIN",e.LOGIN_SUCCESS="LOGIN_SUCCESS",e.LOGIN_FAILURE="LOGIN_FAILURE",e.LOGIN_TIMEOUT="LOGIN_TIMEOUT",e.INTERRUPTED="INTERRUPTED",e.LOGOUT="LOGOUT",e.BANNED_BY_SERVER="BANNED_BY_SERVER",e.REMOTE_LOGIN="REMOTE_LOGIN"}(t||(t={})),e.ConnectionChangeReason=t,function(e){e.DISCONNECTED="DISCONNECTED",e.CONNECTING="CONNECTING",e.CONNECTED="CONNECTED",e.RECONNECTING="RECONNECTING",e.ABORTED="ABORTED"}(n||(n={})),e.ConnectionState=n,function(e){e.IDLE="IDLE",e.SENT_TO_REMOTE="SENT_TO_REMOTE",e.RECEIVED_BY_REMOTE="RECEIVED_BY_REMOTE",e.ACCEPTED_BY_REMOTE="ACCEPTED_BY_REMOTE",e.REFUSED_BY_REMOTE="REFUSED_BY_REMOTE",e.CANCELED="CANCELED",e.FAILURE="FAILURE"}(r||(r={})),e.LocalInvitationState=r,function(e){e.INVITATION_RECEIVED="INVITATION_RECEIVED",e.ACCEPT_SENT_TO_LOCAL="ACCEPT_SENT_TO_LOCAL",e.REFUSED="REFUSED",e.ACCEPTED="ACCEPTED",e.CANCELED="CANCELED",e.FAILURE="FAILURE"}(i||(i={})),e.RemoteInvitationState=i,function(e){e.UNKNOWN="UNKNOWN",e.PEER_NO_RESPONSE="PEER_NO_RESPONSE",e.INVITATION_EXPIRE="INVITATION_EXPIRE",e.PEER_OFFLINE="PEER_OFFLINE",e.NOT_LOGGEDIN="NOT_LOGGEDIN"}(o||(o={})),e.LocalInvitationFailureReason=o,function(e){e.UNKNOWN="UNKNOWN",e.PEER_OFFLINE="PEER_OFFLINE",e.ACCEPT_FAILURE="ACCEPT_FAILURE",e.INVITATION_EXPIRE="INVITATION_EXPIRE"}(a||(a={})),e.RemoteInvitationFailureReason=a,function(e){e.ONLINE="ONLINE",e.UNREACHABLE="UNREACHABLE",e.OFFLINE="OFFLINE"}(s||(s={})),e.PeerOnlineState=s,(u||(u={})).ONLINE_STATUS="ONLINE_STATUS",e.PeerSubscriptionOption=u,function(e){e.TEXT="TEXT",e.RAW="RAW",e.IMAGE="IMAGE",e.FILE="FILE"}(c||(c={})),e.MessageType=c,function(e){e.CN="CN",e.NA="NA",e.EU="EU",e.AS="AS",e.JP="JP",e.IN="IN",e.GLOB="GLOB",e.OC="OC",e.SA="SA",e.AF="AF",e.OVS="OVS"}(l||(l={})),e.LegacyAreaCode=l,function(e){e.GLOBAL="GLOBAL",e.INDIA="INDIA",e.JAPAN="JAPAN",e.ASIA="ASIA",e.EUROPE="EUROPE",e.CHINA="CHINA",e.NORTH_AMERICA="NORTH_AMERICA"}(f||(f={})),e.AreaCode=f}(Kk||(Kk={}));var S=Kk;M({target:"Array",proto:!0},{includes:function(e){return so(this,e,1<arguments.length?arguments[1]:void 0)}}),Vd("includes");var Lk=function(e){if(Fj(e))throw TypeError("The method doesn't accept regular expressions");return e},cz=qa("match"),Mk=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[cz]=!1,"/./"[e](t)}catch(e){}}return!1};M({target:"String",proto:!0,forced:!Mk("includes")},{includes:function(e){return!!~String(mb(this)).indexOf(Lk(e),1<arguments.length?arguments[1]:void 0)}});var lc={RECONNECTING_AP_INTERVAL:2500,RECONNECTING_AP_NUM:2,DISABLE_MESSAGE_COMPRESSION:!1,LOG_UPLOAD_INTERVAL:3e3,LOG_HANDLER:void 0,ENABLE_EDGE_AUTO_FALLBACK:!0};Ph("iterator"),Ph("asyncIterator");var Nk=Te("forEach")?[].forEach:function(e){return Sd(this,e,1<arguments.length?arguments[1]:void 0)},Bq;for(Bq in sk){var Cq=C[Bq],Rh=Cq&&Cq.prototype;if(Rh&&Rh.forEach!==Nk)try{Sa(Rh,"forEach",Nk)}catch(c){Rh.forEach=Nk}}var dz=[].reverse,Dq=[1,2];M({target:"Array",proto:!0,forced:String(Dq)===String(Dq.reverse())},{reverse:function(){return qd(this)&&(this.length=this.length),dz.call(this)}});var x=cb((function(e){e=function(e){function t(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}function n(e,t,n,o){return t=Object.create((t&&t.prototype instanceof i?t:i).prototype),o=new h(o||[]),t._invoke=function(e,t,n){var i=_;return function(o,a){if(i===A)throw Error("Generator is already running");if(i===I){if("throw"===o)throw a;return d()}for(n.method=o,n.arg=a;;){if((o=n.delegate)&&(o=c(o,n))){if(o===k)continue;return o}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===_)throw i=I,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);if(i=A,"normal"===(o=r(e,t,n)).type){if(i=n.done?I:O,o.arg===k)continue;return{value:o.arg,done:n.done}}"throw"===o.type&&(i=I,n.method="throw",n.arg=o.arg)}}}(e,n,o),t}function r(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function i(){}function o(){}function a(){}function s(e){["next","throw","return"].forEach((function(n){t(e,n,(function(e){return this._invoke(n,e)}))}))}function u(e,t){function n(i,o,a,s){if("throw"!==(i=r(e[i],e,o)).type){var u=i.arg;return(i=u.value)&&"object"===V(i)&&g.call(i,"__await")?t.resolve(i.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(i).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,s)}))}s(i.arg)}var i;this._invoke=function(e,r){function o(){return new t((function(t,i){n(e,r,t,i)}))}return i=i?i.then(o,o):o()}}function c(e,t){var n=e.iterator[t.method];if(n===v){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=v,c(e,t),"throw"===t.method))return k;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return k}return"throw"===(n=r(n,e.iterator,t.arg)).type?(t.method="throw",t.arg=n.arg,t.delegate=null,k):(n=n.arg)?n.done?(t[e.resultName]=n.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=v),t.delegate=null,k):n:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,k)}function l(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function f(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function h(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(l,this),this.reset(!0)}function p(e){if(e){var t=e[m];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1;return(t=function t(){for(;++n<e.length;)if(g.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=v,t.done=!0,t}).next=t}}return{next:d}}function d(){return{value:v,done:!0}}var v,b=Object.prototype,g=b.hasOwnProperty,y="function"==typeof Symbol?Symbol:{},m=y.iterator||"@@iterator",E=y.asyncIterator||"@@asyncIterator",w=y.toStringTag||"@@toStringTag";try{t({},"")}catch(e){t=function(e,t,n){return e[t]=n}}e.wrap=n;var _="suspendedStart",O="suspendedYield",A="executing",I="completed",k={};t(y={},m,(function(){return this}));var R=Object.getPrototypeOf;(R=R&&R(R(p([]))))&&R!==b&&g.call(R,m)&&(y=R);var T=a.prototype=i.prototype=Object.create(y);return o.prototype=a,t(T,"constructor",a),t(a,"constructor",o),o.displayName=t(a,w,"GeneratorFunction"),e.isGeneratorFunction=function(e){return!!(e="function"==typeof e&&e.constructor)&&(e===o||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,a):(e.__proto__=a,t(e,w,"GeneratorFunction")),e.prototype=Object.create(T),e},e.awrap=function(e){return{__await:e}},s(u.prototype),t(u.prototype,E,(function(){return this})),e.AsyncIterator=u,e.async=function(t,r,i,o,a){void 0===a&&(a=Promise);var s=new u(n(t,r,i,o),a);return e.isGeneratorFunction(r)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},s(T),t(T,w,"Generator"),t(T,m,(function(){return this})),t(T,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t,n=[];for(t in e)n.push(t);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=p,h.prototype={constructor:h,reset:function(e){if(this.next=this.prev=0,this.sent=this._sent=v,this.done=!1,this.delegate=null,this.method="next",this.arg=v,this.tryEntries.forEach(f),!e)for(var t in this)"t"===t.charAt(0)&&g.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=v)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){function t(t,r){return o.type="throw",o.arg=e,n.next=t,r&&(n.method="next",n.arg=v),!!r}if(this.done)throw e;for(var n=this,r=this.tryEntries.length-1;0<=r;--r){var i=this.tryEntries[r],o=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var a=g.call(i,"catchLoc"),s=g.call(i,"finallyLoc");if(a&&s){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&g.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}return i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null),(n=i?i.completion:{}).type=e,n.arg=t,i?(this.method="next",this.next=i.finallyLoc,k):this.complete(n)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),k},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),f(n),k}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.tryLoc===e){if("throw"===(e=n.completion).type){var r=e.arg;f(n)}return r}}throw Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:p(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=v),k}},e}(e.exports);try{regeneratorRuntime=e}catch(t){"object"===("undefined"==typeof globalThis?"undefined":V(globalThis))?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}})),Eq=!R((function(){return Object.isExtensible(Object.preventExtensions({}))})),Ok=cb((function(e){var t=Wa.f,n=Oe("meta"),r=0,i=Object.isExtensible||function(){return!0},o=function(e){t(e,n,{value:{objectID:"O"+ ++r,weakData:{}}})},a=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!ha(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!Q(e,n)){if(!i(e))return"F";if(!t)return"E";o(e)}return e[n].objectID},getWeakData:function(e,t){if(!Q(e,n)){if(!i(e))return!0;if(!t)return!1;o(e)}return e[n].weakData},onFreeze:function(e){return Eq&&a.REQUIRED&&i(e)&&!Q(e,n)&&o(e),e}};Pe[n]=!0})),Fq=function(e,t,n){var r=-1!==e.indexOf("Map"),i=-1!==e.indexOf("Weak"),o=r?"set":"add",a=C[e],s=a&&a.prototype,u=a,c={},l=function(e){var t=s[e];Ea(s,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(i&&!ha(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return i&&!ha(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(i&&!ha(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this})};if(uc(e,"function"!=typeof a||!(i||s.forEach&&!R((function(){(new a).entries().next()})))))u=n.getConstructor(t,e,r,o),Ok.REQUIRED=!0;else if(uc(e,!0)){var f=new u,h=f[o](i?{}:-0,1)!=f,p=R((function(){f.has(1)})),d=uh((function(e){new a(e)})),v=!i&&R((function(){for(var e=new a,t=5;t--;)e[o](t,t);return!e.has(-0)}));d||((u=t((function(t,n){return hc(t,u,e),t=Lh(new a,t,u),null!=n&&yh(n,t[o],{that:t,AS_ENTRIES:r}),t}))).prototype=s,s.constructor=u),(p||v)&&(l("delete"),l("has"),r&&l("get")),(v||h)&&l(o),i&&s.clear&&delete s.clear}return c[e]=u,M({global:!0,forced:u!=a},c),gc(u,e),i||n.setStrong(u,e,r),u},ez=Wa.f,Gq=Ok.fastKey,Hq=La.set,Pk=La.getterFor,Iq={getConstructor:function(e,t,n,r){var i=e((function(e,o){hc(e,i,t),Hq(e,{type:t,index:Sb(null),first:void 0,last:void 0,size:0}),fa||(e.size=0),null!=o&&yh(o,e[r],{that:e,AS_ENTRIES:n})})),o=Pk(t),a=function(e,t,n){var r,i=o(e),a=s(e,t);return a?a.value=n:(i.last=a={index:r=Gq(t,!0),key:t,value:n,previous:t=i.last,next:void 0,removed:!1},i.first||(i.first=a),t&&(t.next=a),fa?i.size++:e.size++,"F"!==r&&(i.index[r]=a)),e},s=function(e,t){e=o(e);var n=Gq(t);if("F"!==n)return e.index[n];for(e=e.first;e;e=e.next)if(e.key==t)return e};return Xe(i.prototype,{clear:function(){for(var e=o(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,fa?e.size=0:this.size=0},delete:function(e){var t=o(this);if(e=s(this,e)){var n=e.next,r=e.previous;delete t.index[e.index],e.removed=!0,r&&(r.next=n),n&&(n.previous=r),t.first==e&&(t.first=n),t.last==e&&(t.last=r),fa?t.size--:this.size--}return!!e},forEach:function(e){for(var t,n=o(this),r=pd(e,1<arguments.length?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!s(this,e)}}),Xe(i.prototype,n?{get:function(e){return(e=s(this,e))&&e.value},set:function(e,t){return a(this,0===e?0:e,t)}}:{add:function(e){return a(this,e=0===e?0:e,e)}}),fa&&ez(i.prototype,"size",{get:function(){return o(this).size}}),i},setStrong:function(e,t,n){var r=t+" Iterator",i=Pk(t),o=Pk(r);Qj(e,t,(function(e,t){Hq(this,{type:r,target:e,state:i(e),kind:t,last:void 0})}),(function(){for(var e=o(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),ag(t)}};Fq("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),Iq);var fz=Rd.f,gz=Jb.f,hz=Wa.f,wd=C.Number,Sh=wd.prototype,iz="Number"==ec(Sb(Sh)),Jq=function(e){var t,n=tc(e,!1);if("string"==typeof n&&2<n.length)if(43===(e=(n=Ij(n)).charCodeAt(0))||45===e){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===e){switch(n.charCodeAt(1)){case 66:case 98:e=2;var r=49;break;case 79:case 111:e=8,r=55;break;default:return+n}var i=(n=n.slice(2)).length;for(t=0;t<i;t++){var o=n.charCodeAt(t);if(48>o||o>r)return NaN}return parseInt(n,e)}return+n};if(uc("Number",!wd(" 0o1")||!wd("0b1")||wd("+0x1"))){for(var Zd=function(e){var t=1>arguments.length?0:e,n=this;return n instanceof Zd&&(iz?R((function(){Sh.valueOf.call(n)})):"Number"!=ec(n))?Lh(new wd(Jq(t)),n,Zd):Jq(t)},Kq=fa?fz(wd):"MAX_VALUE MIN_VALUE NaN NEGATIVE_INFINITY POSITIVE_INFINITY EPSILON isFinite isInteger isNaN isSafeInteger MAX_SAFE_INTEGER MIN_SAFE_INTEGER parseFloat parseInt isInteger fromString range".split(" "),Qk=0,Th;Kq.length>Qk;Qk++)Q(wd,Th=Kq[Qk])&&!Q(Zd,Th)&&hz(Zd,Th,gz(wd,Th));Zd.prototype=Sh,Sh.constructor=Zd,Ea(C,"Number",Zd)}var Lq=qa("isConcatSpreadable"),jz=51<=nd||!R((function(){var e=[];return e[Lq]=!1,e.concat()[0]!==e})),kz=Yf("concat");M({target:"Array",proto:!0,forced:!jz||!kz},{concat:function(e){var t,n=Va(this),r=th(n,0),i=0,o=-1;for(t=arguments.length;o<t;o++){var a=-1===o?n:arguments[o],s=a;if(ha(s)){var u=s[Lq];s=void 0!==u?!!u:qd(s)}else s=!1;if(s){if(9007199254740991<i+(u=va(a.length)))throw TypeError("Maximum allowed index exceeded");for(s=0;s<u;s++,i++)s in a&&Ve(r,i,a[s])}else{if(9007199254740991<=i)throw TypeError("Maximum allowed index exceeded");Ve(r,i++,a)}}return r.length=i,r}});var Rk=Rb("Reflect","apply"),lz=Function.apply,mz=!R((function(){Rk((function(){}))}));M({target:"Reflect",stat:!0,forced:mz},{apply:function(e,t,n){return Bb(e),sa(n),Rk?Rk(e,t,n):lz.call(e,t,n)}}),M({target:"Reflect",stat:!0},{ownKeys:uo});var nz=xk,oz=R((function(){return!Object.getOwnPropertyNames(1)}));M({target:"Object",stat:!0,forced:oz},{getOwnPropertyNames:nz});var ef="object"===("undefined"==typeof Reflect?"undefined":V(Reflect))?Reflect:null,Mq=ef&&"function"==typeof ef.apply?ef.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)},pz=ef&&"function"==typeof ef.ownKeys?ef.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)},Nq=Number.isNaN||function(e){return e!=e};ia.EventEmitter=ia,ia.prototype._events=void 0,ia.prototype._eventsCount=0,ia.prototype._maxListeners=void 0;var Oq=10;Object.defineProperty(ia,"defaultMaxListeners",{enumerable:!0,get:function(){return Oq},set:function(e){if("number"!=typeof e||0>e||Nq(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");Oq=e}}),ia.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},ia.prototype.setMaxListeners=function(e){if("number"!=typeof e||0>e||Nq(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},ia.prototype.getMaxListeners=function(){return void 0===this._maxListeners?ia.defaultMaxListeners:this._maxListeners},ia.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);n="error"===e;var r=this._events;if(void 0!==r)n=n&&void 0===r.error;else if(!n)return!1;if(n){var i;if(0<t.length&&(i=t[0]),i instanceof Error)throw i;throw(t=Error("Unhandled error."+(i?" ("+i.message+")":""))).context=i,t}if(void 0===(n=r[e]))return!1;if("function"==typeof n)Mq(n,this,t);else for(r=Em(n,i=n.length),n=0;n<i;++n)Mq(r[n],this,t);return!0},ia.prototype.addListener=function(e,t){return Bm(this,e,t,!1)},ia.prototype.on=ia.prototype.addListener,ia.prototype.prependListener=function(e,t){return Bm(this,e,t,!0)},ia.prototype.once=function(e,t){return Kg(t),this.on(e,Cm(this,e,t)),this},ia.prototype.prependOnceListener=function(e,t){return Kg(t),this.prependListener(e,Cm(this,e,t)),this},ia.prototype.removeListener=function(e,t){var n;Kg(t);var r=this._events;if(void 0===r)return this;var i=r[e];if(void 0===i)return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){var o=-1;for(n=i.length-1;0<=n;n--)if(i[n]===t||i[n].listener===t){var a=i[n].listener;o=n;break}if(0>o)return this;if(0===o)i.shift();else{for(;o+1<i.length;o++)i[o]=i[o+1];i.pop()}1===i.length&&(r[e]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},ia.prototype.off=ia.prototype.removeListener,ia.prototype.removeAllListeners=function(e){var t=this._events;if(void 0===t)return this;if(void 0===t.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==t[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete t[e]),this;if(0===arguments.length){var n=Object.keys(t);for(t=0;t<n.length;++t){var r=n[t];"removeListener"!==r&&this.removeAllListeners(r)}return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(n=t[e]))this.removeListener(e,n);else if(void 0!==n)for(t=n.length-1;0<=t;t--)this.removeListener(e,n[t]);return this},ia.prototype.listeners=function(e){return Dm(this,e,!0)},ia.prototype.rawListeners=function(e){return Dm(this,e,!1)},ia.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):Fm.call(e,t)},ia.prototype.listenerCount=Fm,ia.prototype.eventNames=function(){return 0<this._eventsCount?pz(this._events):[]},ia.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}Gm(e,t,o,{once:!0}),"error"!==t&&pu(e,i,{once:!0})}))};var ff=Object.assign,Pq=Object.defineProperty,ng=!ff||R((function(){if(fa&&1!==ff({b:1},ff(Pq({},"a",{enumerable:!0,get:function(){Pq(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol();return e[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e})),7!=ff({},e)[n]||"abcdefghijklmnopqrst"!=Mc(ff({},t)).join("")}))?function(e,t){for(var n=Va(e),r=arguments.length,i=1,o=Uf.f,a=Sf;r>i;)for(var s,u=Tf(arguments[i++]),c=o?Mc(u).concat(o(u)):Mc(u),l=c.length,f=0;l>f;)s=c[f++],(!fa||a.call(u,s))&&(n[s]=u[s]);return n}:ff;M({target:"Object",stat:!0,forced:Object.assign!==ng},{assign:ng}),Fq("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),Iq);var qz=Math.log,rz=Math.LN2;M({target:"Math",stat:!0},{log2:function(e){return qz(e)/rz}});var sz=Wa.f,tz=Rd.f,uz=La.enforce,vz=qa("match"),zc=C.RegExp,Sk=zc.prototype,og=/a/g,Tk=/a/g,Uk=new zc(og)!==og;if(fa&&uc("RegExp",!Uk||vc||R((function(){return Tk[vz]=!1,zc(og)!=og||zc(Tk)==Tk||"/a/i"!=zc(og,"i")})))){for(var Uc=function(e,t){var n,r=this instanceof Uc,i=Fj(e),o=void 0===t;return!r&&i&&e.constructor===Uc&&o||(Uk?i&&!o&&(e=e.source):e instanceof Uc&&(o&&(t=Aj.call(e)),e=e.source),vc&&(n=!!t&&-1<t.indexOf("y"))&&(t=t.replace(/y/g,"")),e=Lh(Uk?new zc(e,t):zc(e,t),r?this:Sk,Uc),vc&&n&&(uz(e).sticky=!0)),e},wz=function(e){e in Uc||sz(Uc,e,{configurable:!0,get:function(){return zc[e]},set:function(t){zc[e]=t}})},Qq=tz(zc),Rq=0;Qq.length>Rq;)wz(Qq[Rq++]);Sk.constructor=Uc,Uc.prototype=Sk,Ea(C,"RegExp",Uc)}ag("RegExp"),jg("Float32",(function(e){return function(t,n,r){return e(this,t,n,r)}})),jg("Float64",(function(e){return function(t,n,r){return e(this,t,n,r)}})),jg("Uint32",(function(e){return function(t,n,r){return e(this,t,n,r)}})),jg("Uint16",(function(e){return function(t,n,r){return e(this,t,n,r)}}));var Vk=function(e,t){return e===t?0:null==e?null==t?0:-1:null==t?null==e?0:1:"function"==typeof e.compare?e.compare(t):"function"==typeof t.compare?-t.compare(e):e<t?-1:e>t?1:0},Wk=[],Sq=Wk.sort,xz=R((function(){Wk.sort(void 0)})),yz=R((function(){Wk.sort(null)})),zz=Te("sort");M({target:"Array",proto:!0,forced:xz||!yz||!zz},{sort:function(e){return void 0===e?Sq.call(Va(this)):Sq.call(Va(this),Bb(e))}});var Tq=Object.getPrototypeOf({}),pg=function(e,t){var n;return e===t||(null==e?e==t:"function"===V(e.equiv)?e.equiv(t):null==t?e==t:"function"===V(t.equiv)?t.equiv(e):"string"!==V(e)&&"string"!==V(t)&&(null!=(n=Object.getPrototypeOf(e))&&n!==Tq||null!=(n=Object.getPrototypeOf(t))&&n!==Tq?"function"!==V(e)&&void 0!==e.length&&"function"!==V(t)&&void 0!==t.length?Bz(e,t):e instanceof Set&&t instanceof Set?Cz(e,t):e instanceof Map&&t instanceof Map?Dz(e,t):e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():e instanceof RegExp&&t instanceof RegExp?e.toString()===t.toString():e!=e&&t!=t:Az(e,t)))},Bz=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:pg,r=e.length;if(r===t.length)for(;0<=--r&&n(e[r],t[r]););return 0>r},Cz=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:pg;return e.size===t.size&&n(G(e.keys()).sort(),G(t.keys()).sort())},Dz=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:pg;return e.size===t.size&&n(G(e).sort(),G(t).sort())},Az=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:pg;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(var r in e)if(!t.hasOwnProperty(r)||!n(e[r],t[r]))return!1;return!0},Uq=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:function(e){return void 0!==e?": "+e:""};return function(n){function r(n){return X(this,r),i.call(this,e(n)+t(n))}ja(r,n);var i=ka(r);return r}(xf(Error))},Ez=Uq((function(){return"illegal argument(s)"})),Uh=function(e){throw new Ez(e)},Xk=Uq((function(){return"index out of bounds"})),Vq=1/4294967295,Fz=function(){function e(){X(this,e)}return Ia(e,[{key:"float",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1;return this.int()*Vq*e}},{key:"norm",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1;return 2*(this.int()*Vq-.5)*e}},{key:"minmax",value:function(e,t){return this.float()*(t-e)+e}}]),e}(),Yk=Math.random,Gz=new(function(e){function t(){return X(this,t),n.apply(this,arguments)}ja(t,e);var n=ka(t);return Ia(t,[{key:"int",value:function(){return 4294967296*Yk()>>>0}},{key:"float",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1;return Yk()*e}},{key:"norm",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1;return 2*(Yk()-.5)*e}}]),t}(Fz)),zi=Symbol(),Jm=function(){},Hz=Ok.onFreeze,Zk=Object.freeze,Iz=R((function(){Zk(1)}));M({target:"Object",stat:!0,forced:Iz,sham:!Eq},{freeze:function(e){return Zk&&ha(e)?Zk(Hz(e)):e}});var Jz=Te("reduce"),Kz=!Oc&&79<nd&&83>nd;M({target:"Array",proto:!0,forced:!Jz||Kz},{reduce:function(e){return bq(this,e,arguments.length,1<arguments.length?arguments[1]:void 0)}});var Im=function(e){return null!=e&&"function"==typeof e.xform?e.xform():e},Lg=function(){function e(t){X(this,e),this.value=t}return Ia(e,[{key:"deref",value:function(){return this.value}}]),e}(),Ai=function(e){return e instanceof Lg?e.deref():e},ru=function(e,t){return[e,function(e){return e},t]},Lz=x.mark((function(e,t){var n,r,i,o,a,s;return x.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:n=Im(e)(qu()),r=n[1],i=n[2],o=0;case 4:if(!(o<t.length)){u.next=15;break}if(a=t[o],!((s=i([],a))instanceof Lg)){u.next=10;break}return u.delegateYield(Ai(r(s.deref())),"t0",9);case 9:return u.abrupt("return");case 10:if(!s.length){u.next=12;break}return u.delegateYield(s,"t1",12);case 12:o++,u.next=4;break;case 15:return u.delegateYield(Ai(r([])),"t2",16);case 16:case"end":return u.stop()}}),Lz)})),su=x.mark(Hm),tu=function(e,t){return[e[0],e[1],t]},Wq=!0;"findIndex"in[]&&Array(1).findIndex((function(){Wq=!1})),M({target:"Array",proto:!0,forced:Wq},{findIndex:function(e){return Mo(this,e,1<arguments.length?arguments[1]:void 0)}}),Vd("findIndex"),M({target:"Array",proto:!0},{fill:ik}),Vd("fill");var Mz=function(){function e(t){X(this,e),this._length=0,t&&this.into(t)}return Ia(e,[{key:"length",get:function(){return this._length}},{key:"copy",value:function(){return new e(this)}},{key:"empty",value:function(){return new e}},{key:"clear",value:function(){this.release()}},{key:"release",value:function(){for(var e,t=this.head;t;)e=t.next,delete t.value,delete t.prev,delete t.next,t=e;return delete this.head,delete this.tail,this._length=0,!0}},{key:"compare",value:function(e){var t=this._length;if(t<e._length)return-1;if(t>e._length)return 1;if(0===t)return 0;t=this.head,e=e.head;for(var n=0;t&&0==n;)n=Vk(t.value,e.value),t=t.next,e=e.next;return n}},{key:"equiv",value:function(t){if(!(t instanceof e||null!=t&&"function"!=typeof t&&void 0!==t.length)||this._length!==t.length)return!1;if(!this._length||this===t)return!0;for(var n=this.head,r=0;r<t.length;r++){if(!pg(n.value,t[r]))return!1;n=n.next}return!0}},{key:Symbol.iterator,value:x.mark((function e(){var t;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=this.head;case 1:if(!t){e.next=7;break}return e.next=4,t.value;case 4:t=t.next,e.next=1;break;case 7:case"end":return e.stop()}}),e,this)}))},{key:"seq",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.length;if(!(e>=t||0>e)){e=this.nthCell(e);var n=this.nthCell(t-1);return t=function e(t){return{first:function(){return t.value},next:function(){return t!==n&&t.next?e(t.next):void 0}}},e?t(e):void 0}}},{key:"cycle",value:x.mark((function e(){return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(this,"t0",2);case 2:e.next=0;break;case 4:case"end":return e.stop()}}),e,this)}))},{key:"$reduce",value:function(e,t){for(var n=this.head;n&&!(t instanceof Lg);)t=e(t,n.value),n=n.next;return t}},{key:"drop",value:function(){var e=this.head;if(e)return(this.head=e.next)?delete this.head.prev:delete this.tail,this._length--,e.value}},{key:"cons",value:function(e){return e={value:e,next:this.head},this.head?this.head.prev=e:this.tail=e,this.head=e,this._length++,this}},{key:"insertBefore",value:function(e,t){return e||Uh("cell is undefined"),t={value:t,next:e,prev:e.prev},e.prev?e.prev.next=t:this.head=t,e.prev=t,this._length++,this}},{key:"insertAfter",value:function(e,t){return e||Uh("cell is undefined"),t={value:t,next:e.next,prev:e},e.next?e.next.prev=t:this.tail=t,e.next=t,this._length++,this}},{key:"insertBeforeNth",value:function(e,t){if(0>e&&(e+=this._length),0>=e)return this.cons(t);if(0>e||e>=this._length)throw new Xk(e);return this.insertBefore(this.nthCellUnsafe(e),t)}},{key:"insertAfterNth",value:function(e,t){if(0>e&&(e+=this._length),e>=this._length-1)return this.push(t);if(0>e||e>=this._length)throw new Xk(e);return this.insertAfter(this.nthCellUnsafe(e),t)}},{key:"insertSorted",value:function(e,t){t=t||Vk;for(var n=this.head;n;){if(0>=t(e,n.value))return this.insertBefore(n,e);n=n.next}return this.push(e)}},{key:"find",value:function(e){for(var t=this.head;t;){if(t.value===e)return t;t=t.next}}},{key:"findWith",value:function(e){for(var t=this.head;t;){if(e(t.value))return t;t=t.next}}},{key:"concat",value:function(){for(var e=this.copy(),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];for(t=0;t<n.length;t++)e.into(n[t]);return e}},{key:"into",value:function(e){for(var t=0;t<e.length;t++)this.push(e[t])}},{key:"slice",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.length;t=0>t?t+this._length:t,n=0>n?n+this._length:n,(0>t||0>n)&&Uh("invalid indices: ${from} / ${to}");for(var r=new e,i=this.nthCell(t);i&&++t<=n;)r.push(i.value),i=i.next;return r}},{key:"splice",value:function(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=2<arguments.length?arguments[2]:void 0;if("number"==typeof t){if(0>t&&(t+=this._length),0>t||t>=this._length)throw new Xk(t);var i=this.nthCellUnsafe(t)}else i=t;var o=new e;if(0<n)for(;i&&0<n--;)this.remove(i),o.push(i.value),i=i.next;else i&&(i=i.next);if(r)if(i)for(n=0;n<r.length;n++)this.insertBefore(i,r[n]);else for(i=0;i<r.length;i++)this.push(r[i]);return o}},{key:"remove",value:function(e){return e.prev?e.prev.next=e.next:this.head=e.next,e.next?e.next.prev=e.prev:this.tail=e.prev,this._length--,this}},{key:"swap",value:function(e,t){if(e!==t){var n=e.value;e.value=t.value,t.value=n}return this}},{key:"push",value:function(e){return this.tail?(e={value:e,prev:this.tail},this.tail=this.tail.next=e,this._length++,this):this.cons(e)}},{key:"pop",value:function(){var e=this.tail;if(e)return(this.tail=e.prev)?delete this.tail.next:delete this.head,this._length--,e.value}},{key:"first",value:function(){return this.head&&this.head.value}},{key:"peek",value:function(){return this.tail&&this.tail.value}},{key:"setHead",value:function(e){return this.head?(this.head.value=e,this):this.cons(e)}},{key:"setTail",value:function(e){return this.tail?(this.tail.value=e,this):this.push(e)}},{key:"setNth",value:function(e,t){var n=this.nthCell(e);return!n&&Uh("index out of bounds: ".concat(e)),n.value=t,this}},{key:"nth",value:function(e,t){return(e=this.nthCell(e))?e.value:t}},{key:"nthCell",value:function(e){if(0>e&&(e+=this._length),!(0>e||e>=this._length))return this.nthCellUnsafe(e)}},{key:"rotateLeft",value:function(){switch(this._length){case 0:case 1:return this;case 2:return this.swap(this.head,this.tail);default:return this.push(this.drop())}}},{key:"rotateRight",value:function(){switch(this._length){case 0:case 1:return this;case 2:return this.swap(this.head,this.tail);default:var e=this.peek();return this.pop(),this.cons(e)}}},{key:"map",value:function(t){for(var n=new e,r=this.head;r;)n.push(t(r.value)),r=r.next;return n}},{key:"filter",value:function(t){for(var n=new e,r=this.head;r;)t(r.value)&&n.push(r.value),r=r.next;return n}},{key:"reduce",value:function(e,t){for(var n=this.head;n;)t=e(t,n.value),n=n.next;return t}},{key:"shuffle",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:Gz;if(2>this._length)return this;for(e=null!=e?e:Math.ceil(1.5*Math.log2(this._length));0<e;e--)for(var n=this.head;n;){var r=n.next;.5>t.float()?this.asHead(n):this.asTail(n),n=r}return this}},{key:"sort",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:Vk;if(!this._length)return this;for(var t=1;;){var n=this.head;this.tail=this.head=void 0;for(var r=0;n;){r++;for(var i=n,o=0,a=0;a<t&&(o++,i=i.next);a++);for(a=t;0<o||0<a&&i;){if(0===o){var s=i;i=i.next,a--}else i&&0!==a?0>=e(n.value,i.value)?(s=n,n=n.next,o--):(s=i,i=i.next,a--):(s=n,n=n.next,o--);this.tail?this.tail.next=s:this.head=s,s.prev=this.tail,this.tail=s}n=i}if(this.tail.next=void 0,1>=r)return this;t*=2}}},{key:"reverse",value:function(){for(var e=this.head,t=this.tail,n=(this._length>>>1)+(1&this._length);e&&t&&0<n;){var r=e.value;e.value=t.value,t.value=r,e=e.next,t=t.prev,n--}return this}},{key:"asHead",value:function(e){return e===this.head||(this.remove(e),this.head.prev=e,e.next=this.head,e.prev=void 0,this.head=e,this._length++),this}},{key:"asTail",value:function(e){return e===this.tail||(this.remove(e),this.tail.next=e,e.prev=this.tail,e.next=void 0,this.tail=e,this._length++),this}},{key:"toString",value:function(){for(var e=[],t=this.head;t;)e.push(String(t.value)),t=t.next;return e.join(", ")}},{key:"toJSON",value:function(){return G(this)}},{key:"nthCellUnsafe",value:function(e){if(e<=this._length>>1)var t=this.head,n="next";else t=this.tail,n="prev",e=this._length-e-1;for(;0<e--&&t;)t=t[n];return t}}]),e}(),Ac=function(){function e(t,n){X(this,e),n=Object.assign({maxlen:1/0,maxsize:1/0,map:function(){return new Map},ksize:function(){return 0},vsize:function(){return 0}},n),this.map=n.map(),this.items=new Mz,this._size=0,this.opts=n,t&&this.into(t)}return Ia(e,[{key:"length",get:function(){return this.items.length}},{key:"size",get:function(){return this._size}},{key:Symbol.iterator,value:function(){return this.entries()}},{key:"entries",value:function(){return Mg((function(e){return[e.k,e]}),this.items)}},{key:"keys",value:function(){return Mg((function(e){return e.k}),this.items)}},{key:"values",value:function(){return Mg((function(e){return e.v}),this.items)}},{key:"copy",value:function(){var e=this.empty();e.items=this.items.copy();for(var t=e.items.head;t;)e.map.set(t.value.k,t),t=t.next;return e}},{key:"empty",value:function(){return new e(null,this.opts)}},{key:"release",value:function(){this._size=0,this.map.clear();var e=this.opts.release;if(e){for(var t;t=this.items.drop();)e(t.k,t.v);return!0}return this.items.release()}},{key:"has",value:function(e){return this.map.has(e)}},{key:"get",value:function(e,t){return(e=this.map.get(e))?this.resetEntry(e):t}},{key:"set",value:function(e,t){var n=this.opts.ksize(e)+this.opts.vsize(t),r=this.map.get(e);return this._size+=Math.max(0,n-(r?r.value.s:0)),this.ensureSize()&&this.doSetEntry(r,e,t,n),t}},{key:"into",value:function(e){for(var t=0;t<e.length;t++){var n=e[t];this.set(n[0],n[1])}return this}},{key:"getSet",value:function(e,t){var n=this,r=this.map.get(e);return r?Promise.resolve(this.resetEntry(r)):t().then((function(t){return n.set(e,t)}))}},{key:"delete",value:function(e){return!!(e=this.map.get(e))&&(this.removeEntry(e),!0)}},{key:"resetEntry",value:function(e){return this.items.asTail(e),e.value.v}},{key:"ensureSize",value:function(){for(var e=this.opts.release,t=this.opts.maxsize,n=this.opts.maxlen;this._size>t||this.length>=n;){var r=this.items.drop();if(!r)return!1;this.map.delete(r.k),e&&e(r.k,r.v),this._size-=r.s}return!0}},{key:"removeEntry",value:function(e){var t=e.value;this.map.delete(t.k),this.items.remove(e),this.opts.release&&this.opts.release(t.k,t.v),this._size-=t.s}},{key:"doSetEntry",value:function(e,t,n,r){e?(e.value.v=n,e.value.s=r,this.items.asTail(e)):(this.items.push({k:t,v:n,s:r}),this.map.set(t,this.items.tail))}}]),e}(),Nz=function(e){function t(e,r){return X(this,t),r=Object.assign({ttl:36e5},r),n.call(this,e,r)}ja(t,e);var n=ka(t);return Ia(t,[{key:"empty",value:function(){return new t(null,this.opts)}},{key:"has",value:function(e){return void 0!==this.get(e)}},{key:"get",value:function(e,t){if(e=this.map.get(e)){if(e.value.t>=Date.now())return this.resetEntry(e);this.removeEntry(e)}return t}},{key:"set",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:this.opts.ttl,r=this.opts.ksize(e)+this.opts.vsize(t),i=this.map.get(e);return this._size+=Math.max(0,r-(i?i.value.s:0)),this.ensureSize()&&(n=Date.now()+n,i?(i.value.v=t,i.value.s=r,i.value.t=n,this.items.asTail(i)):(this.items.push({k:e,v:t,s:r,t:n}),this.map.set(e,this.items.tail))),t}},{key:"getSet",value:function(e,t){var n=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:this.opts.ttl,i=this.get(e);return i?Promise.resolve(i):t().then((function(t){return n.set(e,t,r)}))}},{key:"prune",value:function(){for(var e=Date.now(),t=this.items.head;t;)t.value.t<e&&this.removeEntry(t),t=t.next}},{key:"ensureSize",value:function(){for(var e=this.opts.maxsize,n=this.opts.maxlen,r=Date.now(),i=this.items.head;i&&(this._size>e||this.length>=n);)i.value.t<r&&this.removeEntry(i),i=i.next;return xi(Fd(t.prototype),"ensureSize",this).call(this)}}]),t}(Ac),Xq="object"==V(Ka)&&Ka&&Ka.Object===Object&&Ka,Oz="object"==("undefined"==typeof self?"undefined":V(self))&&self&&self.Object===Object&&self,Fb=Xq||Oz||Function("return this")(),Ub=Fb.Symbol,Yq=Object.prototype,Pz=Yq.hasOwnProperty,Qz=Yq.toString,qg=Ub?Ub.toStringTag:void 0,Rz=Object.prototype.toString,Zq=Ub?Ub.toStringTag:void 0,$d=function(e){if(null==e)e=void 0===e?"[object Undefined]":"[object Null]";else if(Zq&&Zq in Object(e)){var t=Pz.call(e,qg),n=e[qg];try{e[qg]=void 0;var r=!0}catch(e){}var i=Qz.call(e);r&&(t?e[qg]=n:delete e[qg]),e=i}else e=Rz.call(e);return e},ob=function(e){var t=V(e);return null!=e&&("object"==t||"function"==t)},Wi=function(e){return!!ob(e)&&("[object Function]"==(e=$d(e))||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e)},$k=Fb["__core-js_shared__"],$q=function(){var e=/[^.]+$/.exec($k&&$k.keys&&$k.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),Sz=Function.prototype.toString,ae=function(e){if(null!=e){try{return Sz.call(e)}catch(e){}return e+""}return""},Tz=/^\[object .+?Constructor\]$/,Uz=RegExp("^"+Function.prototype.toString.call(Object.prototype.hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),be=function(e,t){return e=null==e?void 0:e[t],!ob(e)||$q&&$q in e||!(Wi(e)?Uz:Tz).test(ae(e))?void 0:e},rg=be(Object,"create"),Vz=Object.prototype.hasOwnProperty,Wz=Object.prototype.hasOwnProperty;Id.prototype.clear=function(){this.__data__=rg?rg(null):{},this.size=0},Id.prototype.delete=function(e){return e=this.has(e)&&delete this.__data__[e],this.size-=e?1:0,e},Id.prototype.get=function(e){var t=this.__data__;return rg?"__lodash_hash_undefined__"===(e=t[e])?void 0:e:Vz.call(t,e)?t[e]:void 0},Id.prototype.has=function(e){var t=this.__data__;return rg?void 0!==t[e]:Wz.call(t,e)},Id.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=rg&&void 0===t?"__lodash_hash_undefined__":t,this};var sg=function(e,t){return e===t||e!=e&&t!=t},Vh=function(e,t){for(var n=e.length;n--;)if(sg(e[n][0],t))return n;return-1},Xz=Array.prototype.splice;qe.prototype.clear=function(){this.__data__=[],this.size=0},qe.prototype.delete=function(e){var t=this.__data__;return!(0>(e=Vh(t,e)))&&(e==t.length-1?t.pop():Xz.call(t,e,1),--this.size,!0)},qe.prototype.get=function(e){var t=this.__data__;return 0>(e=Vh(t,e))?void 0:t[e][1]},qe.prototype.has=function(e){return-1<Vh(this.__data__,e)},qe.prototype.set=function(e,t){var n=this.__data__,r=Vh(n,e);return 0>r?(++this.size,n.push([e,t])):n[r][1]=t,this};var Og=qe,tg=be(Fb,"Map"),Wh=function(e,t){e=e.__data__;var n=V(t);return("string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==t:null===t)?e["string"==typeof t?"string":"hash"]:e.map};re.prototype.clear=function(){this.size=0,this.__data__={hash:new Id,map:new(tg||Og),string:new Id}},re.prototype.delete=function(e){return e=Wh(this,e).delete(e),this.size-=e?1:0,e},re.prototype.get=function(e){return Wh(this,e).get(e)},re.prototype.has=function(e){return Wh(this,e).has(e)},re.prototype.set=function(e,t){var n=Wh(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};var Ng=re;zf.prototype.add=zf.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},zf.prototype.has=function(e){return this.__data__.has(e)};var ar=function(e,t,n,r){var i=e.length;for(n+=r?1:-1;r?n--:++n<i;)if(t(e[n],n,e))return n;return-1},Yz=function(e){return e!=e},Zz=function(e,t){var n;if(n=!(null==e||!e.length)){if(t==t)e:{n=-1;for(var r=e.length;++n<r;)if(e[n]===t){e=n;break e}e=-1}else e=ar(e,Yz,0);n=-1<e}return n},$z=function(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1},aA=function(e,t){return e.has(t)},gf=be(Fb,"Set"),bA=function(){},al=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n},cA=1/0,dA=gf&&1/al(new gf([,-0]))[1]==cA?function(e){return new gf(e)}:bA,bl=function(e,t,n){var r=-1,i=Zz,o=e.length,a=!0,s=[],u=s;if(n)a=!1,i=$z;else if(200<=o){if(i=t?null:dA(e))return al(i);a=!1,i=aA,u=new zf}else u=t?[]:s;e:for(;++r<o;){var c=e[r],l=t?t(c):c;if(c=n||0!==c?c:0,a&&l==l){for(var f=u.length;f--;)if(u[f]===l)continue e;t&&u.push(l),s.push(c)}else i(u,l,n)||(u!==s&&u.push(l),s.push(c))}return s},br=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},ve=function(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i};se.prototype.clear=function(){this.__data__=new Og,this.size=0},se.prototype.delete=function(e){var t=this.__data__;return e=t.delete(e),this.size=t.size,e},se.prototype.get=function(e){return this.__data__.get(e)},se.prototype.has=function(e){return this.__data__.has(e)},se.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Og){var r=n.__data__;if(!tg||199>r.length)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ng(r)}return n.set(e,t),this.size=n.size,this};var ue=se,Cu=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e},Xh=function(){try{var e=be(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),ug=function(e,t,n){"__proto__"==t&&Xh?Xh(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},eA=Object.prototype.hasOwnProperty,Om=function(e,t,n){var r=e[t];eA.call(e,t)&&sg(r,n)&&(void 0!==n||t in e)||ug(e,t,n)},Fe=function(e,t,n,r){var i=!n;n||(n={});for(var o=-1,a=t.length;++o<a;){var s=t[o],u=r?r(n[s],e[s],s,n,e):void 0;void 0===u&&(u=e[s]),i?ug(n,s,u):Om(n,s,u)}return n},oc=function(e){return null!=e&&"object"==V(e)},cr=function(e){return oc(e)&&"[object Arguments]"==$d(e)},dr=Object.prototype,fA=dr.hasOwnProperty,gA=dr.propertyIsEnumerable,Jf=cr(function(){return arguments}())?cr:function(e){return oc(e)&&fA.call(e,"callee")&&!gA.call(e,"callee")},Za=Array.isArray,hA=function(){return!1},Bf=cb((function(e,t){var n=(t=t&&!t.nodeType&&t)&&e&&!e.nodeType&&e;t=n&&n.exports===t?Fb.Buffer:void 0,e.exports=(t?t.isBuffer:void 0)||hA})),iA=/^(?:0|[1-9]\d*)$/,cl=function(e,t){var n=V(e);return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&iA.test(e))&&-1<e&&0==e%1&&e<t},dl=function(e){return"number"==typeof e&&-1<e&&0==e%1&&9007199254740991>=e},Ga={};Ga["[object Float32Array]"]=Ga["[object Float64Array]"]=Ga["[object Int8Array]"]=Ga["[object Int16Array]"]=Ga["[object Int32Array]"]=Ga["[object Uint8Array]"]=Ga["[object Uint8ClampedArray]"]=Ga["[object Uint16Array]"]=Ga["[object Uint32Array]"]=!0,Ga["[object Arguments]"]=Ga["[object Array]"]=Ga["[object ArrayBuffer]"]=Ga["[object Boolean]"]=Ga["[object DataView]"]=Ga["[object Date]"]=Ga["[object Error]"]=Ga["[object Function]"]=Ga["[object Map]"]=Ga["[object Number]"]=Ga["[object Object]"]=Ga["[object RegExp]"]=Ga["[object Set]"]=Ga["[object String]"]=Ga["[object WeakMap]"]=!1;var jA=function(e){return oc(e)&&dl(e.length)&&!!Ga[$d(e)]},Yh=function(e){return function(t){return e(t)}},hf=cb((function(e,t){var n=t&&!t.nodeType&&t;n=(t=n&&e&&!e.nodeType&&e)&&t.exports===n&&Xq.process;e:{try{var r=t&&t.require&&t.require("util").types;if(r){var i=r;break e}i=n&&n.binding&&n.binding("util");break e}catch(e){}i=void 0}e.exports=i})),er=hf&&hf.isTypedArray,Gi=er?Yh(er):jA,kA=Object.prototype.hasOwnProperty,fr=function(e,t){var n=Za(e),r=!n&&Jf(e),i=!n&&!r&&Bf(e),o=!n&&!r&&!i&&Gi(e);if(n=n||r||i||o){r=e.length;for(var a=String,s=-1,u=Array(r);++s<r;)u[s]=a(s);r=u}else r=[];for(var c in a=r.length,e)!t&&!kA.call(e,c)||n&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||cl(c,a))||r.push(c);return r},lA=Object.prototype,el=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||lA)},gr=function(e,t){return function(n){return e(t(n))}},mA=gr(Object.keys,Object),nA=Object.prototype.hasOwnProperty,Nd=function(e){return null!=e&&dl(e.length)&&!Wi(e)},Jd=function(e){if(Nd(e))e=fr(e);else if(el(e)){var t,n=[];for(t in Object(e))nA.call(e,t)&&"constructor"!=t&&n.push(t);e=n}else e=mA(e);return e},yu=function(e,t){return e&&Fe(t,Jd(t),e)},oA=Object.prototype.hasOwnProperty,Cf=function(e){if(Nd(e))e=fr(e,!0);else if(ob(e)){var t=el(e),n=[];for(r in e)("constructor"!=r||!t&&oA.call(e,r))&&n.push(r);e=n}else{var r=[];if(null!=e)for(t in Object(e))r.push(t);e=r}return e},wu=function(e,t){return e&&Fe(t,Cf(t),e)},Lm=cb((function(e,t){var n=(t=t&&!t.nodeType&&t)&&e&&!e.nodeType&&e,r=(t=n&&n.exports===t?Fb.Buffer:void 0)?t.allocUnsafe:void 0;e.exports=function(e,t){return t?e.slice():(t=e.length,t=r?r(t):new e.constructor(t),e.copy(t),t)}})),Bi=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t},pA=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o},hr=function(){return[]},qA=Object.prototype.propertyIsEnumerable,ir=Object.getOwnPropertySymbols,fl=ir?function(e){return null==e?[]:(e=Object(e),pA(ir(e),(function(t){return qA.call(e,t)})))}:hr,xu=function(e,t){return Fe(e,fl(e),t)},Fi=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e},gl=gr(Object.getPrototypeOf,Object),jr=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)Fi(t,fl(e)),e=gl(e);return t}:hr,vu=function(e,t){return Fe(e,jr(e),t)},kr=function(e,t,n){return t=t(e),Za(e)?t:Fi(t,n(e))},Ci=function(e){return kr(e,Jd,fl)},Nm=function(e){return kr(e,Cf,jr)},hl=be(Fb,"DataView"),il=be(Fb,"Promise"),jl=be(Fb,"WeakMap"),rA=ae(hl),sA=ae(tg),tA=ae(il),uA=ae(gf),vA=ae(jl),ce=$d;(hl&&"[object DataView]"!=ce(new hl(new ArrayBuffer(1)))||tg&&"[object Map]"!=ce(new tg)||il&&"[object Promise]"!=ce(il.resolve())||gf&&"[object Set]"!=ce(new gf)||jl&&"[object WeakMap]"!=ce(new jl))&&(ce=function(e){var t=$d(e);if(e=(e="[object Object]"==t?e.constructor:void 0)?ae(e):"")switch(e){case rA:return"[object DataView]";case sA:return"[object Map]";case tA:return"[object Promise]";case uA:return"[object Set]";case vA:return"[object WeakMap]"}return t});var Af=ce,wA=Object.prototype.hasOwnProperty,uu=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&wA.call(e,"index")&&(n.index=e.index,n.input=e.input),n},Zh=Fb.Uint8Array,kl=function(e){var t=new e.constructor(e.byteLength);return new Zh(t).set(new Zh(e)),t},xA=/\w*$/,lr=Ub?Ub.prototype:void 0,mr=lr?lr.valueOf:void 0,An=function(e,t){return t=t?kl(e.buffer):e.buffer,new e.constructor(t,e.byteOffset,e.length)},zu=function(e,t,n){var r=e.constructor;switch(t){case"[object ArrayBuffer]":return kl(e);case"[object Boolean]":case"[object Date]":return new r(+e);case"[object DataView]":return t=n?kl(e.buffer):e.buffer,new e.constructor(t,e.byteOffset,e.byteLength);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return An(e,n);case"[object Map]":return new r;case"[object Number]":case"[object String]":return new r(e);case"[object RegExp]":return(t=new e.constructor(e.source,xA.exec(e))).lastIndex=e.lastIndex,t;case"[object Set]":return new r;case"[object Symbol]":return mr?Object(mr.call(e)):{}}},nr=Object.create,yA=function(){function e(){}return function(t){return ob(t)?nr?nr(t):(e.prototype=t,t=new e,e.prototype=void 0,t):{}}}(),Mm=function(e){return"function"!=typeof e.constructor||el(e)?{}:yA(gl(e))},zA=function(e){return oc(e)&&"[object Map]"==Af(e)},or=hf&&hf.isMap,Bu=or?Yh(or):zA,AA=function(e){return oc(e)&&"[object Set]"==Af(e)},pr=hf&&hf.isSet,Au=pr?Yh(pr):AA,xa={};xa["[object Arguments]"]=xa["[object Array]"]=xa["[object ArrayBuffer]"]=xa["[object DataView]"]=xa["[object Boolean]"]=xa["[object Date]"]=xa["[object Float32Array]"]=xa["[object Float64Array]"]=xa["[object Int8Array]"]=xa["[object Int16Array]"]=xa["[object Int32Array]"]=xa["[object Map]"]=xa["[object Number]"]=xa["[object Object]"]=xa["[object RegExp]"]=xa["[object Set]"]=xa["[object String]"]=xa["[object Symbol]"]=xa["[object Uint8Array]"]=xa["[object Uint8ClampedArray]"]=xa["[object Uint16Array]"]=xa["[object Uint32Array]"]=!0,xa["[object Error]"]=xa["[object Function]"]=xa["[object WeakMap]"]=!1;var we=function(e){return"symbol"==V(e)||oc(e)&&"[object Symbol]"==$d(e)},BA=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,CA=/^\w*$/,ll=function(e,t){if(Za(e))return!1;var n=V(e);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!we(e))||(CA.test(e)||!BA.test(e)||null!=t&&e in Object(t))};Di.Cache=Ng;var DA=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,EA=/\\(\\)?/g,FA=function(e){var t=(e=Di(e,(function(e){return 500===t.size&&t.clear(),e}))).cache;return e}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(DA,(function(e,n,r,i){t.push(r?i.replace(EA,"$1"):n||e)})),t})),Du=1/0,qr=Ub?Ub.prototype:void 0,Qm=qr?qr.toString:void 0,$h=function(e,t){return Za(e)?e:ll(e,t)?[e]:FA(null==e?"":Pm(e))},GA=1/0,vg=function(e){if("string"==typeof e||we(e))return e;var t=e+"";return"0"==t&&1/e==-GA?"-0":t},ai=function(e,t){for(var n=0,r=(t=$h(t,e)).length;null!=e&&n<r;)e=e[vg(t[n++])];return n&&n==r?e:void 0},HA=function(e,t){if(!(2>(t=$h(t,e)).length)){var n=t,r=0,i=-1,o=-1,a=n.length;for(0>r&&(r=-r>a?0:a+r),0>(i=i>a?a:i)&&(i+=a),a=r>i?0:i-r>>>0,r>>>=0,i=Array(a);++o<a;)i[o]=n[o+r];e=ai(e,i)}return(n=null==e)||(n=null==t?0:t.length,n=delete e[vg(n?t[n-1]:void 0)]),n},rr=Function.prototype.toString,IA=Object.prototype.hasOwnProperty,JA=rr.call(Object),Bn=function(e){return!(!oc(e)||"[object Object]"!=$d(e))&&(null===(e=gl(e))||"function"==typeof(e=IA.call(e,"constructor")&&e.constructor)&&e instanceof e&&rr.call(e)==JA)},KA=function(e){return Bn(e)?void 0:e},sr=Ub?Ub.isConcatSpreadable:void 0,Eu=function(e){return Za(e)||Jf(e)||!!(sr&&e&&e[sr])},LA=function(e){return null!=e&&e.length?Ei(e,1):[]},MA=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)},tr=Math.max,ur=function(e,t,n){return t=tr(void 0===t?e.length-1:t,0),function(){for(var r=arguments,i=-1,o=tr(r.length-t,0),a=Array(o);++i<o;)a[i]=r[t+i];for(i=-1,o=Array(t+1);++i<t;)o[i]=r[i];return o[t]=n(a),MA(e,this,o)}},NA=function(e){return function(){return e}},bi=function(e){return e},OA=Date.now,vr=function(e){var t=0,n=0;return function(){var r=OA(),i=16-(r-n);if(n=r,0<i){if(800<=++t)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(Xh?function(e,t){return Xh(e,"toString",{configurable:!0,enumerable:!1,value:NA(t),writable:!0})}:bi),ml=function(e){return vr(ur(e,void 0,LA),e+"")}((function(e,t){var n={};if(null==e)return n;var r=!1;t=ve(t,(function(t){return t=$h(t,e),r||(r=1<t.length),t})),Fe(e,Nm(e),n),r&&(n=te(n,7,KA));for(var i=t.length;i--;)HA(n,t[i]);return n})),PA=function(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r},zn=function(e,t,n){for(var r=-1,i=Object(e),o=(n=n(e)).length;o--;){var a=n[++r];if(!1===t(i[a],a,i))break}return e},wr=function(e,t){return e&&zn(e,t,Jd)},nl=function(e,t){return function(t,n){if(null==t)return t;if(!Nd(t))return e(t,n);for(var r=t.length,i=-1,o=Object(t);++i<r&&!1!==n(o[i],i,o););return t}}(wr),QA=function(e,t,n,r){return nl(e,(function(e,i,o){t(r,e,n(e),o)})),r},xr=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1},Rm=function(e,t,n,r,i,o){var a=1&n,s=e.length,u=t.length;if(s!=u&&!(a&&u>s))return!1;u=o.get(e);var c=o.get(t);if(u&&c)return u==t&&c==e;u=-1,c=!0;var l=2&n?new zf:void 0;for(o.set(e,t),o.set(t,e);++u<s;){var f=e[u],h=t[u];if(r)var p=a?r(h,f,u,t,e,o):r(f,h,u,e,t,o);if(void 0!==p){if(p)continue;c=!1;break}if(l){if(!xr(t,(function(e,t){if(!l.has(t)&&(f===e||i(f,e,n,r,o)))return l.push(t)}))){c=!1;break}}else if(f!==h&&!i(f,h,n,r,o)){c=!1;break}}return o.delete(e),o.delete(t),c},RA=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n},yr=Ub?Ub.prototype:void 0,ol=yr?yr.valueOf:void 0,Fu=function(e,t,n,r,i,o,a){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)break;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":if(e.byteLength!=t.byteLength||!o(new Zh(e),new Zh(t)))break;return!0;case"[object Boolean]":case"[object Date]":case"[object Number]":return sg(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var s=RA;case"[object Set]":if(s||(s=al),e.size!=t.size&&!(1&r))break;return(n=a.get(e))?n==t:(r|=2,a.set(e,t),t=Rm(s(e),s(t),r,i,o,a),a.delete(e),t);case"[object Symbol]":if(ol)return ol.call(e)==ol.call(t)}return!1},Gu=Object.prototype.hasOwnProperty,Sm=Object.prototype.hasOwnProperty,SA=function(e,t,n,r){var i=n.length,o=i,a=!r;if(null==e)return!o;for(e=Object(e);i--;){var s=n[i];if(a&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++i<o;){var u=(s=n[i])[0],c=e[u],l=s[1];if(a&&s[2]){if(void 0===c&&!(u in e))return!1}else{if(s=new ue,r)var f=r(c,l,u,e,t,s);if(void 0===f?!xe(l,c,3,r,s):!f)return!1}}return!0},TA=function(e){for(var t=Jd(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,i==i&&!ob(i)]}return t},zr=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}},UA=function(e){var t=TA(e);return 1==t.length&&t[0][2]?zr(t[0][0],t[0][1]):function(n){return n===e||SA(n,e,t)}},VA=function(e,t){return ll(e)&&t==t&&!ob(t)?zr(vg(e),t):function(n){var r=null==n?void 0:ai(n,e);if(void 0===(r=void 0===r?void 0:r)&&r===t){if(r=null!=n){for(var i=-1,o=(r=$h(r=e,n)).length,a=!1;++i<o;){var s=vg(r[i]);if(!(a=null!=n&&null!=n&&s in Object(n)))break;n=n[s]}a||++i!=o?r=a:r=!!(o=null==n?0:n.length)&&dl(o)&&cl(s,o)&&(Za(n)||Jf(n))}s=r}else s=xe(t,r,3);return s}},WA=function(e){return function(t){return null==t?void 0:t[e]}},XA=function(e){return function(t){return ai(t,e)}},jf=function(e){return"function"==typeof e?e:null==e?bi:"object"==V(e)?Za(e)?VA(e[0],e[1]):UA(e):ll(e)?WA(vg(e)):XA(e)},pl=function(e,t){return function(t,n){var r={};return(Za(t)?PA:QA)(t,e,jf(n),r)}}((function(e,t,n){ug(e,n,t)})),Bc=function(e,t){var n={};return t=jf(t),wr(e,(function(e,r,i){ug(n,r,t(e,r,i))})),n};M({target:"String",proto:!0,forced:R((function(){var e="".sub('"');return e!==e.toLowerCase()||3<e.split('"').length}))},{sub:function(){return"<sub>"+String(mb(this))+"</sub>"}});var U=ya,Vb=null;try{Vb=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(c){}ya.prototype.__isLong__,Object.defineProperty(ya.prototype,"__isLong__",{value:!0}),ya.isLong=pb;var Um={},Tm={};ya.fromInt=Kd,ya.fromNumber=Kb,ya.fromBits=za;var Pg=Math.pow;ya.fromString=Hi,ya.fromValue=bc;var ye=4294967296,Vm=ye*ye,Xm=Vm/2,Ar=Kd(16777216),Lb=Kd(0);ya.ZERO=Lb;var Ld=Kd(0,!0);ya.UZERO=Ld;var kf=Kd(1);ya.ONE=kf;var Br=Kd(1,!0);ya.UONE=Br;var ql=Kd(-1);ya.NEG_ONE=ql;var Ym=za(-1,2147483647,!1);ya.MAX_VALUE=Ym;var Wm=za(-1,-1,!0);ya.MAX_UNSIGNED_VALUE=Wm;var qb=za(0,-2147483648,!1);ya.MIN_VALUE=qb;var z=ya.prototype;z.toInt=function(){return this.unsigned?this.low>>>0:this.low},z.toNumber=function(){return this.unsigned?(this.high>>>0)*ye+(this.low>>>0):this.high*ye+(this.low>>>0)},z.toString=function(e){if(2>(e=e||10)||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(qb)){var t=Kb(e),n=this.div(t);return t=n.mul(t).sub(this),n.toString(e)+t.toInt().toString(e)}return"-"+this.neg().toString(e)}n=Kb(Pg(e,6),this.unsigned),t=this;for(var r="";;){var i=t.div(n),o=(t.sub(i.mul(n)).toInt()>>>0).toString(e);if((t=i).isZero())return o+r;for(;6>o.length;)o="0"+o;r=""+o+r}},z.getHighBits=function(){return this.high},z.getHighBitsUnsigned=function(){return this.high>>>0},z.getLowBits=function(){return this.low},z.getLowBitsUnsigned=function(){return this.low>>>0},z.getNumBitsAbs=function(){if(this.isNegative())return this.eq(qb)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;0<t&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},z.isZero=function(){return 0===this.high&&0===this.low},z.eqz=z.isZero,z.isNegative=function(){return!this.unsigned&&0>this.high},z.isPositive=function(){return this.unsigned||0<=this.high},z.isOdd=function(){return 1==(1&this.low)},z.isEven=function(){return 0==(1&this.low)},z.equals=function(e){return pb(e)||(e=bc(e)),(this.unsigned===e.unsigned||1!=this.high>>>31||1!=e.high>>>31)&&(this.high===e.high&&this.low===e.low)},z.eq=z.equals,z.notEquals=function(e){return!this.eq(e)},z.neq=z.notEquals,z.ne=z.notEquals,z.lessThan=function(e){return 0>this.comp(e)},z.lt=z.lessThan,z.lessThanOrEqual=function(e){return 0>=this.comp(e)},z.lte=z.lessThanOrEqual,z.le=z.lessThanOrEqual,z.greaterThan=function(e){return 0<this.comp(e)},z.gt=z.greaterThan,z.greaterThanOrEqual=function(e){return 0<=this.comp(e)},z.gte=z.greaterThanOrEqual,z.ge=z.greaterThanOrEqual,z.compare=function(e){if(pb(e)||(e=bc(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},z.comp=z.compare,z.negate=function(){return!this.unsigned&&this.eq(qb)?qb:this.not().add(kf)},z.neg=z.negate,z.add=function(e){pb(e)||(e=bc(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,i=e.high>>>16,o=65535&e.high,a=e.low>>>16;return r=(a=((e=(65535&this.low)+(65535&e.low))>>>16)+(r+a))>>>16,za((65535&a)<<16|65535&e,(t=((r+=n+o)>>>16)+(t+i)&65535)<<16|65535&r,this.unsigned)},z.subtract=function(e){return pb(e)||(e=bc(e)),this.add(e.neg())},z.sub=z.subtract,z.multiply=function(e){if(this.isZero())return Lb;if(pb(e)||(e=bc(e)),Vb){var t=Vb.mul(this.low,this.high,e.low,e.high);return za(t,Vb.get_high(),this.unsigned)}if(e.isZero())return Lb;if(this.eq(qb))return e.isOdd()?qb:Lb;if(e.eq(qb))return this.isOdd()?qb:Lb;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(Ar)&&e.lt(Ar))return Kb(this.toNumber()*e.toNumber(),this.unsigned);t=this.high>>>16;var n=65535&this.high,r=this.low>>>16,i=65535&this.low,o=e.high>>>16,a=65535&e.high,s=e.low>>>16,u=i*(e=65535&e.low),c=(u>>>16)+r*e,l=c>>>16;l+=(c=(65535&c)+i*s)>>>16;var f=(l+=n*e)>>>16;return za((65535&c)<<16|65535&u,(f=(f+=(l=(65535&l)+r*s)>>>16)+((l=(65535&l)+i*a)>>>16)+(t*e+n*s+r*a+i*o)&65535)<<16|65535&l,this.unsigned)},z.mul=z.multiply,z.divide=function(e){if(pb(e)||(e=bc(e)),e.isZero())throw Error("division by zero");if(Vb)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?za(e=(this.unsigned?Vb.div_u:Vb.div_s)(this.low,this.high,e.low,e.high),Vb.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Ld:Lb;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Ld;if(e.gt(this.shru(1)))return Br;var t=Ld}else{if(this.eq(qb)){if(e.eq(kf)||e.eq(ql))return qb;if(e.eq(qb))return kf;var n=this.shr(1).div(e).shl(1);if(n.eq(Lb))return e.isNegative()?kf:ql;var r=this.sub(e.mul(n));return n.add(r.div(e))}if(e.eq(qb))return this.unsigned?Ld:Lb;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();t=Lb}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));var i=Math.ceil(Math.log(n)/Math.LN2);i=48>=i?1:Pg(2,i-48);for(var o=Kb(n),a=o.mul(e);a.isNegative()||a.gt(r);)a=(o=Kb(n-=i,this.unsigned)).mul(e);o.isZero()&&(o=kf),t=t.add(o),r=r.sub(a)}return t},z.div=z.divide,z.modulo=function(e){return pb(e)||(e=bc(e)),Vb?za(e=(this.unsigned?Vb.rem_u:Vb.rem_s)(this.low,this.high,e.low,e.high),Vb.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},z.mod=z.modulo,z.rem=z.modulo,z.not=function(){return za(~this.low,~this.high,this.unsigned)},z.and=function(e){return pb(e)||(e=bc(e)),za(this.low&e.low,this.high&e.high,this.unsigned)},z.or=function(e){return pb(e)||(e=bc(e)),za(this.low|e.low,this.high|e.high,this.unsigned)},z.xor=function(e){return pb(e)||(e=bc(e)),za(this.low^e.low,this.high^e.high,this.unsigned)},z.shiftLeft=function(e){return pb(e)&&(e=e.toInt()),0==(e&=63)?this:32>e?za(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):za(0,this.low<<e-32,this.unsigned)},z.shl=z.shiftLeft,z.shiftRight=function(e){return pb(e)&&(e=e.toInt()),0==(e&=63)?this:32>e?za(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):za(this.high>>e-32,0<=this.high?0:-1,this.unsigned)},z.shr=z.shiftRight,z.shiftRightUnsigned=function(e){if(pb(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return 32>e?za(this.low>>>e|t<<32-e,t>>>e,this.unsigned):za(32===e?t:t>>>e-32,0,this.unsigned)},z.shru=z.shiftRightUnsigned,z.shr_u=z.shiftRightUnsigned,z.toSigned=function(){return this.unsigned?za(this.low,this.high,!1):this},z.toUnsigned=function(){return this.unsigned?this:za(this.low,this.high,!0)},z.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},z.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},z.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},ya.fromBytes=function(e,t,n){return n?ya.fromBytesLE(e,t):ya.fromBytesBE(e,t)},ya.fromBytesLE=function(e,t){return new ya(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},ya.fromBytesBE=function(e,t){return new ya(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};var Ii=function(e,t){return(Ii=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},rl=!1,Mb={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e?console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+Error().stack):rl&&console.log("RxJS: Back to a better error behavior. Thank you. <3"),rl=e},get useDeprecatedSynchronousErrorHandling(){return rl}},ci={closed:!0,next:function(e){},error:function(e){if(Mb.useDeprecatedSynchronousErrorHandling)throw e;Ae(e)},complete:function(){}},Nb=Array.isArray||function(e){return e&&"number"==typeof e.length},Df=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),Ta=function(){function e(e){this.closed=!1,this._subscriptions=this._parentOrParents=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}return e.prototype.unsubscribe=function(){if(!this.closed){var t=this._parentOrParents,n=this._ctorUnsubscribe,r=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._subscriptions=this._parentOrParents=null,t instanceof e)t.remove(this);else if(null!==t)for(var o=0;o<t.length;++o)t[o].remove(this);if(ze(r)){n&&(this._unsubscribe=void 0);try{r.call(this)}catch(e){var a=e instanceof Df?Zm(e.errors):[e]}}if(Nb(i))for(o=-1,t=i.length;++o<t;)if(Ji(n=i[o]))try{n.unsubscribe()}catch(e){a=a||[],e instanceof Df?a=a.concat(Zm(e.errors)):a.push(e)}if(a)throw new Df(a)}},e.prototype.add=function(t){var n=t;if(!t)return e.EMPTY;switch(V(t)){case"function":n=new e(t);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;n instanceof e||(t=n,(n=new e)._subscriptions=[t]);break;default:throw Error("unrecognized teardown "+t+" added to Subscription.")}if(null===(t=n._parentOrParents))n._parentOrParents=this;else if(t instanceof e){if(t===this)return n;n._parentOrParents=[t,this]}else{if(-1!==t.indexOf(this))return n;t.push(this)}return null===(t=this._subscriptions)?this._subscriptions=[n]:t.push(n),n},e.prototype.remove=function(e){var t=this._subscriptions;t&&(-1!==(e=t.indexOf(e))&&t.splice(e,1))},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}(),di="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),ma=function(e){function t(n,r,i){var o=e.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=ci;break;case 1:if(!n){o.destination=ci;break}if("object"===V(n)){n instanceof t?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new Cr(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new Cr(o,n,r,i)}return o}return O(t,e),t.prototype[di]=function(){return this},t.create=function(e,n,r){return(e=new t(e,n,r)).syncErrorThrowable=!1,e},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.isStopped=this.closed=!1,this._parentOrParents=e,this},t}(Ta),Cr=function(e){function t(t,n,r,i){var o=e.call(this)||this;if(o._parentSubscriber=t,t=o,ze(n))var a=n;else n&&(a=n.next,r=n.error,i=n.complete,n!==ci&&(ze((t=Object.create(n)).unsubscribe)&&o.add(t.unsubscribe.bind(t)),t.unsubscribe=o.unsubscribe.bind(o)));return o._context=t,o._next=a,o._error=r,o._complete=i,o}return O(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;Mb.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,n=Mb.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?this.__tryOrSetError(t,this._error,e):this.__tryOrUnsub(this._error,e),this.unsubscribe();else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):Ae(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;Ae(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};Mb.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,n):this.__tryOrUnsub(n)}this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),Mb.useDeprecatedSynchronousErrorHandling)throw e;Ae(e)}},t.prototype.__tryOrSetError=function(e,t,n){if(!Mb.useDeprecatedSynchronousErrorHandling)throw Error("bad call");try{t.call(this._context,n)}catch(t){return Mb.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0):Ae(t),!0}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._parentSubscriber=this._context=null,e.unsubscribe()},t}(ma),Be="function"==typeof Symbol&&Symbol.observable||"@@observable",Y=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r=this.operator;e:{if(e){if(e instanceof ma)break e;if(e[di]){e=e[di]();break e}}e=e||t||n?new ma(e,t,n):new ma(ci)}if(r?e.add(r.call(e,this.source)):e.add(this.source||Mb.useDeprecatedSynchronousErrorHandling&&!e.syncErrorThrowable?this._subscribe(e):this._trySubscribe(e)),Mb.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable&&(e.syncErrorThrowable=!1,e.syncErrorThrown))throw e.syncErrorValue;return e},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){Mb.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),Ki(e)?e.error(t):console.warn(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=an(t))((function(t,r){var i=n.subscribe((function(t){try{e(t)}catch(e){r(e),i&&i.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[Be]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:$m(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=an(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}(),xd=function(){function e(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return e.prototype=Object.create(Error.prototype),e}(),Dr=function(e){function t(t,n){var r=e.call(this)||this;return r.subject=t,r.subscriber=n,r.closed=!1,r}return O(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;this.subject=null,!t||0===t.length||e.isStopped||e.closed||-1!==(e=t.indexOf(this.subscriber))&&t.splice(e,1)}},t}(Ta),Er=function(e){function t(t){var n=e.call(this,t)||this;return n.destination=t,n}return O(t,e),t}(ma),Ua=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return O(t,e),t.prototype[di]=function(){return new Er(this)},t.prototype.lift=function(e){var t=new Fr(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new xd;if(!this.isStopped){var t=this.observers,n=t.length;t=t.slice();for(var r=0;r<n;r++)t[r].next(e)}},t.prototype.error=function(e){if(this.closed)throw new xd;this.hasError=!0,this.thrownError=e,this.isStopped=!0;var t=this.observers,n=t.length;t=t.slice();for(var r=0;r<n;r++)t[r].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new xd;this.isStopped=!0;var e=this.observers,t=e.length;e=e.slice();for(var n=0;n<t;n++)e[n].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.closed=this.isStopped=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new xd;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new xd;return this.hasError?(e.error(this.thrownError),Ta.EMPTY):this.isStopped?(e.complete(),Ta.EMPTY):(this.observers.push(e),new Dr(this,e))},t.prototype.asObservable=function(){var e=new Y;return e.source=this,e},t.create=function(e,t){return new Fr(e,t)},t}(Y),Fr=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return O(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):Ta.EMPTY},t}(Ua),Hu=function(){function e(e){this.connectable=e}return e.prototype.call=function(e,t){var n=this.connectable;return n._refCount++,e=new YA(e,n),t=t.subscribe(e),e.closed||(e.connection=n.connect()),t},e}(),YA=function(e){function t(t,n){return(t=e.call(this,t)||this).connectable=n,t}return O(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;0>=t?this.connection=null:(e._refCount=t-1,1<t?this.connection=null:(t=this.connection,e=e._connection,this.connection=null,!e||t&&e!==t||e.unsubscribe()))}else this.connection=null},t}(ma),Gr=function(e){function t(t,n){var r=e.call(this)||this;return r.source=t,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return O(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new Ta).add(this.source.subscribe(new ZA(this.getSubject(),this))),e.closed&&(this._connection=null,e=Ta.EMPTY)),e},t.prototype.refCount=function(){return bn()(this)},t}(Y),uv=function(){var e=Gr.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:e._subscribe},_isComplete:{value:e._isComplete,writable:!0},getSubject:{value:e.getSubject},connect:{value:e.connect},refCount:{value:e.refCount}}}(),ZA=function(e){function t(t,n){return(t=e.call(this,t)||this).connectable=n,t}return O(t,e),t.prototype._error=function(t){this._unsubscribe(),e.prototype._error.call(this,t)},t.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),e.prototype._complete.call(this)},t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}},t}(Er);!function(e){function t(t,n){return(t=e.call(this,t)||this).connectable=n,t}O(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;0>=t?this.connection=null:(e._refCount=t-1,1<t?this.connection=null:(t=this.connection,e=e._connection,this.connection=null,!e||t&&e!==t||e.unsubscribe()))}else this.connection=null}}(ma),function(e){function t(t,n,r,i,o){return(t=e.call(this,t)||this).keySelector=n,t.elementSelector=r,t.durationSelector=i,t.subjectSelector=o,t.groups=null,t.attemptedToUnsubscribe=!1,t.count=0,t}O(t,e),t.prototype._next=function(e){try{var t=this.keySelector(e)}catch(e){return void this.error(e)}this._group(e,t)},t.prototype._group=function(e,t){var n=this.groups;n||(n=this.groups=new Map);var r=n.get(t);if(this.elementSelector)try{var i=this.elementSelector(e)}catch(e){this.error(e)}else i=e;if(!r&&(r=this.subjectSelector?this.subjectSelector():new Ua,n.set(t,r),e=new sl(t,r,this),this.destination.next(e),this.durationSelector)){e=void 0;try{e=this.durationSelector(new sl(t,r))}catch(e){return void this.error(e)}this.add(e.subscribe(new $A(t,r,this)))}r.closed||r.next(i)},t.prototype._error=function(e){var t=this.groups;t&&(t.forEach((function(t,n){t.error(e)})),t.clear()),this.destination.error(e)},t.prototype._complete=function(){var e=this.groups;e&&(e.forEach((function(e,t){e.complete()})),e.clear()),this.destination.complete()},t.prototype.removeGroup=function(e){this.groups.delete(e)},t.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&e.prototype.unsubscribe.call(this))}}(ma);var $A=function(e){function t(t,n,r){var i=e.call(this,n)||this;return i.key=t,i.group=n,i.parent=r,i}return O(t,e),t.prototype._next=function(e){this.complete()},t.prototype._unsubscribe=function(){var e=this.parent,t=this.key;this.key=this.parent=null,e&&e.removeGroup(t)},t}(ma),sl=function(e){function t(t,n,r){var i=e.call(this)||this;return i.key=t,i.groupSubject=n,i.refCountSubscription=r,i}return O(t,e),t.prototype._subscribe=function(e){var t=new Ta,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&t.add(new aB(n)),t.add(r.subscribe(e)),t},t}(Y),aB=function(e){function t(t){var n=e.call(this)||this;return n.parent=t,t.count++,n}return O(t,e),t.prototype.unsubscribe=function(){var t=this.parent;t.closed||this.closed||(e.prototype.unsubscribe.call(this),--t.count,0===t.count&&t.attemptedToUnsubscribe&&t.unsubscribe())},t}(Ta),bB=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return O(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return n&&!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new xd;return this._value},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(Ua),wg=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return O(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e,e=this.id;var n=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(n,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){return this.closed?Error("executing a cancelled action"):(this.pending=!1,(e=this._execute(e,t))?e:void(!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))))},t.prototype._execute=function(e,t){t=!1;var n=void 0;try{this.work(e)}catch(e){t=!0,n=!!e&&e||Error(e)}if(t)return this.unsubscribe(),n},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,n=t.actions,r=n.indexOf(this);this.state=this.work=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(function(e){function t(t,n){return e.call(this)||this}return O(t,e),t.prototype.schedule=function(e,t){return this},t}(Ta)),cB=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r}return O(t,e),t.prototype.schedule=function(t,n){return void 0===n&&(n=0),0<n?e.prototype.schedule.call(this,t,n):(this.delay=n,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,n){return 0<n||this.closed?e.prototype.execute.call(this,t,n):this._execute(t,n)},t.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),null!==r&&0<r||null===r&&0<this.delay?e.prototype.requestAsyncId.call(this,t,n,r):t.flush(this)},t}(wg),tl=function(){function e(t,n){void 0===n&&(n=e.now),this.SchedulerAction=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(n,t)},e.now=function(){return Date.now()},e}(),xg=function(e){function t(n,r){void 0===r&&(r=tl.now);var i=e.call(this,n,(function(){return t.delegate&&t.delegate!==i?t.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return O(t,e),t.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),t.delegate&&t.delegate!==this?t.delegate.schedule(n,r,i):e.prototype.schedule.call(this,n,r,i)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var n;this.active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(tl),yg=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t}(xg))(cB),yb=new Y((function(e){return e.complete()})),cn=function(e){return function(t){for(var n=0,r=e.length;n<r&&!t.closed;n++)t.next(e[n]);t.complete()}},ul;!function(e){e.NEXT="N",e.ERROR="E",e.COMPLETE="C"}(ul||(ul={}));var lf=function(){function e(e,t,n){this.kind=e,this.value=t,this.error=n,this.hasValue="N"===e}return e.prototype.observe=function(e){switch(this.kind){case"N":return e.next&&e.next(this.value);case"E":return e.error&&e.error(this.error);case"C":return e.complete&&e.complete()}},e.prototype.do=function(e,t,n){switch(this.kind){case"N":return e&&e(this.value);case"E":return t&&t(this.error);case"C":return n&&n()}},e.prototype.accept=function(e,t,n){return e&&"function"==typeof e.next?this.observe(e):this.do(e,t,n)},e.prototype.toObservable=function(){switch(this.kind){case"N":return eb(this.value);case"E":return Z(this.error);case"C":return Ef()}throw Error("unexpected notification kind value")},e.createNext=function(t){return void 0!==t?new e("N",t):e.undefinedValueNotification},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e.undefinedValueNotification=new e("N",void 0),e}(),Lu=function(){function e(e,t){void 0===t&&(t=0),this.scheduler=e,this.delay=t}return e.prototype.call=function(e,t){return t.subscribe(new Hr(e,this.scheduler,this.delay))},e}(),Hr=function(e){function t(t,n,r){return void 0===r&&(r=0),(t=e.call(this,t)||this).scheduler=n,t.delay=r,t}return O(t,e),t.dispatch=function(e){e.notification.observe(e.destination),this.unsubscribe()},t.prototype.scheduleMessage=function(e){this.destination.add(this.scheduler.schedule(t.dispatch,this.delay,new dB(e,this.destination)))},t.prototype._next=function(e){this.scheduleMessage(lf.createNext(e))},t.prototype._error=function(e){this.scheduleMessage(lf.createError(e)),this.unsubscribe()},t.prototype._complete=function(){this.scheduleMessage(lf.createComplete()),this.unsubscribe()},t}(ma),dB=function(e,t){this.notification=e,this.destination=t},Ee=function(e){function t(t,n,r){void 0===t&&(t=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=e.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=1>t?1:t,i._windowTime=1>n?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return O(t,e),t.prototype.nextInfiniteTimeWindow=function(t){if(!this.isStopped){var n=this._events;n.push(t),n.length>this._bufferSize&&n.shift()}e.prototype.next.call(this,t)},t.prototype.nextTimeWindow=function(t){this.isStopped||(this._events.push(new eB(this._getNow(),t)),this._trimBufferThenGetEvents()),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){var t=this._infiniteTimeWindow,n=t?this._events:this._trimBufferThenGetEvents(),r=this.scheduler,i=n.length;if(this.closed)throw new xd;if(this.isStopped||this.hasError)var o=Ta.EMPTY;else this.observers.push(e),o=new Dr(this,e);if(r&&e.add(e=new Hr(e,r)),t)for(t=0;t<i&&!e.closed;t++)e.next(n[t]);else for(t=0;t<i&&!e.closed;t++)e.next(n[t].value);return this.hasError?e.error(this.thrownError):this.isStopped&&e.complete(),o},t.prototype._getNow=function(){return(this.scheduler||yg).now()},t.prototype._trimBufferThenGetEvents=function(){for(var e=this._getNow(),t=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(e-r[o].time<n);)o++;return i>t&&(o=Math.max(o,i-t)),0<o&&r.splice(0,o),r},t}(Ua),eB=function(e,t){this.time=e,this.value=t},Gf=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.value=null,t.hasNext=!1,t.hasCompleted=!1,t}return O(t,e),t.prototype._subscribe=function(t){return this.hasError?(t.error(this.thrownError),Ta.EMPTY):this.hasCompleted&&this.hasNext?(t.next(this.value),t.complete(),Ta.EMPTY):e.prototype._subscribe.call(this,t)},t.prototype.next=function(e){this.hasCompleted||(this.value=e,this.hasNext=!0)},t.prototype.error=function(t){this.hasCompleted||e.prototype.error.call(this,t)},t.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&e.prototype.next.call(this,this.value),e.prototype.complete.call(this)},t}(Ua),fB=1,gB=Promise.resolve(),Ni={},Ir={setImmediate:function(e){var t=fB++;return Ni[t]=!0,gB.then((function(){return dn(t)&&e()})),t},clearImmediate:function(e){dn(e)}},hB=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r}return O(t,e),t.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),null!==r&&0<r?e.prototype.requestAsyncId.call(this,t,n,r):(t.actions.push(this),t.scheduled||(t.scheduled=Ir.setImmediate(t.flush.bind(t,null))))},t.prototype.recycleAsyncId=function(t,n,r){if(void 0===r&&(r=0),null!==r&&0<r||null===r&&0<this.delay)return e.prototype.recycleAsyncId.call(this,t,n,r);0===t.actions.length&&(Ir.clearImmediate(n),t.scheduled=void 0)},t}(wg),Xi=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,r=-1,i=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++r<i&&(e=n.shift()));if(this.active=!1,t){for(;++r<i&&(e=n.shift());)e.unsubscribe();throw t}},t}(xg))(hB),iB=Xi,vl=new xg(wg),id=vl,jB=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r}return O(t,e),t.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),null!==r&&0<r?e.prototype.requestAsyncId.call(this,t,n,r):(t.actions.push(this),t.scheduled||(t.scheduled=requestAnimationFrame((function(){return t.flush(null)}))))},t.prototype.recycleAsyncId=function(t,n,r){if(void 0===r&&(r=0),null!==r&&0<r||null===r&&0<this.delay)return e.prototype.recycleAsyncId.call(this,t,n,r);0===t.actions.length&&(cancelAnimationFrame(n),t.scheduled=void 0)},t}(wg),Jr=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,n=this.actions,r=-1,i=n.length;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while(++r<i&&(e=n.shift()));if(this.active=!1,t){for(;++r<i&&(e=n.shift());)e.unsubscribe();throw t}},t}(xg))(jB),kB=function(e){function t(t,n){void 0===t&&(t=Kr),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=e.call(this,t,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return O(t,e),t.prototype.flush=function(){for(var e,t,n=this.actions,r=this.maxFrames;(t=n[0])&&t.delay<=r&&(n.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=n.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(xg),Kr=function(e){function t(t,n,r){void 0===r&&(r=t.index+=1);var i=e.call(this,t,n)||this;return i.scheduler=t,i.work=n,i.index=r,i.active=!0,i.index=t.index=r,i}return O(t,e),t.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return e.prototype.schedule.call(this,n,r);this.active=!1;var i=new t(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},t.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),this.delay=e.frame+r,(e=e.actions).push(this),e.sort(t.sortActions),!0},t.prototype.recycleAsyncId=function(e,t,n){},t.prototype._execute=function(t,n){if(!0===this.active)return e.prototype._execute.call(this,t,n)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(wg),wl=function(){function e(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return e.prototype=Object.create(Error.prototype),e}(),Sg=function(){function e(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return e.prototype=Object.create(Error.prototype),e}(),sb=function(){function e(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return e.prototype=Object.create(Error.prototype),e}(),Mu=function(){function e(e,t){this.project=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new lB(e,this.project,this.thisArg))},e}(),lB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).project=n,t.count=0,t.thisArg=r||t,t}return O(t,e),t.prototype._next=function(e){try{var t=this.project.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(ma),xl=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.notifyNext=function(e,t,n,r,i){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(ma),Ru=function(e){function t(t,n,r){var i=e.call(this)||this;return i.parent=t,i.outerValue=n,i.outerIndex=r,i.index=0,i}return O(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(ma),mB=function(e){return function(t){return e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,Ae),t}},gd="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator",nB=function(e){return function(t){for(var n=e[gd]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t}},oB=function(e){return function(t){var n=e[Be]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)}},kn=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e},Hf=function(e){if(e&&"function"==typeof e[Be])return oB(e);if(kn(e))return cn(e);if(hn(e))return mB(e);if(e&&"function"==typeof e[gd])return nB(e);throw e=Ji(e)?"an invalid object":"'"+e+"'",new TypeError("You provided "+e+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")},Lr={},qB=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new pB(e,this.resultSelector))},e}(),pB=function(e){function t(t,n){return(t=e.call(this,t)||this).resultSelector=n,t.active=0,t.values=[],t.observables=[],t}return O(t,e),t.prototype._next=function(e){this.values.push(Lr),this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{this.toRespond=this.active=t;for(var n=0;n<t;n++)this.add(Oi(this,e[n],void 0,n))}},t.prototype.notifyComplete=function(e){0==--this.active&&this.destination.complete()},t.prototype.notifyNext=function(e,t,n){var r=(e=this.values)[n];r=this.toRespond?r===Lr?--this.toRespond:this.toRespond:0,e[n]=t,0===r&&(this.resultSelector?this._tryResultSelector(e):this.destination.next(e.slice()))},t.prototype._tryResultSelector=function(e){try{var t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(xl),Cc=function(e){function t(t){var n=e.call(this)||this;return n.parent=t,n}return O(t,e),t.prototype._next=function(e){this.parent.notifyNext(e)},t.prototype._error=function(e){this.parent.notifyError(e),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},t}(ma);!function(e){function t(t,n,r){var i=e.call(this)||this;return i.parent=t,i.outerValue=n,i.outerIndex=r,i}O(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this)},t.prototype._error=function(e){this.parent.notifyError(e),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()}}(ma);var Dc=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(){this.destination.complete()},t}(ma);!function(e){function t(){return null!==e&&e.apply(this,arguments)||this}O(t,e),t.prototype.notifyNext=function(e,t,n,r){this.destination.next(t)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()}}(ma);var Vu=function(){function e(e,t){void 0===t&&(t=Number.POSITIVE_INFINITY),this.project=e,this.concurrent=t}return e.prototype.call=function(e,t){return t.subscribe(new rB(e,this.project,this.concurrent))},e}(),rB=function(e){function t(t,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),(t=e.call(this,t)||this).project=n,t.concurrent=r,t.hasCompleted=!1,t.buffer=[],t.active=0,t.index=0,t}return O(t,e),t.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)},t.prototype._tryNext=function(e){var t=this.index++;try{var n=this.project(e,t)}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(n)},t.prototype._innerSub=function(e){var t=new Cc(this),n=this.destination;n.add(t),(e=qc(e,t))!==t&&n.add(e)},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyComplete=function(){var e=this.buffer;this.active--,0<e.length?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},t}(Dc),yl=C.parseFloat,Mr=-1/0!=1/yl("\t\n\v\f\r                　\u2028\u2029\ufeff-0")?function(e){e=Ij(String(e));var t=yl(e);return 0===t&&"-"==e.charAt(0)?-0:t}:yl;M({global:!0,forced:parseFloat!=Mr},{parseFloat:Mr});var zl=new Y(pc),$u=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new sB(e,this.predicate,this.thisArg))},e}(),sB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).predicate=n,t.thisArg=r,t.count=0,t}return O(t,e),t.prototype._next=function(e){try{var t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(ma),av=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new tB(e))},e}(),tB=function(e){function t(t){return(t=e.call(this,t)||this).hasFirst=!1,t.observables=[],t.subscriptions=[],t}return O(t,e),t.prototype._next=function(e){this.observables.push(e)},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{for(var n=0;n<t&&!this.hasFirst;n++){var r=Oi(this,e[n],void 0,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},t.prototype.notifyNext=function(e,t,n){if(!this.hasFirst){for(this.hasFirst=!0,e=0;e<this.subscriptions.length;e++)if(e!==n){var r=this.subscriptions[e];r.unsubscribe(),this.remove(r)}this.subscriptions=null}this.destination.next(t)},t}(xl),dv=function(){function e(e){this.resultSelector=e}return e.prototype.call=function(e,t){return t.subscribe(new uB(e,this.resultSelector))},e}(),uB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).resultSelector=n,t.iterators=[],t.active=0,t.resultSelector="function"==typeof n?n:void 0,t}return O(t,e),t.prototype._next=function(e){var t=this.iterators;Nb(e)?t.push(new vB(e)):"function"==typeof e[gd]?t.push(new wB(e[gd]())):t.push(new xB(this.destination,this,e))},t.prototype._complete=function(){var e=this.iterators,t=e.length;if(this.unsubscribe(),0===t)this.destination.complete();else{this.active=t;for(var n=0;n<t;n++){var r=e[n];r.stillUnsubscribed?this.destination.add(r.subscribe()):this.active--}}},t.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},t.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,n=this.destination,r=0;r<t;r++){var i=e[r];if("function"==typeof i.hasValue&&!i.hasValue())return}var o=!1,a=[];for(r=0;r<t;r++){var s=(i=e[r]).next();if(i.hasCompleted()&&(o=!0),s.done)return void n.complete();a.push(s.value)}this.resultSelector?this._tryresultSelector(a):n.next(a),o&&n.complete()},t.prototype._tryresultSelector=function(e){try{var t=this.resultSelector.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(ma),wB=function(){function e(e){this.iterator=e,this.nextResult=e.next()}return e.prototype.hasValue=function(){return!0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return!(!e||!e.done)},e}(),vB=function(){function e(e){this.array=e,this.length=this.index=0,this.length=e.length}return e.prototype[gd]=function(){return this},e.prototype.next=function(e){e=this.index++;var t=this.array;return e<this.length?{value:t[e],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),xB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).parent=n,t.observable=r,t.stillUnsubscribed=!0,t.buffer=[],t.isComplete=!1,t}return O(t,e),t.prototype[gd]=function(){return this},t.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},t.prototype.hasValue=function(){return 0<this.buffer.length},t.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},t.prototype.notifyComplete=function(){0<this.buffer.length?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},t.prototype.notifyNext=function(e){this.buffer.push(e),this.parent.checkIterators()},t.prototype.subscribe=function(){return qc(this.observable,new Cc(this))},t}(Dc),yB=Object.freeze({__proto__:null,Observable:Y,ConnectableObservable:Gr,GroupedObservable:sl,observable:Be,Subject:Ua,BehaviorSubject:bB,ReplaySubject:Ee,AsyncSubject:Gf,asap:iB,asapScheduler:Xi,async:id,asyncScheduler:vl,queue:yg,queueScheduler:yg,animationFrame:Jr,animationFrameScheduler:Jr,VirtualTimeScheduler:kB,VirtualAction:Kr,Scheduler:tl,Subscription:Ta,Subscriber:ma,Notification:lf,get NotificationKind(){return ul},pipe:Li,noop:pc,identity:ed,isObservable:function(e){return!!e&&(e instanceof Y||"function"==typeof e.lift&&"function"==typeof e.subscribe)},ArgumentOutOfRangeError:wl,EmptyError:Sg,ObjectUnsubscribedError:xd,UnsubscriptionError:Df,TimeoutError:sb,bindCallback:en,bindNodeCallback:fn,combineLatest:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=t=void 0;return fd(e[e.length-1])&&(n=e.pop()),"function"==typeof e[e.length-1]&&(t=e.pop()),1===e.length&&Nb(e[0])&&(e=e[0]),Ff(e,n).lift(new qB(t))},concat:ln,defer:hd,empty:Ef,forkJoin:mn,from:Ob,fromEvent:jb,fromEventPattern:on,generate:function(e,t,n,r,i){if(1==arguments.length){var o=e.initialState;t=e.condition,n=e.iterate;var a=e.resultSelector||ed;i=e.scheduler}else void 0===r||fd(r)?(o=e,a=ed,i=r):(o=e,a=r);return new Y((function(e){var r=o;if(i)return i.schedule(Wu,0,{subscriber:e,iterate:n,condition:t,resultSelector:a,state:r});for(;;){if(t){var s=void 0;try{s=t(r)}catch(t){e.error(t);break}if(!s){e.complete();break}}s=void 0;try{s=a(r)}catch(t){e.error(t);break}if(e.next(s),e.closed)break;try{r=n(r)}catch(t){e.error(t);break}}}))},iif:function(e,t,n){return void 0===t&&(t=yb),void 0===n&&(n=yb),hd((function(){return e()?t:n}))},interval:pn,merge:cc,never:function(){return zl},of:eb,onErrorResumeNext:Qi,pairs:function(e,t){return new Y(t?function(n){var r=Object.keys(e),i=new Ta;return i.add(t.schedule(Yu,0,{keys:r,index:0,subscriber:n,subscription:i,obj:e})),i}:function(t){for(var n=Object.keys(e),r=0;r<n.length&&!t.closed;r++){var i=n[r];e.hasOwnProperty(i)&&t.next([i,e[i]])}t.complete()})},partition:function(e,t,n){return[zb(t,n)(new Y(Hf(e))),zb(Zu(t,n))(new Y(Hf(e)))]},race:Da,range:function(e,t,n){return void 0===e&&(e=0),new Y((function(r){void 0===t&&(t=e,e=0);var i=0,o=e;if(n)return n.schedule(bv,0,{index:i,count:t,start:e,subscriber:r});for(;;){if(i++>=t){r.complete();break}if(r.next(o++),r.closed)break}}))},throwError:Z,timer:Kc,using:function(e,t){return new Y((function(n){try{var r=e()}catch(e){return void n.error(e)}try{var i=t(r)}catch(e){return void n.error(e)}var o=(i?Ob(i):yb).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))},zip:Ri,scheduled:jn,EMPTY:yb,NEVER:zl,config:Mb}),ev=function(){function e(e){this.selector=e}return e.prototype.call=function(e,t){return t.subscribe(new zB(e,this.selector,this.caught))},e}(),zB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).selector=n,t.caught=r,t}return O(t,e),t.prototype.error=function(t){if(!this.isStopped){var n=void 0;try{n=this.selector(t,this.caught)}catch(t){return void e.prototype.error.call(this,t)}this._unsubscribeAndRecycle(),t=new Cc(this),this.add(t),(n=qc(n,t))!==t&&this.add(n)}},t}(Dc),fv=function(){function e(e){this.defaultValue=e}return e.prototype.call=function(e,t){return t.subscribe(new AB(e,this.defaultValue))},e}(),AB=function(e){function t(t,n){return(t=e.call(this,t)||this).defaultValue=n,t.isEmpty=!0,t}return O(t,e),t.prototype._next=function(e){this.isEmpty=!1,this.destination.next(e)},t.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},t}(ma),gv=function(){function e(e,t){this.delay=e,this.scheduler=t}return e.prototype.call=function(e,t){return t.subscribe(new BB(e,this.delay,this.scheduler))},e}(),BB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).delay=n,t.scheduler=r,t.queue=[],t.active=!1,t.errored=!1,t}return O(t,e),t.dispatch=function(e){for(var t=e.source,n=t.queue,r=e.scheduler,i=e.destination;0<n.length&&0>=n[0].time-r.now();)n.shift().notification.observe(i);0<n.length?(t=Math.max(0,n[0].time-r.now()),this.schedule(e,t)):(this.unsubscribe(),t.active=!1)},t.prototype._schedule=function(e){this.active=!0,this.destination.add(e.schedule(t.dispatch,this.delay,{source:this,destination:this.destination,scheduler:e}))},t.prototype.scheduleNotification=function(e){if(!0!==this.errored){var t=this.scheduler;e=new CB(t.now()+this.delay,e),this.queue.push(e),!1===this.active&&this._schedule(t)}},t.prototype._next=function(e){this.scheduleNotification(lf.createNext(e))},t.prototype._error=function(e){this.errored=!0,this.queue=[],this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.scheduleNotification(lf.createComplete()),this.unsubscribe()},t}(ma),CB=function(e,t){this.time=e,this.notification=t},hv=function(){function e(e,t){this.keySelector=e,this.flushes=t}return e.prototype.call=function(e,t){return t.subscribe(new DB(e,this.keySelector,this.flushes))},e}(),DB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).keySelector=n,t.values=new Set,r&&t.add(qc(r,new Cc(t))),t}return O(t,e),t.prototype.notifyNext=function(){this.values.clear()},t.prototype.notifyError=function(e){this._error(e)},t.prototype._next=function(e){this.keySelector?this._useKeySelector(e):this._finalizeNext(e,e)},t.prototype._useKeySelector=function(e){var t=this.destination;try{var n=this.keySelector(e)}catch(e){return void t.error(e)}this._finalizeNext(n,e)},t.prototype._finalizeNext=function(e,t){var n=this.values;n.has(e)||(n.add(e),this.destination.next(t))},t}(Dc),jv=function(){function e(e){this.errorFactory=e}return e.prototype.call=function(e,t){return t.subscribe(new EB(e,this.errorFactory))},e}(),EB=function(e){function t(t,n){return(t=e.call(this,t)||this).errorFactory=n,t.hasValue=!1,t}return O(t,e),t.prototype._next=function(e){this.hasValue=!0,this.destination.next(e)},t.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var e=void 0;try{e=this.errorFactory()}catch(t){e=t}this.destination.error(e)},t}(ma),kv=function(){function e(e){if(this.total=e,0>this.total)throw new wl}return e.prototype.call=function(e,t){return t.subscribe(new FB(e,this.total))},e}(),FB=function(e){function t(t,n){return(t=e.call(this,t)||this).total=n,t.count=0,t}return O(t,e),t.prototype._next=function(e){var t=this.total,n=++this.count;n<=t&&(this.destination.next(e),n===t&&(this.destination.complete(),this.unsubscribe()))},t}(ma),lv=function(){function e(e){this.project=e}return e.prototype.call=function(e,t){return t.subscribe(new GB(e,this.project))},e}(),GB=function(e){function t(t,n){return(t=e.call(this,t)||this).project=n,t.hasSubscription=!1,t.hasCompleted=!1,t.index=0,t}return O(t,e),t.prototype._next=function(e){this.hasSubscription||this.tryNext(e)},t.prototype.tryNext=function(e){var t=this.index++;try{var n=this.project(e,t)}catch(e){return void this.destination.error(e)}this.hasSubscription=!0,this._innerSub(n)},t.prototype._innerSub=function(e){var t=new Cc(this),n=this.destination;n.add(t),(e=qc(e,t))!==t&&n.add(e)},t.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},t.prototype.notifyNext=function(e){this.destination.next(e)},t.prototype.notifyError=function(e){this.destination.error(e)},t.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},t}(Dc),mv=function(){function e(e){this.callback=e}return e.prototype.call=function(e,t){return t.subscribe(new HB(e,this.callback))},e}(),HB=function(e){function t(t,n){return(t=e.call(this,t)||this).add(new Ta(n)),t}return O(t,e),t}(ma),ov=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new IB(e))},e}(),IB=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return O(t,e),t.prototype._next=function(e){},t}(ma),pv=function(){function e(e){if(this.total=e,0>this.total)throw new wl}return e.prototype.call=function(e,t){return t.subscribe(new JB(e,this.total))},e}(),JB=function(e){function t(t,n){return(t=e.call(this,t)||this).total=n,t.ring=[],t.count=0,t}return O(t,e),t.prototype._next=function(e){var t=this.ring,n=this.total,r=this.count++;t.length<n?t.push(e):t[r%n]=e},t.prototype._complete=function(){var e=this.destination,t=this.count;if(0<t)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=t++%n;e.next(r[o])}e.complete()},t}(ma),qv=function(){function e(e){this.value=e}return e.prototype.call=function(e,t){return t.subscribe(new KB(e,this.value))},e}(),KB=function(e){function t(t,n){return(t=e.call(this,t)||this).value=n,t}return O(t,e),t.prototype._next=function(e){this.destination.next(this.value)},t}(ma),rv=function(){function e(e,t,n){void 0===n&&(n=!1),this.accumulator=e,this.seed=t,this.hasSeed=n}return e.prototype.call=function(e,t){return t.subscribe(new LB(e,this.accumulator,this.seed,this.hasSeed))},e}(),LB=function(e){function t(t,n,r,i){return(t=e.call(this,t)||this).accumulator=n,t._seed=r,t.hasSeed=i,t.index=0,t}return O(t,e),Object.defineProperty(t.prototype,"seed",{get:function(){return this._seed},set:function(e){this.hasSeed=!0,this._seed=e},enumerable:!0,configurable:!0}),t.prototype._next=function(e){if(this.hasSeed)return this._tryNext(e);this.seed=e,this.destination.next(e)},t.prototype._tryNext=function(e){var t=this.index++;try{var n=this.accumulator(this.seed,e,t)}catch(e){this.destination.error(e)}this.seed=n,this.destination.next(n)},t}(ma),tv=function(){function e(e,t){this.subjectFactory=e,this.selector=t}return e.prototype.call=function(e,t){var n=this.selector,r=this.subjectFactory();return(e=n(r).subscribe(e)).add(t.subscribe(r)),e},e}(),vv=function(){function e(e,t){this.notifier=e,this.source=t}return e.prototype.call=function(e,t){return t.subscribe(new MB(e,this.notifier,this.source))},e}(),MB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).notifier=n,t.source=r,t}return O(t,e),t.prototype.error=function(t){if(!this.isStopped){var n=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.retriesSubscription=this.errors=void 0;else{n=new Ua;try{r=(0,this.notifier)(n)}catch(t){return e.prototype.error.call(this,t)}i=qc(r,new Cc(this))}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=i,n.next(t)}},t.prototype._unsubscribe=function(){var e=this.errors,t=this.retriesSubscription;e&&(e.unsubscribe(),this.errors=void 0),t&&(t.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},t.prototype.notifyNext=function(){var e=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=e,this.source.subscribe(this)},t}(Dc),yv=function(){function e(e){this.project=e}return e.prototype.call=function(e,t){return t.subscribe(new NB(e,this.project))},e}(),NB=function(e){function t(t,n){return(t=e.call(this,t)||this).project=n,t.index=0,t}return O(t,e),t.prototype._next=function(e){var t=this.index++;try{var n=this.project(e,t)}catch(e){return void this.destination.error(e)}this._innerSub(n)},t.prototype._innerSub=function(e){var t=this.innerSubscription;t&&t.unsubscribe(),t=new Cc(this);var n=this.destination;n.add(t),this.innerSubscription=qc(e,t),this.innerSubscription!==t&&n.add(this.innerSubscription)},t.prototype._complete=function(){var t=this.innerSubscription;t&&!t.closed||e.prototype._complete.call(this),this.unsubscribe()},t.prototype._unsubscribe=function(){this.innerSubscription=void 0},t.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&e.prototype._complete.call(this)},t.prototype.notifyNext=function(e){this.destination.next(e)},t}(Dc),zv=function(){function e(e){this.notifier=e}return e.prototype.call=function(e,t){e=new OB(e);var n=qc(this.notifier,new Cc(e));return n&&!e.seenValue?(e.add(n),t.subscribe(e)):e},e}(),OB=function(e){function t(t){return(t=e.call(this,t)||this).seenValue=!1,t}return O(t,e),t.prototype.notifyNext=function(){this.seenValue=!0,this.complete()},t.prototype.notifyComplete=function(){},t}(Dc),Bv=function(){function e(e,t){this.predicate=e,this.inclusive=t}return e.prototype.call=function(e,t){return t.subscribe(new PB(e,this.predicate,this.inclusive))},e}(),PB=function(e){function t(t,n,r){return(t=e.call(this,t)||this).predicate=n,t.inclusive=r,t.index=0,t}return O(t,e),t.prototype._next=function(e){var t=this.destination;try{var n=this.predicate(e,this.index++)}catch(e){return void t.error(e)}this.nextOrComplete(e,n)},t.prototype.nextOrComplete=function(e,t){var n=this.destination;t?n.next(e):(this.inclusive&&n.next(e),n.complete())},t}(ma),Cv=function(){function e(e,t,n){this.nextOrObserver=e,this.error=t,this.complete=n}return e.prototype.call=function(e,t){return t.subscribe(new QB(e,this.nextOrObserver,this.error,this.complete))},e}(),QB=function(e){function t(t,n,r,i){return(t=e.call(this,t)||this)._tapNext=pc,t._tapError=pc,t._tapComplete=pc,t._tapError=r||pc,t._tapComplete=i||pc,ze(n)?(t._context=t,t._tapNext=n):n&&(t._context=n,t._tapNext=n.next||pc,t._tapError=n.error||pc,t._tapComplete=n.complete||pc),t}return O(t,e),t.prototype._next=function(e){try{this._tapNext.call(this._context,e)}catch(e){return void this.destination.error(e)}this.destination.next(e)},t.prototype._error=function(e){try{this._tapError.call(this._context,e)}catch(e){return void this.destination.error(e)}this.destination.error(e)},t.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(e){return void this.destination.error(e)}return this.destination.complete()},t}(ma),Ev={leading:!0,trailing:!1};!function(e){function t(t,n,r,i){var o=e.call(this,t)||this;return o.destination=t,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}O(t,e),t.prototype._next=function(e){this._hasValue=!0,this._sendValue=e,this._throttled||(this._leading?this.send():this.throttle(e))},t.prototype.send=function(){var e=this._sendValue;this._hasValue&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=void 0},t.prototype.throttle=function(e){(e=this.tryDurationSelector(e))&&this.add(this._throttled=qc(e,new Cc(this)))},t.prototype.tryDurationSelector=function(e){try{return this.durationSelector(e)}catch(e){return this.destination.error(e),null}},t.prototype.throttlingDone=function(){var e=this._throttled,t=this._trailing;e&&e.unsubscribe(),this._throttled=void 0,t&&this.send()},t.prototype.notifyNext=function(){this.throttlingDone()},t.prototype.notifyComplete=function(){this.throttlingDone()}}(Dc);for(var Fv=function(){function e(e,t,n,r){this.duration=e,this.scheduler=t,this.leading=n,this.trailing=r}return e.prototype.call=function(e,t){return t.subscribe(new RB(e,this.duration,this.scheduler,this.leading,this.trailing))},e}(),RB=function(e){function t(t,n,r,i,o){return(t=e.call(this,t)||this).duration=n,t.scheduler=r,t.leading=i,t.trailing=o,t._hasTrailingValue=!1,t._trailingValue=null,t}return O(t,e),t.prototype._next=function(e){this.throttled?this.trailing&&(this._trailingValue=e,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Gv,this.duration,{subscriber:this})),this.leading?this.destination.next(e):this.trailing&&(this._trailingValue=e,this._hasTrailingValue=!0))},t.prototype._complete=function(){this._hasTrailingValue&&this.destination.next(this._trailingValue),this.destination.complete()},t.prototype.clearThrottle=function(){var e=this.throttled;e&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),e.unsubscribe(),this.remove(e),this.throttled=null)},t}(ma),Iv=function(){function e(e,t,n,r){this.waitFor=e,this.absoluteTimeout=t,this.withObservable=n,this.scheduler=r}return e.prototype.call=function(e,t){return t.subscribe(new SB(e,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},e}(),SB=function(e){function t(t,n,r,i,o){return(t=e.call(this,t)||this).absoluteTimeout=n,t.waitFor=r,t.withObservable=i,t.scheduler=o,t.scheduleTimeout(),t}return O(t,e),t.dispatchTimeout=function(e){var t=e.withObservable;e._unsubscribeAndRecycle(),e.add(qc(t,new Cc(e)))},t.prototype.scheduleTimeout=function(){var e=this.action;e?this.action=e.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(t.dispatchTimeout,this.waitFor,this))},t.prototype._next=function(t){this.absoluteTimeout||this.scheduleTimeout(),e.prototype._next.call(this,t)},t.prototype._unsubscribe=function(){this.action=void 0,this.withObservable=this.scheduler=null},t}(Dc),Kv=function(){function e(e,t){this.observables=e,this.project=t}return e.prototype.call=function(e,t){return t.subscribe(new TB(e,this.observables,this.project))},e}(),TB=function(e){function t(t,n,r){(t=e.call(this,t)||this).observables=n,t.project=r,t.toRespond=[],r=n.length,t.values=Array(r);for(var i=0;i<r;i++)t.toRespond.push(i);for(i=0;i<r;i++)t.add(Oi(t,n[i],void 0,i));return t}return O(t,e),t.prototype.notifyNext=function(e,t,n){this.values[n]=t,0<(e=this.toRespond).length&&(-1!==(n=e.indexOf(n))&&e.splice(n,1))},t.prototype.notifyComplete=function(){},t.prototype._next=function(e){0===this.toRespond.length&&(e=[e].concat(this.values),this.project?this._tryProject(e):this.destination.next(e))},t.prototype._tryProject=function(e){try{var t=this.project.apply(this,e)}catch(e){return void this.destination.error(e)}this.destination.next(t)},t}(xl),Nr=cb((function(e){var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var r=Array(16);e.exports=function(){for(var e,t=0;16>t;t++)0==(3&t)&&(e=4294967296*Math.random()),r[t]=e>>>((3&t)<<3)&255;return r}}})),db=[],ei=0;256>ei;++ei)db[ei]=(ei+256).toString(16).substr(1);var Or=function(e,t){return t=t||0,[db[e[t++]],db[e[t++]],db[e[t++]],db[e[t++]],"-",db[e[t++]],db[e[t++]],"-",db[e[t++]],db[e[t++]],"-",db[e[t++]],db[e[t++]],"-",db[e[t++]],db[e[t++]],db[e[t++]],db[e[t++]],db[e[t++]],db[e[t++]]].join("")},de=function(e,t,n){if(n=t&&n||0,"string"==typeof e&&(t="binary"===e?Array(16):null,e=null),(e=(e=e||{}).random||(e.rng||Nr)())[6]=15&e[6]|64,e[8]=63&e[8]|128,t)for(var r=0;16>r;++r)t[n+r]=e[r];return t||Or(e)},zg=de(),Ti=!1,xn=new AbortController,Vc,yd,Al,Bl,zd,ee,mc,mf,Wb,Cl,Wc,fe,Xc,Yc,Zc,nf,$c,ad;!function(e){e[e.ATTRIBUTE_OPERATION_ERR_FAILURE=2]="ATTRIBUTE_OPERATION_ERR_FAILURE",e[e.ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT=3]="ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT",e[e.ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW=4]="ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW",e[e.ATTRIBUTE_OPERATION_ERR_TOO_OFTEN=5]="ATTRIBUTE_OPERATION_ERR_TOO_OFTEN",e[e.ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND=6]="ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND",e[e.ATTRIBUTE_OPERATION_ERR_TIMEOUT=7]="ATTRIBUTE_OPERATION_ERR_TIMEOUT",e[e.ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN=102]="ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN"}(Vc||(Vc={})),function(e){e[e.CHANNEL_MESSAGE_ERR_FAILURE=1]="CHANNEL_MESSAGE_ERR_FAILURE",e[e.CHANNEL_MESSAGE_ERR_TIMEOUT=2]="CHANNEL_MESSAGE_ERR_TIMEOUT",e[e.CHANNEL_MESSAGE_ERR_TOO_OFTEN=3]="CHANNEL_MESSAGE_ERR_TOO_OFTEN",e[e.CHANNEL_MESSAGE_ERR_INVALID_MESSAGE=4]="CHANNEL_MESSAGE_ERR_INVALID_MESSAGE",e[e.CHANNEL_MESSAGE_ERR_NOT_IN_CHANNEL=5]="CHANNEL_MESSAGE_ERR_NOT_IN_CHANNEL",e[e.CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN=102]="CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN"}(yd||(yd={})),function(e){e[e.CREATE_CHANNEL_ERR_INVALID_ARGUMENT=1]="CREATE_CHANNEL_ERR_INVALID_ARGUMENT"}(Al||(Al={})),function(e){e[e.CREATE_INSTANCE_ERR_INVALID_ARGUMENT=1]="CREATE_INSTANCE_ERR_INVALID_ARGUMENT"}(Bl||(Bl={})),function(e){e[e.GET_MEMBERS_ERR_FAILURE=1]="GET_MEMBERS_ERR_FAILURE",e[e.GET_MEMBERS_ERR_REJECTED=2]="GET_MEMBERS_ERR_REJECTED",e[e.GET_MEMBERS_ERR_TIMEOUT=3]="GET_MEMBERS_ERR_TIMEOUT",e[e.GET_MEMBERS_ERR_TOO_OFTEN=4]="GET_MEMBERS_ERR_TOO_OFTEN",e[e.GET_MEMBERS_ERR_NOT_IN_CHANNEL=5]="GET_MEMBERS_ERR_NOT_IN_CHANNEL",e[e.GET_MEMBERS_ERR_USER_NOT_LOGGED_IN=102]="GET_MEMBERS_ERR_USER_NOT_LOGGED_IN"}(zd||(zd={})),function(e){e[e.INVITATION_API_CALL_ERR_INVALID_ARGUMENT=1]="INVITATION_API_CALL_ERR_INVALID_ARGUMENT",e[e.INVITATION_API_CALL_ERR_NOT_STARTED=2]="INVITATION_API_CALL_ERR_NOT_STARTED",e[e.INVITATION_API_CALL_ERR_ALREADY_END=3]="INVITATION_API_CALL_ERR_ALREADY_END",e[e.INVITATION_API_CALL_ERR_ALREADY_ACCEPT=4]="INVITATION_API_CALL_ERR_ALREADY_ACCEPT",e[e.INVITATION_API_CALL_ERR_ALREADY_SENT=5]="INVITATION_API_CALL_ERR_ALREADY_SENT"}(ee||(ee={})),function(e){e[e.JOIN_CHANNEL_ERR_FAILURE=1]="JOIN_CHANNEL_ERR_FAILURE",e[e.JOIN_CHANNEL_ERR_REJECTED=2]="JOIN_CHANNEL_ERR_REJECTED",e[e.JOIN_CHANNEL_ERR_INVALID_ARGUMENT=3]="JOIN_CHANNEL_ERR_INVALID_ARGUMENT",e[e.JOIN_CHANNEL_TIMEOUT=4]="JOIN_CHANNEL_TIMEOUT",e[e.JOIN_CHANNEL_ERR_EXCEED_LIMIT=5]="JOIN_CHANNEL_ERR_EXCEED_LIMIT",e[e.JOIN_CHANNEL_ERR_ALREADY_JOINED=6]="JOIN_CHANNEL_ERR_ALREADY_JOINED",e[e.JOIN_CHANNEL_ERR_TOO_OFTEN=7]="JOIN_CHANNEL_ERR_TOO_OFTEN",e[e.JOIN_CHANNEL_ERR_JOIN_SAME_CHANNEL_TOO_OFTEN=8]="JOIN_CHANNEL_ERR_JOIN_SAME_CHANNEL_TOO_OFTEN",e[e.JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN=102]="JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN",e[e.JOIN_CHANNEL_ERR_ABORTED_BY_LEAVE=201]="JOIN_CHANNEL_ERR_ABORTED_BY_LEAVE",e[e.JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID=202]="JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID"}(mc||(mc={})),function(e){e[e.LEAVE_CHANNEL_ERR_FAILURE=1]="LEAVE_CHANNEL_ERR_FAILURE",e[e.LEAVE_CHANNEL_ERR_REJECTED=2]="LEAVE_CHANNEL_ERR_REJECTED",e[e.LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL=3]="LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL",e[e.LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN=102]="LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN"}(mf||(mf={})),function(e){e[e.LOGIN_ERR_UNKNOWN=1]="LOGIN_ERR_UNKNOWN",e[e.LOGIN_ERR_REJECTED=2]="LOGIN_ERR_REJECTED",e[e.LOGIN_ERR_INVALID_ARGUMENT=3]="LOGIN_ERR_INVALID_ARGUMENT",e[e.LOGIN_ERR_INVALID_APP_ID=4]="LOGIN_ERR_INVALID_APP_ID",e[e.LOGIN_ERR_INVALID_TOKEN=5]="LOGIN_ERR_INVALID_TOKEN",e[e.LOGIN_ERR_TOKEN_EXPIRED=6]="LOGIN_ERR_TOKEN_EXPIRED",e[e.LOGIN_ERR_NOT_AUTHORIZED=7]="LOGIN_ERR_NOT_AUTHORIZED",e[e.LOGIN_ERR_ALREADY_LOGIN=8]="LOGIN_ERR_ALREADY_LOGIN",e[e.LOGIN_ERR_TIMEOUT=9]="LOGIN_ERR_TIMEOUT",e[e.LOGIN_ERR_TOO_OFTEN=10]="LOGIN_ERR_TOO_OFTEN",e[e.LOGIN_ERR_ABORTED_BY_LOGOUT=201]="LOGIN_ERR_ABORTED_BY_LOGOUT"}(Wb||(Wb={})),function(e){e[e.LOGOUT_ERR_USER_NOT_LOGGED_IN=102]="LOGOUT_ERR_USER_NOT_LOGGED_IN"}(Cl||(Cl={})),function(e){e[e.PEER_MESSAGE_ERR_FAILURE=1]="PEER_MESSAGE_ERR_FAILURE",e[e.PEER_MESSAGE_ERR_TIMEOUT=2]="PEER_MESSAGE_ERR_TIMEOUT",e[e.PEER_MESSAGE_ERR_TOO_OFTEN=5]="PEER_MESSAGE_ERR_TOO_OFTEN",e[e.PEER_MESSAGE_ERR_INVALID_USERID=6]="PEER_MESSAGE_ERR_INVALID_USERID",e[e.PEER_MESSAGE_ERR_INVALID_MESSAGE=7]="PEER_MESSAGE_ERR_INVALID_MESSAGE",e[e.PEER_MESSAGE_ERR_INCOMPATIBLE_MESSAGE=8]="PEER_MESSAGE_ERR_INCOMPATIBLE_MESSAGE",e[e.PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN=102]="PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN"}(Wc||(Wc={})),function(e){e[e.QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT=2]="QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT",e[e.QUERY_PEERS_ONLINE_STATUS_ERR_REJECTED=3]="QUERY_PEERS_ONLINE_STATUS_ERR_REJECTED",e[e.QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT=4]="QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT",e[e.QUERY_PEERS_ONLINE_STATUS_ERR_TOO_OFTEN=5]="QUERY_PEERS_ONLINE_STATUS_ERR_TOO_OFTEN",e[e.QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN=102]="QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN"}(fe||(fe={})),function(e){e[e.RENEW_TOKEN_ERR_FAILURE=1]="RENEW_TOKEN_ERR_FAILURE",e[e.RENEW_TOKEN_ERR_INVALID_ARGUMENT=2]="RENEW_TOKEN_ERR_INVALID_ARGUMENT",e[e.RENEW_TOKEN_ERR_REJECTED=3]="RENEW_TOKEN_ERR_REJECTED",e[e.RENEW_TOKEN_ERR_TOO_OFTEN=4]="RENEW_TOKEN_ERR_TOO_OFTEN",e[e.RENEW_TOKEN_ERR_TOKEN_EXPIRED=5]="RENEW_TOKEN_ERR_TOKEN_EXPIRED",e[e.RENEW_TOKEN_ERR_INVALID_TOKEN=6]="RENEW_TOKEN_ERR_INVALID_TOKEN",e[e.RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN=102]="RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN",e[e.RENEW_TOKEN_ERR_ABORTED_BY_LOGOUT=201]="RENEW_TOKEN_ERR_ABORTED_BY_LOGOUT"}(Xc||(Xc={})),function(e){e[e.GET_CHANNEL_MEMBER_COUNT_ERR_FAILURE=1]="GET_CHANNEL_MEMBER_COUNT_ERR_FAILURE",e[e.GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT=2]="GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT",e[e.GET_CHANNEL_MEMBER_COUNT_ERR_TOO_OFTEN=3]="GET_CHANNEL_MEMBER_COUNT_ERR_TOO_OFTEN",e[e.GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT=4]="GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT",e[e.GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT=5]="GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT",e[e.GET_CHANNEL_MEMBER_COUNT_ERR_NOT_INITIALIZED=101]="GET_CHANNEL_MEMBER_COUNT_ERR_NOT_INITIALIZED",e[e.GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN=102]="GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN"}(Yc||(Yc={})),function(e){e[e.PEER_SUBSCRIPTION_STATUS_ERR_FAILURE=1]="PEER_SUBSCRIPTION_STATUS_ERR_FAILURE",e[e.PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT=2]="PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT",e[e.PEER_SUBSCRIPTION_STATUS_ERR_REJECTED=3]="PEER_SUBSCRIPTION_STATUS_ERR_REJECTED",e[e.PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT=4]="PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT",e[e.PEER_SUBSCRIPTION_STATUS_ERR_TOO_OFTEN=5]="PEER_SUBSCRIPTION_STATUS_ERR_TOO_OFTEN",e[e.PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW=6]="PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW",e[e.PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN=102]="PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN"}(Zc||(Zc={})),function(e){e[e.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_FAILURE=1]="QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_FAILURE",e[e.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_TIMEOUT=2]="QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_TIMEOUT",e[e.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_TOO_OFTEN=3]="QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_TOO_OFTEN",e[e.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_USER_NOT_LOGGED_IN=102]="QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_USER_NOT_LOGGED_IN"}(nf||(nf={})),function(e){e[e.UPLOAD_MEDIA_ERR_FAILURE=1]="UPLOAD_MEDIA_ERR_FAILURE",e[e.UPLOAD_MEDIA_ERR_INVALID_ARGUMENT=2]="UPLOAD_MEDIA_ERR_INVALID_ARGUMENT",e[e.UPLOAD_MEDIA_ERR_TIMEOUT=3]="UPLOAD_MEDIA_ERR_TIMEOUT",e[e.UPLOAD_MEDIA_ERR_SIZE_OVERFLOW=4]="UPLOAD_MEDIA_ERR_SIZE_OVERFLOW",e[e.UPLOAD_MEDIA_ERR_CONCURRENCY_LIMIT_EXCEEDED=5]="UPLOAD_MEDIA_ERR_CONCURRENCY_LIMIT_EXCEEDED",e[e.UPLOAD_MEDIA_ERR_INTERRUPTED=6]="UPLOAD_MEDIA_ERR_INTERRUPTED",e[e.UPLOAD_MEDIA_ERR_NOT_LOGGED_IN=102]="UPLOAD_MEDIA_ERR_NOT_LOGGED_IN"}($c||($c={})),function(e){e[e.DOWNLOAD_MEDIA_ERR_FAILURE=1]="DOWNLOAD_MEDIA_ERR_FAILURE",e[e.DOWNLOAD_MEDIA_ERR_INVALID_ARGUMENT=2]="DOWNLOAD_MEDIA_ERR_INVALID_ARGUMENT",e[e.DOWNLOAD_MEDIA_ERR_TIMEOUT=3]="DOWNLOAD_MEDIA_ERR_TIMEOUT",e[e.DOWNLOAD_MEDIA_ERR_NOT_EXIST=4]="DOWNLOAD_MEDIA_ERR_NOT_EXIST",e[e.DOWNLOAD_MEDIA_ERR_CONCURRENCY_LIMIT_EXCEEDED=5]="DOWNLOAD_MEDIA_ERR_CONCURRENCY_LIMIT_EXCEEDED",e[e.DOWNLOAD_MEDIA_ERR_INTERRUPTED=6]="DOWNLOAD_MEDIA_ERR_INTERRUPTED",e[e.DOWNLOAD_MEDIA_ERR_NOT_LOGGED_IN=102]="DOWNLOAD_MEDIA_ERR_NOT_LOGGED_IN"}(ad||(ad={}));var Xb=Vc.ATTRIBUTE_OPERATION_ERR_FAILURE,Oa=Vc.ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT,Ge=Vc.ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW;Vc.ATTRIBUTE_OPERATION_ERR_TOO_OFTEN;var Pr=Vc.ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND,Yb=Vc.ATTRIBUTE_OPERATION_ERR_TIMEOUT,Zb=Vc.ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN,Ag=yd.CHANNEL_MESSAGE_ERR_FAILURE,Dl=yd.CHANNEL_MESSAGE_ERR_TIMEOUT,Qr=yd.CHANNEL_MESSAGE_ERR_TOO_OFTEN,fi=yd.CHANNEL_MESSAGE_ERR_INVALID_MESSAGE,UB=yd.CHANNEL_MESSAGE_ERR_NOT_IN_CHANNEL,El=yd.CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN,VB=Al.CREATE_CHANNEL_ERR_INVALID_ARGUMENT,Rr=Bl.CREATE_INSTANCE_ERR_INVALID_ARGUMENT;Yc.GET_CHANNEL_MEMBER_COUNT_ERR_FAILURE;var Sr=Yc.GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT;Yc.GET_CHANNEL_MEMBER_COUNT_ERR_TOO_OFTEN;var Tr=Yc.GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT,WB=Yc.GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT;Yc.GET_CHANNEL_MEMBER_COUNT_ERR_NOT_INITIALIZED;var XB=Yc.GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN,YB=zd.GET_MEMBERS_ERR_FAILURE,ZB=zd.GET_MEMBERS_ERR_REJECTED;zd.GET_MEMBERS_ERR_TIMEOUT,zd.GET_MEMBERS_ERR_TOO_OFTEN;var $B=zd.GET_MEMBERS_ERR_NOT_IN_CHANNEL,aC=zd.GET_MEMBERS_ERR_USER_NOT_LOGGED_IN,Ec=ee.INVITATION_API_CALL_ERR_INVALID_ARGUMENT,bC=ee.INVITATION_API_CALL_ERR_NOT_STARTED,gi=ee.INVITATION_API_CALL_ERR_ALREADY_END,Ur=ee.INVITATION_API_CALL_ERR_ALREADY_ACCEPT,cC=ee.INVITATION_API_CALL_ERR_ALREADY_SENT,Vr=mc.JOIN_CHANNEL_ERR_FAILURE;mc.JOIN_CHANNEL_ERR_REJECTED;var dC=mc.JOIN_CHANNEL_ERR_INVALID_ARGUMENT,Wr=mc.JOIN_CHANNEL_TIMEOUT,Xr=mc.JOIN_CHANNEL_ERR_EXCEED_LIMIT,Yr=mc.JOIN_CHANNEL_ERR_ALREADY_JOINED;mc.JOIN_CHANNEL_ERR_TOO_OFTEN;var Zr=mc.JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN,$r=mc.JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID,as=mf.LEAVE_CHANNEL_ERR_FAILURE,bs=mf.LEAVE_CHANNEL_ERR_REJECTED,eC=mf.LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL,fC=mf.LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN,cs=Wb.LOGIN_ERR_UNKNOWN,Bg=Wb.LOGIN_ERR_REJECTED,hi=Wb.LOGIN_ERR_INVALID_ARGUMENT,ds=Wb.LOGIN_ERR_INVALID_APP_ID,es=Wb.LOGIN_ERR_INVALID_TOKEN,ii=Wb.LOGIN_ERR_TOKEN_EXPIRED;Wb.LOGIN_ERR_NOT_AUTHORIZED;var gC=Wb.LOGIN_ERR_ALREADY_LOGIN,hC=Wb.LOGIN_ERR_TIMEOUT,iC=Wb.LOGIN_ERR_TOO_OFTEN,fs=Cl.LOGOUT_ERR_USER_NOT_LOGGED_IN,gs=Wc.PEER_MESSAGE_ERR_FAILURE,Fl=Wc.PEER_MESSAGE_ERR_TIMEOUT,hs=Wc.PEER_MESSAGE_ERR_TOO_OFTEN,Gl=Wc.PEER_MESSAGE_ERR_INVALID_USERID,Ie=Wc.PEER_MESSAGE_ERR_INVALID_MESSAGE,Hl=Wc.PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN,jC=Wc.PEER_MESSAGE_ERR_INCOMPATIBLE_MESSAGE,is=fe.QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT;fe.QUERY_PEERS_ONLINE_STATUS_ERR_REJECTED;var kC=fe.QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT;fe.QUERY_PEERS_ONLINE_STATUS_ERR_TOO_OFTEN;var lC=fe.QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN,mC=Xc.RENEW_TOKEN_ERR_FAILURE,nC=Xc.RENEW_TOKEN_ERR_INVALID_ARGUMENT;Xc.RENEW_TOKEN_ERR_REJECTED,Xc.RENEW_TOKEN_ERR_TOO_OFTEN;var oC=Xc.RENEW_TOKEN_ERR_TOKEN_EXPIRED,pC=Xc.RENEW_TOKEN_ERR_INVALID_TOKEN,qC=Xc.RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN,js=Zc.PEER_SUBSCRIPTION_STATUS_ERR_FAILURE,Cg=Zc.PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT;Zc.PEER_SUBSCRIPTION_STATUS_ERR_REJECTED;var rC=Zc.PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT;Zc.PEER_SUBSCRIPTION_STATUS_ERR_TOO_OFTEN;var ks=Zc.PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW,Il=Zc.PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN;nf.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_FAILURE,nf.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_TIMEOUT,nf.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_TOO_OFTEN,nf.QUERY_PEERS_BY_SUBSCRIPTION_OPTION_ERR_USER_NOT_LOGGED_IN;var Dg=$c.UPLOAD_MEDIA_ERR_FAILURE,Of=$c.UPLOAD_MEDIA_ERR_INVALID_ARGUMENT,ji=$c.UPLOAD_MEDIA_ERR_TIMEOUT,sC=$c.UPLOAD_MEDIA_ERR_SIZE_OVERFLOW,tC=$c.UPLOAD_MEDIA_ERR_CONCURRENCY_LIMIT_EXCEEDED,ls=$c.UPLOAD_MEDIA_ERR_INTERRUPTED,uC=$c.UPLOAD_MEDIA_ERR_NOT_LOGGED_IN,Eg=ad.DOWNLOAD_MEDIA_ERR_FAILURE,Jl=ad.DOWNLOAD_MEDIA_ERR_INVALID_ARGUMENT,vC=ad.DOWNLOAD_MEDIA_ERR_TIMEOUT,wC=ad.DOWNLOAD_MEDIA_ERR_NOT_EXIST,xC=ad.DOWNLOAD_MEDIA_ERR_CONCURRENCY_LIMIT_EXCEEDED,ms=ad.DOWNLOAD_MEDIA_ERR_INTERRUPTED,yC=ad.DOWNLOAD_MEDIA_ERR_NOT_LOGGED_IN,zC=function(e,t){var n;return nl(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n},ki=function(e,t,n){if(!ob(n))return!1;var r=V(t);return!!("number"==r?Nd(n)&&cl(t,n.length):"string"==r&&t in n)&&sg(n[t],e)},Kl=function(e,t,n){var r=Za(e)?xr:zC;return n&&ki(e,t,n)&&(t=void 0),r(e,jf(t))},AC=function(e,t){var n=-1,r=Nd(e)?Array(e.length):[];return nl(e,(function(e,i,o){r[++n]=t(e,i,o)})),r},BC=function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e},CC=function(e,t,n){t=t.length?ve(t,(function(e){return Za(e)?function(t){return ai(t,1===e.length?e[0]:e)}:e})):[bi];var r=-1;return t=ve(t,Yh(jf)),e=AC(e,(function(e,n,i){return{criteria:ve(t,(function(t){return t(e)})),index:++r,value:e}})),BC(e,(function(e,t){e:{for(var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;++r<a;){t:{var u=i[r],c=o[r];if(u!==c){var l=void 0!==u,f=null===u,h=u==u,p=we(u),d=void 0!==c,v=null===c,b=c==c,g=we(c);if(!v&&!g&&!p&&u>c||p&&d&&b&&!v&&!g||f&&d&&b||!l&&b||!h){u=1;break t}if(!f&&!p&&!g&&u<c||g&&l&&h&&!f&&!p||v&&l&&h||!d&&h||!b){u=-1;break t}}u=0}if(u){e=r>=s?u:u*("desc"==n[r]?-1:1);break e}}e=e.index-t.index}return e}))},ns=function(e,t){return vr(ur(e,t,bi),e+"")},os=ns((function(e,t){if(null==e)return[];var n=t.length;return 1<n&&ki(e,t[0],t[1])?t=[]:2<n&&ki(t[0],t[1],t[2])&&(t=[t[0]]),CC(e,Ei(t,1),[])})),ps=function(e){if(e.__esModule)return e;var t=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(e).forEach((function(n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})})),t}(yB),qs=cb((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=[],r=function(e,t){return new WebSocket(e,t)};t.normalClosureMessage="Normal closure",t.default=function(e,i){var o=(i=void 0===i?{protocols:n,makeWebSocket:r}:i).protocols,a=void 0===o?n:o,s=void 0===(i=i.makeWebSocket)?r:i;return new ps.Observable((function(n){var r,i=new ps.Subject,o=s(e,a),u=!1,c=!1,l=function(e){if(r)throw u=!0,e=Error("Web socket message factory function called more than once"),n.error(e),e;return r=e.subscribe((function(e){o.send(e)})),i};return o.onopen=function(){c?(u=!0,o.close()):n.next(l)},o.onmessage=function(e){i.next(e.data)},o.onerror=function(e){u=!0,n.error(Error(e.message))},o.onclose=function(e){u||(u=!0,c?(n.complete(),i.complete()):n.error(Error(1e3===e.code?t.normalClosureMessage:e.reason)))},function(){c=!0,r&&r.unsubscribe(),u||(u=!0,o.close())}}))}}));!function(e){e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")&&e.default}(qs);var Vi=function(e,t,n){(void 0===n||sg(e[t],n))&&(void 0!==n||t in e)||ug(e,t,n)},Ui=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]},DC=function(e){return ns((function(t,n){var r=-1,i=n.length,o=1<i?n[i-1]:void 0,a=2<i?n[2]:void 0;for(o=3<e.length&&"function"==typeof o?(i--,o):void 0,a&&ki(n[0],n[1],a)&&(o=3>i?void 0:o,i=1),t=Object(t);++r<i;)(a=n[r])&&e(t,a,r,o);return t}))}((function(e,t,n,r){yn(e,t,n,r)})),EC=Math.floor,FC=Math.random,rs=function(e,t){return e+EC(FC()*(t-e+1))},ss=function(e){var t=e.length;return t?e[rs(0,t-1)]:void 0},GC=function(e,t){return ve(t,(function(t){return e[t]}))},tj=function(e){return null==e?[]:GC(e,Jd(e))},HC=function(e){return ss(tj(e))},fo=function(e){return(Za(e)?ss:HC)(e)},Cn=[],Dn=function(e,t){return new WebSocket(e,t)},IC=Math.floor;M({target:"Number",stat:!0},{isInteger:function(e){return!ha(e)&&isFinite(e)&&IC(e)===e}}),Up("from",ok,nk);var JC=function(e,t){for(var n=Array(arguments.length-1),r=0,i=2,o=!0;i<arguments.length;)n[r++]=arguments[i++];return new Promise((function(i,a){n[r]=function(e){if(o)if(o=!1,e)a(e);else{for(var t=Array(arguments.length-1),n=0;n<t.length;)t[n++]=arguments[n];i.apply(null,t)}};try{e.apply(t||null,n)}catch(e){o&&(o=!1,a(e))}}))},KC=cb((function(e,t){t.length=function(e){var t=e.length;if(!t)return 0;for(var n=0;1<--t%4&&"="===e.charAt(t);)++n;return Math.ceil(3*e.length)/4-n};var n=Array(64),r=Array(123);for(e=0;64>e;)r[n[e]=26>e?e+65:52>e?e+71:62>e?e-4:e-59|43]=e++;t.encode=function(e,t,r){for(var i,o=null,a=[],s=0,u=0;t<r;){var c=e[t++];switch(u){case 0:a[s++]=n[c>>2],i=(3&c)<<4,u=1;break;case 1:a[s++]=n[i|c>>4],i=(15&c)<<2,u=2;break;case 2:a[s++]=n[i|c>>6],a[s++]=n[63&c],u=0}8191<s&&((o||(o=[])).push(String.fromCharCode.apply(String,a)),s=0)}return u&&(a[s++]=n[i],a[s++]=61,1===u&&(a[s++]=61)),o?(s&&o.push(String.fromCharCode.apply(String,a.slice(0,s))),o.join("")):String.fromCharCode.apply(String,a.slice(0,s))},t.decode=function(e,t,n){for(var i,o=n,a=0,s=0;s<e.length;){var u=e.charCodeAt(s++);if(61===u&&1<a)break;if(void 0===(u=r[u]))throw Error("invalid encoding");switch(a){case 0:i=u,a=1;break;case 1:t[n++]=i<<2|(48&u)>>4,i=u,a=2;break;case 2:t[n++]=(15&i)<<4|(60&u)>>2,i=u,a=3;break;case 3:t[n++]=(3&i)<<6|u,a=0}}if(1===a)throw Error("invalid encoding");return n-o},t.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}}));Vg.prototype.on=function(e,t,n){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:n||this}),this},Vg.prototype.off=function(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else{e=this._listeners[e];for(var n=0;n<e.length;)e[n].fn===t?e.splice(n,1):++n}return this},Vg.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<t.length;)t[r].fn.apply(t[r++].ctx,n)}return this};var LC=En(En),MC=function(c){try{var a=eval("quire".replace(/^/,"re"))(c);if(a&&(a.length||Object.keys(a).length))return a}catch(e){}return null},NC=cb((function(e,t){t.length=function(e){for(var t,n=0,r=0;r<e.length;++r)128>(t=e.charCodeAt(r))?n+=1:2048>t?n+=2:55296==(64512&t)&&56320==(64512&e.charCodeAt(r+1))?(++r,n+=4):n+=3;return n},t.read=function(e,t,n){if(1>n-t)return"";for(var r,i=null,o=[],a=0;t<n;)128>(r=e[t++])?o[a++]=r:191<r&&224>r?o[a++]=(31&r)<<6|63&e[t++]:239<r&&365>r?(r=((7&r)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,o[a++]=55296+(r>>10),o[a++]=56320+(1023&r)):o[a++]=(15&r)<<12|(63&e[t++])<<6|63&e[t++],8191<a&&((i||(i=[])).push(String.fromCharCode.apply(String,o)),a=0);return i?(a&&i.push(String.fromCharCode.apply(String,o.slice(0,a))),i.join("")):String.fromCharCode.apply(String,o.slice(0,a))},t.write=function(e,t,n){for(var r,i,o=n,a=0;a<e.length;++a)128>(r=e.charCodeAt(a))?t[n++]=r:(2048>r?t[n++]=r>>6|192:(55296==(64512&r)&&56320==(64512&(i=e.charCodeAt(a+1)))?(r=65536+((1023&r)<<10)+(1023&i),++a,t[n++]=r>>18|240,t[n++]=r>>12&63|128):t[n++]=r>>12|224,t[n++]=r>>6&63|128),t[n++]=63&r|128);return n-o}})),OC=function(e,t,n){var r=n||8192,i=r>>>1,o=null,a=r;return function(n){return 1>n||n>i?e(n):(a+n>r&&(o=e(r),a=0),n=t.call(o,a,a+=n),7&a&&(a=1+(7|a)),n)}},ge=$a.zero=new $a(0,0);ge.toNumber=function(){return 0},ge.zzEncode=ge.zzDecode=function(){return this},ge.length=function(){return 1};var PC=$a.zeroHash="\0\0\0\0\0\0\0\0";$a.fromNumber=function(e){if(0===e)return ge;var t=0>e;t&&(e=-e);var n=e>>>0;return e=(e-n)/4294967296>>>0,t&&(e=~e>>>0,n=~n>>>0,4294967295<++n&&(n=0,4294967295<++e&&(e=0))),new $a(n,e)},$a.from=function(e){if("number"==typeof e)return $a.fromNumber(e);if(W.isString(e)){if(!W.Long)return $a.fromNumber(parseInt(e,10));e=W.Long.fromString(e)}return e.low||e.high?new $a(e.low>>>0,e.high>>>0):ge},$a.prototype.toNumber=function(e){if(!e&&this.hi>>>31){e=1+~this.lo>>>0;var t=~this.hi>>>0;return e||(t=t+1>>>0),-(e+4294967296*t)}return this.lo+4294967296*this.hi},$a.prototype.toLong=function(e){return W.Long?new W.Long(0|this.lo,0|this.hi,!!e):{low:0|this.lo,high:0|this.hi,unsigned:!!e}};var Ad=String.prototype.charCodeAt;$a.fromHash=function(e){return e===PC?ge:new $a((Ad.call(e,0)|Ad.call(e,1)<<8|Ad.call(e,2)<<16|Ad.call(e,3)<<24)>>>0,(Ad.call(e,4)|Ad.call(e,5)<<8|Ad.call(e,6)<<16|Ad.call(e,7)<<24)>>>0)},$a.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},$a.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},$a.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},$a.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===t?16384>e?128>e?1:2:2097152>e?3:4:16384>t?128>t?5:6:2097152>t?7:8:128>n?9:10};var W=cb((function(e,t){function n(e,t,n){for(var r=Object.keys(t),i=0;i<r.length;++i)void 0!==e[r[i]]&&n||(e[r[i]]=t[r[i]]);return e}function r(e){function t(e,r){if(!(this instanceof t))return new t(e,r);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:Error().stack||""}),r&&n(this,r)}return(t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,"name",{get:function(){return e}}),t.prototype.toString=function(){return this.name+": "+this.message},t}t.asPromise=JC,t.base64=KC,t.EventEmitter=Vg,t.float=LC,t.inquire=MC,t.utf8=NC,t.pool=OC,t.LongBits=$a,t.isNode=!!(void 0!==Ka&&Ka&&Ka.process&&Ka.process.versions&&Ka.process.versions.node),t.global=t.isNode&&Ka||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||Ka,t.emptyArray=Object.freeze?Object.freeze([]):[],t.emptyObject=Object.freeze?Object.freeze({}):{},t.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},t.isString=function(e){return"string"==typeof e||e instanceof String},t.isObject=function(e){return e&&"object"===V(e)},t.isset=t.isSet=function(e,t){var n=e[t];return!(null==n||!e.hasOwnProperty(t))&&("object"!==V(n)||0<(Array.isArray(n)?n.length:Object.keys(n).length))},t.Buffer=function(){try{var e=t.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),t._Buffer_from=null,t._Buffer_allocUnsafe=null,t.newBuffer=function(e){return"number"==typeof e?t.Buffer?t._Buffer_allocUnsafe(e):new t.Array(e):t.Buffer?t._Buffer_from(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},t.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,t.Long=t.global.dcodeIO&&t.global.dcodeIO.Long||t.global.Long||t.inquire("long"),t.key2Re=/^true|false|0|1$/,t.key32Re=/^-?(?:0|[1-9][0-9]*)$/,t.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,t.longToHash=function(e){return e?t.LongBits.from(e).toHash():t.LongBits.zeroHash},t.longFromHash=function(e,n){return e=t.LongBits.fromHash(e),t.Long?t.Long.fromBits(e.lo,e.hi,n):e.toNumber(!!n)},t.merge=n,t.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},t.newError=r,t.ProtocolError=r("ProtocolError"),t.oneOfGetter=function(e){for(var t={},n=0;n<e.length;++n)t[e[n]]=1;return function(){for(var e=Object.keys(this),n=e.length-1;-1<n;--n)if(1===t[e[n]]&&void 0!==this[e[n]]&&null!==this[e[n]])return e[n]}},t.oneOfSetter=function(e){return function(t){for(var n=0;n<e.length;++n)e[n]!==t&&delete this[e[n]]}},t.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},t._configure=function(){var e=t.Buffer;e?(t._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,n){return new e(t,n)},t._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t)}):t._Buffer_from=t._Buffer_allocUnsafe=null}})),cj=na,Ll,li=W.LongBits,ts=W.base64,us=W.utf8,vs=function(){return W.Buffer?function(){return(na.create=function(){return new Ll})()}:function(){return new na}};na.create=vs(),na.alloc=function(e){return new W.Array(e)},W.Array!==Array&&(na.alloc=W.pool(na.alloc,W.Array.prototype.subarray)),na.prototype._push=function(e,t,n){return this.tail=this.tail.next=new Kf(e,t,n),this.len+=t,this},$i.prototype=Object.create(Kf.prototype),$i.prototype.fn=function(e,t,n){for(;127<e;)t[n++]=127&e|128,e>>>=7;t[n]=e},na.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new $i(128>(e>>>=0)?1:16384>e?2:2097152>e?3:268435456>e?4:5,e)).len,this},na.prototype.int32=function(e){return 0>e?this._push(aj,10,li.fromNumber(e)):this.uint32(e)},na.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},na.prototype.uint64=function(e){return e=li.from(e),this._push(aj,e.length(),e)},na.prototype.int64=na.prototype.uint64,na.prototype.sint64=function(e){return e=li.from(e).zzEncode(),this._push(aj,e.length(),e)},na.prototype.bool=function(e){return this._push(Zi,1,e?1:0)},na.prototype.fixed32=function(e){return this._push(bj,4,e>>>0)},na.prototype.sfixed32=na.prototype.fixed32,na.prototype.fixed64=function(e){return e=li.from(e),this._push(bj,4,e.lo)._push(bj,4,e.hi)},na.prototype.sfixed64=na.prototype.fixed64,na.prototype.float=function(e){return this._push(W.float.writeFloatLE,4,e)},na.prototype.double=function(e){return this._push(W.float.writeDoubleLE,8,e)};var QC=W.Array.prototype.set?function(e,t,n){t.set(e,n)}:function(e,t,n){for(var r=0;r<e.length;++r)t[n+r]=e[r]};na.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(Zi,1,0);if(W.isString(e)){var n=na.alloc(t=ts.length(e));ts.decode(e,n,0),e=n}return this.uint32(t)._push(QC,t,e)},na.prototype.string=function(e){var t=us.length(e);return t?this.uint32(t)._push(us.write,t,e):this._push(Zi,1,0)},na.prototype.fork=function(){return this.states=new Nv(this),this.head=this.tail=new Kf(Yi,0,0),this.len=0,this},na.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Kf(Yi,0,0),this.len=0),this},na.prototype.ldelim=function(){var e=this.head,t=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=e.next,this.tail=t,this.len+=n),this},na.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),n=0;e;)e.fn(e.val,t,n),n+=e.len,e=e.next;return t},na._configure=function(e){Ll=e,na.create=vs(),Ll._configure()},(rc.prototype=Object.create(cj.prototype)).constructor=rc,rc._configure=function(){rc.alloc=W._Buffer_allocUnsafe,rc.writeBytesBuffer=W.Buffer&&W.Buffer.prototype instanceof Uint8Array&&"set"===W.Buffer.prototype.set.name?function(e,t,n){t.set(e,n)}:function(e,t,n){if(e.copy)e.copy(t,n,0,e.length);else for(var r=0;r<e.length;)t[n++]=e[r++]}},rc.prototype.bytes=function(e){W.isString(e)&&(e=W._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(rc.writeBytesBuffer,t,e),this},rc.prototype.string=function(e){var t=W.Buffer.byteLength(e);return this.uint32(t),t&&this._push(Ov,t,e),this},rc._configure();var ej=Qa,Ml,Jn=W.LongBits,RC=W.utf8,ws="undefined"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new Qa(e);throw Error("illegal buffer")}:function(e){if(Array.isArray(e))return new Qa(e);throw Error("illegal buffer")},xs=function(){return W.Buffer?function(e){return(Qa.create=function(e){return W.Buffer.isBuffer(e)?new Ml(e):ws(e)})(e)}:ws};Qa.create=xs(),Qa.prototype._slice=W.Array.prototype.subarray||W.Array.prototype.slice,Qa.prototype.uint32=function(){var e=4294967295;return function(){if(e=(127&this.buf[this.pos])>>>0,128>this.buf[this.pos++])return e;if(e=(e|(127&this.buf[this.pos])<<7)>>>0,128>this.buf[this.pos++])return e;if(e=(e|(127&this.buf[this.pos])<<14)>>>0,128>this.buf[this.pos++])return e;if(e=(e|(127&this.buf[this.pos])<<21)>>>0,128>this.buf[this.pos++])return e;if(e=(e|(15&this.buf[this.pos])<<28)>>>0,128>this.buf[this.pos++])return e;if((this.pos+=5)>this.len)throw this.pos=this.len,dc(this,10);return e}}(),Qa.prototype.int32=function(){return 0|this.uint32()},Qa.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},Qa.prototype.bool=function(){return 0!==this.uint32()},Qa.prototype.fixed32=function(){if(this.pos+4>this.len)throw dc(this,4);return Wg(this.buf,this.pos+=4)},Qa.prototype.sfixed32=function(){if(this.pos+4>this.len)throw dc(this,4);return 0|Wg(this.buf,this.pos+=4)},Qa.prototype.float=function(){if(this.pos+4>this.len)throw dc(this,4);var e=W.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},Qa.prototype.double=function(){if(this.pos+8>this.len)throw dc(this,4);var e=W.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},Qa.prototype.bytes=function(){var e=this.uint32(),t=this.pos,n=this.pos+e;if(n>this.len)throw dc(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,n):t===n?new this.buf.constructor(0):this._slice.call(this.buf,t,n)},Qa.prototype.string=function(){var e=this.bytes();return RC.read(e,0,e.length)},Qa.prototype.skip=function(e){if("number"==typeof e){if(this.pos+e>this.len)throw dc(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw dc(this)}while(128&this.buf[this.pos++]);return this},Qa.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},Qa._configure=function(e){Ml=e,Qa.create=xs(),Ml._configure();var t=W.Long?"toLong":"toNumber";W.merge(Qa.prototype,{int64:function(){return dj.call(this)[t](!1)},uint64:function(){return dj.call(this)[t](!0)},sint64:function(){return dj.call(this).zzDecode()[t](!1)},fixed64:function(){return Kn.call(this)[t](!0)},sfixed64:function(){return Kn.call(this)[t](!1)}})},(Od.prototype=Object.create(ej.prototype)).constructor=Od,Od._configure=function(){W.Buffer&&(Od.prototype._slice=W.Buffer.prototype.slice)},Od.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))},Od._configure(),(Lf.prototype=Object.create(W.EventEmitter.prototype)).constructor=Lf,Lf.prototype.rpcCall=function e(t,n,r,i,o){if(!i)throw TypeError("request must be specified");var a=this;if(!o)return W.asPromise(e,a,t,n,r,i);if(a.rpcImpl)try{return a.rpcImpl(t,n[a.requestDelimited?"encodeDelimited":"encode"](i).finish(),(function(e,n){if(e)return a.emit("error",e,t),o(e);if(null!==n){if(!(n instanceof r))try{n=r[a.responseDelimited?"decodeDelimited":"decode"](n)}catch(e){return a.emit("error",e,t),o(e)}return a.emit("data",n,t),o(null,n)}a.end(!0)}))}catch(e){a.emit("error",e,t),setTimeout((function(){o(e)}),0)}else setTimeout((function(){o(Error("already ended"))}),0)},Lf.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};var SC=cb((function(e,t){t.Service=Lf})),TC={},nc=cb((function(e,t){function n(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}var r=t;r.build="minimal",r.Writer=cj,r.BufferWriter=rc,r.Reader=ej,r.BufferReader=Od,r.util=W,r.rpc=SC,r.roots=TC,r.configure=n,n()}));nc.util.Long=U,nc.configure();var u=nc.Reader,N=nc.Writer,r=nc.util,t=nc.roots.default||(nc.roots.default={}),UC=t.URI=function(){var e={},t=Object.create(e);return t[e[0]="Unknown"]=0,t[e[1]="PingUri"]=1,t[e[2]="PongUri"]=2,t[e[11]="UserJoinUri"]=11,t[e[12]="UserRespUri"]=12,t[e[21]="UserQuitUri"]=21,t[e[22]="UserDropUri"]=22,t[e[31]="GroupEnterUri"]=31,t[e[32]="GroupLeaveUri"]=32,t[e[33]="GroupReplyUri"]=33,t[e[36]="GroupEnterNoticeUri"]=36,t[e[37]="GroupLeaveNoticeUri"]=37,t[e[38]="GroupEventNoticeUri"]=38,t[e[39]="GroupCountNoticeUri"]=39,t[e[41]="UserStatusListUri"]=41,t[e[42]="UserStatusResultUri"]=42,t[e[51]="GroupStatusListUri"]=51,t[e[52]="GroupStatusResultUri"]=52,t[e[55]="GroupAllUsersListUri"]=55,t[e[56]="GroupAllUsersResultUri"]=56,t[e[100]="MessageUri"]=100,t[e[101]="AckUri"]=101,t[e[115]="FileUploadIndexGetUri"]=115,t[e[116]="FileUploadIndexRetUri"]=116,t[e[117]="FileUploadIndexSetUri"]=117,t[e[118]="FileUploadIndexFinUri"]=118,t[e[119]="FileUploadIndexErrUri"]=119,t[e[125]="FileDownloadIndexGetUri"]=125,t[e[126]="FileDownloadIndexRetUri"]=126,t[e[127]="FileDownloadIndexErrUri"]=127,t[e[201]="UserJoinNoticeUri"]=201,t[e[202]="UserQuitNoticeUri"]=202,t[e[203]="UserWaitNoticeUri"]=203,t[e[301]="UserAttributeGetUri"]=301,t[e[302]="UserAttributeRetUri"]=302,t[e[303]="UserAttributeSetUri"]=303,t[e[304]="UserAttributeModUri"]=304,t[e[305]="UserAttributeDelUri"]=305,t[e[307]="UserAttributeRspUri"]=307,t[e[308]="UserAttributeErrUri"]=308,t[e[311]="UserAttributeKeysGetUri"]=311,t[e[312]="UserAttributeKeysRetUri"]=312,t[e[351]="GroupAttributeGetUri"]=351,t[e[352]="GroupAttributeRetUri"]=352,t[e[353]="GroupAttributeSetUri"]=353,t[e[354]="GroupAttributeModUri"]=354,t[e[355]="GroupAttributeDelUri"]=355,t[e[356]="GroupAttributeAltUri"]=356,t[e[357]="GroupAttributeRspUri"]=357,t[e[358]="GroupAttributeErrUri"]=358,t[e[361]="GroupAttributeKeysGetUri"]=361,t[e[362]="GroupAttributeKeysRetUri"]=362,t[e[401]="SubscribeUserStatusUri"]=401,t[e[402]="UnsubscribeUserStatusUri"]=402,t[e[499]="SubscribeResponseUri"]=499,t}(),mi=t.Wrapper=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.uri=0,e.prototype.data=r.newBuffer([]),e.encode=function(e,t){return t||(t=N.create()),null!=e.uri&&Object.hasOwnProperty.call(e,"uri")&&t.uint32(8).int32(e.uri),null!=e.data&&Object.hasOwnProperty.call(e,"data")&&t.uint32(18).bytes(e.data),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.Wrapper;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.uri=e.int32();break;case 2:r.data=e.bytes();break;default:e.skipType(7&i)}}return r},e}(),VC=t.Ping=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.ms=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.ms&&Object.hasOwnProperty.call(e,"ms")&&t.uint32(16).uint64(e.ms),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.Ping;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.ms=e.uint64();break;default:e.skipType(7&i)}}return r},e}(),WC=t.Pong=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.ms=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.ms&&Object.hasOwnProperty.call(e,"ms")&&t.uint32(16).uint64(e.ms),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.Pong;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.ms=e.uint64();break;default:e.skipType(7&i)}}return r},e}(),XC=t.UserJoin=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.opt=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.ticket="",e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.opt&&Object.hasOwnProperty.call(e,"opt")&&t.uint32(16).uint64(e.opt),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(24).uint64(e.instance),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(34).string(e.account),null!=e.ticket&&Object.hasOwnProperty.call(e,"ticket")&&t.uint32(42).string(e.ticket),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserJoin;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.opt=e.uint64();break;case 3:r.instance=e.uint64();break;case 4:r.account=e.string();break;case 5:r.ticket=e.string();break;default:e.skipType(7&i)}}return r},e}(),YC=t.UserResp=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(18).string(e.account),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(24).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserResp;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;case 3:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),ZC=t.UserQuit=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.encode=function(e,t){return t||(t=N.create()),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserQuit;e.pos<n;){var i=e.uint32();e.skipType(7&i)}return r},e}(),$C=t.UserDrop=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(8).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserDrop;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),aD=t.GroupEnter=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(18).string(e.account),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupEnter;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;default:e.skipType(7&i)}}return r},e}(),bD=t.GroupLeave=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.account="",e.encode=function(e,t){return t||(t=N.create()),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(10).string(e.account),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupLeave;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.account=e.string();break;default:e.skipType(7&i)}}return r},e}(),cD=t.GroupReply=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(18).string(e.account),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(24).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupReply;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;case 3:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),ys=t.GroupLeaveNotice=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.user="",e.prototype.group="",e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.size=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.user&&Object.hasOwnProperty.call(e,"user")&&t.uint32(18).string(e.user),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(26).string(e.group),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(32).uint64(e.instance),null!=e.size&&Object.hasOwnProperty.call(e,"size")&&t.uint32(40).uint32(e.size),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupLeaveNotice;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.user=e.string();break;case 3:r.group=e.string();break;case 4:r.instance=e.uint64();break;case 5:r.size=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),zs=t.GroupEnterNotice=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.user="",e.prototype.group="",e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.size=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.user&&Object.hasOwnProperty.call(e,"user")&&t.uint32(18).string(e.user),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(26).string(e.group),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(32).uint64(e.instance),null!=e.size&&Object.hasOwnProperty.call(e,"size")&&t.uint32(40).uint32(e.size),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupEnterNotice;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.user=e.string();break;case 3:r.group=e.string();break;case 4:r.instance=e.uint64();break;case 5:r.size=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),As=t.Message=function(){function e(e){if(this.MiscMap={},e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.dialogue=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.sequence=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.options=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.src="",e.prototype.dst="",e.prototype.payload=r.newBuffer([]),e.prototype.MiscMap=r.emptyObject,e.prototype.ms=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){if(t||(t=N.create()),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(8).uint64(e.instance),null!=e.dialogue&&Object.hasOwnProperty.call(e,"dialogue")&&t.uint32(16).uint64(e.dialogue),null!=e.sequence&&Object.hasOwnProperty.call(e,"sequence")&&t.uint32(24).uint64(e.sequence),null!=e.options&&Object.hasOwnProperty.call(e,"options")&&t.uint32(32).uint64(e.options),null!=e.src&&Object.hasOwnProperty.call(e,"src")&&t.uint32(42).string(e.src),null!=e.dst&&Object.hasOwnProperty.call(e,"dst")&&t.uint32(50).string(e.dst),null!=e.payload&&Object.hasOwnProperty.call(e,"payload")&&t.uint32(58).bytes(e.payload),null!=e.MiscMap&&Object.hasOwnProperty.call(e,"MiscMap"))for(var n=Object.keys(e.MiscMap),r=0;r<n.length;++r)t.uint32(66).fork().uint32(10).string(n[r]).uint32(18).bytes(e.MiscMap[n[r]]).ldelim();return null!=e.ms&&Object.hasOwnProperty.call(e,"ms")&&t.uint32(72).uint64(e.ms),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var i,o,a=new t.Message;e.pos<n;)switch(i=e.uint32(),i>>>3){case 1:a.instance=e.uint64();break;case 2:a.dialogue=e.uint64();break;case 3:a.sequence=e.uint64();break;case 4:a.options=e.uint64();break;case 5:a.src=e.string();break;case 6:a.dst=e.string();break;case 7:a.payload=e.bytes();break;case 8:a.MiscMap===r.emptyObject&&(a.MiscMap={});var s=e.uint32()+e.pos;for(i="",o=[];e.pos<s;){var c=e.uint32();switch(c>>>3){case 1:i=e.string();break;case 2:o=e.bytes();break;default:e.skipType(7&c)}}a.MiscMap[i]=o;break;case 9:a.ms=e.uint64();break;default:e.skipType(7&i)}return a},e}(),Bs=t.Ack=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.dialogue=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.sequence=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(8).uint64(e.instance),null!=e.dialogue&&Object.hasOwnProperty.call(e,"dialogue")&&t.uint32(16).uint64(e.dialogue),null!=e.sequence&&Object.hasOwnProperty.call(e,"sequence")&&t.uint32(24).uint64(e.sequence),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(32).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.Ack;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.instance=e.uint64();break;case 2:r.dialogue=e.uint64();break;case 3:r.sequence=e.uint64();break;case 4:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),dD=t.FileUploadIndexGet=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.hash=r.newBuffer([]),e.prototype.size=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.hash&&Object.hasOwnProperty.call(e,"hash")&&t.uint32(18).bytes(e.hash),null!=e.size&&Object.hasOwnProperty.call(e,"size")&&t.uint32(24).uint32(e.size),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileUploadIndexGet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.hash=e.bytes();break;case 3:r.size=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),eD=t.FileUploadIndexRet=function(){function e(e){if(this.servers=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.unit=0,e.prototype.servers=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.unit&&Object.hasOwnProperty.call(e,"unit")&&t.uint32(16).uint32(e.unit),null!=e.servers&&e.servers.length){t.uint32(26).fork();for(var n=0;n<e.servers.length;++n)t.uint32(e.servers[n]);t.ldelim()}return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileUploadIndexRet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.unit=e.uint32();break;case 3:if(r.servers&&r.servers.length||(r.servers=[]),2==(7&i))for(i=e.uint32()+e.pos;e.pos<i;)r.servers.push(e.uint32());else r.servers.push(e.uint32());break;default:e.skipType(7&i)}}return r},e}(),fD=t.FileUploadIndexSet=function(){function e(e){if(this.servers=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.hash=r.newBuffer([]),e.prototype.unit=0,e.prototype.servers=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.hash&&Object.hasOwnProperty.call(e,"hash")&&t.uint32(18).bytes(e.hash),null!=e.unit&&Object.hasOwnProperty.call(e,"unit")&&t.uint32(24).uint32(e.unit),null!=e.servers&&e.servers.length){t.uint32(34).fork();for(var n=0;n<e.servers.length;++n)t.uint32(e.servers[n]);t.ldelim()}return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileUploadIndexSet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.hash=e.bytes();break;case 3:r.unit=e.uint32();break;case 4:if(r.servers&&r.servers.length||(r.servers=[]),2==(7&i))for(i=e.uint32()+e.pos;e.pos<i;)r.servers.push(e.uint32());else r.servers.push(e.uint32());break;default:e.skipType(7&i)}}return r},e}(),gD=t.FileUploadIndexFin=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.zone=0,e.prototype.unit=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.zone&&Object.hasOwnProperty.call(e,"zone")&&t.uint32(16).uint32(e.zone),null!=e.unit&&Object.hasOwnProperty.call(e,"unit")&&t.uint32(24).uint32(e.unit),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileUploadIndexFin;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.zone=e.uint32();break;case 3:r.unit=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),hD=t.FileUploadIndexErr=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(16).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileUploadIndexErr;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),iD=t.FileDownloadIndexGet=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.zone=0,e.prototype.hash=r.newBuffer([]),e.prototype.size=0,e.prototype.unit=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.zone&&Object.hasOwnProperty.call(e,"zone")&&t.uint32(16).uint32(e.zone),null!=e.hash&&Object.hasOwnProperty.call(e,"hash")&&t.uint32(26).bytes(e.hash),null!=e.size&&Object.hasOwnProperty.call(e,"size")&&t.uint32(32).uint32(e.size),null!=e.unit&&Object.hasOwnProperty.call(e,"unit")&&t.uint32(40).uint32(e.unit),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileDownloadIndexGet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.zone=e.uint32();break;case 3:r.hash=e.bytes();break;case 4:r.size=e.uint32();break;case 5:r.unit=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),jD=t.FileDownloadIndexRet=function(){function e(e){if(this.servers=[],this.backups=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.unit=0,e.prototype.zone=0,e.prototype.servers=r.emptyArray,e.prototype.backups=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.unit&&Object.hasOwnProperty.call(e,"unit")&&t.uint32(16).uint32(e.unit),null!=e.zone&&Object.hasOwnProperty.call(e,"zone")&&t.uint32(24).uint32(e.zone),null!=e.servers&&e.servers.length){t.uint32(34).fork();for(var n=0;n<e.servers.length;++n)t.uint32(e.servers[n]);t.ldelim()}if(null!=e.backups&&e.backups.length){for(t.uint32(42).fork(),n=0;n<e.backups.length;++n)t.uint32(e.backups[n]);t.ldelim()}return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileDownloadIndexRet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.unit=e.uint32();break;case 3:r.zone=e.uint32();break;case 4:if(r.servers&&r.servers.length||(r.servers=[]),2==(7&i))for(i=e.uint32()+e.pos;e.pos<i;)r.servers.push(e.uint32());else r.servers.push(e.uint32());break;case 5:if(r.backups&&r.backups.length||(r.backups=[]),2==(7&i))for(i=e.uint32()+e.pos;e.pos<i;)r.backups.push(e.uint32());else r.backups.push(e.uint32());break;default:e.skipType(7&i)}}return r},e}(),kD=t.FileDownloadIndexErr=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(16).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.FileDownloadIndexErr;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),lD=t.GroupAllUsersList=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.pageSize=0,e.prototype.pageNumber=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(18).string(e.group),null!=e.pageSize&&Object.hasOwnProperty.call(e,"pageSize")&&t.uint32(24).uint32(e.pageSize),null!=e.pageNumber&&Object.hasOwnProperty.call(e,"pageNumber")&&t.uint32(32).uint32(e.pageNumber),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAllUsersList;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.pageSize=e.uint32();break;case 4:r.pageNumber=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),mD=t.GroupAllUsersResult=function(){function e(e){if(this.memberInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.totalSize=0,e.prototype.pageSize=0,e.prototype.pageNumber=0,e.prototype.memberInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&n.uint32(18).string(e.group),null!=e.totalSize&&Object.hasOwnProperty.call(e,"totalSize")&&n.uint32(24).uint32(e.totalSize),null!=e.pageSize&&Object.hasOwnProperty.call(e,"pageSize")&&n.uint32(32).uint32(e.pageSize),null!=e.pageNumber&&Object.hasOwnProperty.call(e,"pageNumber")&&n.uint32(40).uint32(e.pageNumber),null!=e.memberInfos&&e.memberInfos.length)for(var r=0;r<e.memberInfos.length;++r)t.GroupAllUsersResult.MemberInfo.encode(e.memberInfos[r],n.uint32(50).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAllUsersResult;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.totalSize=e.uint32();break;case 4:r.pageSize=e.uint32();break;case 5:r.pageNumber=e.uint32();break;case 6:r.memberInfos&&r.memberInfos.length||(r.memberInfos=[]),r.memberInfos.push(t.GroupAllUsersResult.MemberInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.MemberInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.account="",e.prototype.ts=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(10).string(e.account),null!=e.ts&&Object.hasOwnProperty.call(e,"ts")&&t.uint32(16).uint32(e.ts),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAllUsersResult.MemberInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.account=e.string();break;case 2:r.ts=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),e}(),nD=t.UserStatusList=function(){function e(e){if(this.users=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.users=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.users&&e.users.length)for(var n=0;n<e.users.length;++n)t.uint32(18).string(e.users[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserStatusList;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.users&&r.users.length||(r.users=[]),r.users.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),oD=t.UserStatusResult=function(){function e(e){if(this.userInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.userInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.userInfos&&e.userInfos.length)for(var r=0;r<e.userInfos.length;++r)t.UserStatusResult.UserStatusInfo.encode(e.userInfos[r],n.uint32(18).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserStatusResult;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.userInfos&&r.userInfos.length||(r.userInfos=[]),r.userInfos.push(t.UserStatusResult.UserStatusInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.UserStatusInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.account="",e.prototype.ts=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(10).string(e.account),null!=e.ts&&Object.hasOwnProperty.call(e,"ts")&&t.uint32(16).uint32(e.ts),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserStatusResult.UserStatusInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.account=e.string();break;case 2:r.ts=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),e}(),pD=t.UserAttributeGet=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributes=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(18).string(e.account),null!=e.attributes&&e.attributes.length)for(var n=0;n<e.attributes.length;++n)t.uint32(26).string(e.attributes[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeGet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;case 3:r.attributes&&r.attributes.length||(r.attributes=[]),r.attributes.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),qD=t.UserAttributeRet=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.attributeInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)t.UserAttributeRet.AttributeInfo.encode(e.attributeInfos[r],n.uint32(18).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeRet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.attributeInfos&&r.attributeInfos.length||(r.attributeInfos=[]),r.attributeInfos.push(t.UserAttributeRet.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeRet.AttributeInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;default:e.skipType(7&i)}}return r},e}(),e}(),rD=t.UserAttributeSet=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributeInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&n.uint32(18).string(e.account),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)t.UserAttributeSet.AttributeInfo.encode(e.attributeInfos[r],n.uint32(26).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeSet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;case 3:r.attributeInfos&&r.attributeInfos.length||(r.attributeInfos=[]),r.attributeInfos.push(t.UserAttributeSet.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeSet.AttributeInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;default:e.skipType(7&i)}}return r},e}(),e}(),sD=t.UserAttributeMod=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributeInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&n.uint32(18).string(e.account),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)t.UserAttributeMod.AttributeInfo.encode(e.attributeInfos[r],n.uint32(26).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeMod;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;case 3:r.attributeInfos&&r.attributeInfos.length||(r.attributeInfos=[]),r.attributeInfos.push(t.UserAttributeMod.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeMod.AttributeInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;default:e.skipType(7&i)}}return r},e}(),e}(),tD=t.UserAttributeDel=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributes=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(18).string(e.account),null!=e.attributes&&e.attributes.length)for(var n=0;n<e.attributes.length;++n)t.uint32(26).string(e.attributes[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeDel;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;case 3:r.attributes&&r.attributes.length||(r.attributes=[]),r.attributes.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),uD=t.UserAttributeErr=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(16).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeErr;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),vD=t.UserAttributeKeysGet=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.account="",e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(18).string(e.account),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeKeysGet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.account=e.string();break;default:e.skipType(7&i)}}return r},e}(),wD=t.UserAttributeKeysRet=function(){function e(e){if(this.keys=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.keys=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.keys&&e.keys.length)for(var n=0;n<e.keys.length;++n)t.uint32(18).string(e.keys[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeKeysRet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.keys&&r.keys.length||(r.keys=[]),r.keys.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),xD=t.UserAttributeRsp=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserAttributeRsp;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;default:e.skipType(7&i)}}return r},e}(),yD=t.GroupStatusList=function(){function e(e){if(this.groups=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.groups=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.groups&&e.groups.length)for(var n=0;n<e.groups.length;++n)t.uint32(18).string(e.groups[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupStatusList;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.groups&&r.groups.length||(r.groups=[]),r.groups.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),zD=t.GroupStatusResult=function(){function e(e){if(this.groupInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.groupInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.groupInfos&&e.groupInfos.length)for(var r=0;r<e.groupInfos.length;++r)t.GroupStatusResult.GroupInfo.encode(e.groupInfos[r],n.uint32(18).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupStatusResult;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.groupInfos&&r.groupInfos.length||(r.groupInfos=[]),r.groupInfos.push(t.GroupStatusResult.GroupInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.GroupInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.group="",e.prototype.memberCount=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(10).string(e.group),null!=e.memberCount&&Object.hasOwnProperty.call(e,"memberCount")&&t.uint32(16).uint32(e.memberCount),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupStatusResult.GroupInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.group=e.string();break;case 2:r.memberCount=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),e}(),AD=t.GroupCountNotice=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.size=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(16).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(26).string(e.group),null!=e.size&&Object.hasOwnProperty.call(e,"size")&&t.uint32(32).uint32(e.size),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupCountNotice;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.instance=e.uint64();break;case 2:r.seq=e.uint64();break;case 3:r.group=e.string();break;case 4:r.size=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),BD=t.GroupAttributeGet=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.attributes=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(18).string(e.group),null!=e.attributes&&e.attributes.length)for(var n=0;n<e.attributes.length;++n)t.uint32(26).string(e.attributes[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeGet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.attributes&&r.attributes.length||(r.attributes=[]),r.attributes.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),CD=t.GroupAttributeRet=function(){function e(e){if(this.attributeMaps=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.attributeMaps=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.attributeMaps&&e.attributeMaps.length)for(var r=0;r<e.attributeMaps.length;++r)t.GroupAttributeRet.AttributeMap.encode(e.attributeMaps[r],n.uint32(18).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeRet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.attributeMaps&&r.attributeMaps.length||(r.attributeMaps=[]),r.attributeMaps.push(t.GroupAttributeRet.AttributeMap.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeMap=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.prototype.origin="",e.prototype.ms=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),null!=e.origin&&Object.hasOwnProperty.call(e,"origin")&&t.uint32(26).string(e.origin),null!=e.ms&&Object.hasOwnProperty.call(e,"ms")&&t.uint32(32).uint64(e.ms),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeRet.AttributeMap;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;case 3:r.origin=e.string();break;case 4:r.ms=e.uint64();break;default:e.skipType(7&i)}}return r},e}(),e}(),DD=t.GroupAttributeSet=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.broadcast=!1,e.prototype.attributeInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&n.uint32(18).string(e.group),null!=e.broadcast&&Object.hasOwnProperty.call(e,"broadcast")&&n.uint32(24).bool(e.broadcast),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)t.GroupAttributeSet.AttributeInfo.encode(e.attributeInfos[r],n.uint32(34).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeSet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.broadcast=e.bool();break;case 4:r.attributeInfos&&r.attributeInfos.length||(r.attributeInfos=[]),r.attributeInfos.push(t.GroupAttributeSet.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeSet.AttributeInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;default:e.skipType(7&i)}}return r},e}(),e}(),ED=t.GroupAttributeMod=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.broadcast=!1,e.prototype.attributeInfos=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&n.uint32(18).string(e.group),null!=e.broadcast&&Object.hasOwnProperty.call(e,"broadcast")&&n.uint32(24).bool(e.broadcast),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)t.GroupAttributeMod.AttributeInfo.encode(e.attributeInfos[r],n.uint32(34).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeMod;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.broadcast=e.bool();break;case 4:r.attributeInfos&&r.attributeInfos.length||(r.attributeInfos=[]),r.attributeInfos.push(t.GroupAttributeMod.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeMod.AttributeInfo;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;default:e.skipType(7&i)}}return r},e}(),e}(),FD=t.GroupAttributeDel=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.broadcast=!1,e.prototype.attributes=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(18).string(e.group),null!=e.broadcast&&Object.hasOwnProperty.call(e,"broadcast")&&t.uint32(24).bool(e.broadcast),null!=e.attributes&&e.attributes.length)for(var n=0;n<e.attributes.length;++n)t.uint32(34).string(e.attributes[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeDel;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.broadcast=e.bool();break;case 4:r.attributes&&r.attributes.length||(r.attributes=[]),r.attributes.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),GD=t.GroupAttributeAlt=function(){function e(e){if(this.attributeMaps=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.attributeMaps=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&n.uint32(18).string(e.group),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&n.uint32(24).uint64(e.instance),null!=e.attributeMaps&&e.attributeMaps.length)for(var r=0;r<e.attributeMaps.length;++r)t.GroupAttributeAlt.AttributeMap.encode(e.attributeMaps[r],n.uint32(34).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeAlt;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;case 3:r.instance=e.uint64();break;case 4:r.attributeMaps&&r.attributeMaps.length||(r.attributeMaps=[]),r.attributeMaps.push(t.GroupAttributeAlt.AttributeMap.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.AttributeMap=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.key="",e.prototype.value="",e.prototype.origin="",e.prototype.ms=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=N.create()),null!=e.key&&Object.hasOwnProperty.call(e,"key")&&t.uint32(10).string(e.key),null!=e.value&&Object.hasOwnProperty.call(e,"value")&&t.uint32(18).string(e.value),null!=e.origin&&Object.hasOwnProperty.call(e,"origin")&&t.uint32(26).string(e.origin),null!=e.ms&&Object.hasOwnProperty.call(e,"ms")&&t.uint32(32).uint64(e.ms),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeAlt.AttributeMap;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;case 3:r.origin=e.string();break;case 4:r.ms=e.uint64();break;default:e.skipType(7&i)}}return r},e}(),e}(),HD=t.GroupAttributeRsp=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeRsp;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;default:e.skipType(7&i)}}return r},e}(),ID=t.GroupAttributeErr=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(16).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeErr;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),JD=t.GroupAttributeKeysGet=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.group="",e.encode=function(e,t){return t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&Object.hasOwnProperty.call(e,"group")&&t.uint32(18).string(e.group),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeKeysGet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.group=e.string();break;default:e.skipType(7&i)}}return r},e}(),KD=t.GroupAttributeKeysRet=function(){function e(e){if(this.keys=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.keys=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.keys&&e.keys.length)for(var n=0;n<e.keys.length;++n)t.uint32(18).string(e.keys[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.GroupAttributeKeysRet;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.keys&&r.keys.length||(r.keys=[]),r.keys.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),LD=t.SubscribeUserStatus=function(){function e(e){if(this.users=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.users=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.users&&e.users.length)for(var n=0;n<e.users.length;++n)t.uint32(18).string(e.users[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.SubscribeUserStatus;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.users&&r.users.length||(r.users=[]),r.users.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),MD=t.UnsubscribeUserStatus=function(){function e(e){if(this.users=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.users=r.emptyArray,e.encode=function(e,t){if(t||(t=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(8).uint64(e.seq),null!=e.users&&e.users.length)for(var n=0;n<e.users.length;++n)t.uint32(18).string(e.users[n]);return t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UnsubscribeUserStatus;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.users&&r.users.length||(r.users=[]),r.users.push(e.string());break;default:e.skipType(7&i)}}return r},e}(),ND=t.UserJoinNotice=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.user="",e.encode=function(e,t){return t||(t=N.create()),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(16).uint64(e.seq),null!=e.user&&Object.hasOwnProperty.call(e,"user")&&t.uint32(26).string(e.user),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserJoinNotice;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.instance=e.uint64();break;case 2:r.seq=e.uint64();break;case 3:r.user=e.string();break;default:e.skipType(7&i)}}return r},e}(),OD=t.UserQuitNotice=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.user="",e.encode=function(e,t){return t||(t=N.create()),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(16).uint64(e.seq),null!=e.user&&Object.hasOwnProperty.call(e,"user")&&t.uint32(26).string(e.user),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserQuitNotice;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.instance=e.uint64();break;case 2:r.seq=e.uint64();break;case 3:r.user=e.string();break;default:e.skipType(7&i)}}return r},e}(),PD=t.UserWaitNotice=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.instance=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.user="",e.encode=function(e,t){return t||(t=N.create()),null!=e.instance&&Object.hasOwnProperty.call(e,"instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&t.uint32(16).uint64(e.seq),null!=e.user&&Object.hasOwnProperty.call(e,"user")&&t.uint32(26).string(e.user),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.UserWaitNotice;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.instance=e.uint64();break;case 2:r.seq=e.uint64();break;case 3:r.user=e.string();break;default:e.skipType(7&i)}}return r},e}(),QD=t.SubscribeResponse=function(){function e(e){if(this.errors=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.seq=r.Long?r.Long.fromBits(0,0,!0):0,e.prototype.errors=r.emptyArray,e.encode=function(e,n){if(n||(n=N.create()),null!=e.seq&&Object.hasOwnProperty.call(e,"seq")&&n.uint32(8).uint64(e.seq),null!=e.errors&&e.errors.length)for(var r=0;r<e.errors.length;++r)t.SubscribeResponse.SubscribeErrorsType.encode(e.errors[r],n.uint32(18).fork()).ldelim();return n},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.SubscribeResponse;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.seq=e.uint64();break;case 2:r.errors&&r.errors.length||(r.errors=[]),r.errors.push(t.SubscribeResponse.SubscribeErrorsType.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return r},e.SubscribeErrorsType=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.account="",e.prototype.code=0,e.encode=function(e,t){return t||(t=N.create()),null!=e.account&&Object.hasOwnProperty.call(e,"account")&&t.uint32(10).string(e.account),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(16).uint32(e.code),t},e.decode=function(e,n){e instanceof u||(e=u.create(e)),n=void 0===n?e.len:e.pos+n;for(var r=new t.SubscribeResponse.SubscribeErrorsType;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:r.account=e.string();break;case 2:r.code=e.uint32();break;default:e.skipType(7&i)}}return r},e}(),e}(),RD=Object.freeze({__proto__:null,URI:UC,Wrapper:mi,Ping:VC,Pong:WC,UserJoin:XC,UserResp:YC,UserQuit:ZC,UserDrop:$C,GroupEnter:aD,GroupLeave:bD,GroupReply:cD,GroupLeaveNotice:ys,GroupEnterNotice:zs,Message:As,Ack:Bs,FileUploadIndexGet:dD,FileUploadIndexRet:eD,FileUploadIndexSet:fD,FileUploadIndexFin:gD,FileUploadIndexErr:hD,FileDownloadIndexGet:iD,FileDownloadIndexRet:jD,FileDownloadIndexErr:kD,GroupAllUsersList:lD,GroupAllUsersResult:mD,UserStatusList:nD,UserStatusResult:oD,UserAttributeGet:pD,UserAttributeRet:qD,UserAttributeSet:rD,UserAttributeMod:sD,UserAttributeDel:tD,UserAttributeErr:uD,UserAttributeKeysGet:vD,UserAttributeKeysRet:wD,UserAttributeRsp:xD,GroupStatusList:yD,GroupStatusResult:zD,GroupCountNotice:AD,GroupAttributeGet:BD,GroupAttributeRet:CD,GroupAttributeSet:DD,GroupAttributeMod:ED,GroupAttributeDel:FD,GroupAttributeAlt:GD,GroupAttributeRsp:HD,GroupAttributeErr:ID,GroupAttributeKeysGet:JD,GroupAttributeKeysRet:KD,SubscribeUserStatus:LD,UnsubscribeUserStatus:MD,UserJoinNotice:ND,UserQuitNotice:OD,UserWaitNotice:PD,SubscribeResponse:QD,default:t}),SD=Math.ceil,Cs=function(e){return function(t,n,r){var i=(t=String(mb(t))).length;return r=void 0===r?" ":String(r),(n=va(n))<=i||""==r?t:(n-=i,(i=ap.call(r,SD(n/r.length))).length>n&&(i=i.slice(0,n)),e?t+i:i+t)}},TD=Cs(!1),UD=Cs(!0),Ds=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(Re);M({target:"String",proto:!0,forced:Ds},{padEnd:function(e){return UD(this,e,1<arguments.length?arguments[1]:void 0)}});var VD=Sf,Es=function(e){return function(t){t=tb(t);for(var n,r=Mc(t),i=r.length,o=0,a=[];i>o;)n=r[o++],fa&&!VD.call(t,n)||a.push(e?[n,t[n]]:t[n]);return a}},WD=Es(!0),XD=Es(!1);M({target:"Object",stat:!0},{entries:function(e){return WD(e)}});var YD=Jb.f,Fs="".endsWith,ZD=Math.min,Gs=Mk("endsWith"),$D=!Gs&&!!function(){var e=YD(String.prototype,"endsWith");return e&&!e.writable}();M({target:"String",proto:!0,forced:!$D&&!Gs},{endsWith:function(e){var t=String(mb(this));Lk(e);var n=1<arguments.length?arguments[1]:void 0,r=va(t.length);return n=void 0===n?r:ZD(va(n),r),r=String(e),Fs?Fs.call(t,r,n):t.slice(n-r.length,n)===r}}),rh("match",1,(function(e,t,n){return[function(t){var n=mb(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;if(e=sa(e),r=String(this),!e.global)return Se(e,r);var i=e.unicode;e.lastIndex=0;for(var o,a=[],s=0;null!==(o=Se(e,r));)o=String(o[0]),a[s]=o,""===o&&(e.lastIndex=Gj(r,va(e.lastIndex),i)),s++;return 0===s?null:a}]}));var aE=Jb.f,Hs="".startsWith,bE=Math.min,Is=Mk("startsWith"),cE=!Is&&!!function(){var e=aE(String.prototype,"startsWith");return e&&!e.writable}();M({target:"String",proto:!0,forced:!cE&&!Is},{startsWith:function(e){var t=String(mb(this));Lk(e);var n=va(bE(1<arguments.length?arguments[1]:void 0,t.length)),r=String(e);return Hs?Hs.call(t,r,n):t.slice(n,n+r.length)===r}});var Sn=function(e){var t=/(%?)(%([jds]))/g,n=Array.prototype.slice.call(arguments,1);return n.length&&(e=e.replace(t,(function(e,t,r,i){switch(r=n.shift(),i){case"s":r=""+r;break;case"d":r=Number(r);break;case"j":r=JSON.stringify(r)}return t?(n.unshift(r),e):r}))),n.length&&(e+=" "+n.join(" ")),""+(e=e.replace(/%{2,2}/g,"%"))},dE=/\s/,eE=function(e){for(var t=e.length;t--&&dE.test(e.charAt(t)););return t},fE=/^\s+/,Js=NaN,gE=/^[-+]0x[0-9a-f]+$/i,hE=/^0b[01]+$/i,iE=/^0o[0-7]+$/i,jE=parseInt,Nl=function(e){if("number"==typeof e)return e;if(we(e))return Js;if(ob(e)&&(e="function"==typeof e.valueOf?e.valueOf():e,e=ob(e)?e+"":e),"string"!=typeof e)return 0===e?e:+e;e=e?e.slice(0,eE(e)+1).replace(fE,""):e;var t=hE.test(e);return t||iE.test(e)?jE(e.slice(2),t?2:8):gE.test(e)?Js:+e},kE=Math.max,lE=Math.min,mE=function(e,t,n){function r(t){var n=u,r=c;return u=c=void 0,p=t,l=e.apply(r,n)}function i(e){var n=e-h;return e-=p,void 0===h||n>=t||0>n||v&&e>=g}function o(){var e=Fb.Date.now();if(i(e))return a(e);var n=setTimeout,r=e-p;e=t-(e-h),r=v?lE(e,g-r):e,f=n(o,r)}function a(e){return f=void 0,b&&u?r(e):(u=c=void 0,l)}function s(){var e=Fb.Date.now(),n=i(e);if(u=arguments,c=this,h=e,n){if(void 0===f)return p=e=h,f=setTimeout(o,t),d?r(e):l;if(v)return clearTimeout(f),f=setTimeout(o,t),r(h)}return void 0===f&&(f=setTimeout(o,t)),l}var u,c,l,f,h,p=0,d=!1,v=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");if(t=Nl(t)||0,ob(n)){d=!!n.leading;var g=(v="maxWait"in n)?kE(Nl(n.maxWait)||0,t):g;b="trailing"in n?!!n.trailing:b}return s.cancel=function(){void 0!==f&&clearTimeout(f),p=0,u=h=c=f=void 0},s.flush=function(){return void 0===f?l:a(Fb.Date.now())},s},Fc=function(e){function t(e,i){return X(this,t),m(n(e=r.call(this,Rn(e,i))),"originalError",void 0),m(n(e),"code",void 0),m(n(e),"serverCode",void 0),"number"==typeof i?e.code=i:"string"==typeof i?e.name=i:void 0!==i&&(i.originalError&&(e.originalError=i.originalError),void 0!==i.code&&(e.code=i.code),void 0!==i.serverCode&&(e.serverCode=i.serverCode)),e}ja(t,e);var r=ka(t);return t}(xf(Error)),Ma=function(e){function t(e,i){return X(this,t),m(n(e=r.call(this,Rn(e,i))),"name","RtmInternalError"),m(n(e),"code",void 0),e.code=i,e}ja(t,e);var r=ka(t);return t}(xf(Error)),ni=function(){return function(e){function t(e){X(this,t);var r=Object.keys(e);return n.call(this,e[r[0]],r[0])}ja(t,e);var n=ka(t);return t}(Ma)},Ha=ni(),gb=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmTimeoutError"),e}ja(t,e);var r=ka(t);return t}(Fc),H=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmInvalidArgumentError"),e}ja(t,e);var r=ka(t);return t}(Fc),L=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmInvalidStatusError"),e}ja(t,e);var r=ka(t);return t}(Fc),Ol=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmInterruptedError"),e}ja(t,e);var r=ka(t);return t}(Fc),lb=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmLimitExceededError"),e}ja(t,e);var r=ka(t);return t}(Fc),nE=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmInvokeTooOftenError"),e}ja(t,e);var r=ka(t);return t}(Fc),da=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmUnavailableError"),m(n(e),"serverCode",void 0),m(n(e),"statusCode",void 0),e}ja(t,e);var r=ka(t);return t}(Fc),of=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmUnauthenticatedError"),m(n(e),"serverCode",void 0),e}ja(t,e);var r=ka(t);return t}(Fc),bd=function(e){function t(){X(this,t);for(var e=arguments.length,i=Array(e),o=0;o<e;o++)i[o]=arguments[o];return m(n(e=r.call.apply(r,[this].concat(i))),"name","RtmUnknownError"),e}ja(t,e);var r=ka(t);return t}(Fc),Xa=function(e){return e instanceof gb||e instanceof sb},ta=function(e){return e instanceof Fc},he=function(e,t,n){return['Executing "%s.%s" timed out after %ds',e,t,n/1e3]},Qn=new Map,oE=function(){var e=new Date;return"".concat(e.toISOString().split("T")[1].replace(/\..+/,""),".").concat(e.getMilliseconds())},Pf=Object.keys,eh=Object.entries.bind(Object),Zg=function(e){return"string"==typeof e?e.endsWith(".")?e:"".concat(e,"."):e},Vn=function(e){for(var t="",n=(e=new Uint8Array(e)).byteLength,r=-1;++r<n;)t+=String.fromCharCode(e[r]);return t=btoa(t),"data:;base64,".concat(t)},pE=R((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}));M({target:"Date",proto:!0,forced:pE},{toJSON:function(e){e=Va(this);var t=tc(e);return"number"!=typeof t||isFinite(t)?e.toISOString():null}}),M({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}});var Vv=Object.prototype.hasOwnProperty,Ks=function(e,t,n){return JSON.stringify(ao(e),t,n)};Ks.ensureProperties=ao;var qE=function(e,t){t=t||{};var n=V(e);if("string"===n&&0<e.length)return Wv(e);if("number"===n&&isFinite(e))return t.long?e=864e5<=(t=Math.abs(e))?gh(e,t,864e5,"day"):36e5<=t?gh(e,t,36e5,"hour"):6e4<=t?gh(e,t,6e4,"minute"):1e3<=t?gh(e,t,1e3,"second"):e+" ms":e=864e5<=(t=Math.abs(e))?Math.round(e/864e5)+"d":36e5<=t?Math.round(e/36e5)+"h":6e4<=t?Math.round(e/6e4)+"m":1e3<=t?Math.round(e/1e3)+"s":e+"ms",e;throw Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))},rE=function(e){function t(e){function r(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];if(r.enabled){e=Number(new Date),r.diff=e-(i||e),r.prev=i,i=r.curr=e,n[0]=t.coerce(n[0]),"string"!=typeof n[0]&&n.unshift("%O");var a=0;n[0]=n[0].replace(/%([a-zA-Z%])/g,(function(e,i){return"%%"===e?"%":(a++,"function"==typeof(i=t.formatters[i])&&(e=i.call(r,n[a]),n.splice(a,1),a--),e)})),t.formatArgs.call(r,n),(r.log||t.log).apply(r,n)}}var i,o=null;return r.namespace=e,r.useColors=t.useColors(),r.color=t.selectColor(e),r.extend=n,r.destroy=t.destroy,Object.defineProperty(r,"enabled",{enumerable:!0,configurable:!1,get:function(){return null===o?t.enabled(e):o},set:function(e){o=e}}),"function"==typeof t.init&&t.init(r),r}function n(e,n){return(e=t(this.namespace+(void 0===n?":":n)+e)).log=this.log,e}function r(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){var e=[].concat(G(t.names.map(r)),G(t.skips.map(r).map((function(e){return"-"+e})))).join(",");return t.enable(""),e},t.enable=function(e){t.save(e),t.names=[],t.skips=[];var n,r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r=0;for(n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=qE,t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((function(n){t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){for(var n=0,r=0;r<e.length;r++)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t},Ls=cb((function(e,t){t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),this.useColors){var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)}},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){try{var e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&31<=parseInt(RegExp.$1,10)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))};e:{try{var n=localStorage;break e}catch(e){}n=void 0}t.storage=n,t.destroy=function(){var e=!1;return function(){e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}}(),t.colors="#0000CC #0000FF #0033CC #0033FF #0066CC #0066FF #0099CC #0099FF #00CC00 #00CC33 #00CC66 #00CC99 #00CCCC #00CCFF #3300CC #3300FF #3333CC #3333FF #3366CC #3366FF #3399CC #3399FF #33CC00 #33CC33 #33CC66 #33CC99 #33CCCC #33CCFF #6600CC #6600FF #6633CC #6633FF #66CC00 #66CC33 #9900CC #9900FF #9933CC #9933FF #99CC00 #99CC33 #CC0000 #CC0033 #CC0066 #CC0099 #CC00CC #CC00FF #CC3300 #CC3333 #CC3366 #CC3399 #CC33CC #CC33FF #CC6600 #CC6633 #CC9900 #CC9933 #CCCC00 #CCCC33 #FF0000 #FF0033 #FF0066 #FF0099 #FF00CC #FF00FF #FF3300 #FF3333 #FF3366 #FF3399 #FF33CC #FF33FF #FF6600 #FF6633 #FF9900 #FF9933 #FFCC00 #FFCC33".split(" "),t.log=console.debug||console.log||function(){},e.exports=rE(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}})),Ms=Ls("RTM:DEBUG"),pf;Ms.enabled=!1,function(e){e[e.Uploading=0]="Uploading",e[e.Free=1]="Free"}(pf||(pf={}));var sE=function(){function e(t){X(this,e),m(this,"uploadRequest",void 0),m(this,"uploadState",void 0),m(this,"uploadResendCount",void 0),m(this,"LogCache",void 0),m(this,"LogsToPost",void 0),m(this,"processId",void 0),m(this,"sdkVersion",void 0),m(this,"logId",void 0),m(this,"rtmConfig",void 0),this.processId=t.processId,this.sdkVersion=t.sdkVersion,this.rtmConfig=t.rtmConfig,this.uploadRequest=t.uploadRequest,this.uploadState=pf.Free,this.uploadResendCount=0,this.LogCache=[],this.LogsToPost=[],this.logId=0}return Ia(e,[{key:"upload",value:function(e){this.LogCache.push(e),this.uploadState===pf.Free&&(this.LogsToPost=40>this.LogCache.length?this.LogCache.splice(0,this.LogCache.length):this.LogCache.splice(0,40),this.postLog(this.LogsToPost))}},{key:"postLog",value:function(e){var t=this;this.uploadState=pf.Uploading,setTimeout(J(x.mark((function n(){var r,i,o;return x.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r={sdk_version:t.sdkVersion,process_id:t.processId,payload:JSON.stringify(e)},n.prev=1,n.next=4,t.uploadRequest(r,null!==(i=t.rtmConfig.enableCloudProxy)&&void 0!==i&&i);case 4:if(!Ti){n.next=6;break}throw Error("RTM is busy");case 6:n.next=13;break;case 8:return n.prev=8,n.t0=n.catch(1),o=2>t.uploadResendCount++?2e3:1e4,setTimeout((function(){return t.postLog(t.LogsToPost)}),o),n.abrupt("return");case 13:if(Ms('The logs uploaded for "process-'.concat(zg,'"')),0!==t.LogCache.length){n.next=17;break}return t.uploadState=pf.Free,n.abrupt("return");case 17:t.uploadResendCount=0,t.LogsToPost=40>t.LogCache.length?t.LogCache.splice(0,t.LogCache.length):t.LogCache.splice(0,40),t.postLog(t.LogsToPost);case 20:case"end":return n.stop()}}),n,null,[[1,8]])}))),ie.getParameter("LOG_UPLOAD_INTERVAL"))}}]),e}(),Ns=function(e,t,n,r,i,o,a,s){var u=0;for(a=!!a&&pd(a,s,3);u<r;){if(u in n){if(s=a?a(n[u],u,t):n[u],0<o&&qd(s))i=Ns(e,t,s,va(s.length),i,o-1)-1;else{if(9007199254740991<=i)throw TypeError("Exceed the acceptable array length");e[i]=s}i++}u++}return i},tE=Ns;M({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=Va(this),n=va(t.length),r=th(t,0);return r.length=tE(r,t,t,n,0,void 0===e?1:fc(e)),r}}),M({target:"Object",stat:!0},{values:function(e){return XD(e)}});var uE=["CODE"],Gb,Bd,D;!function(e){e.CHINA="CN",e.ASIA="AS",e.NORTH_AMERICA="NA",e.EUROPE="EU",e.JAPAN="JP",e.INDIA="IN",e.OCEANIA="OC",e.SOUTH_AMERICA="SA",e.AFRICA="AF",e.OVERSEA="OVERSEA",e.GLOBAL="GLOBAL"}(D||(D={}));var vE={CN:D.CHINA,NA:D.NORTH_AMERICA,EU:D.EUROPE,AS:D.ASIA,JP:D.JAPAN,IN:D.INDIA,GLOB:D.GLOBAL,AF:D.AFRICA,OC:D.OVERSEA,OVS:D.OVERSEA,SA:D.SOUTH_AMERICA},hh=Zn((Gb={},m(Gb,D.ASIA,{CODE:D.ASIA,AP_DOMAINS:["ap-web-1-asia.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-asia.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-asia.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-asia.agora.io"],LOG_UPLOAD_SERVER:["logservice-asia.agora.io"],PROXY_AP:["proxy-ap-web-asia.agora.io"],PROXY_NGINX:["southeast-asia.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.NORTH_AMERICA,{CODE:D.NORTH_AMERICA,AP_DOMAINS:["ap-web-1-north-america.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-north-america.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-north-america.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-north-america.agora.io"],LOG_UPLOAD_SERVER:["logservice-north-america.agora.io"],PROXY_AP:["proxy-ap-web-america.agora.io"],PROXY_NGINX:["east-usa.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.EUROPE,{CODE:D.EUROPE,AP_DOMAINS:["ap-web-1-europe.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-europe.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-europe.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-europe.agora.io"],LOG_UPLOAD_SERVER:["logservice-europe.agora.io"],PROXY_AP:["proxy-ap-web-europe.agora.io"],PROXY_NGINX:["europe.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.JAPAN,{CODE:D.JAPAN,AP_DOMAINS:["ap-web-1-japan.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-japan.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-japan.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-japan.agora.io"],LOG_UPLOAD_SERVER:["logservice-japan.agora.io"],PROXY_AP:["proxy-ap-web-japan.agora.io"],PROXY_NGINX:["japan.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.INDIA,{CODE:D.INDIA,AP_DOMAINS:["ap-web-1-india.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-india.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-india.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-india.agora.io"],LOG_UPLOAD_SERVER:["logservice-india.agora.io"],PROXY_AP:["proxy-ap-web-india.agora.io"],PROXY_NGINX:["india.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.OVERSEA,{CODE:D.OVERSEA,AP_DOMAINS:["ap-web-1-oversea.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-oversea.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-oversea.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-oversea.agora.io"],LOG_UPLOAD_SERVER:["logservice-oversea.agora.io"],PROXY_AP:["proxy-ap-web-oversea.agora.io"],PROXY_NGINX:["webrtc-cloud-proxy.agora.io"]}),m(Gb,D.GLOBAL,{CODE:D.GLOBAL,AP_DOMAINS:["ap-web-1.agora.io","ap-web-2.agora.io"],AP_BACKUP_DOMAINS:["ap-web-3.agora.io","ap-web-4.agora.io"],EVENT_REPORT_DOMAIN:["webcollector-rtm.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["webcollector-1.agora.io"],LOG_UPLOAD_SERVER:["logservice-rtm.agora.io"],PROXY_AP:["ap-proxy-1.agora.io","ap-proxy-2.agora.io"],PROXY_NGINX:["webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.OCEANIA,{CODE:D.OCEANIA,AP_DOMAINS:["ap-web-1-oceania.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-oceania.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-oceania.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-oceania.agora.io"],LOG_UPLOAD_SERVER:["logservice-oceania.agora.io"],PROXY_AP:["proxy-ap-web-oceania.agora.io"],PROXY_NGINX:["oceania.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.SOUTH_AMERICA,{CODE:D.SOUTH_AMERICA,AP_DOMAINS:["ap-web-1-south-america.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-south-america.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-south-america.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-south-america.agora.io"],LOG_UPLOAD_SERVER:["logservice-south-america.agora.io"],PROXY_AP:["proxy-ap-web-south-america.agora.io"],PROXY_NGINX:["south-america.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.AFRICA,{CODE:D.AFRICA,AP_DOMAINS:["ap-web-1-africa.agora.io"],AP_BACKUP_DOMAINS:["ap-web-2-africa.agora.io"],EVENT_REPORT_DOMAIN:["statscollector-1-africa.agora.io"],EVENT_REPORT_BACKUP_DOMAIN:["statscollector-2-africa.agora.io"],LOG_UPLOAD_SERVER:["logservice-south-africa.agora.io"],PROXY_AP:["proxy-ap-web-africa.agora.io"],PROXY_NGINX:["africa.webrtc-cloud-proxy.sd-rtn.com"]}),m(Gb,D.CHINA,{CODE:D.CHINA,AP_DOMAINS:["webrtc2-2.ap.sd-rtn.com"],AP_BACKUP_DOMAINS:["webrtc2-4.ap.sd-rtn.com"],EVENT_REPORT_DOMAIN:["web-3.statscollector.sd-rtn.com"],EVENT_REPORT_BACKUP_DOMAIN:["web-4.statscollector.sd-rtn.com"],LOG_UPLOAD_SERVER:["logservice-china.agora.io"],PROXY_AP:["proxy-ap-web.agoraio.cn"],PROXY_NGINX:["east-cn.webrtc-cloud-proxy.sd-rtn.com"]}),Gb)),Qf=(Bd={},m(Bd,D.ASIA,[D.CHINA,D.JAPAN,D.INDIA]),m(Bd,D.EUROPE,[]),m(Bd,D.NORTH_AMERICA,[]),m(Bd,D.SOUTH_AMERICA,[]),m(Bd,D.OCEANIA,[]),m(Bd,D.AFRICA,[]),Bd),Os=[D.OVERSEA,D.GLOBAL,D.CHINA,D.NORTH_AMERICA,D.EUROPE,D.ASIA,D.JAPAN,D.INDIA,D.OCEANIA,D.SOUTH_AMERICA,D.AFRICA],bo=function(e){return Object.values(Qf).flat().includes(e)},Yv=function(e){var t;return null===(t=eh(Qf).find((function(t){return(t=ua(t,2))[0],t[1].includes(e)})))||void 0===t?void 0:t[0]},wE=function(e){return e.sort((function(e,t){return Os.indexOf(e)-Os.indexOf(t)}))},Ke=function(e){var t=new Set;if(0===(e=wE(e).slice(0,3).map((function(e){var n=hh[e];if(void 0===n)throw new Ma("invalid area key");return e=n.CODE,n=yf(n,uE),t.add(e),n}))).length)throw new Ma("areas cannot be empty");return wa({CODES:t},e.reduce((function(e,t){for(var n=0,r=eh(e);n<r.length;n++){var i=ua(r[n],2),o=i[0];i=i[1],e[o]=Array.from(new Set([].concat(G(t[o]),G(i))))}return e})))},P,Ps=function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(2<(i=2<u.length&&void 0!==u[2]?u[2]:0))){e.next=3;break}return e.abrupt("return");case 3:return o={withCredentials:!0,body:t,timeout:2e4},a=0<i?(null==P?void 0:P.LOG_UPLOAD_SERVER[0])||"rtm.logservice.sd-rtn.com":(null==P?void 0:P.LOG_UPLOAD_SERVER[0])||"logservice-rtm.agora.io",s=n?"https://".concat(null!==(r=null==P?void 0:P.PROXY_NGINX[0])&&void 0!==r?r:"webrtc-cloud-proxy.sd-rtn.com","/ls/?h=").concat(a,"&p=443&d=upload/v1"):"https://".concat(a,"/upload/v1"),e.next=8,He(s,o).catch((function(e){return Ps(t,n,i+1)}));case 8:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Qs=new sE({processId:"process-".concat(zg),sdkVersion:"Agora_RTM_SDK_for_Web_".concat("v1.4.5-0-g9cf39592"),uploadRequest:Ps,rtmConfig:{}}),Pl="text payload rawMessage thumbnail attributeInfos keys value extra".split(" "),Rs="account ticket uid detail token account fileName cname user group key origin users src dst lastUpdateUserId channel cert wan_ip".split(" "),Ss="serverReceivedTs isOfflineMessage enableHistoricalMessaging enableOfflineMessaging hasPeerReceived messageType enableNotificationToChannelMembers lastUpdateTs".split(" "),xE="ChannelMessage MemberLeft MessageFromPeer LocalInvitationRefused LocalInvitationAccepted RemoteInvitationCanceled PeersOnlineStatusChanged AttributesUpdated MemberJoined".split(" "),Le=function(e){if("string"==typeof e)return pa(e);if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.map((function(e){return pa(e)}));if(!Km(e)){for(var t={},n=0;n<Ss.length;n++){var r=Ss[n];r in e&&(t[r]=e[r])}if(0<Object.keys(t).length)return t;if(5>Object.keys(e).length){for(n=0,e=Object.entries(e);n<e.length;n++){var i=ua(e[n],2);r=i[0],i=i[1],Pl.includes(r)?t[r]="[Hidden Info]":t[pa(r)]="string"==typeof i?pa(i):"[Sensitive Info]"}return t}return"[Sensitive Info]"}return e},Ts=function(e){return"object"===V(e)?Hd(e)?Yn(te(e,5),Pl,Rs):e.constructor&&e.constructor.name:e},Us=function(e,t){return e instanceof Error?e.message:"string"!=typeof e?JSON.stringify(Yn(te(e,5),Pl,Rs)):(t=t.map((function(e){return e instanceof Error?e.message:"object"===V(e)?Ks(Array.isArray(e)?e.map(Ts):Ts(e)):e})),Sn.apply(void 0,[e.replace(/%[%Oo]/g,(function(e){return"%%"===e?"%":"%o"===e||"%O"===e?"%s":e}))].concat(G(t))))},yE=1,Vs=function(e,t,n){var r=Ls(e);return r.enabled=!0,r.log=n,r.useColors=!1,function(n){for(var i=arguments.length,o=Array(1<i?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];if(t.enableLogUpload){i=Zg(n);var s=Us(i,o);Qs.upload({log_item_id:"".concat(yE++),log_level:e,payload_str:"[".concat(oE(),"] ").concat(e," - ").concat(256<s.length?s.slice(0,256):s)})}switch(i=function(e){var t=s||Us(Zg(n),o),i=lc.LOG_HANDLER;"function"==typeof i&&i({level:e,message:t}),r(t)},e){case"RTM:INFO":t.logFilter.info&&i("log");break;case"RTM:WARN":t.logFilter.warn&&i("warning");break;case"RTM:ERROR":t.logFilter.error&&i("error");break;case"RTM:TRACK":t.logFilter.track&&i("log");break;case"RTM:MSG:RECV":case"RTM:MSG:SEND":t.logFilter.debug&&i("debug");break;case"RTM:DEBUG":t.logFilter.debug&&i("debug")}}},Ql,Ws=function(e){return function(t){var n=1===Ql||void 0===e?"":"Ins#".concat(e," ");return"".concat(n).concat(t)}},Rl=function(e,t,n){var r=Ws(Ql);return Vs("RTM:".concat(t),n,(function(t){return e(r(t))}))},wb=function(){return function(e){function t(e,i){var o=2<arguments.length&&void 0!==arguments[2]&&arguments[2];X(this,t);var a=r.call(this);if(m(n(a),"logError",void 0),m(n(a),"invokeTracker",void 0),m(n(a),"resultTracker",void 0),m(n(a),"errorTracker",void 0),m(n(a),"eventTracker",void 0),m(n(a),"info",void 0),m(n(a),"warn",void 0),m(n(a),"log",void 0),m(n(a),"genLogger",void 0),m(n(a),"loggerId",void 0),m(n(a),"logger",void 0),m(n(a),"name",void 0),a.logger=e,a.name=i,a.loggerId=e.loggerId,a.info=e.info,a.warn=e.warn,a.logError=e.logError,a.genLogger=e.genLogger,a.log=e.genLogger("RTM:DEBUG","<".concat(i,"> ")),a.invokeTracker=e.genTracker("Invoke"),a.eventTracker=e.genTracker("Event"),a.resultTracker=e.genTracker("Result"),a.errorTracker=e.genTracker("Error"),o){var s=a.emit.bind(n(a));a.emit=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];e=t[0],n=t.slice(1);var r=xE.includes(e);a.eventTracker.apply(a,["%s: ".concat(0<n.length?"%s emitted with args: ".concat(n.map((function(){return"%o"}))):"%s emitted"),i,e].concat(G(r?n.map(Le):n)));try{s.apply(void 0,t)}catch(t){a.logError("Caught in the callback function of the event %s",e,t)}}}return a}ja(t,e);var r=ka(t);return t}(ia)},zE=function(e){return Rl(console.log.bind(console),"INFO",e)},AE=function(e){return Rl(console.warn.bind(console),"WARN",e)},BE=function(e){return Rl(console.error.bind(console),"ERROR",e)},Xs=function(e,t){return function(n){var r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",i=Ws(e),o=console.debug.bind(console),a=Vs(n,t,(function(e){return o(i(e))}));return function(e){for(var t=arguments.length,n=Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return a.apply(void 0,[r+e].concat(n))}}},CE=function(e,t){return function(n){return Xs(e,t)("RTM:TRACK","[".concat(n,"] "))}},rj=t.URI,$v=mi,DE=yf(RD,["Wrapper"]),co=ml(DE,"URI"),Ys=function(e,t){var n=-1,r=e.length,i=r-1;for(t=void 0===t?r:t;++n<t;){var o=e[r=rs(n,i)];e[r]=e[n],e[n]=o}return e.length=t,e},EE=function(e){return Ys(Bi(e))},FE=function(e){return Ys(tj(e))},qf=function(e){return(Za(e)?EE:FE)(e)},rf={0:9591,1:9593},je=function(e){var t=Pd(null);return"https://".concat(t?null:e,"/api/v1")},GE=eb.apply(void 0,G(qf(["web-1.ap.sd-rtn.com","web-2.ap.sd-rtn.com"].map(je)))),HE=eb.apply(void 0,G(qf(["ap-web-1.agora.io","ap-web-2.agora.io"].map(je)))),IE=eb.apply(void 0,G(qf(["web-3.ap.sd-rtn.com","web-4.ap.sd-rtn.com"].map(je)))),JE=eb.apply(void 0,G(qf(["ap-web-3.agora.io","ap-web-4.agora.io"].map(je)))),Zs=ni(),Sl=function(e){function t(e,i,o,a,s,u){X(this,t);var c=r.call(this,s,fj("Socket-",s.loggerId));if(m(n(c),"isActiveClose",!1),m(n(c),"loggedIn",!1),m(n(c),"useNewDomain",void 0),m(n(c),"receivedPacket",new Ua),m(n(c),"open$",void 0),m(n(c),"input$",new Ua),m(n(c),"userJoin$",new Ua),m(n(c),"attemptsSinceLastError",0),m(n(c),"message$",new Ua),m(n(c),"socket$",void 0),m(n(c),"toClose",new Ua),m(n(c),"toReconnect",new Ua),m(n(c),"sendLogger",void 0),m(n(c),"receiveLogger",void 0),m(n(c),"ip",void 0),m(n(c),"env",void 0),m(n(c),"ticket",void 0),m(n(c),"context",void 0),m(n(c),"getDomain",(function(){return eo(c.ip,c.useNewDomain)})),m(n(c),"socketReconnector",(function(e){var t=function(e){return c.attemptsSinceLastError+=1,c.warn("The %s of Env %d reconnecting %s",c.name,c.env,e.message),Kc(3e3)};return e.pipe(Ja((function(e){return c.log("socket connection closed"),c.loggedIn=!1,2<=c.attemptsSinceLastError?(c.warn("socket connection failure"),c.emit("connectionFailure"),c.close(),Z(e)):c.isActiveClose?yb:(c.emit("reconnect"),c.useNewDomain=!c.useNewDomain,Z(e))})),Ce((function(e){return e.pipe(Lc(t))})))})),c.ip=e,c.env=i,c.ticket=o,c.context=a,c.useNewDomain=null!=u?u:.5<=Math.random(),c.sendLogger=c.genLogger("RTM:MSG:SEND"),c.receiveLogger=c.genLogger("RTM:MSG:RECV"),0!==i&&1!==i)throw new Zs({ILLEGAL_RTM_ENV:"The env number is out of rtm env count"});var l=rf[i];c.log("Opening websocket address %s for the Env %d",c.ip,c.env);var f=cc(c.input$,c.userJoin$.pipe(Lv(2)),c.message$).pipe(ea((function(e){return mi.encode(e).finish()})));return e=cc(Mv("",{protocols:[],makeWebSocket:function(){if(c.context.config.enableCloudProxy||c.context.socketUseProxy){if(0===c.context.cloudProxyServers.length)throw c.logError("No cloud proxy server to connect"),new da;var e=Pd(null)?JSON.parse(null.replace(/-/g,".")):c.context.cloudProxyServers;e=Je(e="wss://".concat(eo(fo(e),!1),"/"),"sid",c.context.sid),e=Je(e,"remote_port",l.toString()),e=Je(e,"remote_ip",c.ip),e=Je(e,"token",c.context.key),e=new WebSocket(e)}else e=new WebSocket("wss://".concat(c.getDomain(),":").concat(l));return e.binaryType="arraybuffer",e}}),c.toReconnect),c.socket$=Da(e,zl.pipe(kb(7e3),Ja((function(e){return Xa(e)&&c.warn("socket open timed out"),Z(e)})))).pipe(ea((function(e){if(e instanceof Error)throw c.warn("Env_%d: Force reconnect the socket",c.env),e;return e(f).pipe(ea((function(e){return mi.decode(new Uint8Array(e))})))})),c.socketReconnector),c.open$=c.socket$.pipe(ba((function(e){c.log("Websocket opened",c.name),e.subscribe((function(e){var t=e.data;e=rj[e.uri].slice(0,-3),t=co[e].decode(t);var n=DC({},ml(t,"toJSON"),(function(e,t){return t instanceof U?Pn(t):t})),r=!1;if((t instanceof zs||t instanceof ys)&&t.instance.lessThanOrEqual(4294967295)&&(r=!0),t instanceof As||t instanceof Bs){var i=t.instance,o=t.sequence;(t.dialogue.lessThanOrEqual(4294967295)||i.lessThanOrEqual(4294967295)||o.lessThan(1))&&(r=!0)}r?c.warn("Env_%d: Illegal %s, abandoned %o",c.env,e,n):("Pong"!==e&&c.receiveLogger("Env_%d: %s %o",c.env,e,n),c.receivedPacket.next([e,t]))}),(function(){}))})),If(void 0),rb(c.toClose),De()),c}ja(t,e);var r=ka(t);return Ia(t,[{key:"address",get:function(){return"".concat(this.ip,":").concat(rf[this.env])}},{key:"sendPacket",value:function(e,t){if("Ping"!==e){var n=Bc(t,(function(e){return e instanceof U?Pn(e):e}));this.sendLogger("Env_%d: %s %o",this.env,e,n)}t=Zv(e,t),"UserJoin"===e?this.userJoin$.next(t):"Message"===e?this.message$.next(t):this.input$.next(t)}},{key:"close",value:function(){this.isActiveClose=!0,this.loggedIn=!1,this.toClose.next()}},{key:"fromReceived",value:function(e){return this.receivedPacket.pipe(zb((function(t){return ua(t,1)[0]===e})),ea((function(e){return ua(e,2)[1]})))}},{key:"forceReconnect",value:function(){this.toReconnect.next(new Zs({FORCE_RECONNECTING:"Connection seems broken, try force reconnecting"}))}}]),t}(wb());M({target:"String",proto:!0,forced:Ds},{padStart:function(e){return TD(this,e,1<arguments.length?arguments[1]:void 0)}});var KE=function(e){var t=Pf(hh);e=Tv(e);for(var n=0;n<t.length;n++){var r=hh[t[n]];if(null!=r&&r.AP_DOMAINS.includes(e)||null!=r&&r.AP_BACKUP_DOMAINS.includes(e)||null!=r&&r.PROXY_AP.includes(e))return[r.CODE]}return[D.CHINA,D.GLOBAL]},LE={INVALID_APP_ID:"Illegal App ID",NO_AUTHORIZED:"Signature verification failed",TOKEN_TIMEOUT:"Dynamic key expired",INVALID_TOKEN_UID:"UID in the security key(token) is not valid",APP_ID_NO_ACTIVATED:"The vendor is not activated",DYNAMIC_KEY_NOT_ENABLED:"The vendor did not enable the dynamic key, but uses the dynamic key",DYNAMIC_ENABLED_BUT_STATIC_KEY:"The vendor enabled the dynamic key, but uses the static key",TOKEN_EXPIRED:"The token has expired",INVALID_USER_ID:"The user ID to login does not match the token",FORBIDDEN_REGION:"Forbidden to access the request in this area",CANNOT_MEET_AREA_DEMAND:"Cannot allocate to meet the requirements of the given area limit"},$s={5:"INVALID_APP_ID",7:"INVALID_USER_ID",9:"NO_AUTHORIZED",10:"TOKEN_TIMEOUT",11:"APP_ID_NO_ACTIVATED",12:"INVALID_TOKEN_UID",13:"TOKEN_EXPIRED",14:"DYNAMIC_KEY_NOT_ENABLED",15:"DYNAMIC_ENABLED_BUT_STATIC_KEY",18:"FORBIDDEN_REGION",19:"CANNOT_MEET_AREA_DEMAND"},ME=[100,101,102],oi=/web-(\d)/,at=function(e){function t(e,i){var o=2<arguments.length&&void 0!==arguments[2]&&arguments[2];X(this,t);var a=r.call(this,i,"AccessPoint");return m(n(a),"handleUniLbsError",(function(e,t){var n=e;if(4<e.toString().length){var r=e.toString().padStart(8,"0"),i=parseInt(r.slice(0,4),10);if(r=parseInt(r.slice(4,8),10),201===i)n=r;else if(101===i&&!ME.includes(r))return Z(Error("service is currently unavailable"))}if(i=n.toString(),!Object.keys($s).includes(i))return(e=new da(["Login is rejected by the server. The response code is %d",e],Bg)).serverCode=n,Z(e);switch(i=$s[i],n=LE[i],i){case"INVALID_APP_ID":case"APP_ID_NO_ACTIVATED":return(t=new of(n,ds)).serverCode=e,Z(t);case"INVALID_USER_ID":return(t=new of(n,hi)).serverCode=e,Z(t);case"TOKEN_EXPIRED":case"TOKEN_TIMEOUT":return(t=new of(n,ii)).serverCode=e,Z(t);case"NO_AUTHORIZED":case"INVALID_TOKEN_UID":case"DYNAMIC_KEY_NOT_ENABLED":case"DYNAMIC_ENABLED_BUT_STATIC_KEY":return(t=new of(n,es)).serverCode=e,Z(t);case"CANNOT_MEET_AREA_DEMAND":return(t=KE(t)).forEach((function(e){return a.failedAreas.add(e)})),a.failedAreas.size===(void 0===P?2:P.CODES.size)?((t=new H(n,Bg)).serverCode=e,Z(t)):Z(Error("ap ".concat(t.join(", ")," cannot meet requirement")));case"FORBIDDEN_REGION":return(t=new da(n,Bg)).serverCode=e,Z(t);default:return Z(Nn("ApResErrType",i))}})),m(n(a),"getApEdgeInfo$",void 0),m(n(a),"getApEdgeInfoEndFirst$",void 0),m(n(a),"apFinish$",new Ua),m(n(a),"retryCount",0),m(n(a),"failedAreas",new Set),m(n(a),"usedUrl",[]),m(n(a),"newDomainUsed",!1),m(n(a),"backupNewDomainUsed",!1),m(n(a),"genUrl",(function(){return void 0===P?Ri.apply(void 0,G(qf([GE,HE]))).pipe(Si((function(e){return eb.apply(void 0,G(e))}))):eb.apply(void 0,G(P.AP_DOMAINS.slice(0,3).map(je)))})),m(n(a),"genBackupUrl",(function(){return void 0===P?Ri.apply(void 0,G(qf([IE,JE]))).pipe(Si((function(e){return eb.apply(void 0,G(e))}))):eb.apply(void 0,G(P.AP_BACKUP_DOMAINS.slice(0,3).map(je)))})),m(n(a),"getApUrl$",(function(e){var n,r;return a.genUrl().pipe(zb((function(e){return(!a.newDomainUsed||!e.includes("sd-rtn.com"))&&(e.includes("sd-rtn.com")&&(a.newDomainUsed=!0),!Kl(a.usedUrl,(function(t){var n;return t===(null===(n=e.match(oi))||void 0===n?void 0:n[1])})))})),ba((function(e){var t;void 0===P&&("string"==typeof(e=null===(t=e.match(oi))||void 0===t?void 0:t[1])&&a.usedUrl.push(e))})),Pa(e?Math.max(lc.RECONNECTING_AP_NUM,null!==(n=null==P?void 0:P.CODES.size)&&void 0!==n?n:0):null!==(r=null==P?void 0:P.CODES.size)&&void 0!==r?r:2),Md((function(){return t.runOutOfUrlSymbol})),Ja((function(e,n){return a.newDomainUsed=!1,e===t.runOutOfUrlSymbol?(a.usedUrl=[],n):Z(e)})))})),m(n(a),"getBackupApUrl$",(function(e){var n,r;return a.genBackupUrl().pipe(zb((function(e){return(!a.backupNewDomainUsed||!e.includes("sd-rtn.com"))&&(e.includes("sd-rtn.com")&&(a.backupNewDomainUsed=!0),!Kl(a.usedUrl,(function(t){var n;return t===(null===(n=e.match(oi))||void 0===n?void 0:n[1])})))})),ba((function(e){var t;void 0===P&&("string"==typeof(e=null===(t=e.match(oi))||void 0===t?void 0:t[1])&&a.usedUrl.push(e))})),Pa(e?Math.max(lc.RECONNECTING_AP_NUM,null!==(n=null==P?void 0:P.CODES.size)&&void 0!==n?n:0):null!==(r=null==P?void 0:P.CODES.size)&&void 0!==r?r:2),Md((function(){return t.runOutOfUrlSymbol})),Ja((function(e,n){return a.backupNewDomainUsed=!1,e===t.runOutOfUrlSymbol?(a.usedUrl=[],n):Z(e)})))})),m(n(a),"getProxyApUrl$",(function(e){var t,n;return eb.apply(void 0,G(((null==P?void 0:P.PROXY_AP.slice(0,3))||["ap-proxy-1.agora.io","ap-proxy-2.agora.io"]).map(je))).pipe(Pa(e?Math.max(lc.RECONNECTING_AP_NUM,null!==(t=null==P?void 0:P.CODES.size)&&void 0!==t?t:0):null!==(n=null==P?void 0:P.CODES.size)&&void 0!==n?n:2))})),m(n(a),"context",void 0),m(n(a),"fetchCloudProxy",(function(e,t){var n=fj("AP-",a.loggerId);a.log("The AccessPoint requests %s(%s)",e,n);var r=new AbortController;return a.apFinish$.pipe(Pa(1)).subscribe((function(){return r.abort()})),hd(J(x.mark((function i(){var o;return x.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return o=Xg(0,Number.MAX_SAFE_INTEGER),a.log("%s request opid: %d",n,o),i.abrupt("return",He(e,{headers:{"X-Packet-Service-Type":"0","X-Packet-URI":"90","Content-Type":"application/json"},body:{sid:a.context.sid,opid:o,appid:a.context.appId,client_ts:Math.ceil(Date.now()/1e3),request_bodies:[{uri:22,buffer:{service_ids:[7,16],key:null!=t?t:a.context.key,cname:a.context.uid,uid:0,detail:wa({},void 0===P?{11:[D.CHINA,D.GLOBAL].join()}:{11:Array.from(P.CODES).map((function(e){return e===D.OVERSEA?"".concat(D.ASIA,",").concat(D.EUROPE,",").concat(D.AFRICA,",").concat(D.NORTH_AMERICA,",").concat(D.SOUTH_AMERICA,",").concat(D.OCEANIA):e})).join(",")})}}]},signal:r.signal}));case 3:case"end":return i.stop()}}),i)})))).pipe(Ja((function(t){return"AbortError"!==t.name&&(a.logError(t),a.warn("The AP server %s request failure",e,t)),yb})),fb(function(){var t=J(x.mark((function t(r){var i,o,s,u,c,l,f,h,p,d,v,b,g,y,m,E,w,_,O;return x.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=r.responseText,o=JSON.parse(i),a.log("The %s response is %o",n,o),(void 0===(s=o.response_body)||0===s.length||s.some((function(e){var t;return void 0===(null===(t=e.buffer)||void 0===t?void 0:t.code)||23!==e.uri})))&&Z(new da("cloud proxy response_body not valid",Bg)),0===(u=s.filter((function(e){return 0!==e.buffer.code}))).length){t.next=14;break}if(void 0===(c=u.find((function(e){return 128===e.buffer.flag})))){t.next=12;break}return t.abrupt("return",a.handleUniLbsError(c.buffer.code,e));case 12:return a.logError("cloud proxy error response"),t.abrupt("return",a.handleUniLbsError(u[0].buffer.code,e));case 14:for(l=[],f=0;f<s.length;f++)if(262144===(null==(d=s[f])||null===(h=d.buffer)||void 0===h?void 0:h.flag))null===(v=d.buffer)||void 0===v||null===(b=v.edges_services)||void 0===b||null===(g=b.forEach)||void 0===g||g.call(b,(function(e){Ln(e=e.ip)&&-1===a.context.cloudProxyServers.indexOf(e)&&(a.log("got cloud proxy server: %s",e),a.context.cloudProxyServers.push(e))}));else if(128===(null==d||null===(p=d.buffer)||void 0===p?void 0:p.flag)){for(w=function(e,t){var n=t[e];l.some((function(e){return e.ip===n.ip}))||l.push({ip:n.ip,ticket:d.buffer.cert})},_=0,O=d.buffer.edges_services;_<O.length;_++)w(_,O);a.context.rtmArea=null!==(y=null===(m=d.buffer)||void 0===m||null===(E=m.detail)||void 0===E?void 0:E[9])&&void 0!==y?y:""}return t.abrupt("return",eb.apply(void 0,G(l).concat([yg])));case 19:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),Ja((function(e){return ta(e)?Z(e):yb})),Qg(),zb((function(e){return void 0!==e&&"string"==typeof e.ip&&"string"==typeof e.ticket&&Ln(e.ip)})))})),m(n(a),"fetchAp",(function(e,t){var n=fj("AP-",a.loggerId);a.log("The AccessPoint requests %s(%s)",e,n);var r=new AbortController;return a.apFinish$.pipe(Pa(1)).subscribe((function(){return r.abort()})),hd(J(x.mark((function i(){var o;return x.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return o=Xg(0,Number.MAX_SAFE_INTEGER),a.log("%s request opid: %d",n,o),i.abrupt("return",He(e,{headers:{"X-Packet-Service-Type":"0","X-Packet-URI":"69","Content-Type":"application/json"},body:{flag:128,opid:o,key:t||a.context.key,cname:a.context.uid,detail:wa({},void 0===P?{11:[D.CHINA,D.GLOBAL].join()}:{11:Array.from(P.CODES).map((function(e){return e===D.OVERSEA?"".concat(D.ASIA,",").concat(D.EUROPE,",").concat(D.AFRICA,",").concat(D.NORTH_AMERICA,",").concat(D.SOUTH_AMERICA,",").concat(D.OCEANIA):e})).join(",")}),uid:0,sid:a.context.sid},signal:r.signal}));case 3:case"end":return i.stop()}}),i)})))).pipe(Ja((function(t){return"AbortError"!==t.name&&(a.logError(t),a.warn("The AP server %s request failure",e,t)),yb})),fb(function(){var t=J(x.mark((function t(r){var i,o,s,u,c,l,f,h;return x.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=r.responseText,o=JSON.parse(i),a.log("The %s response is %o",n,o),u=(s=o).code,c=s.addresses,l=s.detail,0===u){t.next=6;break}return t.abrupt("return",a.handleUniLbsError(u,e));case 6:if(f=c,Pd(null)&&(h=JSON.parse(null.replace(/-/g,".")),f=h.map((function(e){return{ip:e,ticket:f[0].ticket}}))),0!==f.length){t.next=11;break}return t.abrupt("return",Z(Error("No available edge address to connect")));case 11:return a.context.rtmArea=null==l?void 0:l[9],t.abrupt("return",eb.apply(void 0,G(f).concat([yg])));case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),Qg(),Ja((function(e){return ta(e)?Z(e):yb})),zb((function(e){return void 0!==e&&"string"==typeof e.ip&&"string"==typeof e.ticket})))})),a.context=e,a.getApEdgeInfoEndFirst$=function(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];return Kc(0,e||o?lc.RECONNECTING_AP_INTERVAL:2e3).pipe(Pa(1),ba((function(){a.retryCount+=1})),fb((function(){return a.context.config.enableCloudProxy||a.context.socketUseProxy?a.getProxyApUrl$(e||o):(4<=a.retryCount&&(a.retryCount=0),3>=a.retryCount?a.getApUrl$(e||o):a.getBackupApUrl$(e||o))})),fb((function(e){return a.context.config.enableCloudProxy||a.context.socketUseProxy?a.fetchCloudProxy(e):a.fetchAp(e)})),Ja((function(e){return e instanceof sb&&a.warn("AP request timeout"),Z(e)})),rn((function(e){return e.ip})),rb(a.apFinish$))},a.getApEdgeInfo$=function(e){return Kc(0,e||o?lc.RECONNECTING_AP_INTERVAL:2e3).pipe(Pa(8),ba((function(){a.retryCount+=1})),fb((function(){return a.context.config.enableCloudProxy||a.context.socketUseProxy?a.getProxyApUrl$(e||o):3>=a.retryCount?a.getApUrl$(e||o):a.getBackupApUrl$(e||o)})),fb((function(e){return(a.context.config.enableCloudProxy||a.context.socketUseProxy?a.fetchCloudProxy(e):a.fetchAp(e)).pipe()})),Ja((function(e){return e instanceof sb&&a.warn("AP request timeout"),Z(e)})),rn((function(e){return e.ip})),rb(a.apFinish$))},a}ja(t,e);var r=ka(t);return Ia(t,[{key:"clearUp",value:function(){this.failedAreas.clear(),this.retryCount=0}}]),t}(wb());m(at,"runOutOfUrlSymbol",Symbol("AP urls are used up"));var bt=ni(),ct=function(e){function t(e,i,o){X(this,t);var a=r.call(this,i,"Connection");m(n(a),"apClient",void 0),m(n(a),"lastOpenSockets",[new Ee(1),new Ee(1)]),m(n(a),"curOpenSockets",[void 0,void 0]),m(n(a),"ipIterator",0),m(n(a),"loginSocketOpenFailureCount",0),m(n(a),"firstEnv",.5<=Math.random()?1:0),m(n(a),"firstSocketOpener",void 0),m(n(a),"secondSocketOpener",void 0),m(n(a),"firstOpenKeeperSubject",new Ua),m(n(a),"secondOpenKeeperSubject",new Ua),m(n(a),"blacklistedIP",{}),m(n(a),"edgeInfoReplayed",void 0),m(n(a),"firstEnvOpenSocket",void 0),m(n(a),"firstOpenKeeperSub",void 0),m(n(a),"secondOpenKeeperSub",void 0),m(n(a),"context",void 0),m(n(a),"logger",void 0),a.context=e,a.logger=i,a.apClient=new at(a.context,i),a.apClient.apFinish$.subscribe((function(){a.log("Ap client fetch finished")}));var s,u=[];return a.edgeInfoReplayed=a.apClient.getApEdgeInfo$(o).pipe(Ce((function(e){return e.pipe(ba((function(e){if(ta(e))throw e})),jd(o?ie.getParameter("RECONNECTING_AP_INTERVAL"):900),rb(Kc(2e4)))})),zb((function(e){var t;return!Kl(u,e)&&1>=(null!==(t=a.blacklistedIP[e.ip])&&void 0!==t?t:0)})),Md((function(){return new bt({AP_NO_AVAILABLE_EDGE:"No available edge address to connect"})})),ba((function(e){u.push(e),a.log("An edge info got %o",e)})),ba({error:function(e){a.emit("connectionInitFailure",e)}}),Tg((function(){a.apClient.clearUp()})),vn()),a.firstEnvOpenSocket=a.edgeInfoReplayed.pipe(fb((function(e){if(void 0===e)return Z(Error("Invalid edge info"));var t=new Sl(e.ip,a.firstEnv,e.ticket,a.context,i,s);if(a.firstEnv=1===a.firstEnv?0:1,t.once("connectionFailure",(function(){return a.onSocketConnectionFailure(t)})),!o&&lc.ENABLE_EDGE_AUTO_FALLBACK&&!a.context.config.enableCloudProxy){var n,r=Date.now();t.on("reconnect",(function(){var e;a.loginSocketOpenFailureCount+=1,null!==(e=n)&&void 0!==e||(n=Date.now()-r),500>n&&1<a.loginSocketOpenFailureCount&&(a.context.socketUseProxy=!0)}))}return s=!t.useNewDomain,t.open$.pipe(If(t))})),ba((function(e){a.log("The websocket of ENV_%d opened to %s:%d",e.env,e.ip,rf[e.env]),a.curOpenSockets[e.env]=e,a.lastOpenSockets[e.env].next(e),a.firstEnv=e.env,a.openSecondSocket(e.env,e.ip,e.useNewDomain)})),Pa(1),De()),a.firstSocketOpener=a.firstEnvOpenSocket.pipe(fb((function(e){return e.open$.pipe(ba((function(){a.log("The websocket of first ENV_%d re-opened to %s:%d",e.env,e.ip,rf[e.env]),a.curOpenSockets[e.env]=e,a.lastOpenSockets[e.env].next(e)})))}))),e=a.firstOpenKeeperSubject.pipe(Lc(ed)),a.firstOpenKeeperSub=e.subscribe({error:a.logError}),a}ja(t,e);var r=ka(t);return Ia(t,[{key:"initConnection",value:function(){this.firstOpenKeeperSubject.next(this.firstSocketOpener)}},{key:"closeSocket",value:function(e,t){if(![0,1].includes(e))throw new Ha({INVALID_ENV:"The env argument is not 0 or 1"});var n=e===this.firstEnv?this.firstOpenKeeperSub:this.secondOpenKeeperSub;this.firstOpenKeeperSub=void 0;var r=this.curOpenSockets[e];this.curOpenSockets[e]=void 0,r&&(r.isActiveClose=!0,setTimeout((function(){r.close()}),t)),void 0!==n&&setTimeout((function(){null==n||n.unsubscribe()}),t)}},{key:"waitClosing",value:function(e){var t=this;return e.isActiveClose=!0,e.open$.pipe(nv(),Ja((function(e){return e.message===qs.normalClosureMessage?yb:Z(e)})),kb(5e3),Ja((function(n){return n instanceof sb?(t.warn("Force closing the ENV_%d connection",e.env),yb):Z(n)})))}},{key:"onSocketConnectionFailure",value:function(e){var t=[0,1].filter((function(t){return t!==e.env}))[0];(t=this.curOpenSockets[t])&&t.loggedIn?this.reopenSocketWithApRequest(e.env):this.emit("socketsFailure")}},{key:"openSecondSocket",value:function(e,t,n){var r=this,i=1===e?0:1;this.secondSocketOpener=this.edgeInfoReplayed.pipe(un((function(e,t){return[].concat(G(e),[t])}),[]),ea((function(e){return os(e,(function(e){return On(t,e.ip)})).slice(-1)[0]})),Pa(1),fb((function(e){if(void 0===e)return Z(Error("Invalid edge info"));var t=new Sl(e.ip,i,e.ticket,r.context,r.logger,n);return t.on("connectionFailure",(function(){return r.onSocketConnectionFailure(t)})),t.open$.pipe(ba((function(){r.lastOpenSockets[i].next(t),r.curOpenSockets[i]=t})))})),De()),this.secondOpenKeeperSub=this.secondOpenKeeperSubject.pipe(Lc(ed)).subscribe({error:this.logError}),this.secondOpenKeeperSubject.next(this.secondSocketOpener)}},{key:"reopenSocketWithApRequest",value:function(e){var t=this,n=[0,1].filter((function(t){return t!==e}))[0];if(void 0!==(n=this.curOpenSockets[n])){var r,i=n.ip;n=this.apClient.getApEdgeInfoEndFirst$(!0).pipe(Md((function(){return new bt({AP_NO_AVAILABLE_EDGE:"No available edge address to connect"})})),Ce((function(e){return e.pipe(ba((function(e){if(e.code===ii)t.emit("tokenExpired"),t.apClient.apFinish$.next(void 0);else if(ta(e))throw e})),jd(ie.getParameter("RECONNECTING_AP_INTERVAL")),rb(Kc(15e3)))})),ba((function(e){t.log("An edge info got %o",e)})),Tg((function(){t.apClient.clearUp()}))).pipe(un((function(e,t){return[].concat(G(e),[t])}),[]),ea((function(e){return(e=os(e,(function(e){return On(i,e.ip)}))).length-1>=t.ipIterator?e.slice(-t.ipIterator++-1)[0]:(t.ipIterator=0,e.slice(-1)[0])})),Md(),fb((function(n){if(void 0===n)return Z(Error("Invalid edge info"));var i=new Sl(n.ip,e,n.ticket,t.context,t.logger,r);return i.on("connectionFailure",(function(){return t.onSocketConnectionFailure(i)})),r=!i.useNewDomain,i.open$.pipe(If(i))})),ba((function(n){t.log("The websocket of ENV_%d re-opened to %s:%d using ap",n.env,n.ip,rf[n.env]),t.curOpenSockets[e]=n,t.lastOpenSockets[e].next(n)})),fb((function(n){return n.open$.pipe(ba((function(){t.log("The websocket of ENV_%d re-opened to %s:%d",n.env,n.ip,rf[n.env]),t.curOpenSockets[e]=n,t.lastOpenSockets[e].next(n)})))})),De()),e===this.firstEnv?this.firstOpenKeeperSubject.next(n):this.secondOpenKeeperSubject.next(n)}}}]),t}(wb()),cd=nc.Writer,oa=nc.util,Gc=nc.roots.default||(nc.roots.default={}),NE=Gc.Session=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.appId="",e.prototype.ver="",e.prototype.buildno=0,e.prototype.installId="",e.prototype.os=0,e.prototype.did="",e.prototype.index=null,e.prototype.token="",e.prototype.version=0,e.prototype.subVersion=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.appId&&Object.hasOwnProperty.call(e,"appId")&&t.uint32(42).string(e.appId),null!=e.ver&&Object.hasOwnProperty.call(e,"ver")&&t.uint32(50).string(e.ver),null!=e.buildno&&Object.hasOwnProperty.call(e,"buildno")&&t.uint32(56).int32(e.buildno),null!=e.installId&&Object.hasOwnProperty.call(e,"installId")&&t.uint32(66).string(e.installId),null!=e.os&&Object.hasOwnProperty.call(e,"os")&&t.uint32(128).int32(e.os),null!=e.did&&Object.hasOwnProperty.call(e,"did")&&t.uint32(138).string(e.did),null!=e.index&&Object.hasOwnProperty.call(e,"index")&&Gc.Session.CommonIndex.encode(e.index,t.uint32(162).fork()).ldelim(),null!=e.token&&Object.hasOwnProperty.call(e,"token")&&t.uint32(170).string(e.token),null!=e.version&&Object.hasOwnProperty.call(e,"version")&&t.uint32(176).int32(e.version),null!=e.subVersion&&Object.hasOwnProperty.call(e,"subVersion")&&t.uint32(184).int32(e.subVersion),t},e.CommonIndex=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.index1="",e.prototype.index2="",e.prototype.index3="",e.encode=function(e,t){return t||(t=cd.create()),null!=e.index1&&Object.hasOwnProperty.call(e,"index1")&&t.uint32(10).string(e.index1),null!=e.index2&&Object.hasOwnProperty.call(e,"index2")&&t.uint32(18).string(e.index2),null!=e.index3&&Object.hasOwnProperty.call(e,"index3")&&t.uint32(26).string(e.index3),t},e}(),e}(),OE=Gc.Link=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.ec=0,e.prototype.sc=0,e.prototype.destServerIp="",e.prototype.ackedServerIp="",e.prototype.responseTime=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.ec&&Object.hasOwnProperty.call(e,"ec")&&t.uint32(40).int32(e.ec),null!=e.sc&&Object.hasOwnProperty.call(e,"sc")&&t.uint32(48).int32(e.sc),null!=e.destServerIp&&Object.hasOwnProperty.call(e,"destServerIp")&&t.uint32(58).string(e.destServerIp),null!=e.ackedServerIp&&Object.hasOwnProperty.call(e,"ackedServerIp")&&t.uint32(66).string(e.ackedServerIp),null!=e.responseTime&&Object.hasOwnProperty.call(e,"responseTime")&&t.uint32(72).int32(e.responseTime),t},e}(),PE=Gc.Logout=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),t},e}(),QE=Gc.KickedOff=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.linkId=0,e.prototype.code=0,e.prototype.server="",e.prototype.serverCode=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.linkId&&Object.hasOwnProperty.call(e,"linkId")&&t.uint32(48).int32(e.linkId),null!=e.code&&Object.hasOwnProperty.call(e,"code")&&t.uint32(56).int32(e.code),null!=e.server&&Object.hasOwnProperty.call(e,"server")&&t.uint32(66).string(e.server),null!=e.serverCode&&Object.hasOwnProperty.call(e,"serverCode")&&t.uint32(72).int32(e.serverCode),t},e}(),RE=Gc.ChnJoin=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&Object.hasOwnProperty.call(e,"cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&Object.hasOwnProperty.call(e,"errCode")&&t.uint32(56).int32(e.errCode),t},e}(),SE=Gc.ChnJoinRes=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.prototype.serverErrCode=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&Object.hasOwnProperty.call(e,"cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&Object.hasOwnProperty.call(e,"errCode")&&t.uint32(56).int32(e.errCode),null!=e.serverErrCode&&Object.hasOwnProperty.call(e,"serverErrCode")&&t.uint32(64).int32(e.serverErrCode),t},e}(),TE=Gc.ChnLeave=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&Object.hasOwnProperty.call(e,"cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&Object.hasOwnProperty.call(e,"errCode")&&t.uint32(56).int32(e.errCode),t},e}(),UE=Gc.ConnectionStateChange=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.elapse=oa.Long?oa.Long.fromBits(0,0,!1):0,e.prototype.oldState=0,e.prototype.newState=0,e.prototype.reason=0,e.prototype.reconnId=0,e.encode=function(e,t){return t||(t=cd.create()),null!=e.sid&&Object.hasOwnProperty.call(e,"sid")&&t.uint32(10).string(e.sid),null!=e.userId&&Object.hasOwnProperty.call(e,"userId")&&t.uint32(18).string(e.userId),null!=e.lts&&Object.hasOwnProperty.call(e,"lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&Object.hasOwnProperty.call(e,"elapse")&&t.uint32(32).int64(e.elapse),null!=e.oldState&&Object.hasOwnProperty.call(e,"oldState")&&t.uint32(40).int32(e.oldState),null!=e.newState&&Object.hasOwnProperty.call(e,"newState")&&t.uint32(48).int32(e.newState),null!=e.reason&&Object.hasOwnProperty.call(e,"reason")&&t.uint32(56).int32(e.reason),null!=e.reconnId&&Object.hasOwnProperty.call(e,"reconnId")&&t.uint32(64).int32(e.reconnId),t},e}(),aw=Object.freeze({__proto__:null,Session:NE,Link:OE,Logout:PE,KickedOff:QE,ChnJoin:RE,ChnJoinRes:SE,ChnLeave:TE,ConnectionStateChange:UE,default:Gc}),bw=Object.freeze({__proto__:null,Counter:1,ApiExec:154,Session:164,ApEvent:165,Link:166,Logout:167,TxMessage:168,RxMessage:169,KickedOff:170,TxMessageRes:171,ChnJoin:172,ChnJoinRes:173,ChnLeave:174,ChnGetMembers:175,ChnGetMembersRes:176,ChnMemberJoined:177,ChnMemberLeft:178,QueryPeersOnlineStatus:179,QueryPeersOnlineStatusRes:180,RenewToken:181,OperateAttribute:186,OperateAttributeRes:187,ApRequest:188,LinkTcpEvent:189,LinkLoginRequest:190,ConnectionStateChange:191,default:{Counter:1,ApiExec:154,Session:164,ApEvent:165,Link:166,Logout:167,TxMessage:168,RxMessage:169,KickedOff:170,TxMessageRes:171,ChnJoin:172,ChnJoinRes:173,ChnLeave:174,ChnGetMembers:175,ChnGetMembersRes:176,ChnMemberJoined:177,ChnMemberLeft:178,QueryPeersOnlineStatus:179,QueryPeersOnlineStatusRes:180,RenewToken:181,OperateAttribute:186,OperateAttributeRes:187,ApRequest:188,LinkTcpEvent:189,LinkLoginRequest:190,ConnectionStateChange:191}}),VE=function(e){function t(e,i,o){return X(this,t),m(n(o=r.call(this,o,"Context")),"_token",void 0),m(n(o),"config",void 0),m(n(o),"_uid",void 0),m(n(o),"_sid",void 0),m(n(o),"_area","CN"),m(n(o),"_socketUseProxy",!1),m(n(o),"appId",void 0),m(n(o),"enableCloudProxy",!1),m(n(o),"cloudProxyServers",[]),o.appId=e,o.config=i,o}ja(t,e);var r=ka(t);return Ia(t,[{key:"socketUseProxy",get:function(){return this._socketUseProxy&&lc.ENABLE_EDGE_AUTO_FALLBACK},set:function(e){this.log("socketUseProxy is set to %s",e),this._socketUseProxy=e}},{key:"token",set:function(e){this._token="string"==typeof e&&e?e:void 0}},{key:"uid",get:function(){if("string"==typeof this._uid&&this._uid)return this._uid;throw new Ma("Cannot get illegal uid")},set:function(e){if(this.log("The user ID is set to %s",pa(e)),!Aa(e))throw new Ma;this._uid=e}},{key:"key",get:function(){if("string"==typeof this._token&&this._token)return this._token;if("string"==typeof this.appId&&this.appId)return this.appId;throw new Ma("Cannot get illegal key")}},{key:"sid",get:function(){if("string"==typeof this._sid&&this._sid)return this._sid;throw new Ma("Cannot get illegal sid")},set:function(e){if(this.log("sid is set to %s",e),"string"!=typeof e||!e)throw new Ma;this._sid=e}},{key:"rtmArea",get:function(){if("string"==typeof this._area&&this._area)return this._area;throw new Ma("Cannot get illegal area")},set:function(e){this.log("area is set to %s",e),"string"==typeof e&&e?this._area=e:this.warn("set area failed")}}]),t}(wb()),WE=!!Nc&&R((function(){Nc.prototype.finally.call({then:function(){}},(function(){}))}));if(M({target:"Promise",proto:!0,real:!0,forced:WE},{finally:function(e){var t=od(this,Rb("Promise")),n="function"==typeof e;return this.then(n?function(n){return bk(t,e()).then((function(){return n}))}:e,n?function(n){return bk(t,e()).then((function(){throw n}))}:e)}}),"function"==typeof Nc){var dt=Rb("Promise").prototype.finally;Nc.prototype.finally!==dt&&Ea(Nc.prototype,"finally",dt,{unsafe:!0})}var XE=function(){var e=J(x.mark((function e(t){return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=Uint8Array,e.next=3,crypto.subtle.digest("SHA-256",t);case 3:return e.t1=e.sent,e.abrupt("return",new e.t0(e.t1));case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),et=function(e){return Array.from(e).map((function(e){return e.toString(16).padStart(2,"0")})).join("")},YE=function(e){if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(0!=e.length%2)throw new RangeError("Expected string to be an even number of characters");for(var t=new Uint8Array(e.length/2),n=0;n<e.length;n+=2)t[n/2]=parseInt(e.substring(n,n+2),16);return t},ft=function(e){return btoa(String.fromCharCode.apply(String,G(e))).replace(/={1,2}$/,"")},gt=function(){var e=J(x.mark((function e(t){var n;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,crypto.subtle.digest("SHA-1",t);case 3:n=e.sent,e.next=9;break;case 6:e.prev=6,e.t0=e.catch(0),n=sha1.arrayBuffer(t);case 9:return e.abrupt("return",ft(new Uint8Array(n)));case 10:case"end":return e.stop()}}),e,null,[[0,6]])})));return function(t){return e.apply(this,arguments)}}(),ht=function(e,t,n,r){r[t]=!0,n.has(e)?n.get(e).add(t):n.set(e,new Set([t]))},ZE=function(e){switch(e){case"89504E47":return"image/png";case"47494638":return"image/gif";case"25504446":return"application/pdf";case"FFD8FFDB":case"FFD8FFE0":case"FFD8FFE1":return"image/jpeg";case"504B0304":return"application/zip";default:return"application/octet-stream"}},it=function(e){function t(e,i,o,a){X(this,t);var s=r.call(this,o,"ChunkDownloadManager");if(m(n(s),"abortController",new AbortController),m(n(s),"downloadedSize",0),m(n(s),"successCount",0),m(n(s),"timer",void 0),m(n(s),"chunks",[]),m(n(s),"retUnit",void 0),m(n(s),"singleThread",!1),m(n(s),"initialized",!1),m(n(s),"ee",void 0),m(n(s),"chunkCount",void 0),m(n(s),"aborted",!1),m(n(s),"serverToIndices",new Map),m(n(s),"backupToIndices",new Map),m(n(s),"indexToBackupServers",[]),m(n(s),"busyBackupServers",new Map),m(n(s),"downloadingChunks",new Set),m(n(s),"metaInfo",void 0),m(n(s),"transHandler",void 0),s.metaInfo=e,s.transHandler=i,s.ee=void 0===a?new ia:a,o=e.size,e=e.unit,0===o)throw new Ma("size cannot be 0");return void 0!==i.cancelSignal&&i.cancelSignal.addEventListener("abort",(function(){s.abortController.abort()}),{once:!0}),s.abortController.signal.addEventListener("abort",(function(){s.aborted=!0}),{once:!0}),s.chunkCount=Math.ceil(o/(32768*e)),s}ja(t,e);var r=ka(t);return Ia(t,[{key:"setInfoByResponse",value:function(e){var t=this,n=e.serverList,r=e.backupList;if(e=e.unit,n.length<this.chunkCount&&r.length<this.chunkCount)throw new Ma("servers is not enough");this.updateProgress(0),this.initialized=!0;var i=Array(this.chunkCount).fill(!1);if(n.forEach((function(e,n){return e.forEach((function(e){return ht(e,n,t.serverToIndices,i)}))})),r.forEach((function(e,n){return e.forEach((function(e){return ht(e,n,t.backupToIndices,i)}))})),i.some((function(){return!1})))throw new da("Not enough servers to download",Eg);this.indexToBackupServers=r.map((function(e){return new Set(e)})),this.retUnit=e}},{key:"downloadChunks",value:function(){this.aborted?this.warn("downloadChunks after abort, ignored"):1===this.serverToIndices.size&&0===Array.from(this.serverToIndices.keys())[0]?this.serversDownload(this.backupToIndices):1<=this.serverToIndices.size?this.serversDownload(this.serverToIndices,!0):this.ee.emit("error",new da("not enough servers to download",Eg))}},{key:"updateProgress",value:function(e){var t=this,n=this.downloadedSize+e;this.downloadedSize>this.metaInfo.size?(this.warn("Invalid download size, overflowed"),this.ee.emit("error",new bd("Invalid download size",Eg))):(this.downloadedSize=n,void 0!==this.timer&&0!==e&&(clearTimeout(this.timer),this.timer=void 0),void 0===this.timer&&this.successCount!==this.chunkCount&&(this.timer=setTimeout((function(){t.ee.emit("timedOut"),t.abortController.abort()}),12e4)),this.initialized&&0===e||void 0===this.transHandler.onOperationProgress||this.transHandler.onOperationProgress({totalSize:this.metaInfo.size,currentSize:this.downloadedSize}))}},{key:"getPayload",value:function(){for(var e=0,t=0,n=this.chunks;t<n.length;t++)e+=n[t].byteLength;if(e!==this.metaInfo.size)throw new Ma("invalid chunks total size");e=new Uint8Array(e),n=t=0;for(var r=this.chunks;n<r.length;n++){var i=r[n];e.set(new Uint8Array(i),t),t+=i.byteLength}return t=Array.from(e.subarray(0,4)).map((function(e){return e.toString(16)})).join("").toUpperCase(),Uv(e.buffer,ZE(t))}},{key:"getDownloadUrl",value:function(e){var t=this.metaInfo.useNewDomain?"sd-rtn.com":"agora.io";return"https://".concat($g(e).split(".").join("-"),".edge.").concat(Pd(null)?null:t,":9601/api/v1/chuck/download")}},{key:"serversDownload",value:function(){var e=J(x.mark((function e(t){var n,r=this,i=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=1<i.length&&void 0!==i[1]&&i[1],e.next=3,Promise.all(Array.from(t.entries()).map((function(e){return e=ua(e,2),r.postDownloadRequest(e[0],Array.from(e[1]),n).catch((function(e){404===e.statusCode?(r.ee.emit("notExist"),r.abortController.abort()):"AbortError"!==e.name&&(Xa(e)?r.singleThread?(r.abortController.abort(),r.ee.emit("timedOut")):(r.warn("%d download timed out after %d, retrying use single thread",e.index,r.singleThread?6e4:3e4),r.abortController.abort(),r.singleThread=!0,r.ee.emit("multiTimeOut")):(r.ee.emit("error",e),r.abortController.abort()))}))})));case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},{key:"postDownloadRequest",value:function(){var e=J(x.mark((function e(t,n,r){var i,o,a,s,u,c,l,f,h,p=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(h=function(){return(h=J(x.mark((function e(o){var a,h,p,d,v,b,g,y,m;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,void 0!==o||0!==t){e.next=5;break}throw new Ma("Invalid serverIp");case 5:a=void 0===o?l.getDownloadUrl(t):o;case 6:return l.downloadingChunks.add(i),e.next=9,c(a);case 9:return h=e.sent,p=h.responseData,l.downloadingChunks.delete(i),e.abrupt("return",p);case 15:if(e.prev=15,e.t0=e.catch(0),l.downloadingChunks.delete(i),n.unshift(i),l.metaInfo.useNewDomain=!1,"AbortError"!==e.t0.name){e.next=22;break}throw e.t0;case 22:if(!Xa(e.t0)){e.next=25;break}throw e.t0.index=i,e.t0;case 25:if(d=s,s+=1,!(2>d)){e.next=30;break}return e.t0 instanceof Ma||l.warn("%o, %d download failed, retrying",e.t0,i),e.abrupt("return",f());case 30:if(504!==e.t0.statusCode){e.next=34;break}throw(v=new gb("download server timed out",{originalError:e.t0,serverCode:504})).index=i,v;case 34:if(!r||2!==d||0===u[0]){e.next=45;break}return e.t0 instanceof Ma||l.warn("%d download failed, using backup: %d, %o",i,u[0],e.t0),e.next=38,l.busyBackupServers.get(u[0]);case 38:return b=f(l.getDownloadUrl(u[0])),l.busyBackupServers.set(u[0],b),e.next=42,b;case 42:return g=e.sent,l.busyBackupServers.delete(u[0]),e.abrupt("return",g);case 45:if(!(r&&2<d&&void 0!==u[1]&&0!==u[1])){e.next=56;break}return l.warn("%d download failed, using backup 1: %d",i,u[1]),e.next=49,l.busyBackupServers.get(u[1]);case 49:return y=f(l.getDownloadUrl(u[1])),l.busyBackupServers.set(u[1],y),e.next=53,y;case 53:return m=e.sent,l.busyBackupServers.delete(u[1]),e.abrupt("return",m);case 56:throw e.t0.index=i,e.t0;case 58:case"end":return e.stop()}}),e,null,[[0,15]])})))).apply(this,arguments)},f=function(e){return h.apply(this,arguments)},!this.aborted){e.next=4;break}throw new Ma("download already aborted");case 4:if(void 0!==(i=n.shift())){e.next=8;break}return this.log("%s download finished",t),e.abrupt("return");case 8:if(!(this.singleThread&&0<this.downloadingChunks.size)){e.next=10;break}return e.abrupt("return");case 10:if(!this.downloadingChunks.has(i)){e.next=13;break}return this.log("%s already downloading, return",i),e.abrupt("return");case 13:if(void 0===this.chunks[i]){e.next=19;break}return this.successCount===this.chunkCount&&(this.log("chunks all download"),this.ee.emit("finished")),this.log("%s already downloaded, do next",i),e.next=18,this.postDownloadRequest(t,n,r);case 18:return e.abrupt("return");case 19:return o=new FormData,a={hash:cw(this.metaInfo.hashHexStr),unit:void 0===this.retUnit?this.metaInfo.unit:this.retUnit,instance:this.metaInfo.instance,loginOpt:this.metaInfo.loginOpt,ticket:this.metaInfo.ticket,index:i},o.append("parameter",JSON.stringify(a)),s=0,u=Array.from(this.indexToBackupServers[i]),c=function(e){return He(e,{body:o,signal:p.abortController.signal,timeout:p.singleThread?12e4:3e4},{useBinaryResponse:!0})},l=this,e.next=28,f().then((function(e){return void 0!==p.chunks[i]?p.log("chunk %d download duplicated",i):(p.chunks[i]=e,p.log("chunk %d downloaded",i),p.successCount+=1,p.updateProgress(p.chunks[i].byteLength)),p.successCount===p.chunkCount&&(p.log("chunks all download"),p.ee.emit("finished")),p.singleThread?(p.downloadChunks(),Promise.resolve()):p.postDownloadRequest(t,n,r)}));case 28:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}()}]),t}(wb()),jt=function(e){function t(e,i,o,a){X(this,t);var s=r.call(this,o,"ChunkUploadManager");if(m(n(s),"chunkCount",0),m(n(s),"chunks",[]),m(n(s),"uploadedChunks",[]),m(n(s),"totalFailures",0),m(n(s),"timer",void 0),m(n(s),"initState","uninitialized"),m(n(s),"ee",void 0),m(n(s),"unit",0),m(n(s),"uploadedSize",0),m(n(s),"singleThread",!1),m(n(s),"abortController",new AbortController),m(n(s),"servers",[]),m(n(s),"aborted",!1),m(n(s),"metaInfo",void 0),m(n(s),"transHandler",void 0),s.metaInfo=e,s.transHandler=i,s.ee=void 0===a?new ia:a,0===e.file.length)throw new H("file not found or is empty",Of);return void 0!==i.cancelSignal&&i.cancelSignal.addEventListener("abort",(function(){s.abortController.abort()}),{once:!0}),s.abortController.signal.addEventListener("abort",(function(){s.aborted=!0}),{once:!0}),s}ja(t,e);var r=ka(t);return Ia(t,[{key:"initChunks",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("initialized"!==this.initState&&"initializing"!==this.initState){e.next=2;break}throw new Ma("cannot re-initialize");case 2:for(this.initState="initializing",this.unit=t,n=this.sliceFile(t,this.metaInfo.file),this.chunkCount=n.length,r=[],i=function(e,t){var n=(e=ua(t[e],2))[0],i=e[1];e=gt(i).then((function(e){s.chunks[n]={payload:i,sha1:e,uploadedTo:void 0,index:n,processed:!1}})),r.push(e)},o=0,a=Array.from(n.entries());o<a.length;o++)i(o,a);return e.next=11,Promise.all(r);case 11:this.updateProgress(0),this.initState="initialized",this.log("upload chunks initialized");case 14:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"uploadToServers",value:function(){var e=this;if(!this.aborted){for(var t=this.chunks.filter((function(e){return!e.processed})),n=function(n){var r=t[n],i=e.servers.filter((function(e){return!e.isUploading})).sort((function(e,t){return e.successCount-t.successCount})).sort((function(e,t){return e.failureCount-t.failureCount}))[0];if(void 0===i||1<i.failureCount)return e.log("Upload server not available, waiting"),e.ee.emit("serverUsedUp"),gj(1e3).then((function(){e.totalFailures>2*e.chunkCount&&e.ee.emit("error"),e.totalFailures+=1,void 0!==i&&(i.failureCount=0),e.uploadToServers()})).catch((function(){})),"break";r.processed=!0,i.isUploading=!0,e.log("uploading chunk %d to server %s",r.index,$g(i.ip));var o=e.getUploadUrl(i.ip);return J(x.mark((function t(){var n;return x.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,e.postChunk(r.payload,o,r.index);case 3:n=e.chunks.findIndex((function(e){return e===r})),r.uploadedTo=i.ip,e.chunks.splice(n,1),e.uploadedChunks.push(r),i.successCount+=1,i.isUploading=!1,e.updateProgress(r.payload.byteLength),e.log("upload chunk %d successfully",r.index),t.next=31;break;case 13:if(t.prev=13,t.t0=t.catch(0),i.isUploading=!1,r.processed=!1,504!==t.t0.statusCode&&!Xa(t.t0)){t.next=27;break}if(e.singleThread){t.next=24;break}return e.warn("%d upload timed out after %d, retrying use single thread",r.index,e.singleThread?12e4:3e4),e.abortController.abort(),e.singleThread=!0,e.ee.emit("multiTimeOut"),t.abrupt("return");case 24:return e.ee.emit("timedOut"),e.abortController.abort(),t.abrupt("return");case 27:return e.metaInfo.useNewDomain=!1,i.failureCount+=1,t.next=31,gj(1e3);case 31:e.uploadedChunks.length===e.chunkCount?(e.log("chunks uploaded"),e.ee.emit("finished")):(e.singleThread||1===e.chunks.filter((function(e){return!e.processed})).length)&&e.uploadToServers();case 32:case"end":return t.stop()}}),t,null,[[0,13]])})))(),e.singleThread?"break":void 0},r=0;r<t.length&&"break"!==n(r);r++);0===t.length&&this.uploadedChunks.length!==this.chunkCount&&this.log("%d chunks left uploading",this.chunkCount-this.uploadedChunks.length)}}},{key:"getUploadServerIPs",value:function(){var e=!0,t=[],n=G(this.uploadedChunks).sort((function(e,t){return e.index-t.index})),r=0;for(n=Array.from(n.values());r<n.length;r++){var i=n[r].uploadedTo;if(void 0===i){e=!1;break}t.push(i)}if(!e)throw new Ma("some chunks not uploaded, cannot get upload server ips");return t}},{key:"addServers",value:function(e){var t=this;e.forEach((function(e){var n=t.servers.findIndex((function(t){return t.ip===e}));-1!==n?t.servers[n].failureCount=0:(t.log("server %s added",$g(e)),t.servers.push({successCount:0,isUploading:!1,ip:e,failureCount:0}))}))}},{key:"updateProgress",value:function(e){var t=this,n=void 0!==e?this.uploadedSize+e:this.metaInfo.file.length;n>this.metaInfo.file.length?(this.warn("Invalid upload size, overflowed"),this.ee.emit("error",new bd("Invalid upload size",Dg))):(this.uploadedSize=n,void 0!==this.timer&&0!==e&&(clearTimeout(this.timer),this.timer=void 0),void 0===this.timer&&void 0!==e&&this.uploadedChunks.length!==this.chunkCount&&(this.timer=setTimeout((function(){t.ee.emit("timedOut"),t.abortController.abort()}),12e4)),"initialized"===this.initState&&0===e||void 0===this.transHandler.onOperationProgress||this.transHandler.onOperationProgress({totalSize:this.metaInfo.file.length,currentSize:this.uploadedSize}))}},{key:"sliceFile",value:function(e,t){var n=0,r=[],i=t.length;for(e*=32768;n<i;)r.push(t.slice(n,n+e)),n+=e;return this.log("chunks split into %d",r.length),r}},{key:"postChunk",value:function(){var e=J(x.mark((function e(t,n,r){var i,o,a,s,u,c,l,f;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.aborted){e.next=2;break}throw new Ma("upload already aborted");case 2:if(void 0!==this.unit){e.next=4;break}throw new Ma("unit is undefined");case 4:return i=this.metaInfo,o=i.ticket,a=i.instance,s=i.loginOpt,u=i.hashStr,e.t0=r,e.t1=u,e.next=9,gt(t);case 9:return e.t2=e.sent,e.t3=this.unit,e.t4=o,e.t5=a,e.t6=s,c={index:e.t0,hash:e.t1,sha1:e.t2,unit:e.t3,ticket:e.t4,instance:e.t5,loginOpt:e.t6},(l=new FormData).append("parameter",JSON.stringify(c)),l.append("payload",new Blob([t])),e.next=20,He(n,{headers:{Accept:"application/json"},body:l,timeout:this.singleThread?12e4:3e4,signal:this.abortController.signal});case 20:if(f=e.sent,201===f.status){e.next=24;break}throw new da("uploading chunk ".concat(r," failed"));case 24:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}()},{key:"getUploadUrl",value:function(e){var t=this.metaInfo.useNewDomain?"sd-rtn.com":"agora.io";return"https://".concat($g(e).split(".").join("-"),".edge.").concat(Pd(null)?null:t,":9601/api/v1/chuck/upload")}}]),t}(wb()),kt=function(e){function t(e){X(this,t);var i=r.call(this,e,"MediaTaskManager");return m(n(i),"isProcessing",!1),m(n(i),"authInfo",void 0),m(n(i),"taskFinishers",{}),m(n(i),"mediaTasks",new Map),m(n(i),"ongoingTask",void 0),i.on("connectionStateChanged",(function(e){if(e===S.ConnectionState.ABORTED||e===S.ConnectionState.DISCONNECTED){void 0!==i.ongoingTask&&i.cancelTask(i.ongoingTask),e=0;for(var t=Array.from(i.mediaTasks.entries());e<t.length;e++){var n=ua(t[e],2)[1];i.cancelTask(n)}i.mediaTasks.clear(),i.taskFinishers={}}else e===S.ConnectionState.RECONNECTING?void 0!==i.ongoingTask&&i.ongoingTask.manager.abortController.abort():e===S.ConnectionState.CONNECTED&&void 0!==i.ongoingTask&&i.ongoingTask.manager.ee.emit("reconnected")})),i}ja(t,e);var r=ka(t);return Ia(t,[{key:"setAuthInfo",value:function(e){this.authInfo=e}},{key:"waitMediaTask",value:function(e){var t=this;return new Promise((function(n,r){t.taskFinishers[e]={resolve:n,reject:r},t.isProcessing||t.processMediaTask()})).finally((function(){void 0!==t.ongoingTask&&void 0!==t.ongoingTask.manager.timer&&clearTimeout(t.ongoingTask.manager.timer),delete t.taskFinishers[e],0!==t.mediaTasks.size?t.processMediaTask():t.isProcessing=!1}))}},{key:"addUploadTask",value:function(e,n,r,i){var o=e.file;if(e=e.hash,void 0===this.authInfo)throw new Ma("session not found");if(this.mediaTasks.size>=t.MAX_PENDING_TASK_COUNT-1)throw new lb("Upload media failed, exceed max pending jobs",tC);return i=new jt({hashStr:ft(e),file:o,ticket:this.authInfo.ticket,instance:this.authInfo.instance.toString(),loginOpt:this.authInfo.loginOpt.toString(),useNewDomain:this.authInfo.useNewDomain},i,this.logger),o=de(),this.mediaTasks.set(o,{type:"UPLOAD",manager:i,hash:e,setter:r,fetcher:n,taskId:o}),o}},{key:"addDownloadTask",value:function(e,n,r){var i=e.hashHexStr,o=e.size,a=e.unit;if(e=e.zone,void 0===this.authInfo)throw new Ma("session not found");if(this.mediaTasks.size>=t.MAX_PENDING_TASK_COUNT-1)throw new lb("Download media failed, exceed max pending jobs",xC);return r=new it({hashHexStr:i,ticket:this.authInfo.ticket,useNewDomain:this.authInfo.useNewDomain,instance:this.authInfo.instance.toString(),loginOpt:this.authInfo.loginOpt.toString(),size:o,zone:e,unit:a},r,this.logger),i=de(),this.mediaTasks.set(i,{type:"DOWNLOAD",manager:r,fetcher:n,taskId:i}),i}},{key:"doDownloadTaskImpl",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l,f=this,h=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=2<h.length&&void 0!==h[2]&&h[2],o=i=t.manager,r&&(i=new it(o.metaInfo,o.transHandler,this.logger,o.ee)),a=t.fetcher,e.next=7,a();case 7:if(s=e.sent,u=s.serverList,c=s.backupList,l=s.unit,!r||l===o.retUnit){e.next=13;break}throw new da("download unit is different, reject to continue",Eg);case 13:r&&(t.manager=i,i.downloadedSize=o.downloadedSize,i.successCount=o.successCount,i.timer=o.timer,i.chunks=o.chunks,i.initialized=o.initialized,i.singleThread=o.singleThread,i.updateProgress(0)),i.ee.once("reconnected",(function(){i.ee.removeAllListeners(),f.doDownloadTaskImpl(t,n,!0).catch((function(e){n.reject(e)}))})),i.ee.once("multiTimeOut",(function(){i.ee.removeAllListeners(),f.doDownloadTaskImpl(t,n,!0).catch((function(e){n.reject(e)}))})),i.ee.once("error",(function(e){i.ee.removeAllListeners(),n.reject(new da(["download file file, index %d",e.index],{code:Eg,originalError:e}))})),i.ee.once("notExist",(function(){i.abortController.abort(),i.ee.removeAllListeners(),n.reject(new da("download file not found",wC))})),i.ee.once("timedOut",(function(){i.ee.removeAllListeners(),i.abortController.abort(),n.reject(new gb("download timed out",vC))})),void 0!==i.transHandler.cancelSignal&&i.transHandler.cancelSignal.addEventListener("abort",(function(){n.reject(new Ol("Downloading canceled",ms))}),{once:!0}),i.ee.once("finished",(function(){n.resolve({type:"DOWNLOAD",payload:i.getPayload()})})),i.setInfoByResponse({serverList:u,backupList:c,unit:l}),i.downloadChunks();case 23:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"doDownloadTask",value:function(e,t){var n=this,r=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=e.taskId;return r||(this.mediaTasks.delete(i),this.ongoingTask=e),new Promise((function(i,o){n.doDownloadTaskImpl(e,t,r).then(i).catch(o)}))}},{key:"doUploadTaskImpl",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l,f,h=this,p=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=2<p.length&&void 0!==p[2]&&p[2],o=i=t.manager,r&&(i=new jt(o.metaInfo,o.transHandler,this.logger,o.ee)),a=t.fetcher,s=new Ua,c=new Promise((function(e,c){var l=a(),f=l.ret,h=l.err,p=l.timeout;l.fin.pipe(rb(s)).subscribe({next:function(e){n.resolve({type:"UPLOAD",retUnit:e.unit,zone:e.zone})},complete:function(){e({hasExist:!0}),s.next(),s.complete()}}),f.pipe(rb(s),fb(function(){var e=J(x.mark((function e(a){var s,c;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=a.servers,c=a.unit,r&&o.unit!==c?n.reject(new da("upload unit is different, reject to continue",Dg)):r&&(t.manager=i,i.chunkCount=o.chunkCount,i.chunks=o.chunks,i.totalFailures=o.totalFailures,i.uploadedChunks=o.uploadedChunks,i.timer=o.timer,i.initState=o.initState,i.unit=o.unit,i.uploadedSize=o.uploadedSize,i.singleThread=o.singleThread,i.updateProgress(0)),i.addServers(s),"uninitialized"!==i.initState){e.next=7;break}return u=i.initChunks(c),e.next=7,u;case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())).subscribe({complete:function(){return e({hasExist:!1})},error:c}),l=function(t){"uninitialized"!==i.initState&&u?e(u.then((function(){return{hasExist:!1}}))):c(t)},h.pipe(rb(s)).subscribe({error:l}),p.pipe(rb(s)).subscribe({error:l})})),e.next=9,c;case 9:if(l=e.sent,!l.hasExist){e.next=15;break}return i.updateProgress(),this.log("file already exists, skipping upload"),e.abrupt("return");case 15:s.next(),s.complete(),this.log("chunks initialization promise resolved"),f=jb(i.ee,"serverUsedUp").pipe(Av((function(){return i.chunkCount!==i.uploadedChunks.length})),Dv(5e3,void 0,{leading:!1}),sn((function(){return a().ret}))).subscribe((function(e){i.addServers(e.servers)})),i.ee.once("reconnected",(function(){i.ee.removeAllListeners(),h.doUploadTask(t,n,!0).catch((function(e){n.reject(e)}))})),i.ee.once("multiTimeOut",(function(){i.ee.removeAllListeners(),h.doUploadTask(t,n,!0).catch((function(e){n.reject(e)}))})),i.ee.once("timedOut",(function(){f.unsubscribe(),i.ee.removeAllListeners(),i.abortController.abort(),n.reject(new gb("upload timed out",ji))})),i.ee.once("error",(function(e){f.unsubscribe(),i.ee.removeAllListeners(),i.abortController.abort(),n.reject(e||new da("upload error",Dg))})),void 0!==i.transHandler.cancelSignal&&i.transHandler.cancelSignal.addEventListener("abort",(function(){n.reject(new Ol("Uploading canceled",ls))}),{once:!0}),i.ee.once("finished",J(x.mark((function e(){var r,o,a;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return f.unsubscribe(),e.next=3,t.setter(i.unit,i.getUploadServerIPs());case 3:r=e.sent,o=r.zone,a=r.unit,i.ee.removeAllListeners(),n.resolve({type:"UPLOAD",retUnit:a,zone:o});case 8:case"end":return e.stop()}}),e)})))),i.uploadToServers();case 26:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"doUploadTask",value:function(e,t){var n=this,r=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=e.taskId;return r||(this.mediaTasks.delete(i),this.ongoingTask=e),new Promise((function(i,o){n.doUploadTaskImpl(e,t,r).then(i).catch(o)}))}},{key:"processMediaTask",value:function(){var e=J(x.mark((function e(){var t,n,r;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==this.mediaTasks.size){e.next=2;break}throw Error("no upload tasks");case 2:if(this.isProcessing=!0,t=this.mediaTasks.keys().next().value,void 0!==(n=this.taskFinishers[t])){e.next=7;break}throw Error("top task not found");case 7:if(void 0!==(r=this.mediaTasks.get(t))){e.next=10;break}throw new Ma("task invalid");case 10:if("UPLOAD"!==r.type){e.next=15;break}return e.next=13,this.doUploadTask(r,n).catch((function(e){r.manager.ee.removeAllListeners(),n.reject(e)}));case 13:e.next=18;break;case 15:if("DOWNLOAD"!==r.type){e.next=18;break}return e.next=18,this.doDownloadTask(r,n).catch((function(e){r.manager.ee.removeAllListeners(),n.reject(e)}));case 18:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"cancelTask",value:function(e){var t="DOWNLOAD"===e.type?ms:ls;e.manager.ee.removeAllListeners(),e.manager.abortController.abort(),void 0!==this.taskFinishers[e.taskId]&&this.taskFinishers[e.taskId].reject(new Ol("User logged out or kicked off, media task canceled",t))}}]),t}(wb());m(kt,"MAX_PENDING_TASK_COUNT",9),Up("of",(function(){for(var e=0,t=arguments.length,n=new(cf(this))(t);t>e;)n[e]=arguments[e++];return n}),nk);var lt=1/0,$E=Math.max,ew=function(e,t,n){var r=Object(e);if(!Nd(e)){var i=jf(t);e=Jd(e),t=function(e){return i(r[e],e,r)}}return-1<(t=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;if(null==n)n=0;else{var i=(n=n?(n=Nl(n))===lt||n===-lt?17976931348623157e292*(0>n?-1:1):n==n?n:0:0===n?n:0)%1;n=n==n?i?n-i:n:0}return 0>n&&(n=$E(r+n,0)),ar(e,jf(t),n)}(e,t,n))?r[i?e[t]:t]:void 0},dw=function(e,t){return e&&e.length?bl(e,void 0,"function"==typeof t?t:void 0):[]},mt=function(){function e(){X(this,e),m(this,"size",0),m(this,"fields",new Map)}return Ia(e,[{key:"define",value:function(e,t,n){if(this.size+=n,64<this.size)throw new RangeError("the struct over 64 bits is not supported");jh(t={val:0,isNumber:"number"===t,isBoolean:"boolean"===t,oneof:"number"===t||"boolean"===t?void 0:t,len:n}),this.fields.set(e,t)}},{key:"set",value:function(e,t){if(!(e=this.fields.get(e)))throw Error("field not found");var n=e.oneof;if(!U.isLong(t)&&"number"!=typeof t)if("boolean"==typeof t)t=t?1:0;else{if(void 0===n)throw Error("invalid field type");if(void 0===(t=n[t]))throw Error("field type not found")}jh(e,t),e.val=t}},{key:"toNumber",value:function(){for(var e=0,t=0,n=0,r=Array.from(this.fields);n<r.length;n++){var i=ua(r[n],2)[1],o=i.len;void 0!==(i=i.val)&&(e+=U.fromValue(i).shiftLeft(t).toNumber(),t+=o)}return e}},{key:"toLong",value:function(){for(var e=U.fromNumber(0,!0),t=0,n=0,r=Array.from(this.fields);n<r.length;n++){var i=ua(r[n],2)[1],o=i.len;void 0!==(i=i.val)&&(e=U.fromValue(i).shiftLeft(t).add(e),t+=o)}return e}},{key:"assert",value:function(e,t){function n(e){if(!U.isLong(e)&&"number"!=typeof e)if("boolean"==typeof e)e=e?1:0;else{if(void 0===i)throw Error("invalid field type");if(void 0===(e=i[e]))throw Error("field type not found")}return jh(r,e),ih(e,r.val)}var r=this.fields.get(e);if(!r)throw Error("field not found");var i=r.oneof;if(!Array.isArray(t))return n(t);if(1===t.length)return n(t[0]);if(t.every((function(e){return"string"==typeof e}))&&void 0!==i)return t.some((function(e){return n(e)}));throw Error("invalid valueTypes")}},{key:"from",value:function(e){e=U.fromValue(e);for(var t=0,n=0,r=Array.from(this.fields);n<r.length;n++){var i=ua(r[n],2)[1],o=i.len,a=U.fromNumber(Math.pow(2,o)-1,!0).shiftLeft(t);jh(i,a=e.and(a).shiftRightUnsigned(t)),i.val=a,t+=o}}},{key:"typeOf",value:function(e){if(void 0!==(e=this.fields.get(e))){var t=e.oneof;if(e=e.val,void 0!==t){var n=0;for(t=Object.entries(t);n<t.length;n++){var r=ua(t[n],2),i=r[0];if(ih(e,r[1]))return i}}}throw new TypeError("can only get type of oneof type")}}]),e}(),nt=function(e){function t(e){X(this,t);var r=n.call(this);return r.define("Rejoin","boolean",1),r.define("Unused","number",31),r.define("Platform","number",8),r.define("Version","number",12),r.define("Subversion","number",12),r.set("Platform",7),r.set("Version",4),r.set("Subversion",15),r.set("Rejoin",e),r}ja(t,e);var n=ka(t);return t}(mt),aF=wa(wa(wa(wa({},{PeerTextMessage:0,ChannelTextMessage:1,VendorTextMessage:2}),{PeerRawMessage:3,ChannelRawMessage:4,VendorRawMessage:5}),{PeerImageMessage:6,ChannelImageMessage:7,VendorImageMessage:8}),{PeerFileMessage:15,ChannelFileMessage:16,VendorFileMessage:17}),ot={CallInvite:101,CallAccept:102,CallReject:103,CallCancel:104},bF=wa(wa({},aF),ot),cF={Uncompressed:0,Zlib:1},ke=function(e){function t(e){X(this,t);var r=n.call(this);if(r.define("MessageType",bF,8),r.define("BroadcastJumps","number",2),r.define("ToCache","boolean",1),r.define("FromCache","boolean",1),r.define("CompressionMethod",cF,2),r.define("IterationNumber","number",4),r.define("BufferedMessage","boolean",1),r.define("ToArchive","boolean",1),r.define("FromArchive","boolean",1),"number"==typeof e||U.isLong(e))r.from(e);else if(void 0!==e){var i=0;for(e=eh(e);i<e.length;i++){var o=ua(e[i],2);r.set(o[0],o[1])}}return r}ja(t,e);var n=ka(t);return Ia(t,[{key:"isTextMessage",value:function(){return this.assert("MessageType",["PeerTextMessage","ChannelTextMessage","VendorTextMessage"])}},{key:"isRawMessage",value:function(){return this.assert("MessageType",["ChannelRawMessage","PeerRawMessage","VendorRawMessage"])}},{key:"isRawPeerMessage",value:function(){return this.assert("MessageType","PeerRawMessage")}},{key:"isRawChannelMessage",value:function(){return this.assert("MessageType","ChannelRawMessage")}},{key:"isPeerTextMessage",value:function(){return this.assert("MessageType","PeerTextMessage")}},{key:"isChannelTextMessage",value:function(){return this.assert("MessageType","ChannelTextMessage")}},{key:"isInvitation",value:function(e){var t=this;return void 0!==e?this.assert("MessageType",e):Pf(ot).some((function(e){return t.assert("MessageType",e)}))}},{key:"isFileMessage",value:function(){return this.assert("MessageType",["PeerFileMessage","ChannelFileMessage","VendorFileMessage"])}},{key:"isImageMessage",value:function(){return this.assert("MessageType",["PeerImageMessage","ChannelImageMessage","VendorImageMessage"])}},{key:"isPeerMessage",value:function(){return this.assert("MessageType",["PeerFileMessage","PeerTextMessage","PeerImageMessage","PeerRawMessage"])}},{key:"isZlibCompressed",value:function(){return this.assert("CompressionMethod","Zlib")}},{key:"isFromCache",value:function(){return this.assert("FromCache",!0)}},{key:"isBufferedMessage",value:function(){return this.assert("BufferedMessage",!0)}},{key:"getInvitationType",value:function(){if(!this.isInvitation())throw new TypeError("cannot get InvitationType of a normal message type");return this.typeOf("MessageType")}}]),t}(mt),dF=function(e){function t(e){return X(this,t),m(n(e=r.call(this,e,"ChatManager")),"dialogueLru",new Nz(void 0,{maxlen:1e4,ttl:1e4})),e}ja(t,e);var r=ka(t);return Ia(t,[{key:"getChatInfo",value:function(e){var t=this.dialogueLru.get(e);if(this.dialogueLru.prune(),t){var n=t.dialogue,r={dialogue:n,sequence:t=t.sequence.add(1)};return this.dialogueLru.set(e,{dialogue:n,sequence:t}),r}return n={dialogue:Yg(),sequence:U.fromNumber(1,!0)},this.dialogueLru.set(e,n),n}}]),t}(wb()),v={};"object"==("undefined"==typeof module?"undefined":V(module))&&(module.exports=v),v.parse=function(e,t){var n,r=v.bin.readUshort,i=v.bin.readUint,o={};for(n=(e=new Uint8Array(e)).length-4;101010256!=i(e,n);)n--;var a=r(e,n=n+4+4);r(e,n+=2),i(e,n+=2),n=i(e,n+=4);for(var s=0;s<a;s++){i(e,n),n+=4,n+=4,n+=4,i(e,n+=4);var u=i(e,n+=4),c=i(e,n+=4),l=r(e,n+=4),f=r(e,n+2),h=r(e,n+4);n+=6;var p=i(e,n+=8);n+=4,n+=l+f+h,v._readLocal(e,p,o,u,c,t)}return o},v._readLocal=function(e,t,n,r,i,o){var a=v.bin.readUshort,s=v.bin.readUint;s(e,t),a(e,t+=4),a(e,t+=2);var u=a(e,t+=2);s(e,t+=2),s(e,t+=4),s=a(e,t=t+4+8);var c=a(e,t+=2);if(t+=2,a=v.bin.readUTF8(e,t,s),t=t+s+c,o)n[a]={size:i,csize:r};else if(e=new Uint8Array(e.buffer,t),0==u)n[a]=new Uint8Array(e.buffer.slice(t,t+r));else{if(8!=u)throw"unknown compression method: "+u;t=new Uint8Array(i),v.inflateRaw(e,t),n[a]=t}},v.inflateRaw=function(e,t){return v.F.inflate(e,t)},v.inflate=function(e,t){return e[0],e[1],v.inflateRaw(new Uint8Array(e.buffer,e.byteOffset+2,e.length-2),t)},v.deflate=function(e,t){null==t&&(t={level:6});var n=0,r=new Uint8Array(50+Math.floor(1.1*e.length));return r[n]=120,r[n+1]=156,n=v.F.deflateRaw(e,r,n+2,t.level),e=v.adler(e,0,e.length),r[n+0]=e>>>24&255,r[n+1]=e>>>16&255,r[n+2]=e>>>8&255,r[n+3]=e>>>0&255,new Uint8Array(r.buffer,0,n+4)},v.deflateRaw=function(e,t){null==t&&(t={level:6});var n=new Uint8Array(50+Math.floor(1.1*e.length)),r=v.F.deflateRaw(e,n,r,t.level);return new Uint8Array(n.buffer,0,r)},v.encode=function(e,t){null==t&&(t=!1);var n,r=0,i=v.bin.writeUint,o=v.bin.writeUshort,a={};for(n in e){var s=!v._noNeed(n)&&!t,u=e[n],c=v.crc.crc(u,0,u.length);a[n]={cpr:s,usize:u.length,crc:c,file:s?v.deflateRaw(u):u}}for(n in a)r+=a[n].file.length+30+46+2*v.bin.sizeUTF8(n);for(n in e=new Uint8Array(r+22),t=0,u=[],a)c=a[n],u.push(t),t=v._writeHeader(e,t,n,c,0);for(n in r=0,s=t,a)c=a[n],u.push(t),t=v._writeHeader(e,t,n,c,1,u[r++]);return a=t-s,i(e,t,101010256),o(e,t=t+4+4,r),o(e,t+=2,r),i(e,t+=2,a),i(e,t+4,s),e.buffer},v._noNeed=function(e){return e=e.split(".").pop().toLowerCase(),-1!="png,jpg,jpeg,zip".indexOf(e)},v._writeHeader=function(e,t,n,r,i,o){var a=v.bin.writeUint,s=v.bin.writeUshort,u=r.file;return a(e,t,0==i?67324752:33639248),t+=4,1==i&&(t+=2),s(e,t,20),s(e,t+=2,0),s(e,t+=2,r.cpr?8:0),a(e,t+=2,0),a(e,t+=4,r.crc),a(e,t+=4,u.length),a(e,t+=4,r.usize),s(e,t+=4,v.bin.sizeUTF8(n)),s(e,t+=2,0),t+=2,1==i&&(a(e,t=t+2+2+6,o),t+=4),t+=n=v.bin.writeUTF8(e,t,n),0==i&&(e.set(u,t),t+=u.length),t},v.crc={table:function(){for(var e=new Uint32Array(256),t=0;256>t;t++){for(var n=t,r=0;8>r;r++)n=1&n?3988292384^n>>>1:n>>>1;e[t]=n}return e}(),update:function(e,t,n,r){for(var i=0;i<r;i++)e=v.crc.table[255&(e^t[n+i])]^e>>>8;return e},crc:function(e,t,n){return 4294967295^v.crc.update(4294967295,e,t,n)}},v.adler=function(e,t,n){var r=1,i=0,o=t;for(t+=n;o<t;){for(n=Math.min(o+5552,t);o<n;)i+=r+=e[o++];r%=65521,i%=65521}return i<<16|r},v.bin={readUshort:function(e,t){return e[t]|e[t+1]<<8},writeUshort:function(e,t,n){e[t]=255&n,e[t+1]=n>>8&255},readUint:function(e,t){return 16777216*e[t+3]+(e[t+2]<<16|e[t+1]<<8|e[t])},writeUint:function(e,t,n){e[t]=255&n,e[t+1]=n>>8&255,e[t+2]=n>>16&255,e[t+3]=n>>24&255},readASCII:function(e,t,n){for(var r="",i=0;i<n;i++)r+=String.fromCharCode(e[t+i]);return r},writeASCII:function(e,t,n){for(var r=0;r<n.length;r++)e[t+r]=n.charCodeAt(r)},pad:function(e){return 2>e.length?"0"+e:e},readUTF8:function(e,t,n){for(var r,i="",o=0;o<n;o++)i+="%"+v.bin.pad(e[t+o].toString(16));try{r=decodeURIComponent(i)}catch(r){return v.bin.readASCII(e,t,n)}return r},writeUTF8:function(e,t,n){for(var r=n.length,i=0,o=0;o<r;o++){var a=n.charCodeAt(o);if(0==(4294967168&a))e[t+i]=a,i++;else if(0==(4294965248&a))e[t+i]=192|a>>6,e[t+i+1]=128|a>>0&63,i+=2;else if(0==(4294901760&a))e[t+i]=224|a>>12,e[t+i+1]=128|a>>6&63,e[t+i+2]=128|a>>0&63,i+=3;else{if(0!=(4292870144&a))throw"e";e[t+i]=240|a>>18,e[t+i+1]=128|a>>12&63,e[t+i+2]=128|a>>6&63,e[t+i+3]=128|a>>0&63,i+=4}}return i},sizeUTF8:function(e){for(var t=e.length,n=0,r=0;r<t;r++){var i=e.charCodeAt(r);if(0==(4294967168&i))n++;else if(0==(4294965248&i))n+=2;else if(0==(4294901760&i))n+=3;else{if(0!=(4292870144&i))throw"e";n+=4}}return n}},v.F={},v.F.deflateRaw=function(e,t,n,r){var i=[[0,0,0,0,0],[4,4,8,4,0],[4,5,16,8,0],[4,6,16,16,0],[4,10,16,32,0],[8,16,32,32,0],[8,16,128,128,0],[8,32,128,256,0],[32,128,258,1024,1],[32,258,258,4096,1]][r],o=v.F.U,a=v.F._goodIndex;v.F._hash;var s=v.F._putsE,u=0;n<<=3;var c=0,l=e.length;if(0==r){for(;u<l;){var f=Math.min(65535,l-u);s(t,n,u+f==l?1:0),n=v.F._copyExact(e,u,f,t,n+8),u+=f}return n>>>3}s=o.lits,r=o.strt;var h=o.prev,p=0,d=0,b=0,g=0,y=0;for(2<l&&(r[y=v.F._hash(e,0)]=0),u=0;u<l;u++){if(f=y,u+1<l-2){y=v.F._hash(e,u+1);var m=u+1&32767;h[m]=r[y],r[y]=m}if(c<=u){if((14e3<p||26697<d)&&100<l-u&&(c<u&&(s[p]=u-c,p+=2,c=u),n=v.F._writeBlock(u==l-1||c==l?1:0,s,p,g,e,b,u-b,t,n),p=d=g=0,b=u),m=0,u<l-2&&(m=v.F._bestMatch(e,u,h,f,Math.min(i[2],l-u),i[3])),0!=m){f=m>>>16,m&=65535;var E=a(f,o.of0);o.lhst[257+E]++;var w=a(m,o.df0);o.dhst[w]++,g+=o.exb[E]+o.dxb[w],s[p]=f<<23|u-c,s[p+1]=m<<16|E<<8|w,p+=2,c=u+f}else o.lhst[e[u]]++;d++}}for(b==u&&0!=e.length||(c<u&&(s[p]=u-c,p+=2),n=v.F._writeBlock(1,s,p,g,e,b,u-b,t,n));0!=(7&n);)n++;return n>>>3},v.F._bestMatch=function(e,t,n,r,i,o){var a=32767&t,s=n[a],u=a-s+32768&32767;if(s==a||r!=v.F._hash(e,t-u))return 0;for(var c=r=0,l=Math.min(32767,t);u<=l&&0!=--o&&s!=a;){if((0==r||e[t+r]==e[t+r-u])&&(a=v.F._howLong(e,t,u))>r){if(c=u,(r=a)>=i)break;u+2<a&&(a=u+2);for(var f=0,h=0;h<a-2;h++){var p=t-u+h+32768&32767,d=p-n[p]+32768&32767;d>f&&(f=d,s=p)}}u+=(a=s)-(s=n[a])+32768&32767}return r<<16|c},v.F._howLong=function(e,t,n){if(e[t]!=e[t-n]||e[t+1]!=e[t+1-n]||e[t+2]!=e[t+2-n])return 0;var r=t,i=Math.min(e.length,t+258);for(t+=3;t<i&&e[t]==e[t-n];)t++;return t-r},v.F._hash=function(e,t){return(e[t]<<8|e[t+1])+(e[t+2]<<4)&65535},v.saved=0,v.F._writeBlock=function(e,t,n,r,i,o,a,s,u){var c=v.F.U,l=v.F._putsF,f=v.F._putsE;c.lhst[256]++;var h=v.F.getTrees(),p=h[0],d=h[1],b=h[2],g=h[3],y=h[4],m=h[5],E=h[6];h=h[7];var w=32+(0==(u+3&7)?0:8-(u+3&7))+(a<<3),_=r+v.F.contSize(c.fltree,c.lhst)+v.F.contSize(c.fdtree,c.dhst);r=r+v.F.contSize(c.ltree,c.lhst)+v.F.contSize(c.dtree,c.dhst),r+=14+3*m+v.F.contSize(c.itree,c.ihst)+(2*c.ihst[16]+3*c.ihst[17]+7*c.ihst[18]);for(var O=0;286>O;O++)c.lhst[O]=0;for(O=0;30>O;O++)c.dhst[O]=0;for(O=0;19>O;O++)c.ihst[O]=0;if(w=w<_&&w<r?0:_<r?1:2,l(s,u,e),l(s,u+1,w),u+=3,0==w){for(;0!=(7&u);)u++;u=v.F._copyExact(i,o,a,s,u)}else{if(1==w)var A=c.fltree,I=c.fdtree;if(2==w){for(v.F.makeCodes(c.ltree,p),v.F.revCodes(c.ltree,p),v.F.makeCodes(c.dtree,d),v.F.revCodes(c.dtree,d),v.F.makeCodes(c.itree,b),v.F.revCodes(c.itree,b),A=c.ltree,I=c.dtree,f(s,u,g-257),f(s,u+=5,y-1),f(s,u+=5,m-4),u+=4,e=0;e<m;e++)f(s,u+3*e,c.itree[1+(c.ordr[e]<<1)]);u=v.F._codeTiny(E,c.itree,s,u+3*m),u=v.F._codeTiny(h,c.itree,s,u)}for(m=0;m<n;m+=2){for(E=(e=t[m])>>>23,e=o+(8388607&e);o<e;)u=v.F._writeLit(i[o++],A,s,u);0!=E&&(e=(p=t[m+1])>>16,a=p>>8&255,p&=255,f(s,u=v.F._writeLit(257+a,A,s,u),E-c.of0[a]),u+=c.exb[a],l(s,u=v.F._writeLit(p,I,s,u),e-c.df0[p]),u+=c.dxb[p],o+=E)}u=v.F._writeLit(256,A,s,u)}return u},v.F._copyExact=function(e,t,n,r,i){var o=i>>>3;return r[o]=n,r[o+1]=n>>>8,r[o+2]=255-r[o],r[o+3]=255-r[o+1],o+=4,r.set(new Uint8Array(e.buffer,t,n),o),i+(n+4<<3)},v.F.getTrees=function(){for(var e=v.F.U,t=v.F._hufTree(e.lhst,e.ltree,15),n=v.F._hufTree(e.dhst,e.dtree,15),r=[],i=v.F._lenCodes(e.ltree,r),o=[],a=v.F._lenCodes(e.dtree,o),s=0;s<r.length;s+=2)e.ihst[r[s]]++;for(s=0;s<o.length;s+=2)e.ihst[o[s]]++;s=v.F._hufTree(e.ihst,e.itree,7);for(var u=19;4<u&&0==e.itree[1+(e.ordr[u-1]<<1)];)u--;return[t,n,s,i,a,u,r,o]},v.F.getSecond=function(e){for(var t=[],n=0;n<e.length;n+=2)t.push(e[n+1]);return t},v.F.nonZero=function(e){for(var t="",n=0;n<e.length;n+=2)0!=e[n+1]&&(t+=(n>>1)+",");return t},v.F.contSize=function(e,t){for(var n=0,r=0;r<t.length;r++)n+=t[r]*e[1+(r<<1)];return n},v.F._codeTiny=function(e,t,n,r){for(var i=0;i<e.length;i+=2){var o=e[i],a=e[i+1];r=v.F._writeLit(o,t,n,r);var s=16==o?2:17==o?3:7;15<o&&(v.F._putsE(n,r,a,s),r+=s)}return r},v.F._lenCodes=function(e,t){for(var n=e.length;2!=n&&0==e[n-1];)n-=2;for(var r=0;r<n;r+=2){var i=e[r+1],o=r+3<n?e[r+3]:-1,a=r+5<n?e[r+5]:-1,s=0==r?-1:e[r-1];if(0==i&&o==i&&a==i){for(o=r+5;o+2<n&&e[o+2]==i;)o+=2;11>(i=Math.min(o+1-r>>>1,138))?t.push(17,i-3):t.push(18,i-11),r+=2*i-2}else if(i==s&&o==i&&a==i){for(o=r+5;o+2<n&&e[o+2]==i;)o+=2;i=Math.min(o+1-r>>>1,6),t.push(16,i-3),r+=2*i-2}else t.push(i,0)}return n>>>1},v.F._hufTree=function(e,t,n){var r=[],i=e.length,o=t.length,a=0;for(a=0;a<o;a+=2)t[a]=0,t[a+1]=0;for(a=0;a<i;a++)0!=e[a]&&r.push({lit:a,f:e[a]});if(e=r.length,i=r.slice(0),0==e)return 0;if(1==e)return t[1+((n=r[0].lit)<<1)]=1,t[1+((0==n?1:0)<<1)]=1;r.sort((function(e,t){return e.f-t.f})),a=r[0],o=r[1];var s=0,u=1,c=2;for(r[0]={lit:-1,f:a.f+o.f,l:a,r:o,d:0};u!=e-1;)a=s!=u&&(c==e||r[s].f<r[c].f)?r[s++]:r[c++],o=s!=u&&(c==e||r[s].f<r[c].f)?r[s++]:r[c++],r[u++]={lit:-1,f:a.f+o.f,l:a,r:o};for((r=v.F.setDepth(r[u-1],0))>n&&(v.F.restrictDepth(i,n,r),r=n),a=0;a<e;a++)t[1+(i[a].lit<<1)]=i[a].d;return r},v.F.setDepth=function(e,t){return-1!=e.lit?e.d=t:Math.max(v.F.setDepth(e.l,t+1),v.F.setDepth(e.r,t+1))},v.F.restrictDepth=function(e,t,n){var r=0,i=1<<n-t,o=0;for(e.sort((function(e,t){return t.d==e.d?e.f-t.f:t.d-e.d})),r=0;r<e.length&&e[r].d>t;r++){var a=e[r].d;e[r].d=t,o+=i-(1<<n-a)}for(o>>>=n-t;0<o;)(a=e[r].d)<t?(e[r].d++,o-=1<<t-a-1):r++;for(;0<=r;r--)e[r].d==t&&0>o&&(e[r].d--,o++);0!=o&&console.log("debt left")},v.F._goodIndex=function(e,t){var n=0;return t[16|n]<=e&&(n|=16),t[8|n]<=e&&(n|=8),t[4|n]<=e&&(n|=4),t[2|n]<=e&&(n|=2),t[1|n]<=e&&(n|=1),n},v.F._writeLit=function(e,t,n,r){return v.F._putsF(n,r,t[e<<1]),r+t[1+(e<<1)]},v.F.inflate=function(e,t){var n=Uint8Array;if(3==e[0]&&0==e[1])return t||new n(0);var r=v.F,i=r._bitsF,o=r._bitsE,a=r._decodeTiny,s=r.makeCodes,u=r.codes2map,c=r._get17,l=r.U,f=null==t;f&&(t=new n(e.length>>>2<<3));for(var h,p,d,b,g=0,y=0,m=p=0,E=0;0==g;)if(g=i(e,E,1),h=i(e,E+1,2),E+=3,0==h)0!=(7&E)&&(E+=8-(7&E)),h=e[(E=4+(E>>>3))-4]|e[E-3]<<8,f&&(t=v.F._check(t,m+h)),t.set(new n(e.buffer,e.byteOffset+E,h),m),E=E+h<<3,m+=h;else{if(f&&(t=v.F._check(t,m+131072)),1==h&&(d=l.flmap,b=l.fdmap,y=511,p=31),2==h){for(p=o(e,E,5)+257,h=o(e,E+5,5)+1,d=o(e,E+10,4)+4,E+=14,b=0;38>b;b+=2)l.itree[b]=0,l.itree[b+1]=0;for(y=1,b=0;b<d;b++){var w=o(e,E+3*b,3);l.itree[1+(l.ordr[b]<<1)]=w,w>y&&(y=w)}E+=3*d,s(l.itree,y),u(l.itree,y,l.imap),d=l.lmap,b=l.dmap,E=a(l.imap,(1<<y)-1,p+h,e,E,l.ttree),y=(1<<(w=r._copyOut(l.ttree,0,p,l.ltree)))-1,p=(1<<(h=r._copyOut(l.ttree,p,h,l.dtree)))-1,s(l.ltree,w),u(l.ltree,w,d),s(l.dtree,h),u(l.dtree,h,b)}for(;;)if(E+=15&(h=d[c(e,E)&y]),0==(w=h>>>4)>>>8)t[m++]=w;else{if(256==w)break;h=m+w-254,264<w&&(h=m+((w=l.ldef[w-257])>>>3)+o(e,E,7&w),E+=7&w),E+=15&(w=b[c(e,E)&p]);var _=((w=l.ddef[w>>>4])>>>4)+i(e,E,15&w);for(E+=15&w,f&&(t=v.F._check(t,m+131072));m<h;)t[m]=t[m++-_],t[m]=t[m++-_],t[m]=t[m++-_],t[m]=t[m++-_];m=h}}return t.length==m?t:t.slice(0,m)},v.F._check=function(e,t){var n=e.length;return t<=n?e:((t=new Uint8Array(Math.max(n<<1,t))).set(e,0),t)},v.F._decodeTiny=function(e,t,n,r,i,o){for(var a=v.F._bitsE,s=v.F._get17,u=0;u<n;){var c=e[s(r,i)&t];i+=15&c;var l=c>>>4;if(15>=l)o[u]=l,u++;else{var f=c=0;for(16==l?(f=3+a(r,i,2),i+=2,c=o[u-1]):17==l?(f=3+a(r,i,3),i+=3):18==l&&(f=11+a(r,i,7),i+=7),l=u+f;u<l;)o[u]=c,u++}}return i},v.F._copyOut=function(e,t,n,r){for(var i=0,o=0,a=r.length>>>1;o<n;){var s=e[o+t];r[o<<1]=0,r[1+(o<<1)]=s,s>i&&(i=s),o++}for(;o<a;)r[o<<1]=0,r[1+(o<<1)]=0,o++;return i},v.F.makeCodes=function(e,t){var n,r,i=v.F.U,o=e.length,a=i.bl_count;for(n=0;n<=t;n++)a[n]=0;for(n=1;n<o;n+=2)a[e[n]]++;for(i=i.next_code,n=0,a[0]=0,r=1;r<=t;r++)n=n+a[r-1]<<1,i[r]=n;for(t=0;t<o;t+=2)0!=(a=e[t+1])&&(e[t]=i[a],i[a]++)},v.F.codes2map=function(e,t,n){for(var r=e.length,i=v.F.U.rev15,o=0;o<r;o+=2)if(0!=e[o+1]){var a=e[o+1],s=o>>1<<4|a,u=t-a;for(u=(a=e[o]<<u)+(1<<u);a!=u;)n[i[a]>>>15-t]=s,a++}},v.F.revCodes=function(e,t){for(var n=v.F.U.rev15,r=15-t,i=0;i<e.length;i+=2)e[i]=n[e[i]<<t-e[i+1]]>>>r},v.F._putsE=function(e,t,n){n<<=7&t,e[t>>>=3]|=n,e[t+1]|=n>>>8},v.F._putsF=function(e,t,n){n<<=7&t,e[t>>>=3]|=n,e[t+1]|=n>>>8,e[t+2]|=n>>>16},v.F._bitsE=function(e,t,n){return(e[t>>>3]|e[1+(t>>>3)]<<8)>>>(7&t)&(1<<n)-1},v.F._bitsF=function(e,t,n){return(e[t>>>3]|e[1+(t>>>3)]<<8|e[2+(t>>>3)]<<16)>>>(7&t)&(1<<n)-1},v.F._get17=function(e,t){return(e[t>>>3]|e[1+(t>>>3)]<<8|e[2+(t>>>3)]<<16)>>>(7&t)},v.F._get25=function(e,t){return(e[t>>>3]|e[1+(t>>>3)]<<8|e[2+(t>>>3)]<<16|e[3+(t>>>3)]<<24)>>>(7&t)},v.F.U=function(){var e=Uint16Array,t=Uint32Array;return{next_code:new e(16),bl_count:new e(16),ordr:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],of0:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],exb:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],ldef:new e(32),df0:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],dxb:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],ddef:new t(32),flmap:new e(512),fltree:[],fdmap:new e(32),fdtree:[],lmap:new e(32768),ltree:[],ttree:[],dmap:new e(32768),dtree:[],imap:new e(512),itree:[],rev15:new e(32768),lhst:new t(286),dhst:new t(30),ihst:new t(19),lits:new t(15e3),strt:new e(65536),prev:new e(32768)}}(),function(){function e(e,t,n){for(;0!=t--;)e.push(0,n)}for(var t=v.F.U,n=0;32768>n;n++){var r=n;r=(4278255360&(r=(4042322160&(r=(3435973836&(r=(2863311530&r)>>>1|(1431655765&r)<<1))>>>2|(858993459&r)<<2))>>>4|(252645135&r)<<4))>>>8|(16711935&r)<<8,t.rev15[n]=(r>>>16|r<<16)>>>17}for(n=0;32>n;n++)t.ldef[n]=t.of0[n]<<3|t.exb[n],t.ddef[n]=t.df0[n]<<4|t.dxb[n];e(t.fltree,144,8),e(t.fltree,112,9),e(t.fltree,24,7),e(t.fltree,8,8),v.F.makeCodes(t.fltree,9),v.F.codes2map(t.fltree,9,t.flmap),v.F.revCodes(t.fltree,9),e(t.fdtree,32,5),v.F.makeCodes(t.fdtree,5),v.F.codes2map(t.fdtree,5,t.fdmap),v.F.revCodes(t.fdtree,5),e(t.itree,19,0),e(t.ltree,286,0),e(t.dtree,30,0),e(t.ttree,320,0)}();var eF=Array.isArray||function(e){return e&&"number"==typeof e.length},fF=Object.defineProperty({isArray:eF},"__esModule",{value:!0}),gF=Object.defineProperty({isObject:function(e){return null!==e&&"object"===V(e)}},"__esModule",{value:!0}),hF=Object.defineProperty({isFunction:function(e){return"function"==typeof e}},"__esModule",{value:!0}),iF=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),kh=Object.defineProperty({UnsubscriptionError:iF},"__esModule",{value:!0}),jF=function(){function e(e){this.closed=!1,this._subscriptions=this._parentOrParents=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}return e.prototype.unsubscribe=function(){if(!this.closed){var t=this._parentOrParents,n=this._ctorUnsubscribe,r=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._subscriptions=this._parentOrParents=null,t instanceof e)t.remove(this);else if(null!==t)for(var o=0;o<t.length;++o)t[o].remove(this);if(hF.isFunction(r)){n&&(this._unsubscribe=void 0);try{r.call(this)}catch(e){var a=e instanceof kh.UnsubscriptionError?go(e.errors):[e]}}if(fF.isArray(i))for(o=-1,t=i.length;++o<t;)if(n=i[o],gF.isObject(n))try{n.unsubscribe()}catch(e){a=a||[],e instanceof kh.UnsubscriptionError?a=a.concat(go(e.errors)):a.push(e)}if(a)throw new kh.UnsubscriptionError(a)}},e.prototype.add=function(t){var n=t;if(!t)return e.EMPTY;switch(V(t)){case"function":n=new e(t);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;n instanceof e||(t=n,(n=new e)._subscriptions=[t]);break;default:throw Error("unrecognized teardown "+t+" added to Subscription.")}if(null===(t=n._parentOrParents))n._parentOrParents=this;else if(t instanceof e){if(t===this)return n;n._parentOrParents=[t,this]}else{if(-1!==t.indexOf(this))return n;t.push(this)}return null===(t=this._subscriptions)?this._subscriptions=[n]:t.push(n),n},e.prototype.remove=function(e){var t=this._subscriptions;t&&(-1!==(e=t.indexOf(e))&&t.splice(e,1))},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}(),kF=Object.defineProperty({Subscription:jF},"__esModule",{value:!0}),lF=Ka&&Ka.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),mF=function(e){function t(t,n){return e.call(this)||this}return lF(t,e),t.prototype.schedule=function(e,t){return this},t}(kF.Subscription),nF=Object.defineProperty({Action:mF},"__esModule",{value:!0}),oF=Ka&&Ka.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),pt=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return oF(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e,e=this.id;var n=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(n,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return t;clearInterval(t)},t.prototype.execute=function(e,t){return this.closed?Error("executing a cancelled action"):(this.pending=!1,(e=this._execute(e,t))?e:void(!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))))},t.prototype._execute=function(e,t){t=!1;var n=void 0;try{this.work(e)}catch(e){t=!0,n=!!e&&e||Error(e)}if(t)return this.unsubscribe(),n},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,n=t.actions,r=n.indexOf(this);this.state=this.work=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null},t}(nF.Action);Object.defineProperty({AsyncAction:pt},"__esModule",{value:!0});var pF=function(){function e(t,n){void 0===n&&(n=e.now),this.SchedulerAction=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(n,t)},e.now=function(){return Date.now()},e}(),qt=Object.defineProperty({Scheduler:pF},"__esModule",{value:!0}),qF=Ka&&Ka.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),rt=function(e){function t(n,r){void 0===r&&(r=qt.Scheduler.now);var i=e.call(this,n,(function(){return t.delegate&&t.delegate!==i?t.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return qF(t,e),t.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),t.delegate&&t.delegate!==this?t.delegate.schedule(n,r,i):e.prototype.schedule.call(this,n,r,i)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else{var n;this.active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(qt.Scheduler);Object.defineProperty({AsyncScheduler:rt},"__esModule",{value:!0});var rF=qa("iterator"),Tl=!R((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,n="";return e.pathname="c%20d",t.forEach((function(e,r){t.delete("b"),n+=r+e})),!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[rF]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host})),sF=/[^\0-\u007E]/,tF=/[.\u3002\uFF0E\uFF61]/g,sf=Math.floor,Ul=String.fromCharCode,st=function(e){return e+22+75*(26>e)},uF=function(e){for(var t=[],n=[],r=0,i=e.length;r<i;){var o=e.charCodeAt(r++);if(55296<=o&&56319>=o&&r<i){var a=e.charCodeAt(r++);56320==(64512&a)?n.push(((1023&o)<<10)+(1023&a)+65536):(n.push(o),r--)}else n.push(o)}n=(e=n).length,r=128;var s=0,u=72;for(i=0;i<e.length;i++){var c=e[i];128>c&&t.push(Ul(c))}for((a=o=t.length)&&t.push("-");a<n;){var l=2147483647;for(i=0;i<e.length;i++)(c=e[i])>=r&&c<l&&(l=c);var f=a+1;if(l-r>sf((2147483647-s)/f))throw RangeError("Overflow: input needs wider integers to process");for(s+=(l-r)*f,r=l,i=0;i<e.length;i++){if((c=e[i])<r&&2147483647<++s)throw RangeError("Overflow: input needs wider integers to process");if(c==r){var h=s;for(c=36;!(h<(l=c<=u?1:c>=u+26?26:c-u));c+=36){h-=l;var p=36-l;t.push(Ul(st(l+h%p))),h=sf(h/p)}for(t.push(Ul(st(h))),u=f,c=0,s=a==o?sf(s/700):s>>1,s+=sf(s/u);455<s;c+=36)s=sf(s/35);u=sf(c+36*s/(s+38)),s=0,++a}}++s,++r}return t.join("")},tt=function(e){var t=Zf(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return sa(t.call(e))},ut=Rb("fetch"),Vl=Rb("Headers"),vF=qa("iterator"),vt=La.set,Hb=La.getterFor("URLSearchParams"),wF=La.getterFor("URLSearchParamsIterator"),xF=/\+/g,wt=Array(4),yF=function(e){return wt[e-1]||(wt[e-1]=RegExp("((?:%[\\da-f]{2}){"+e+"})","gi"))},zF=function(e){try{return decodeURIComponent(e)}catch(t){return e}},xt=function(e){e=e.replace(xF," ");var t=4;try{return decodeURIComponent(e)}catch(n){for(;t;)e=e.replace(yF(t--),zF);return e}},yt=/[!'()~]|%20/g,AF={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},zt=function(e){return AF[e]},At=function(e,t){if(t){t=t.split("&");for(var n,r=0;r<t.length;)(n=t[r++]).length&&(n=n.split("="),e.push({key:xt(n.shift()),value:xt(n.join("="))}))}},BF=function(e){this.entries.length=0,At(this.entries,e)},tf=function(e,t){if(e<t)throw TypeError("Not enough arguments")},Wl=Zo((function(e,t){vt(this,{type:"URLSearchParamsIterator",iterator:tt(Hb(e).entries),kind:t})}),"Iterator",(function(){var e=wF(this),t=e.kind,n=(e=e.iterator.next()).value;return e.done||(e.value="keys"===t?n.key:"values"===t?n.value:[n.key,n.value]),e})),Fg=function(){hc(this,Fg,"URLSearchParams");var e,t,n,r=0<arguments.length?arguments[0]:void 0,i=[];if(vt(this,{type:"URLSearchParams",entries:i,updateURL:function(){},updateSearchParams:BF}),void 0!==r)if(ha(r)){var o=Zf(r);if("function"==typeof o)for(r=o.call(r),o=r.next;!(e=o.call(r)).done;){var a=(e=tt(sa(e.value))).next;if((t=a.call(e)).done||(n=a.call(e)).done||!a.call(e).done)throw TypeError("Expected sequence with length 2");i.push({key:t.value+"",value:n.value+""})}else for(e in r)Q(r,e)&&i.push({key:e,value:r[e]+""})}else At(i,"string"==typeof r?"?"===r.charAt(0)?r.slice(1):r:r+"")},pi=Fg.prototype;Xe(pi,{append:function(e,t){tf(arguments.length,2);var n=Hb(this);n.entries.push({key:e+"",value:t+""}),n.updateURL()},delete:function(e){tf(arguments.length,1);for(var t=Hb(this),n=t.entries,r=e+"",i=0;i<n.length;)n[i].key===r?n.splice(i,1):i++;t.updateURL()},get:function(e){tf(arguments.length,1);for(var t=Hb(this).entries,n=e+"",r=0;r<t.length;r++)if(t[r].key===n)return t[r].value;return null},getAll:function(e){tf(arguments.length,1);for(var t=Hb(this).entries,n=e+"",r=[],i=0;i<t.length;i++)t[i].key===n&&r.push(t[i].value);return r},has:function(e){tf(arguments.length,1);for(var t=Hb(this).entries,n=e+"",r=0;r<t.length;)if(t[r++].key===n)return!0;return!1},set:function(e,t){tf(arguments.length,1);for(var n,r=Hb(this),i=r.entries,o=!1,a=e+"",s=t+"",u=0;u<i.length;u++)(n=i[u]).key===a&&(o?i.splice(u--,1):(o=!0,n.value=s));o||i.push({key:a,value:s}),r.updateURL()},sort:function(){var e,t,n=Hb(this),r=n.entries,i=r.slice();for(t=r.length=0;t<i.length;t++){var o=i[t];for(e=0;e<t;e++)if(r[e].key>o.key){r.splice(e,0,o);break}e===t&&r.push(o)}n.updateURL()},forEach:function(e){for(var t,n=Hb(this).entries,r=pd(e,1<arguments.length?arguments[1]:void 0,3),i=0;i<n.length;)r((t=n[i++]).value,t.key,this)},keys:function(){return new Wl(this,"keys")},values:function(){return new Wl(this,"values")},entries:function(){return new Wl(this,"entries")}},{enumerable:!0}),Ea(pi,vF,pi.entries),Ea(pi,"toString",(function(){for(var e,t=Hb(this).entries,n=[],r=0;r<t.length;)e=t[r++],n.push(encodeURIComponent(e.key).replace(yt,zt)+"="+encodeURIComponent(e.value).replace(yt,zt));return n.join("&")}),{enumerable:!0}),gc(Fg,"URLSearchParams"),M({global:!0,forced:!Tl},{URLSearchParams:Fg}),Tl||"function"!=typeof ut||"function"!=typeof Vl||M({global:!0,enumerable:!0,forced:!0},{fetch:function(e){var t=[e];if(1<arguments.length){var n=arguments[1];if(ha(n)){var r=n.body;if("URLSearchParams"===We(r)){var i=n.headers?new Vl(n.headers):new Vl;i.has("content-type")||i.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),n=Sb(n,{body:sc(0,String(r)),headers:sc(0,i)})}}t.push(n)}return ut.apply(this,t)}});var Gg=C.URL,CF=Fg,DF=La.set,Na=La.getterFor("URL"),EF=Math.floor,Bt=Math.pow,Ct=/[A-Za-z]/,FF=/[\d+-.A-Za-z]/,Xl=/\d/,GF=/^(0x|0X)/,HF=/^[0-7]+$/,IF=/^\d+$/,Dt=/^[\dA-Fa-f]+$/,JF=/[\0\t\n\r #%/:?@[\\]]/,KF=/[\0\t\n\r #/:?@[\\]]/,LF=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,MF=/[\t\n\r]/g,Yl=function(e,t){var n;if("["==t.charAt(0)){if("]"!=t.charAt(t.length-1))return"Invalid host";var r=NF(t.slice(1,-1));if(!r)return"Invalid host"}else if(bb(e)){for(r=[],t=t.toLowerCase().replace(tF,".").split("."),n=0;n<t.length;n++){var i=t[n];r.push(sF.test(i)?"xn--"+uF(i):i)}if(t=r.join("."),JF.test(t))return"Invalid host";if(null===(r=OF(t)))return"Invalid host"}else{if(KF.test(t))return"Invalid host";for(r="",t=Td(t),n=0;n<t.length;n++)r+=Cd(t[n],qi)}e.host=r},OF=function(e){var t,n=e.split(".");n.length&&""==n[n.length-1]&&n.pop();var r=n.length;if(4<r)return e;var i=[];for(t=0;t<r;t++){var o=n[t];if(""==o)return e;var a=10;if(1<o.length&&"0"==o.charAt(0)&&(a=GF.test(o)?16:8,o=o.slice(8==a?1:2)),""===o)o=0;else{if(!(10==a?IF:8==a?HF:Dt).test(o))return e;o=parseInt(o,a)}i.push(o)}for(t=0;t<r;t++)if(o=i[t],t==r-1){if(o>=Bt(256,5-r))return null}else if(255<o)return null;for(e=i.pop(),t=0;t<i.length;t++)e+=i[t]*Bt(256,3-t);return e},NF=function(e){var t,n,r=[0,0,0,0,0,0,0,0],i=0,o=null,a=0,s=function(){return e.charAt(a)};if(":"==s()){if(":"!=e.charAt(1))return;a+=2,o=++i}for(;s();){if(8==i)return;if(":"==s()){if(null!==o)return;a++,o=++i}else{for(t=n=0;4>n&&Dt.test(s());)t=16*t+parseInt(s(),16),a++,n++;if("."==s()){if(0==n)return;if(a-=n,6<i)return;for(t=0;s();){if(n=null,0<t){if(!("."==s()&&4>t))return;a++}if(!Xl.test(s()))return;for(;Xl.test(s());){var u=parseInt(s(),10);if(null===n)n=u;else{if(0==n)return;n=10*n+u}if(255<n)return;a++}r[i]=256*r[i]+n,2!=++t&&4!=t||i++}if(4!=t)return;break}if(":"==s()){if(a++,!s())return}else if(s())return;r[i++]=t}}if(null!==o)for(s=i-o,i=7;0!=i&&0<s;)t=r[i],r[i--]=r[o+s-1],r[o+--s]=t;else if(8!=i)return;return r},Hg=function(e){var t,n;if("number"==typeof e){var r=[];for(t=0;4>t;t++)r.unshift(e%256),e=EF(e/256);return r.join(".")}if("object"==typeof e){r="",t=null;for(var i=1,o=null,a=0,s=0;8>s;s++)0!==e[s]?(a>i&&(t=o,i=a),o=null,a=0):(null===o&&(o=s),++a);for(a>i&&(t=o),i=t,t=0;8>t;t++)n&&0===e[t]||(n&&(n=!1),i===t?(r+=t?":":"::",n=!0):(r+=e[t].toString(16),7>t&&(r+=":")));return"["+r+"]"}return e},qi={},Et=ng({},qi,{" ":1,'"':1,"<":1,">":1,"`":1}),Ft=ng({},Et,{"#":1,"?":1,"{":1,"}":1}),Zl=ng({},Ft,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),Cd=function(e,t){var n=Kw(e,0);return 32<n&&127>n&&!Q(t,e)?e:encodeURIComponent(e)},ri={ftp:21,file:null,http:80,https:443,ws:80,wss:443},bb=function(e){return Q(ri,e.scheme)},$l=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},Ig=function(e,t){var n;return 2==e.length&&Ct.test(e.charAt(0))&&(":"==(n=e.charAt(1))||!t&&"|"==n)},Gt=function(e){var t;return 1<e.length&&Ig(e.slice(0,2))&&(2==e.length||"/"===(t=e.charAt(2))||"\\"===t||"?"===t||"#"===t)},Ht=function(e){var t=e.path,n=t.length;!n||"file"==e.scheme&&1==n&&Ig(t[0],!0)||t.pop()},am={},It={},bm={},Jt={},Kt={},cm={},Lt={},Mt={},si={},ti={},dm={},em={},fm={},gm={},Nt={},hm={},Jg={},Hc={},Ot={},le={},dd={},Ic=function(e,t,n,r){var i=n||am,o=0,a="",s=!1,u=!1,c=!1;for(n||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,t=t.replace(LF,"")),t=t.replace(MF,""),t=Td(t);o<=t.length;){var l=t[o];switch(i){case am:if(!l||!Ct.test(l)){if(n)return"Invalid scheme";i=bm;continue}a+=l.toLowerCase(),i=It;break;case It:if(l&&(FF.test(l)||"+"==l||"-"==l||"."==l))a+=l.toLowerCase();else{if(":"!=l){if(n)return"Invalid scheme";a="",i=bm,o=0;continue}if(n&&(bb(e)!=Q(ri,a)||"file"==a&&(""!=e.username||""!=e.password||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=a,n)return void(bb(e)&&ri[e.scheme]==e.port&&(e.port=null));a="","file"==e.scheme?i=gm:bb(e)&&r&&r.scheme==e.scheme?i=Jt:bb(e)?i=Mt:"/"==t[o+1]?(i=Kt,o++):(e.cannotBeABaseURL=!0,e.path.push(""),i=Ot)}break;case bm:if(!r||r.cannotBeABaseURL&&"#"!=l)return"Invalid scheme";if(r.cannotBeABaseURL&&"#"==l){e.scheme=r.scheme,e.path=r.path.slice(),e.query=r.query,e.fragment="",e.cannotBeABaseURL=!0,i=dd;break}i="file"==r.scheme?gm:cm;continue;case Jt:if("/"!=l||"/"!=t[o+1]){i=cm;continue}i=si,o++;break;case Kt:if("/"==l){i=ti;break}i=Hc;continue;case cm:if(e.scheme=r.scheme,null==l)e.username=r.username,e.password=r.password,e.host=r.host,e.port=r.port,e.path=r.path.slice(),e.query=r.query;else if("/"==l||"\\"==l&&bb(e))i=Lt;else if("?"==l)e.username=r.username,e.password=r.password,e.host=r.host,e.port=r.port,e.path=r.path.slice(),e.query="",i=le;else{if("#"!=l){e.username=r.username,e.password=r.password,e.host=r.host,e.port=r.port,e.path=r.path.slice(),e.path.pop(),i=Hc;continue}e.username=r.username,e.password=r.password,e.host=r.host,e.port=r.port,e.path=r.path.slice(),e.query=r.query,e.fragment="",i=dd}break;case Lt:if(!bb(e)||"/"!=l&&"\\"!=l){if("/"!=l){e.username=r.username,e.password=r.password,e.host=r.host,e.port=r.port,i=Hc;continue}i=ti}else i=si;break;case Mt:if(i=si,"/"!=l||"/"!=a.charAt(o+1))continue;o++;break;case si:if("/"!=l&&"\\"!=l){i=ti;continue}break;case ti:if("@"==l){for(s&&(a="%40"+a),s=!0,a=Td(a),l=0;l<a.length;l++){var f=a[l];":"!=f||c?(f=Cd(f,Zl),c?e.password+=f:e.username+=f):c=!0}a=""}else if(null==l||"/"==l||"?"==l||"#"==l||"\\"==l&&bb(e)){if(s&&""==a)return"Invalid authority";o-=Td(a).length+1,a="",i=dm}else a+=l;break;case dm:case em:if(n&&"file"==e.scheme){i=hm;continue}if(":"!=l||u){if(null==l||"/"==l||"?"==l||"#"==l||"\\"==l&&bb(e)){if(bb(e)&&""==a)return"Invalid host";if(n&&""==a&&(""!=e.username||""!=e.password||null!==e.port))return;if(i=Yl(e,a))return i;if(a="",i=Jg,n)return;continue}"["==l?u=!0:"]"==l&&(u=!1),a+=l}else{if(""==a)return"Invalid host";if(i=Yl(e,a))return i;if(a="",i=fm,n==em)return}break;case fm:if(!Xl.test(l)){if(null==l||"/"==l||"?"==l||"#"==l||"\\"==l&&bb(e)||n){if(""!=a){if(65535<(i=parseInt(a,10)))return"Invalid port";e.port=bb(e)&&i===ri[e.scheme]?null:i,a=""}if(n)return;i=Jg;continue}return"Invalid port"}a+=l;break;case gm:if(e.scheme="file","/"==l||"\\"==l)i=Nt;else{if(!r||"file"!=r.scheme){i=Hc;continue}if(null==l)e.host=r.host,e.path=r.path.slice(),e.query=r.query;else if("?"==l)e.host=r.host,e.path=r.path.slice(),e.query="",i=le;else{if("#"!=l){Gt(t.slice(o).join(""))||(e.host=r.host,e.path=r.path.slice(),Ht(e)),i=Hc;continue}e.host=r.host,e.path=r.path.slice(),e.query=r.query,e.fragment="",i=dd}}break;case Nt:if("/"==l||"\\"==l){i=hm;break}r&&"file"==r.scheme&&!Gt(t.slice(o).join(""))&&(Ig(r.path[0],!0)?e.path.push(r.path[0]):e.host=r.host),i=Hc;continue;case hm:if(null==l||"/"==l||"\\"==l||"?"==l||"#"==l){if(!n&&Ig(a))i=Hc;else{if(""==a){if(e.host="",n)return}else{if(i=Yl(e,a))return i;if("localhost"==e.host&&(e.host=""),n)return;a=""}i=Jg}continue}a+=l;break;case Jg:if(bb(e)){if(i=Hc,"/"!=l&&"\\"!=l)continue}else if(n||"?"!=l)if(n||"#"!=l){if(null!=l&&(i=Hc,"/"!=l))continue}else e.fragment="",i=dd;else e.query="",i=le;break;case Hc:if(null==l||"/"==l||"\\"==l&&bb(e)||!n&&("?"==l||"#"==l)){if(".."===(f=(f=a).toLowerCase())||"%2e."===f||".%2e"===f||"%2e%2e"===f?(Ht(e),"/"==l||"\\"==l&&bb(e)||e.path.push("")):"."===a||"%2e"===a.toLowerCase()?"/"==l||"\\"==l&&bb(e)||e.path.push(""):("file"==e.scheme&&!e.path.length&&Ig(a)&&(e.host&&(e.host=""),a=a.charAt(0)+":"),e.path.push(a)),a="","file"==e.scheme&&(null==l||"?"==l||"#"==l))for(;1<e.path.length&&""===e.path[0];)e.path.shift();"?"==l?(e.query="",i=le):"#"==l&&(e.fragment="",i=dd)}else a+=Cd(l,Ft);break;case Ot:"?"==l?(e.query="",i=le):"#"==l?(e.fragment="",i=dd):null!=l&&(e.path[0]+=Cd(l,qi));break;case le:n||"#"!=l?null!=l&&("'"==l&&bb(e)?e.query+="%27":e.query="#"==l?e.query+"%23":e.query+Cd(l,qi)):(e.fragment="",i=dd);break;case dd:null!=l&&(e.fragment+=Cd(l,Et))}o++}},Dd=function(e){var t=hc(this,Dd,"URL"),n=1<arguments.length?arguments[1]:void 0,r=String(e),i=DF(t,{type:"URL"});if(void 0!==n)if(n instanceof Dd)var o=Na(n);else if(n=Ic(o={},String(n)))throw TypeError(n);if(n=Ic(i,r,null,o))throw TypeError(n);var a=i.searchParams=new CF;(r=Hb(a)).updateSearchParams(i.query),r.updateURL=function(){i.query=String(a)||null},fa||(t.href=ui.call(t),t.origin=Pt.call(t),t.protocol=Qt.call(t),t.username=Rt.call(t),t.password=St.call(t),t.host=Tt.call(t),t.hostname=Ut.call(t),t.port=Vt.call(t),t.pathname=Wt.call(t),t.search=Xt.call(t),t.searchParams=Yt.call(t),t.hash=Zt.call(t))},im=Dd.prototype,ui=function(){var e=Na(this),t=e.scheme,n=e.username,r=e.password,i=e.host,o=e.port,a=e.path,s=e.query,u=e.fragment,c=t+":";return null!==i?(c+="//",""==e.username&&""==e.password||(c+=n+(r?":"+r:"")+"@"),c+=Hg(i),null!==o&&(c+=":"+o)):"file"==t&&(c+="//"),c+=e.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(c+="?"+s),null!==u&&(c+="#"+u),c},Pt=function(){var e=Na(this),t=e.scheme,n=e.port;if("blob"==t)try{return new Dd(t.path[0]).origin}catch(e){return"null"}return"file"!=t&&bb(e)?t+"://"+Hg(e.host)+(null!==n?":"+n:""):"null"},Qt=function(){return Na(this).scheme+":"},Rt=function(){return Na(this).username},St=function(){return Na(this).password},Tt=function(){var e=Na(this),t=e.host;return e=e.port,null===t?"":null===e?Hg(t):Hg(t)+":"+e},Ut=function(){var e=Na(this).host;return null===e?"":Hg(e)},Vt=function(){var e=Na(this).port;return null===e?"":String(e)},Wt=function(){var e=Na(this),t=e.path;return e.cannotBeABaseURL?t[0]:t.length?"/"+t.join("/"):""},Xt=function(){var e=Na(this).query;return e?"?"+e:""},Yt=function(){return Na(this).searchParams},Zt=function(){var e=Na(this).fragment;return e?"#"+e:""},$b=function(e,t){return{get:e,set:t,configurable:!0,enumerable:!0}};if(fa&&Wo(im,{href:$b(ui,(function(e){var t=Na(this);if(e=Ic(t,String(e)))throw TypeError(e);Hb(t.searchParams).updateSearchParams(t.query)})),origin:$b(Pt),protocol:$b(Qt,(function(e){var t=Na(this);Ic(t,String(e)+":",am)})),username:$b(Rt,(function(e){var t=Na(this);if(e=Td(String(e)),!$l(t)){t.username="";for(var n=0;n<e.length;n++)t.username+=Cd(e[n],Zl)}})),password:$b(St,(function(e){var t=Na(this);if(e=Td(String(e)),!$l(t)){t.password="";for(var n=0;n<e.length;n++)t.password+=Cd(e[n],Zl)}})),host:$b(Tt,(function(e){var t=Na(this);t.cannotBeABaseURL||Ic(t,String(e),dm)})),hostname:$b(Ut,(function(e){var t=Na(this);t.cannotBeABaseURL||Ic(t,String(e),em)})),port:$b(Vt,(function(e){var t=Na(this);$l(t)||(""==(e=String(e))?t.port=null:Ic(t,e,fm))})),pathname:$b(Wt,(function(e){var t=Na(this);t.cannotBeABaseURL||(t.path=[],Ic(t,e+"",Jg))})),search:$b(Xt,(function(e){var t=Na(this);""==(e=String(e))?t.query=null:("?"==e.charAt(0)&&(e=e.slice(1)),t.query="",Ic(t,e,le)),Hb(t.searchParams).updateSearchParams(t.query)})),searchParams:$b(Yt),hash:$b(Zt,(function(e){var t=Na(this);""==(e=String(e))?t.fragment=null:("#"==e.charAt(0)&&(e=e.slice(1)),t.fragment="",Ic(t,e,dd))}))}),Ea(im,"toJSON",(function(){return ui.call(this)}),{enumerable:!0}),Ea(im,"toString",(function(){return ui.call(this)}),{enumerable:!0}),Gg){var $t=Gg.createObjectURL,au=Gg.revokeObjectURL;$t&&Ea(Dd,"createObjectURL",(function(e){return $t.apply(Gg,arguments)})),au&&Ea(Dd,"revokeObjectURL",(function(e){return au.apply(Gg,arguments)}))}gc(Dd,"URL"),M({global:!0,forced:!Tl,sham:!fa},{URL:Dd});var PF=new Blob(["var fakeIdToId = {};onmessage = function (event) {\tvar data = event.data,\t\tname = data.name,\t\tfakeId = data.fakeId,\t\ttime;\tif(data.hasOwnProperty('time')) {\t\ttime = data.time;\t}\tswitch (name) {\t\tcase 'setInterval':\t\t\tfakeIdToId[fakeId] = setInterval(function () {\t\t\t\tpostMessage({fakeId: fakeId});\t\t\t}, time);\t\t\tbreak;\t\tcase 'clearInterval':\t\t\tif (fakeIdToId.hasOwnProperty (fakeId)) {\t\t\t\tclearInterval(fakeIdToId[fakeId]);\t\t\t\tdelete fakeIdToId[fakeId];\t\t\t}\t\t\tbreak;\t}}"]),QF=window.URL.createObjectURL(PF),Me={},Rf=0,uj=new Worker(QF);uj.onmessage=function(e){if(e=e.data.fakeId,Me.hasOwnProperty(e)){var t=Me[e];e=t.callback,t=t.parameters,e.apply(window,t)}};var RF=function(e){function t(){return X(this,t),n.apply(this,arguments)}ja(t,e);var n=ka(t);return Ia(t,[{key:"requestAsyncId",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return fw(e.flush.bind(e,this),n)}},{key:"recycleAsyncId",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;if(null!==n&&this.delay===n&&!1===this.pending)return t;Me.hasOwnProperty(t)&&(delete Me[t],uj.postMessage({name:"clearInterval",fakeId:t}))}}]),t}(pt),SF=new rt(RF),TF=["backups","servers"],UF=["backups","servers"],VF=["group"],jm=v.inflate,bu=v.deflate,cu=function(e){function t(e,i,o,a){X(this,t);var s=r.call(this,a,"Session");return m(n(s),"chatManager",void 0),m(n(s),"usedChannelIds",[]),m(n(s),"msgDedupLru",new Ac(void 0,{maxlen:200})),m(n(s),"startTime",Date.now()),m(n(s),"seq",U.fromNumber(1,!0)),m(n(s),"userJoinOptions",new nt(!1)),m(n(s),"seqSentStatuses",[!1,!1]),m(n(s),"dialogueSequenceLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"loggedOut",!1),m(n(s),"messageSentTimes",[]),m(n(s),"curLoginSockets",[void 0,void 0]),m(n(s),"loginSocketSubs",[{channels:new Map,receivers:[]},{channels:new Map,receivers:[]}]),m(n(s),"lastLoginSockets",[new Ee(1),new Ee(1)]),m(n(s),"dialPendingMsgSubjectMap",new Map),m(n(s),"context",void 0),m(n(s),"connection",void 0),m(n(s),"instanceId",void 0),m(n(s),"lastPingTime",void 0),m(n(s),"registerSocketsFailureListener",(function(){s.connection.once("socketsFailure",(function(){s.log("socketsFailure, creating a new connection"),hd((function(){return s.connection.removeAllListeners(),s.connection=new ct(s.context,s.logger,!0),s.loginHandler(15e3,!0)})).pipe(Ce((function(e){return e.pipe(jd(ie.getParameter("RECONNECTING_AP_INTERVAL")))})),rb(s.connection.apClient.apFinish$)).subscribe((function(){s.log("new connection connected")}))})),0===s.connection.listenerCount("tokenExpired")&&s.connection.on("tokenExpired",(function(){s.emit("tokenExpired")}))})),s.context=e,s.connection=i,s.instanceId=o,s.chatManager=new dF(a),s.lastPingTime=[0,0],s.setMaxListeners(512),s.log("The instanceId is %s",s.instanceId.toString()),s}ja(t,e);var r=ka(t);return Ia(t,[{key:"fetchFileUploadIndexGet",value:function(e){var n=e.hash,r=e.size;if(0===(e=this.getLoginSockets()).length)throw new L("Client is not logged in");var i=this.incGetSeq();return e.forEach((function(e){e.sendPacket("FileUploadIndexGet",{seq:i,hash:n,size:r})})),{ret:Da.apply(void 0,G(e.map((function(e){return e.fromReceived("FileUploadIndexRet").pipe(aa((function(e){return i.eq(e.seq)})))})))),fin:Da.apply(void 0,G(e.map((function(e){return e.fromReceived("FileUploadIndexFin").pipe(aa((function(e){return i.eq(e.seq)})))})))),err:cc.apply(void 0,G(e.map((function(e){return e.fromReceived("FileUploadIndexErr").pipe(aa((function(e){return i.eq(e.seq)})),ea((function(e){throw new da(["The media message upload failure, code %d",e.code],Dg)})))})))),timeout:t.genTimeoutError(ji)}}},{key:"requestFileUploadIndexSet",value:function(e){var n=e.hash,r=e.unit,i=e.servers;if(0===(e=this.getLoginSockets()).length)throw new L("Client is not logged in");var o=this.incGetSeq();return e.forEach((function(e){e.sendPacket("FileUploadIndexSet",{seq:o,servers:i,hash:n,unit:r})})),Da.apply(void 0,[t.genTimeoutError(ji)].concat(G(e.map((function(e){return e.fromReceived("FileUploadIndexErr").pipe(aa((function(e){return o.eq(e.seq)})),ea((function(e){throw new da(["FileUploadIndexSet failure, code %d",e.code],Dg)})))}))),G(e.map((function(e){return e.fromReceived("FileUploadIndexFin").pipe(aa((function(e){return o.eq(e.seq)})))})))))}},{key:"requestFileDownloadIndexGet",value:function(e){var n=e.size,r=e.zone,i=e.unit,o=e.hash,a=this.getLoginSockets();if(0===a.length)throw new L("Client is not logged in");var s=this.incGetSeq();return a.forEach((function(e){e.sendPacket("FileDownloadIndexGet",{seq:s,size:n,zone:r,unit:i,hash:o})})),e=Da.apply(void 0,G(a.map((function(e){return e.fromReceived("FileDownloadIndexRet").pipe(aa((function(e){return s.eq(e.seq)})))})))).pipe(ea((function(e){var t=e.backups,n=e.servers;return e=yf(e,TF),wa({backupList:t.map((function(e){return[e]})),serverList:n.map((function(e){return[e]}))},e)})),jd(500)),a=mn(a.map((function(e){return e.fromReceived("FileDownloadIndexRet").pipe(aa((function(e){return s.eq(e.seq)})))}))),Da(e,a.pipe(ea((function(e){return e.reduce((function(e,t){var n=e.backupList,r=e.serverList;e=t.backups;var i=t.servers;return t=yf(t,UF),wa({backupList:e.map((function(e,t){return[e].concat(G(void 0!==n&&Array.isArray(n[t])?n[t]:[]))})),serverList:i.map((function(e,t){return[e].concat(G(void 0!==n&&Array.isArray(r[t])?r[t]:[]))}))},t)}),{})}))),t.genTimeoutError(ji))}},{key:"loginHandler",value:function(){var e=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:12e3,n=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(this.loggedOut&&n)throw new L("Already logged out, request ignored");n&&this.registerSocketsFailureListener(),this.connection.initConnection();var r=this.getSocketLoginObservables(this.connection.lastOpenSockets,this.seq),i=Date.now();return r.forEach((function(t,r){var o=e.loginSocketSubs[r].login;void 0!==o&&o.unsubscribe(),e.loginSocketSubs[r].login=t.pipe(ba((function(t){var o;e.curLoginSockets[r]=t;var a=Date.now();hb("Link",{ackedServerIp:t.address,destServerIp:t.ip,ec:0,sc:0,elapse:ib(e.startTime),lts:U.fromNumber(a),responseTime:a-i,sid:ab(e.instanceId),userId:e.context.uid},null!==(o=e.context.config.enableCloudProxy)&&void 0!==o&&o),e.emit("userJoined",t.env),n&&e.connection.apClient.apFinish$.next(void 0)}))).subscribe(e.lastLoginSockets[r])})),this.initKeepAliveSender(),this.initKeepAliveReconnector(),this.initLoginReceiver(),cc.apply(void 0,G(r).concat([jb(this.connection,"connectionInitFailure").pipe(ba((function(e){if(ta(e)||Xa(e))throw e;throw new da("Login failure",{code:cs,originalError:e})})))])).pipe(Pa(1),kb(t),Ja((function(t){return t instanceof sb&&e.warn("Client login timeout"),t&&t.code===ii&&(e.connection.emit("tokenExpired"),e.connection.apClient.apFinish$.next(void 0)),e.clearSockets(0,n),Z(t)})),ba((function(){n||e.registerSocketsFailureListener()})),Tg((function(){n||e.connection.apClient.apFinish$.next(void 0)})))}},{key:"logoutHandler",value:function(){var e=J(x.mark((function e(){var t,n,r,i=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.loggedOut=!0,this.connection.apClient.apFinish$.next(void 0),t=this.getLoginSockets(),n=t.map((function(e){return e.sendPacket("UserQuit",{}),i.connection.waitClosing(e)})),this.clearSockets(5e3),r=t.map((function(e){return e.env})),[0,1].filter((function(e){return!r.includes(e)})).forEach((function(e){i.connection.closeSocket(e,0)})),e.abrupt("return",cc.apply(void 0,G(n)).toPromise());case 9:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"requestChannelJoin",value:function(){var e=J(x.mark((function e(t){var n,r,i,o=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==this.getLoginSockets().length){e.next=2;break}throw new L("Client is not logged in. Cannot join the channel",Zr);case 2:return n=jb(this,"channelLeft").pipe(zb((function(e){return t===e})),Pa(1)),r=this.incGetSeq(),(i=this.lastLoginSockets.map((function(e){return e.pipe(Lc((function(e,n){0!==n&&o.incSeqIfNeeded(e.env);var i=0===n?r:o.seq;return e.sendPacket("GroupEnter",{account:t,seq:i}),e.fromReceived("GroupReply").pipe(aa((function(e){return i.eq(e.seq)})),ba((function(e){if(0!==(e=e.code))throw new da(["Channel join failure. The response code is %d",e],Vr)})))})),rb(n),De())}))).forEach((function(e,n){var r=function(){return o.loginSocketSubs[n].channels.delete(t)};o.loginSocketSubs[n].channels.set(t,e.subscribe({error:r,complete:r}))})),e.next=8,cc.apply(void 0,G(i)).pipe(Pa(1),kb(1e4),Ja((function(e){return e instanceof sb&&o.warn("Channel join timeout"),Z(e)}))).toPromise();case 8:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"requestChannelLeave",value:function(e){this.getLoginSockets().forEach((function(t){t.sendPacket("GroupLeave",{account:e})}))}},{key:"requestChannelMemberList",value:function(e){var n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in. Cannot get the channel members",ZB);var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("GroupAllUsersList",{group:e,pageNumber:0,pageSize:200,seq:r})})),Da.apply(void 0,[t.genTimeoutError(Tr)].concat(G(n.map((function(t){return t.fromReceived("GroupAllUsersResult").pipe(aa((function(t){var n=t.seq;return t.group===e&&r.eq(n)})))})))))}},{key:"requestPeersOnlineStatus",value:function(e){var n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in");var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("UserStatusList",{users:e,seq:r})})),Da.apply(void 0,[t.genTimeoutError(kC)].concat(G(n.map((function(e){return e.fromReceived("UserStatusResult").pipe(aa((function(e){return r.eq(e.seq)})))})))))}},{key:"requestSetLocalUserAttributes",value:function(e,n){var r=this,i=this.getLoginSockets();if(0===i.length)throw new L("Client is not logged in");var o=this.incGetSeq();return i.forEach((function(t,i){void 0!==n&&i!==n||t.sendPacket("UserAttributeSet",{account:r.context.uid,attributeInfos:Object.entries(e).map((function(e){return{key:(e=ua(e,2))[0],value:e[1]}})),seq:o})})),Da.apply(void 0,G(i.map((function(e){return e.fromReceived("UserAttributeErr").pipe(aa((function(e){return o.eq(e.seq)})),ea((function(e){throw new da(["The user attributes set failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(i.map((function(e){return e.fromReceived("UserAttributeRsp").pipe(aa((function(e){return o.eq(e.seq)})))})))))}},{key:"requestSetChannelAttributes",value:function(e,n,r){var i=this.getLoginSockets();if(0===i.length)throw new L("Client is not logged in");var o=this.incGetSeq();return i.forEach((function(t){t.sendPacket("GroupAttributeSet",{broadcast:r,group:e,attributeInfos:Object.entries(n).map((function(e){return{key:(e=ua(e,2))[0],value:e[1]}})),seq:o})})),Da.apply(void 0,G(i.map((function(e){return e.fromReceived("GroupAttributeErr").pipe(aa((function(e){return o.eq(e.seq)})),ea((function(e){throw new da(["The group attributes set failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(i.map((function(e){return e.fromReceived("GroupAttributeRsp").pipe(aa((function(e){return o.eq(e.seq)})))})))))}},{key:"requestAddOrUpdateLocalUserAttributes",value:function(e){var n=this,r=this.getLoginSockets();if(0===r.length)throw new L("Client is not logged in");var i=this.incGetSeq();return r.forEach((function(t){t.sendPacket("UserAttributeMod",{account:n.context.uid,attributeInfos:Object.entries(e).map((function(e){return{key:(e=ua(e,2))[0],value:e[1]}})),seq:i})})),Da.apply(void 0,G(r.map((function(e){return e.fromReceived("UserAttributeErr").pipe(aa((function(e){return i.eq(e.seq)})),ea((function(e){throw new da(["The user attributes add or update failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(r.map((function(e){return e.fromReceived("UserAttributeRsp").pipe(aa((function(e){return i.eq(e.seq)})))})))))}},{key:"requestAddOrUpdateChannelAttributes",value:function(e,n,r){var i=this.getLoginSockets();if(0===i.length)throw new L("Client is not logged in");var o=this.incGetSeq();return i.forEach((function(t){t.sendPacket("GroupAttributeMod",{broadcast:r,group:e,attributeInfos:Object.entries(n).map((function(e){return{key:(e=ua(e,2))[0],value:e[1]}})),seq:o})})),Da.apply(void 0,G(i.map((function(e){return e.fromReceived("GroupAttributeErr").pipe(aa((function(e){return o.eq(e.seq)})),ea((function(e){throw new da(["The group attributes add or update failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(i.map((function(e){return e.fromReceived("GroupAttributeRsp").pipe(aa((function(e){return o.eq(e.seq)})))})))))}},{key:"requestDeleteLocalUserAttributesByKeys",value:function(e){var n=this,r=this.getLoginSockets();if(0===r.length)throw new L("Client is not logged in");var i=this.incGetSeq();return r.forEach((function(t){t.sendPacket("UserAttributeDel",{account:n.context.uid,attributes:e,seq:i})})),Da.apply(void 0,G(r.map((function(e){return e.fromReceived("UserAttributeErr").pipe(aa((function(e){return i.eq(e.seq)})),ea((function(e){throw new da(["The user attributes delete failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(r.map((function(e){return e.fromReceived("UserAttributeRsp").pipe(aa((function(e){return i.eq(e.seq)})))})))))}},{key:"requestDeleteChannelAttributesByKeys",value:function(e,n,r){var i=this.getLoginSockets();if(0===i.length)throw new L("Client is not logged in");var o=this.incGetSeq();return i.forEach((function(t){t.sendPacket("GroupAttributeDel",{group:e,broadcast:r,attributes:n,seq:o})})),Da.apply(void 0,G(i.map((function(e){return e.fromReceived("GroupAttributeErr").pipe(aa((function(e){return o.eq(e.seq)})),ea((function(e){throw new da(["The channel attributes delete failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(i.map((function(e){return e.fromReceived("GroupAttributeRsp").pipe(aa((function(e){return o.eq(e.seq)})))})))))}},{key:"requestClearLocalUserAttributes",value:function(){var e=this,n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in");var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("UserAttributeSet",{account:e.context.uid,seq:r,attributeInfos:[]})})),Da.apply(void 0,G(n.map((function(e){return e.fromReceived("UserAttributeErr").pipe(aa((function(e){return r.eq(e.seq)})),ea((function(e){throw new da(["The user attributes clear failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(n.map((function(e){return e.fromReceived("UserAttributeRsp").pipe(aa((function(e){return r.eq(e.seq)})))})))))}},{key:"requestClearChannelAttributes",value:function(e,n){var r=this.getLoginSockets();if(0===r.length)throw new L("Client is not logged in");var i=this.incGetSeq();return r.forEach((function(t){t.sendPacket("GroupAttributeSet",{group:e,seq:i,attributeInfos:[],broadcast:n})})),Da.apply(void 0,G(r.map((function(e){return e.fromReceived("GroupAttributeErr").pipe(aa((function(e){return i.eq(e.seq)})),ea((function(e){throw new da(["The channel attributes clear failure, code %d",e.code],Xb)})))}))).concat([t.genTimeoutError(Yb)],G(r.map((function(e){return e.fromReceived("GroupAttributeRsp").pipe(aa((function(e){return i.eq(e.seq)})))})))))}},{key:"requestGetUserAttributesByKeys",value:function(e,n){var r=this.getLoginSockets();if(0===r.length)throw new L("Client is not logged in");var i=this.incGetSeq();return r.forEach((function(t){t.sendPacket("UserAttributeGet",{account:e,seq:i,attributes:n})})),Da.apply(void 0,[t.genTimeoutError(Yb)].concat(G(r.map((function(e){return e.fromReceived("UserAttributeErr").pipe(aa((function(e){return i.eq(e.seq)})),ea((function(e){if(10008===(e=e.code))throw new da("The user requested is not online",Pr);throw new bd(["User attribute operation unknown error code: %d",e],Xb)})))}))),G(r.map((function(e){return e.fromReceived("UserAttributeRet").pipe(aa((function(e){return i.eq(e.seq)})))})))))}},{key:"requestGetChannelAttributesByKeys",value:function(e,n){var r=this.getLoginSockets();if(0===r.length)throw new L("Client is not logged in");var i=this.incGetSeq();return r.forEach((function(t){t.sendPacket("GroupAttributeGet",{group:e,seq:i,attributes:n})})),Da.apply(void 0,[t.genTimeoutError(Yb)].concat(G(r.map((function(e){return e.fromReceived("GroupAttributeErr").pipe(aa((function(e){return i.eq(e.seq)})),ea((function(e){throw new da(["The channel attributes get failure, code %d",e.code],Xb)})))}))),G(r.map((function(e){return e.fromReceived("GroupAttributeRet").pipe(aa((function(e){return i.eq(e.seq)})))})))))}},{key:"requestGetUserAttributeKeys",value:function(e){var n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in");var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("UserAttributeKeysGet",{account:e,seq:r})})),Da.apply(void 0,[t.genTimeoutError(Yb)].concat(G(n.map((function(e){return e.fromReceived("UserAttributeErr").pipe(aa((function(e){return r.eq(e.seq)})),ea((function(e){if(10008===(e=e.code))throw new da("The user requested is not online",Pr);throw new bd(["User attribute operation unknown error code: %d",e],Xb)})))}))),G(n.map((function(e){return e.fromReceived("UserAttributeKeysRet").pipe(aa((function(e){return r.eq(e.seq)})))})))))}},{key:"requestGetChannelAttributesKeys",value:function(e){var n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in");var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("GroupAttributeKeysGet",{group:e,seq:r})})),Da.apply(void 0,[t.genTimeoutError(Yb)].concat(G(n.map((function(e){return e.fromReceived("GroupAttributeErr").pipe(aa((function(e){return r.eq(e.seq)})),ea((function(e){throw new bd(["Channel attribute operation unknown error code: %d",e.code],Xb)})))}))),G(n.map((function(e){return e.fromReceived("GroupAttributeKeysRet").pipe(aa((function(e){return r.eq(e.seq)})))})))))}},{key:"requestGetChannelMemberCount",value:function(e){var n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in");var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("GroupStatusList",{groups:e,seq:r})})),Da.apply(void 0,[t.genTimeoutError(Tr)].concat(G(n.map((function(e){return e.fromReceived("GroupStatusResult").pipe(aa((function(e){return r.eq(e.seq)})))})))))}},{key:"requestSubscribePeersOnlineStatus",value:function(e){var n=this.getLoginSockets();if(0===n.length)throw new L("Client is not logged in");var r=this.incGetSeq();return n.forEach((function(t){t.sendPacket("SubscribeUserStatus",{seq:r,users:e})})),Da.apply(void 0,[t.genTimeoutError(rC)].concat(G(n.map((function(e){return e.fromReceived("SubscribeResponse").pipe(aa((function(e){return r.eq(e.seq)})))})))))}},{key:"requestUnsubscribePeersOnlineStatus",value:function(e){var t=this.getLoginSockets();if(0===t.length)throw new L("Client is not logged in");var n=this.incGetSeq();t.forEach((function(t){t.sendPacket("UnsubscribeUserStatus",{seq:n,users:e})}))}},{key:"sendInvitationMessage",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l,f,h,p,d=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.peerId,r=t.callId,i=t.extra,o=t.isAcceptAck,a=t.channelId,s=t.type,u={callId:r},void 0===o){e.next=6;break}if("CallAccept"===s){e.next=5;break}throw Error("invalid invitation type");case 5:u.type=o?"ack":"request";case 6:return u.channel=a,("CallInvite"===s||"CallCancel"===s||"CallReject"===s||"CallAccept"===s&&!1===o)&&void 0!==i&&(u.extra=i),c=Yg(),this.log("The sent invitation body is %o",u),l=function(e){return{MiscMap:{},sequence:U.fromNumber(1),dialogue:c,instance:d.instanceId,dst:n,ms:U.fromNumber(Date.now(),!0),options:new ke({IterationNumber:e,MessageType:s}).toLong(),payload:(new TextEncoder).encode(JSON.stringify(u)),src:d.context.uid}},e.next=14,Ob(this.sendMessageToRetry(l,!0)).pipe(kb(1e4),Ja((function(e){return e instanceof sb&&d.warn("Send invitation timeout"),Z(e)}))).toPromise();case 14:return f=e.sent,h=f.code,p=f.retryTimes,e.abrupt("return",{hasPeerReceived:0===h,hasReSent:0!==p});case 18:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"sendMediaMessage",value:function(){var e=J(x.mark((function e(t,n,r,i,o,a){var s,u,c,l,f,h,p,d,v,b,g,y,E,w,_,O,A,I,k,R,T,S,N,C,L,P,j,D,M,F=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(u=n.width,c=void 0===u?0:u,l=n.height,f=void 0===l?0:l,h=n.fileName,p=void 0===h?"":h,d=n.description,v=void 0===d?"":d,b=n.thumbnail,g=void 0===b?new Blob:b,y=n.thumbnailHeight,E=void 0===y?0:y,w=n.thumbnailWidth,_=void 0===w?0:w,O=n.size,A=void 0===O?0:O,I=n.mediaId,k=o.enableOfflineMessaging,R=o.enableHistoricalMessaging,Aa(r)){e.next=4;break}throw new H("The send message arguments are not valid",i?Gl:Ag);case 4:if(!(32768<new Blob([p,g,v]).size)){e.next=6;break}throw new H("The size of message overflowed ",i?Ie:fi);case 6:return T=this.chatManager.getChatInfo(r),S=T.dialogue,N=T.sequence,C=this.instanceId,this.log('A%s media message is sending to %s: "'.concat(C,"-").concat(S,"#").concat(N,'"'),i?" peer":" channel",pa(r)),m(s={},"media_description",v),m(s,"media_width",c),m(s,"media_height",f),m(s,"media_thumbnailwidth",_),m(s,"media_thumbnailheight",E),m(s,"media_size",A),m(s,"media_id",I),m(s,"media_filename",p),L=Bc(s,(function(e){return(new TextEncoder).encode(e.toString())})),e.t0=Uint8Array,e.next=14,pj(g);case 14:return e.t1=e.sent,L.media_thumbnail=new e.t0(e.t1),P=i&&"IMAGE"===t?"PeerImageMessage":i&&"FILE"===t?"PeerFileMessage":i||"IMAGE"!==t?"ChannelFileMessage":"ChannelImageMessage",j=function(e){return{MiscMap:L,sequence:N,dialogue:S,instance:C,dst:r,ms:U.fromNumber(Date.now(),!0),options:new ke({IterationNumber:e,CompressionMethod:"Uncompressed",MessageType:P,ToCache:k,ToArchive:R}).toLong(),payload:new Uint8Array,src:F.context.uid}},e.next=20,Ob(this.sendMessageToRetry(j,!0)).pipe(kb(void 0===a?1e4:a),Ja((function(e){return e instanceof sb&&F.warn("Send message timeout"),Z(e)}))).toPromise();case 20:if(D=e.sent,2!==(M=D.code)){e.next=24;break}throw new da("The peer does not support this type of message",jC);case 24:return e.abrupt("return",{hasPeerReceived:0===M});case 25:case"end":return e.stop()}}),e,this)})));return function(t,n,r,i,o,a){return e.apply(this,arguments)}}()},{key:"sendRawMessage",value:function(){var e=J(x.mark((function e(t,n,r,i,o,a){var s,u,c,l,f,h,p,d,v,b,g=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=o.enableOfflineMessaging,u=o.enableHistoricalMessaging,Aa(r)&&t instanceof Uint8Array&&"string"==typeof n){e.next=3;break}throw new H("The send message arguments are not valid",i?Gl:Ag);case 3:if(!(32768<t.byteLength+new Blob([n]).size)){e.next=5;break}throw new lb("The message size is over the 32KB limit",i?Ie:fi);case 5:return c=!ie.getParameter("DISABLE_MESSAGE_COMPRESSION")&&128<=t.byteLength,l=this.chatManager.getChatInfo(r),f=l.dialogue,h=l.sequence,p=this.instanceId,this.log('A%s %s raw message is sending to %s: "'.concat(p,"-").concat(f,"#").concat(h,'"'),c?" compressed":"",i?"peer":"channel",pa(r)),d=function(e){return{MiscMap:{description:(new TextEncoder).encode(n)},sequence:h,dialogue:f,instance:p,dst:r,ms:U.fromNumber(Date.now(),!0),options:new ke({IterationNumber:e,CompressionMethod:c?"Zlib":"Uncompressed",MessageType:i?"PeerRawMessage":"ChannelRawMessage",ToCache:s,ToArchive:u}).toLong(),payload:c?bu(t):t,src:g.context.uid}},e.next=12,Ob(this.sendMessageToRetry(d,!0)).pipe(kb(void 0===a?1e4:a),Ja((function(e){return e instanceof sb&&g.warn("Send message timeout"),Z(e)}))).toPromise();case 12:return v=e.sent,b=v.code,e.abrupt("return",{hasPeerReceived:0===b});case 15:case"end":return e.stop()}}),e,this)})));return function(t,n,r,i,o,a){return e.apply(this,arguments)}}()},{key:"sendTextMessage",value:function(){var e=J(x.mark((function e(t,n,r,i,o){var a,s,u,c,l,f,h,p,d,v,b,g=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=i.enableOfflineMessaging,s=i.enableHistoricalMessaging,Aa(n)){e.next=3;break}throw new H("The send message arguments are not valid",r?Gl:Ag);case 3:if(!(32768<new Blob([t]).size)){e.next=5;break}throw new lb("The message size is over the 32KB limit",r?Ie:fi);case 5:return u=!ie.getParameter("DISABLE_MESSAGE_COMPRESSION")&&128<=new Blob([t]).size,c=this.chatManager.getChatInfo(n),l=c.dialogue,f=c.sequence,h=this.instanceId,this.log('A%s %s message is sending to %s: "'.concat(h,"-").concat(l,"#").concat(f,'"'),u?" compressed":"",r?"peer":"channel",pa(n)),p=(new TextEncoder).encode(t),d=function(e){return{MiscMap:{},sequence:f,dialogue:l,instance:h,dst:n,ms:U.fromNumber(Date.now(),!0),options:new ke({IterationNumber:e,CompressionMethod:u?"Zlib":"Uncompressed",MessageType:r?"PeerTextMessage":"ChannelTextMessage",ToCache:a,ToArchive:s}).toLong(),payload:u?bu(p):p,src:g.context.uid}},e.next=13,Ob(this.sendMessageToRetry(d,!0)).pipe(kb(void 0===o?1e4:o),Ja((function(e){return e instanceof sb&&g.warn("Send message timeout"),Z(e)}))).toPromise();case 13:return v=e.sent,b=v.code,e.abrupt("return",{hasPeerReceived:0===b});case 16:case"end":return e.stop()}}),e,this)})));return function(t,n,r,i,o){return e.apply(this,arguments)}}()},{key:"cleanLoginSubs",value:function(e,t){Object.entries(this.loginSocketSubs[e]).forEach((function(e){var n=(e=ua(e,2))[1];"channels"===e[0]&&t||(Array.isArray(n)||n instanceof Map?n.forEach((function(e){return e.unsubscribe()})):n&&n.unsubscribe())})),this.loginSocketSubs[e]={channels:t?this.loginSocketSubs[e].channels:new Map,receivers:[]}}},{key:"sendMessageToRetry",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l,f,h=this,p=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=2<p.length&&void 0!==p[2]?p[2]:0,this.log("Attempt to send the message ".concat(n?" with retrying, %o":"without retrying"),{retryTimes:r}),0!==(i=this.getLoginSockets()).length){e.next=5;break}throw Error("no logged-in sockets");case 5:return o=t(r),i.forEach((function(e){e.sendPacket("Message",o)})),a=o.dialogue,s=o.sequence,u=o.instance,c=i.map((function(e){return e.fromReceived("Ack").pipe(zb((function(e){return a.eq(e.dialogue)&&s.eq(e.sequence)&&u.eq(e.instance)})))})),e.prev=9,e.next=12,cc.apply(void 0,G(c)).pipe(kb(6e3),Ja((function(e){return Xa(e)&&h.warn("Message send timeout, retry times %d",r),Z(e)})),Pa(1)).toPromise();case 12:return l=e.sent,f=l.code,this.log("The message has been acked, %o",{code:f}),e.abrupt("return",{code:f,retryTimes:r});case 18:if(e.prev=18,e.t0=e.catch(9),!(e.t0 instanceof sb&&n)){e.next=22;break}return e.abrupt("return",this.sendMessageToRetry(t,!1,r+1));case 22:throw e.t0;case 23:case"end":return e.stop()}}),e,this,[[9,18]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"initKeepAliveSender",value:function(){var e=this;this.lastLoginSockets.map((function(t){return t.pipe(Lc((function(t){return Kc(0,2500,pe()?void 0:SF).pipe(ba((function(){e.sendPing(t)})))})))})).forEach((function(t,n){var r=e.loginSocketSubs[n].keepAlive;void 0!==r&&r.unsubscribe(),e.loginSocketSubs[n].keepAlive=t.subscribe({error:function(){}})}))}},{key:"initKeepAliveReconnector",value:function(){var e=this;this.lastLoginSockets.map((function(e){return e.pipe(Lc((function(e){var t,n=!1,r=e.userJoin$.pipe(ba((function(){n=!0}))),i=e.input$.pipe(ba((function(e){"Ping"!==rj[e.uri].slice(0,-3)&&(n=!1)})));return cc(Kc(6e3,1e4).pipe(Jv(e.receivedPacket),ba((function(r){r=ua(r,2),r=ua(r[1],2)[1],t!==r||n||e.forceReconnect(),t=r}))),r,i)})))})).forEach((function(t,n){var r=e.loginSocketSubs[n].keepAliveReconnector;void 0!==r&&r.unsubscribe(),e.loginSocketSubs[n].keepAliveReconnector=t.subscribe({error:function(){}})}))}},{key:"initLoginReceiver",value:function(){var e=this;this.lastLoginSockets.map((function(t){return t.pipe(Lc((function(t){return cc(jb(t,"reconnect").pipe(ba(e.onSocketReconnect(t))),t.fromReceived("Message").pipe(ba(e.onMessage(t))),t.fromReceived("GroupEnterNotice").pipe(ba(e.onGroupEnterNotice())),t.fromReceived("GroupLeaveNotice").pipe(ba(e.onGroupLeaveNotice())),t.fromReceived("GroupCountNotice").pipe(ba(e.onGroupCountNotice())),t.fromReceived("GroupAttributeAlt").pipe(ba(e.onGroupAttributeAlt())),t.fromReceived("UserJoinNotice").pipe(ba(e.onUserNotice(S.PeerOnlineState.ONLINE))),t.fromReceived("UserQuitNotice").pipe(ba(e.onUserNotice(S.PeerOnlineState.OFFLINE))),t.fromReceived("UserWaitNotice").pipe(ba(e.onUserNotice(S.PeerOnlineState.UNREACHABLE))),t.fromReceived("Pong").pipe(ba(e.onPong())),t.fromReceived("UserDrop").pipe(ba(e.onUserDrop(t)))).pipe(If(void 0))})))})).forEach((function(t,n){e.loginSocketSubs[n].receivers.push(t.subscribe({error:function(){}}))}))}},{key:"requestSocketLogin",value:function(e,t,n){var r=this;return ln(hd((function(){r.userJoinOptions=new nt(t),e.sendPacket("UserJoin",{account:r.context.uid,instance:r.instanceId,opt:r.userJoinOptions.toLong(),seq:n,ticket:e.ticket})})),e.fromReceived("UserResp").pipe(aa((function(e){return n.eq(e.seq)})),ba((function(t){if(0!==(t=t.code))throw r.clearSockets(),r.logError("Connected to gateway success but the Rtm server rejected login"),new da(["Login failure. The response code from the RTM service is %d",t],Bg);e.attemptsSinceLastError=0,e.loggedIn=!0,r.log("ENV_%d logged in",e.env)})),If(e),kb(6e3))).pipe(zb((function(e){return void 0!==e})),Ja((function(n){return n instanceof sb&&r.warn("Login response timeout, rejoin: %s",t),r.clearSockets(),n.name="loginRespTimeout",r.emit("banEdgeIP",e.ip),Z(n)})))}},{key:"getSocketLoginObservables",value:function(e,t){var n=this;return e.map((function(e){return e.pipe(Lc((function(e,r){return n.incSeqIfNeeded(e.env),n.requestSocketLogin(e,0!==r,0===r?t:n.seq)})),De())}))}},{key:"incSeqIfNeeded",value:function(e){if(![0,1].includes(e))throw new Ha({INVALID_ENV:"The env argument is not 0 or 1"});this.seqSentStatuses[e]&&(this.seq=this.seq.add(1),this.seqSentStatuses=[!1,!1]),this.seqSentStatuses[e]=!0}},{key:"incGetSeq",value:function(){return this.seq=this.seq.add(1),this.seqSentStatuses=[!0,!0],this.seq}},{key:"getLoginSockets",value:function(){for(var e=this.curLoginSockets,t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i}},{key:"emitMessage",value:function(e,n){var r=e.options,i=e.payload,o=e.src,a=e.dst,s=e.instance,u=e.dialogue,c=e.sequence,l=e.ms,f=e.MiscMap;this.dialogueSequenceLru.set(u.toString(),c),s="".concat(s,"-").concat(u,"#").concat(c),this.msgDedupLru.has(s)?this.warn("Env_%d: Messages out-of-order or not start with 1: %s",n,s):(this.msgDedupLru.set(s,void 0),n=new ke(r),this.lastLoginSockets.forEach(function(){var n=J(x.mark((function n(r){var i;return x.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,r.pipe(Pa(1)).toPromise();case 2:i=n.sent,t.sendMessageAck(e,i);case 4:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()),r=n.isZlibCompressed(),n.isInvitation()?(a=ra(r?jm($n(i,Uint8Array.of(0,0,0,0))):i),a=JSON.parse(a),this.log("The received invitation body is %o",a),this.emit("invitationMessage",{body:a,type:n.getInvitationType(),peerId:o,serverReceivedTs:l.toNumber()})):n.isTextMessage()?(f=n.isPeerTextMessage(),i=ra(r?jm($n(i,Uint8Array.of(0,0,0,0))):i),this.info("Received a %s %s text message from %s to %s, %s",r?" compressed":"",f?"peer":"channel",pa(o),pa(a),s),f?(o={text:i,peerId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:n.isFromCache()}},this.emit("peerTextMessage",o)):this.emit("channelTextMessage",{channelId:a,memberId:o,text:i,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:!1}})):n.isRawMessage()?(u=n.isRawPeerMessage(),f=void 0===(f=f.description)?"":ra(f),i=r?jm(i):i,this.info("Received a %s %s raw message from %s to %s, %s",r?" compressed":"",u?"peer":"channel",pa(o),pa(a),s),u?(o={desc:f,raw:i,peerId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:n.isFromCache()}},this.emit("peerRawMessage",o)):this.emit("channelRawMessage",{desc:f,raw:i,channelId:a,memberId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:!1}})):(n.isImageMessage()||n.isFileMessage())&&(i=n.isPeerMessage(),this.info("Received a %s media message from %s to %s, %s",i?"peer":"channel",pa(o),pa(a),s),i?this.emit("peerMediaMessage",{messageType:n.isImageMessage()?"IMAGE":"FILE",details:f,peerId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:n.isFromCache()}}):this.emit("channelMediaMessage",{messageType:n.isImageMessage()?"IMAGE":"FILE",details:f,memberId:o,channelId:a,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:n.isFromCache()}})))}},{key:"onSocketReconnect",value:function(e){var t=this;return function(){var n=[0,1].filter((function(t){return t!==e.env}))[0];(n=t.connection.curOpenSockets[n])&&!n.loggedIn&&t.emit("connectionLost")}}},{key:"onUserDrop",value:function(e){var t=this;return function(n){var r;n=n.code,hb("KickedOff",{code:0,elapse:ib(t.startTime),linkId:parseInt(e.name.split("-")[1],10),lts:U.fromNumber(Date.now()),server:e.address,serverCode:n,sid:ab(t.instanceId),userId:t.context.uid},null!==(r=t.context.config.enableCloudProxy)&&void 0!==r&&r),10006===n||10001===n?t.warn("Login too often and kicked off, reconnect and login"):10009===n?(t.warn("The instance ID conflicts, reconnecting"),t.instanceId=Yg(),t.context.sid=ab(t.instanceId),t.emit("instanceChanged",t.instanceId)):[11,14,15,16].includes(n)&&(t.emit("userDrop",n),t.clearSockets())}}},{key:"clearSockets",value:function(){var e=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,n=1<arguments.length&&void 0!==arguments[1]&&arguments[1];[0,1].forEach((function(r){e.cleanLoginSubs(r,n),e.connection.closeSocket(r,t)}))}},{key:"onMessage",value:function(e){var t=this;return function(n){var r=n.dialogue,i=n.instance,o=n.sequence,a=n.options;if(n.src===t.context.uid)t.log("The message is from the local account, ignored");else{var s=r.toString(),u=t.dialPendingMsgSubjectMap.get(s);if(r="".concat(i,"-").concat(r,"#").concat(o),u)u.next(n),t.log("Env_%d: The dialogue has pending messages, next: %s",e.env,r);else{var c=t.dialogueSequenceLru.get(s);if(u=!c&&o.eq(1),i=void 0!==c&&o.sub(c).eq(1),u||i)t.emitMessage(n,e.env);else{if(c){if(o.lte(c))return;t.log("Env_%d: The message pended, the sequence is not continuous with the last: %s",e.env,r)}else t.log("Env_%d: The message pended, the first sequence is not equal to 1: %s",e.env,r);o=new Ua,t.dialPendingMsgSubjectMap.set(s,o);var l=o.pipe(Ku(vl),Ug((function(e,t){return[].concat(G(e),[t])}),[]),ea((function(e){return G(e).sort((function(e,t){return e=e.sequence,t=t.sequence,e.eq(t)?0:e.gt(t)?1:-1}))})),vn(1));a=!(a=new ke(a)).isFromCache()&&!a.isBufferedMessage(),l.pipe(rb(Kc(a?750:1500)),aa((function(e){if(2>e.length)return!1;for(var t=void 0===c?U.fromNumber(1,!0):c.add(1),n=0;n<e.length;t=t.add(1),n++)if(!e[n].sequence.eq(t))return!1;return!0})),Tg((function(){t.dialPendingMsgSubjectMap.delete(s)}))).subscribe((function(n){n.forEach((function(n){t.emitMessage(n,e.env),t.log("Env_%d: The message queue has fully ordered, emitting: %s",e.env,"".concat(n.instance,"-").concat(n.dialogue,"#").concat(n.sequence))}))}),(function(n){n instanceof Sg&&l.pipe(Pa(1)).subscribe((function(n){return n.forEach((function(n){t.log("Env_%d: The message pending queue expired, emitting: %s",e.env,"".concat(n.instance,"-").concat(n.dialogue,"#").concat(n.sequence)),t.emitMessage(n,e.env)}))}))})),o.next(n)}}}}}},{key:"onPong",value:function(){var e=this;return function(){document.hidden&&e.getLoginSockets().forEach((function(t){e.sendPing(t)}))}}},{key:"onGroupEnterNotice",value:function(){var e=this;return function(t){e.emit("memberNotice",{channelId:t.group,seq:t.seq,instance:t.instance,memberId:t.user,type:"MemberJoined",size:t.size})}}},{key:"onGroupLeaveNotice",value:function(){var e=this;return function(t){e.emit("memberNotice",{channelId:t.group,seq:t.seq,instance:t.instance,memberId:t.user,type:"MemberLeft",size:t.size})}}},{key:"onGroupCountNotice",value:function(){var e=this;return function(t){e.emit("memberNotice",{channelId:t.group,seq:t.seq,instance:t.instance,type:"MemberCountUpdated",size:t.size})}}},{key:"onGroupAttributeAlt",value:function(){var e=this;return function(t){var n=t.group;t=yf(t,VF),e.emit("channelAttributesUpdated",wa({channelId:n},t))}}},{key:"onUserNotice",value:function(e){var t=this;return function(n){t.emit("peerOnlineStatusChanged",{peerId:n.user,instance:n.instance,seq:n.seq,state:e})}}},{key:"sendPing",value:function(e){2500>=Date.now()-this.lastPingTime[e.env]||(this.incSeqIfNeeded(e.env),e.sendPacket("Ping",{ms:U.fromNumber(Date.now(),!0),seq:this.seq}),this.lastPingTime[e.env]=Date.now())}}],[{key:"sendMessageAck",value:function(e,t){var n=new ke(e.options);(n.isInvitation()||n.isPeerMessage())&&t.sendPacket("Ack",{code:0,dialogue:e.dialogue,instance:e.instance,sequence:e.sequence})}}]),t}(wb());m(cu,"genTimeoutError",(function(e,t){return eb(void 0).pipe(jd(void 0===t?1e4:t),ea((function(){throw new gb(["Request timed out after %ds",void 0===t?1e4:t],e)})))}));var du,km,lm=0,mm=0;de.v1=function(e,t,n){n=t&&n||0;var r=t||[],i=(e=e||{}).node||du,o=void 0!==e.clockseq?e.clockseq:km;if(null==i||null==o){var a=Nr();null==i&&(i=du=[1|a[0],a[1],a[2],a[3],a[4],a[5]]),null==o&&(o=km=16383&(a[6]<<8|a[7]))}a=void 0!==e.msecs?e.msecs:(new Date).getTime();var s=void 0!==e.nsecs?e.nsecs:mm+1,u=a-lm+(s-mm)/1e4;if(0>u&&void 0===e.clockseq&&(o=o+1&16383),(0>u||a>lm)&&void 0===e.nsecs&&(s=0),1e4<=s)throw Error("uuid.v1(): Can't create more than 10M uuids/sec");for(lm=a,mm=s,km=o,e=(1e4*(268435455&(a+=122192928e5))+s)%4294967296,r[n++]=e>>>24&255,r[n++]=e>>>16&255,r[n++]=e>>>8&255,r[n++]=255&e,e=a/4294967296*1e4&268435455,r[n++]=e>>>8&255,r[n++]=255&e,r[n++]=e>>>24&15|16,r[n++]=e>>>16&255,r[n++]=o>>>8|128,r[n++]=255&o,o=0;6>o;++o)r[n+o]=i[o];return t||Or(r)},de.v4=de;var nm=ni(),Ed,uf=S.LocalInvitationFailureReason,Ca=S.LocalInvitationState,WF=(Ed=function(e){function t(e,i,o){X(this,t);var a=r.call(this,o,"RtmLocalInvitation",!0);return m(n(a),"state",Ca.IDLE),m(n(a),"localInvitationEnd$",Da(jb(n(a),"LocalInvitationAccepted"),jb(n(a),"LocalInvitationRefused"),jb(n(a),"LocalInvitationFailure"),jb(n(a),"LocalInvitationCanceled")).pipe(Pa(1))),m(n(a),"callId",de.v4()),m(n(a),"_content",""),m(n(a),"_channelId",""),m(n(a),"_response",""),m(n(a),"calleeId",void 0),m(n(a),"logger",void 0),m(n(a),"getSession",void 0),a.calleeId=e,a.getSession=i,a.logger=o,a}ja(t,e);var r=ka(t);return Ia(t,[{key:"channelId",get:function(){return this._channelId},set:function(e){this.state!==Ca.IDLE?this.info("set channelId only allow before invitation sent to remote"):(this.log("set channelId for %s",this.callId),this._channelId=e)}},{key:"content",get:function(){return this._content},set:function(e){this.log("set content for %s",this.callId),this._content=e}},{key:"response",get:function(){return this._response},set:function(e){throw new H('Cannot set the "response" of the LocalInvitation instance.',Ec)}},{key:"send",value:function(){var e,t=this;if(this.state===Ca.SENT_TO_REMOTE||this.state===Ca.RECEIVED_BY_REMOTE)throw new L("The local invitation send failure. The call invitation has already been sent.",cC);if(this.isLocalInvitationEnd())throw new L("The local invitation send failure. The call invitation has ended.",gi);if(0<this._channelId.length&&!Aa(this._channelId))throw new H("Illegal invitation channel ID",Ec);if(!Aa(this.calleeId))throw new H("Illegal invitation callee user ID",Ec);if(8192<fh(this._content))throw new H('The length of the "content" overflows. The number of bytes representing content must not exceed 8 × 1024 if encoded in UTF-8.',Ec);this.state=Ca.SENT_TO_REMOTE,hd(J(x.mark((function n(){var r,i,o;return x.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t.getSession().sendInvitationMessage({peerId:t.calleeId,callId:t.callId,extra:t._content,type:"CallInvite",channelId:t._channelId});case 2:if(r=n.sent,i=r.hasPeerReceived,o=r.hasReSent,!t.isLocalInvitationEnd()){n.next=7;break}throw new gb("send invitation timeout");case 7:if(t.log("The local invitation has sent to the callee"),i||o){n.next=11;break}throw e=new nm({PEER_NOT_ONLINE:"The peer of the invitation is not online"});case 11:if(i){n.next=14;break}throw e=new nm({RESENT_AND_OFFLINE:"Resent and the peer of the invitation is not online"});case 14:case"end":return n.stop()}}),n)})))).pipe(Ce((function(e){return e.pipe(ba((function(e){if(!(e instanceof nm))throw e})),jd(2e3))})),kb(3e4),Ja((function(e){return Xa(e)&&t.warn("local invitation ack timed out"),Z(e)})),rb(this.localInvitationEnd$)).subscribe({next:function(){t.state===Ca.RECEIVED_BY_REMOTE?t.log('The local invitation state is already "RECEIVED_BY_REMOTE", skipped emitting "LocalInvitationReceivedByPeer"'):t.state!==Ca.SENT_TO_REMOTE?t.log("The invitation has ended, skipped emitting the %s event","LocalInvitationReceivedByPeer"):(t.info("The peer received the local invitation %s.",t.callId),t.state=Ca.RECEIVED_BY_REMOTE,t.emit("LocalInvitationReceivedByPeer"),t.localInvitationEnd$.pipe(kb(6e4),Ja((function(e){return Xa(e)&&t.warn("local invitation expired"),Z(e)}))).subscribe({error:function(){t.state=Ca.FAILURE,t.emit("LocalInvitationFailure",uf.INVITATION_EXPIRE)}}))},error:function(n){t.isLocalInvitationEnd()?t.log("The invitation has ended, skipped emitting the %s event","LocalInvitationFailure"):(t.state=Ca.FAILURE,Xa(n)&&e?"PEER_NOT_ONLINE"===e.code?t.emit("LocalInvitationFailure",uf.PEER_OFFLINE):"RESENT_AND_OFFLINE"===e.code&&t.emit("LocalInvitationFailure",uf.PEER_NO_RESPONSE):Xa(n)?t.emit("LocalInvitationFailure",uf.PEER_NO_RESPONSE):"RtmInvalidStatusError"===n.name?t.emit("LocalInvitationFailure",uf.NOT_LOGGEDIN):t.emit("LocalInvitationFailure",uf.UNKNOWN))}})}},{key:"cancel",value:function(){if(this.isLocalInvitationEnd())throw new L("The local invitation cancel failure",gi);if(this.state===Ca.IDLE)throw new L("The local invitation has not been sent",bC);if(8192<fh(this._content))throw new H('The length of the "content" overflows. The number of bytes representing content must not exceed 8 × 1024 if encoded in UTF-8.',Ec);this.getSession().sendInvitationMessage({callId:this.callId,peerId:this.calleeId,type:"CallCancel",channelId:this._channelId,extra:this._content}),this.state=Ca.CANCELED,this.emit("LocalInvitationCanceled")}},{key:"onAcceptReceived",value:function(e){if(this.isLocalInvitationEnd()&&this.state!==Ca.ACCEPTED_BY_REMOTE)this.log("The invitation has ended, skipped emitting the %s event","LocalInvitationAccepted");else{if(this.state===Ca.IDLE)throw new L("the local have not sent the invitation, how can remote accept it?");this.getSession().sendInvitationMessage({callId:this.callId,isAcceptAck:!0,type:"CallAccept",peerId:this.calleeId,channelId:this.channelId}),this.state===Ca.ACCEPTED_BY_REMOTE?this.log("already in ACCEPTED_BY_REMOTE state, ignore emit ACCEPTED_BY_REMOTE"):(this.state===Ca.SENT_TO_REMOTE&&(this.log("receive LocalInvitationAccepted before remote response to the invitation"),this.state=Ca.RECEIVED_BY_REMOTE,this.emit("LocalInvitationReceivedByPeer")),this.state=Ca.ACCEPTED_BY_REMOTE,this._response=e,this.emit("LocalInvitationAccepted",e))}}},{key:"onRefuseReceived",value:function(e){if(this.isLocalInvitationEnd())this.log("The invitation has ended, skipped emitting the %s event","LocalInvitationRefused");else{if(this.state===Ca.IDLE)throw new L("the local have not sent the invitation, how can remote refuse it?");this.state===Ca.SENT_TO_REMOTE&&(this.log("receive LocalInvitationRefused before remote response to the invitation"),this.state=Ca.RECEIVED_BY_REMOTE,this.emit("LocalInvitationReceivedByPeer")),this._response=e,this.state=Ca.REFUSED_BY_REMOTE,this.emit("LocalInvitationRefused",e)}}},{key:"isLocalInvitationEnd",value:function(){return[Ca.CANCELED,Ca.FAILURE,Ca.ACCEPTED_BY_REMOTE,Ca.REFUSED_BY_REMOTE].includes(this.state)}}]),t}(wb()),la(Ed.prototype,"send",[Qb],Object.getOwnPropertyDescriptor(Ed.prototype,"send"),Ed.prototype),la(Ed.prototype,"cancel",[Qb],Object.getOwnPropertyDescriptor(Ed.prototype,"cancel"),Ed.prototype),Ed),vi=S.RemoteInvitationFailureReason,nb=S.RemoteInvitationState,XF=function(e){function t(e){var i=e.invitationChannel,o=e.extraContent,a=e.callId,s=e.callerId,u=e.logger;e=e.getSession,X(this,t);var c=r.call(this,u,"RtmRemoteInvitation",!0);return m(n(c),"state",nb.INVITATION_RECEIVED),m(n(c),"remoteInvitationEnd$",Da(jb(n(c),"RemoteInvitationCanceled"),jb(n(c),"RemoteInvitationRefused"),jb(n(c),"RemoteInvitationAccepted"),jb(n(c),"RemoteInvitationFailure")).pipe(Pa(1))),m(n(c),"callerId",void 0),m(n(c),"callId",void 0),m(n(c),"_getSession",void 0),m(n(c),"logger",void 0),m(n(c),"_content",void 0),m(n(c),"_channelId",void 0),m(n(c),"_response",""),c._channelId=i,c._content=o,c.callId=a,c.callerId=s,c._getSession=e,c.logger=u,c.remoteInvitationEnd$.pipe(kb(6e4),Ja((function(e){return Xa(e)&&c.warn("Remote invitation expired"),Z(e)}))).subscribe({error:function(){c.state=nb.FAILURE,c.emit("RemoteInvitationFailure",vi.INVITATION_EXPIRE)}}),c}ja(t,e);var r=ka(t);return Ia(t,[{key:"channelId",get:function(){return this._channelId},set:function(e){throw new H('Cannot set the "response" of the RemoteInvitation instance.',Ec)}},{key:"content",get:function(){return this._content},set:function(e){throw new H('Cannot set the "content" of the RemoteInvitation instance.',Ec)}},{key:"response",get:function(){return this._response},set:function(e){this._response=e}},{key:"accept",value:function(){var e,t=this;if(this.isRemoteInvitationEnd())throw new L("The local invitation has ended. Cannot accept.",gi);if(this.state===nb.ACCEPT_SENT_TO_LOCAL)throw new L("The remote invitation is accepting. Cannot do the operation.",Ur);if(8192<fh(this._response))throw new H('The length of the "response" overflows. The number of bytes representing content must not exceed 8 × 1024 if encoded in UTF-8.',Ec);this.state=nb.ACCEPT_SENT_TO_LOCAL,cc(pn(1e3).pipe(fb((function(){return hd(J(x.mark((function e(){return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",t._getSession().sendInvitationMessage({peerId:t.callerId,callId:t.callId,extra:t.response,type:"CallAccept",isAcceptAck:!1,channelId:t.channelId}));case 1:case"end":return e.stop()}}),e)}))))})),zb((function(t){return e=t.hasPeerReceived})),Pa(1)),jb(this,"RemoteInvitationAccepted")).pipe(kb(5e3),rb(this.remoteInvitationEnd$)).subscribe({error:function(n){if(t.logError(n),t.state=nb.FAILURE,Xa(n))switch(e){case void 0:case!0:return void t.emit("RemoteInvitationFailure",vi.ACCEPT_FAILURE);case!1:return void t.emit("RemoteInvitationFailure",vi.PEER_OFFLINE)}t.emit("RemoteInvitationFailure",vi.UNKNOWN)}})}},{key:"refuse",value:function(){if(this.state===nb.ACCEPT_SENT_TO_LOCAL)throw new L("The remote invitation is accepting. Cannot do the operation.",Ur);if(this.isRemoteInvitationEnd())throw new L("The invitation is end. Cannot refuse",gi);if(8192<fh(this._response))throw new H('The length of the "response" overflows. The number of bytes representing content must not exceed 8 × 1024 if encoded in UTF-8.',Ec);this._getSession().sendInvitationMessage({peerId:this.callerId,callId:this.callId,extra:this.response,type:"CallReject",channelId:this.channelId}),this.state=nb.REFUSED,this.emit("RemoteInvitationRefused")}},{key:"onCancelReceived",value:function(e){this.isRemoteInvitationEnd()?this.log("The invitation has ended, skipped emitting the %s event","RemoteInvitationCanceled"):(this.state===nb.ACCEPT_SENT_TO_LOCAL&&this.log("caller canceled before receive accept"),this._content=e,this.state=nb.CANCELED,this.emit("RemoteInvitationCanceled",e))}},{key:"onAcceptAckReceived",value:function(){this.state!==nb.ACCEPT_SENT_TO_LOCAL?this.log("The invitation has ended, skipped emitting the %s event","ori:".concat(this.state,", to: RemoteInvitationAccepted")):(this.state=nb.ACCEPTED,this.emit("RemoteInvitationAccepted"))}},{key:"isRemoteInvitationEnd",value:function(){return[nb.ACCEPTED,nb.REFUSED,nb.CANCELED,nb.FAILURE].includes(this.state)}}]),t}(wb()),YF=function(e){function t(e,i){X(this,t);var o=r.call(this,i,"InvitationManager");return m(n(o),"getSession",void 0),m(n(o),"invitationDispatcher",new ia.EventEmitter),m(n(o),"outgoingLocalInvitations",new Map),m(n(o),"receivedRemoteInvitations",new Ac(void 0,{maxlen:1e4})),m(n(o),"logger",void 0),o.getSession=ho(e),o.logger=i,o.invitationDispatcher.on("remoteInvitationToManager",(function(e){var t=e.callId,n=e.extra,r=e.callerId;e=e.channelId,o.receivedRemoteInvitations.has(t)||((n=new XF({callerId:r,callId:t,getSession:o.getSession,logger:i,extraContent:n,invitationChannel:e})).remoteInvitationEnd$.subscribe((function(){o.receivedRemoteInvitations.delete(t)})),o.receivedRemoteInvitations.set(t,n),o.emit("remoteInvitationInstance",n))})),o.invitationDispatcher.on("acceptAckToRemoteInvitation",(function(e){(e=o.receivedRemoteInvitations.get(e.callId))&&e.onAcceptAckReceived()})),o.invitationDispatcher.on("cancelToRemoteInvitation",(function(e){var t=e.extra;(e=o.receivedRemoteInvitations.get(e.callId))&&e.onCancelReceived(t)})),o.invitationDispatcher.on("acceptToLocalInvitation",(function(e){var t=e.extra;(e=o.outgoingLocalInvitations.get(e.callId))&&e.onAcceptReceived(t)})),o.invitationDispatcher.on("refuseToLocalInvitation",(function(e){var t=e.extra;(e=o.outgoingLocalInvitations.get(e.callId))&&e.onRefuseReceived(t)})),o}ja(t,e);var r=ka(t);return Ia(t,[{key:"invitationMessageHandler",value:function(e){var t=e.body,n=t.callId,r=t.extra;r=void 0===r?"":r;var i=t.type,o=void 0===(t=t.channel)?"":t,a=e.type;switch(t=e.peerId,e=e.serverReceivedTs,a){case"CallAccept":"ack"===i?this.invitationDispatcher.emit("acceptAckToRemoteInvitation",{callId:n}):"request"===i&&this.invitationDispatcher.emit("acceptToLocalInvitation",{callId:n,extra:r});break;case"CallInvite":this.invitationDispatcher.emit("remoteInvitationToManager",{callId:n,callerId:t,extra:r,channelId:o});break;case"CallCancel":if("0"===n){n="".concat("AgoraRTMLegacyEndcallCompatibleMessagePrefix","_").concat(o,"_").concat(r),this.getSession().emit("peerTextMessage",{peerId:t,properties:{serverReceivedTs:e,isOfflineMessage:!1},text:n});break}this.invitationDispatcher.emit("cancelToRemoteInvitation",{callId:n,extra:r});break;case"CallReject":this.invitationDispatcher.emit("refuseToLocalInvitation",{callId:n,extra:r});break;default:throw Nn("invitationType",a)}}},{key:"genLocalInvitation",value:function(e){var t=this,n=new WF(e,this.getSession,this.logger);return n.localInvitationEnd$.subscribe((function(){t.outgoingLocalInvitations.delete(n.callId)})),this.outgoingLocalInvitations.set(n.callId,n),n}}]),t}(wb()),ZF=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return ob(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),mE(e,t,{leading:r,maxWait:t,trailing:i})},xb,vf;!function(e){e[e.JOINED=0]="JOINED",e[e.LEFT=1]="LEFT"}(vf||(vf={}));var om=S.ConnectionState,$F=(xb=function(e){function t(e,i,o,a){X(this,t);var s=r.call(this,a,"RtmChannel",!0);return m(n(s),"onMemberCountUpdated",ZF((function(e){e!==s.memberCount&&(s.memberCount=e,s.emit("MemberCountUpdated",e))}),1e3)),m(n(s),"getSession",void 0),m(n(s),"memberCount",0),m(n(s),"joinState","LEFT"),m(n(s),"joinPromise",void 0),m(n(s),"memberJoinedLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"memberLeftLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"memberJoinStateLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"attributesSeqLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"channelId",void 0),m(n(s),"client",void 0),m(n(s),"onChannelMemberCountUpdated",(function(e,t){s.channelId===e&&s.onMemberCountUpdated(t)})),m(n(s),"onLogout",(function(){try{s.clearChannel(s.getSession())}catch(e){}})),m(n(s),"onAttributesUpdated",(function(e){var t=e.channelId,n=e.attributeMaps,r=e.seq;e=e.instance.toString();var i=s.attributesSeqLru.get(e);if((!i||r.greaterThan(i))&&(s.attributesSeqLru.set(e,r),t===s.channelId)){for(t={},r=0;r<n.length;r++){var o=n[r];e=o.key,i=o.ms;var a=o.value;if(o=o.origin,"string"!=typeof e||!U.isLong(i)||"string"!=typeof a||!Aa(o))break;t[e]={value:a,lastUpdateUserId:o,lastUpdateTs:i.toNumber()}}s.emit("AttributesUpdated",t)}})),m(n(s),"onChannelTextMessage",(function(e){var t=e.memberId,n=e.text,r=e.properties;e.channelId===s.channelId&&s.emit("ChannelMessage",{text:n,messageType:S.MessageType.TEXT},t,r)})),m(n(s),"onChannelMediaMessage",(function(e){var t=e.memberId,n=e.properties,r=e.details,i=e.messageType;e.channelId===s.channelId&&("FILE"===i?s.emit("ChannelMessage",{messageType:S.MessageType.FILE,size:parseInt(ra(r.media_size),10),description:ra(r.media_description),fileName:ra(r.media_filename),mediaId:ra(r.media_id),thumbnail:new Blob([r.media_thumbnail])},t,n):"IMAGE"===i&&s.emit("ChannelMessage",{messageType:S.MessageType.IMAGE,size:parseInt(ra(r.media_size),10),description:ra(r.media_description),fileName:ra(r.media_filename),mediaId:ra(r.media_id),thumbnail:new Blob([r.media_thumbnail]),height:parseInt(ra(r.media_height),10),width:parseInt(ra(r.media_width),10),thumbnailHeight:parseInt(ra(r.media_thumbnailheight),10),thumbnailWidth:parseInt(ra(r.media_thumbnailwidth),10)},t,n))})),m(n(s),"onChannelRawMessage",(function(e){var t=e.desc,n=e.raw,r=e.memberId,i=e.properties;e.channelId===s.channelId&&s.emit("ChannelMessage",{messageType:S.MessageType.RAW,rawMessage:n,description:t},r,i)})),m(n(s),"onMemberNotice",(function(e){var t=e.memberId,n=e.type,r=e.size;if(e.channelId===s.channelId){var i=e.instance.toString();e=e.seq.toString();var o={MemberLeft:s.memberLeftLru,MemberJoined:s.memberJoinedLru,MemberCountUpdated:void 0}[n];if(o){if(o.has(i+e))return void s.log("received duplicated %s notice (seq: %s), channel '%s', member '%s'",n,e,pa(s.channelId),pa(t||""));if(o.set(i+e,void 0),"string"!=typeof t)return;if(t!==s.getSession().context.uid){if((i=s.memberJoinStateLru.get(t))===vf.JOINED&&"MemberJoined"===n)return void s.log("received duplicated %s state (seq: %s), channel '%s', member '%s'",n,e,pa(s.channelId),pa(t||""));if(i===vf.LEFT&&"MemberLeft"===n)return void s.log("received duplicated %s state (seq: %s), channel '%s', member '%s'",n,e,pa(s.channelId),pa(t||""))}s.memberJoinStateLru.set(t,"MemberJoined"===n?vf.JOINED:vf.LEFT)}s.info("Channel %s - %s, memberId: %s",n,pa(s.channelId),"MemberCountUpdated"===n?"[unknown]":pa(t||"")),i=t===s.getSession().context.uid,"MemberLeft"===n&&Aa(t)||"MemberJoined"===n&&Aa(t)?(i||s.emit(n,t),s.onMemberCountUpdated(r)):"MemberCountUpdated"===n&&"number"==typeof r&&s.onMemberCountUpdated(r)}})),s.getSession=ho(i),s.channelId=e,s.client=o,s.info("A channel created, id %s",pa(e)),s}ja(t,e);var r=ka(t);return Ia(t,[{key:"join",value:function(){var e=J(x.mark((function e(){var t,n,r,i,o,a,s,u=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,t=this.getSession(),e.next=7;break;case 4:throw e.prev=4,e.t0=e.catch(0),new L("The client is not logged in. Cannot do the operation",Zr);case 7:if(e.prev=7,Aa(this.channelId)){e.next=10;break}throw new H(["The %s in the arguments is invalid","channelId"],dC);case 10:if("LEFT"===this.joinState){e.next=13;break}throw hb("ChnJoin",{cname:this.channelId,lts:U.fromNumber(Date.now()),userId:t.context.uid,elapse:ib(t.startTime),errCode:Yr,sid:ab(t.instanceId)},null!==(i=this.client.context.config.enableCloudProxy)&&void 0!==i&&i),new L("The channel has joined. Cannot rejoin",Yr);case 13:if(!t.usedChannelIds.includes(this.channelId)){e.next=16;break}throw hb("ChnJoin",{cname:this.channelId,lts:U.fromNumber(Date.now()),userId:t.context.uid,elapse:ib(t.startTime),errCode:$r,sid:ab(t.instanceId)},null!==(o=this.client.context.config.enableCloudProxy)&&void 0!==o&&o),new L("A channel of the same channel ID has already joined. Cannot rejoin",$r);case 16:if(!(20<=t.usedChannelIds.length)){e.next=19;break}throw hb("ChnJoin",{cname:this.channelId,lts:U.fromNumber(Date.now()),userId:t.context.uid,elapse:ib(t.startTime),errCode:Xr,sid:ab(t.instanceId)},null!==(a=this.client.context.config.enableCloudProxy)&&void 0!==a&&a),new lb("The joined channels has exceeded the limit of 20",Xr);case 19:return hb("ChnJoin",{cname:this.channelId,lts:U.fromNumber(Date.now()),userId:t.context.uid,elapse:ib(t.startTime),errCode:0,sid:ab(t.instanceId)},null!==(n=this.client.context.config.enableCloudProxy)&&void 0!==n&&n),this.log("Joining the channel %s",pa(this.channelId)),this.joinState="JOINING",t.usedChannelIds.push(this.channelId),this.joinPromise=t.requestChannelJoin(this.channelId).then((function(){u.joinState="JOINED"})),e.next=26,this.joinPromise;case 26:hb("ChnJoinRes",{cname:this.channelId,lts:U.fromNumber(Date.now()),elapse:ib(t.startTime),errCode:0,sid:ab(t.instanceId),serverErrCode:0,userId:t.context.uid},null!==(r=this.client.context.config.enableCloudProxy)&&void 0!==r&&r),this.info("The channel %s joined successfully",pa(this.channelId)),t.on("channelTextMessage",this.onChannelTextMessage),t.on("channelRawMessage",this.onChannelRawMessage),t.on("channelMediaMessage",this.onChannelMediaMessage),t.on("memberNotice",this.onMemberNotice),t.on("channelAttributesUpdated",this.onAttributesUpdated),this.client.internalEmitter.on("channelMemberCountUpdated",this.onChannelMemberCountUpdated),this.client.internalEmitter.once("LOGOUT",this.onLogout),e.next=47;break;case 37:if(e.prev=37,e.t1=e.catch(7),"JOINING"===this.joinState&&(this.joinState="LEFT"),this.logError(e.t1),!ta(e.t1)){e.next=43;break}throw e.t1;case 43:if(!Xa(e.t1)){e.next=46;break}throw hb("ChnJoinRes",{cname:this.channelId,lts:U.fromNumber(Date.now()),elapse:ib(t.startTime),errCode:Wr,sid:ab(t.instanceId),serverErrCode:0,userId:t.context.uid},null!==(s=this.client.context.config.enableCloudProxy)&&void 0!==s&&s),new gb(["Join channel %s timed out",pa(this.channelId)],Wr);case 46:throw new bd(["The channel %s join failure",pa(this.channelId)],{code:Vr,originalError:e.t1});case 47:case"end":return e.stop()}}),e,this,[[0,4],[7,37]])})));return function(){return e.apply(this,arguments)}}()},{key:"leave",value:function(){var e=J(x.mark((function e(){var t,n,r,i;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,n=this.getSession(),e.next=7;break;case 4:throw e.prev=4,e.t0=e.catch(0),new L("The client is not logged in. Cannot do the operation",fC);case 7:if("LEFT"!==this.joinState){e.next=9;break}throw new L("The channel does not join. Cannot do the operation",eC);case 9:return e.prev=9,n.requestChannelLeave(this.channelId),e.next=13,this.clearChannel(n);case 13:e.next=24;break;case 15:if(e.prev=15,e.t1=e.catch(9),this.logError(e.t1),!ta(e.t1)){e.next=22;break}throw void 0===e.t1.code&&(e.t1.code=bs),hb("ChnLeave",{cname:this.channelId,lts:U.fromNumber(Date.now()),elapse:ib(n.startTime),errCode:bs,sid:ab(n.instanceId),userId:n.context.uid},null!==(i=this.client.context.config.enableCloudProxy)&&void 0!==i&&i),e.t1;case 22:throw hb("ChnLeave",{cname:this.channelId,lts:U.fromNumber(Date.now()),elapse:ib(n.startTime),errCode:as,sid:ab(n.instanceId),userId:n.context.uid},null!==(r=this.client.context.config.enableCloudProxy)&&void 0!==r&&r),new bd("The channel leave failure",{code:as,originalError:e.t1});case 24:hb("ChnLeave",{cname:this.channelId,lts:U.fromNumber(Date.now()),elapse:ib(n.startTime),errCode:0,sid:ab(n.instanceId),userId:n.context.uid},null!==(t=this.client.context.config.enableCloudProxy)&&void 0!==t&&t);case 25:case"end":return e.stop()}}),e,this,[[0,4],[9,15]])})));return function(){return e.apply(this,arguments)}}()},{key:"sendMessage",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a=this,s=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=1<s.length&&void 0!==s[1]?s[1]:{},r=n.enableHistoricalMessaging,i=void 0!==r&&r,Wn(t,fi),"JOINED"===this.joinState){e.next=4;break}throw new L("The channel does not join. Cannot do the operation",UB);case 4:if(this.client.connectionState!==om.RECONNECTING){e.next=9;break}return o=Date.now(),e.next=8,new Promise((function(e,n){var r=function(){var r=J(x.mark((function r(){var u;return x.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return u=Date.now()-o,r.prev=1,r.next=4,dh({message:t,peerId:a.channelId,toPeer:!1,session:a.getSession(),errorCodes:{NOT_LOGGED_IN:El,TOO_OFTEN:Qr},diff:u,logger:a.logger,options:{enableHistoricalMessaging:i,enableOfflineMessaging:!1}});case 4:e(),r.next=12;break;case 7:r.prev=7,r.t0=r.catch(1),Xa(r.t0)&&n(new gb(he(a.name,"sendMessageToPeer",1e4),Dl)),ta(r.t0)&&n(r.t0),n(new da("Channel message send failure",{code:Ag,originalError:r.t0}));case 12:return r.prev=12,clearTimeout(s),r.finish(12);case 15:case"end":return r.stop()}}),r,null,[[1,7,12,15]])})));return function(){return r.apply(this,arguments)}}();a.client.internalEmitter.once("RECONNECTED",r);var s=setTimeout((function(){a.client.internalEmitter.off("RECONNECTED",r),n(new gb(he(a.name,"sendMessageToPeer",1e4),Dl))}),9e3)}));case 8:return e.abrupt("return");case 9:if(this.client.connectionState===om.CONNECTED){e.next=11;break}throw new L("The client is not logged in. Cannot do the operation",El);case 11:return e.prev=11,e.next=14,dh({message:t,peerId:this.channelId,toPeer:!1,session:this.getSession(),errorCodes:{NOT_LOGGED_IN:El,TOO_OFTEN:Qr},diff:0,logger:this.logger,options:{enableHistoricalMessaging:i,enableOfflineMessaging:!1}});case 14:e.next=24;break;case 16:if(e.prev=16,e.t0=e.catch(11),!Xa(e.t0)){e.next=20;break}throw new gb(he(this.name,"sendMessage",1e4),Dl);case 20:if(!ta(e.t0)){e.next=23;break}throw this.logError(e.t0),e.t0;case 23:throw new bd("The channel message send failure",Ag);case 24:case"end":return e.stop()}}),e,this,[[11,16]])})));return function(t){return e.apply(this,arguments)}}()},{key:"getMembers",value:function(){var e=J(x.mark((function e(){var t,n;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,this.client.connectionState===om.CONNECTED){e.next=3;break}throw new L("The client is not logged in. Cannot do the operation",aC);case 3:if("JOINED"===this.joinState){e.next=5;break}throw new L("The channel does not join. Cannot do the operation",$B);case 5:return t=this.getSession().requestChannelMemberList(this.channelId),e.next=8,t.pipe(ea((function(e){return e.memberInfos.map((function(e){return e.account}))}))).toPromise();case 8:return n=e.sent,this.info("Channel %s - get members success, %o",pa(this.channelId),n.map(pa)),e.abrupt("return",n);case 13:if(e.prev=13,e.t0=e.catch(0),!ta(e.t0)){e.next=18;break}throw this.logError(e.t0),e.t0;case 18:throw new bd("The channel members get failure",YB);case 19:case"end":return e.stop()}}),e,this,[[0,13]])})));return function(){return e.apply(this,arguments)}}()},{key:"clearChannel",value:function(){var e=J(x.mark((function e(t){var n=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.emit("channelLeft",this.channelId),"JOINING"!==this.joinState){e.next=4;break}return e.next=4,this.joinPromise;case 4:this.joinState="LEFT",this.memberLeftLru.empty(),this.memberJoinedLru.empty(),this.attributesSeqLru.empty(),this.memberJoinStateLru.empty(),this.memberCount=0,t.removeListener("channelTextMessage",this.onChannelTextMessage),t.removeListener("channelRawMessage",this.onChannelRawMessage),t.removeListener("channelMediaMessage",this.onChannelMediaMessage),t.removeListener("memberNotice",this.onMemberNotice),t.removeListener("channelAttributesUpdated",this.onAttributesUpdated),this.client.internalEmitter.removeListener("channelMemberCountUpdated",this.onChannelMemberCountUpdated),this.client.internalEmitter.removeListener("LOGOUT",this.onLogout),t.usedChannelIds=t.usedChannelIds.filter((function(e){return e!==n.channelId}));case 18:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()}]),t}(wb()),la(xb.prototype,"join",[Qb],Object.getOwnPropertyDescriptor(xb.prototype,"join"),xb.prototype),la(xb.prototype,"leave",[Qb],Object.getOwnPropertyDescriptor(xb.prototype,"leave"),xb.prototype),la(xb.prototype,"sendMessage",[Qb],Object.getOwnPropertyDescriptor(xb.prototype,"sendMessage"),xb.prototype),la(xb.prototype,"getMembers",[Ra],Object.getOwnPropertyDescriptor(xb.prototype,"getMembers"),xb.prototype),xb),E,Ib=S.ConnectionChangeReason,T=S.ConnectionState,eu={DISCONNECTED:1,CONNECTING:2,CONNECTED:3,RECONNECTING:4,ABORTED:5},aG={LOGIN:1,LOGIN_SUCCESS:2,LOGIN_FAILURE:3,LOGIN_TIMEOUT:4,INTERRUPTED:5,LOGOUT:6,BANNED_BY_SERVER:7,REMOTE_LOGIN:8},bG=(E=function(e){function t(e,i,o,a){X(this,t);var s=r.call(this,i,"RtmClient",!0);return m(n(s),"connectionState",T.DISCONNECTED),m(n(s),"internalEmitter",new ia),m(n(s),"context",void 0),m(n(s),"attributes",{}),m(n(s),"loginPromise",void 0),m(n(s),"attributeDrafts",new Set),m(n(s),"session",void 0),m(n(s),"lastLoginTime",void 0),m(n(s),"reconnId",0),m(n(s),"channelAttributesCacheLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"invitationManager",void 0),m(n(s),"subscribedPeerStatusCache",{}),m(n(s),"pendingPeerStatusSubCount",0),m(n(s),"peerStatusSeqLru",new Ac(void 0,{maxlen:1e4})),m(n(s),"peerUnreachableTimers",{}),m(n(s),"mediaTaskManager",void 0),m(n(s),"setParameters",void 0),m(n(s),"updateConfig",void 0),m(n(s),"blacklistedIP",{}),m(n(s),"userDropHandler",(function(e){if(s.connectionState!==T.ABORTED)switch(e){case 11:s.logError("Kicked off by remote session"),s.onConnectionStateChanged(T.ABORTED,Ib.REMOTE_LOGIN);break;case 14:case 15:case 16:s.logError("Server banned because of illegal ".concat({14:"User ID",15:"IP",16:"Channel Name"}[e])),s.onConnectionStateChanged(T.ABORTED,Ib.BANNED_BY_SERVER);break;default:s.logError("User kicked off for unknown code: ".concat(e)),s.onConnectionStateChanged(T.ABORTED,Ib.INTERRUPTED)}})),s.context=new VE(e,o,i),s.mediaTaskManager=new kt(i),s.context.config=o,s.internalEmitter.setMaxListeners(512),s.setParameters=a.bind(n(s)),s.updateConfig=a.bind(n(s)),s.invitationManager=new YF((function(){return s.session}),i),s.invitationManager.on("remoteInvitationInstance",(function(e){s.emit("RemoteInvitationReceived",e)})),s.setMaxListeners(512),s.internalEmitter.setMaxListeners(512),s}ja(t,e);var r=ka(t);return Ia(t,[{key:"renewToken",value:function(){var e=J(x.mark((function e(t){var n,r,i,o=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("string"==typeof t&&0!==t.length){e.next=2;break}throw new H("Invalid argument",nC);case 2:if(this.connectionState!==T.ABORTED){e.next=5;break}return e.next=5,new Promise((function(){}));case 5:if(this.connectionState===T.CONNECTED||this.connectionState===T.RECONNECTING){e.next=7;break}throw new L("The client is not logged in",qC);case 7:if(void 0!==this.session){e.next=9;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 9:return e.prev=9,n=this.context.token,this.context.token=t,e.next=14,this.session.connection.apClient.getApEdgeInfo$(!1).pipe(Md((function(){return Error("No available edge address to connect")})),Ce((function(e){return e.pipe(ba((function(e){if(ta(e))throw e})),jd(2500),Pa(4))})),Pa(1),kb(2e4),Ja((function(e){return Xa(e)&&o.warn("renewToken timed out"),Z(e)}))).toPromise();case 14:r=e.sent,i=r.ticket,e.next=27;break;case 18:if(e.prev=18,e.t0=e.catch(9),this.context.token=n,e.t0.code!==ds&&e.t0.code!==es){e.next=23;break}throw new of("Invalid token",pC);case 23:if(e.t0.code!==ii){e.next=25;break}throw new of("The token expired",oC);case 25:if(!Xa(e.t0)){e.next=27;break}throw new gb("Renew token timed out",mC);case 27:this.session.curLoginSockets.filter((function(e){return void 0!==e})).forEach((function(e){return e.ticket=i}));case 28:case"end":return e.stop()}}),e,this,[[9,18]])})));return function(t){return e.apply(this,arguments)}}()},{key:"queryPeersOnlineStatus",value:function(){var e=J(x.mark((function e(t){var n,r,i=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",lC);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(!(!Array.isArray(t)||0===t.length||t.some((function(e){return!Aa(e)}))||256<t.length)){e.next=6;break}throw new H("invalid arguments",is);case 6:return e.next=8,this.session.requestPeersOnlineStatus(t).toPromise();case 8:return n=e.sent,r=Bc(pl(n.userInfos,"account"),(function(e){return!!e.ts})),Object.keys(r).forEach((function(e){if(e in i.subscribedPeerStatusCache&&i.subscribedPeerStatusCache[e]!==S.PeerOnlineState.UNREACHABLE){var t=r[e]?S.PeerOnlineState.ONLINE:S.PeerOnlineState.OFFLINE;i.emit("PeersOnlineStatusChanged",m({},e,t)),i.subscribedPeerStatusCache[e]=t}})),e.abrupt("return",r);case 12:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"getChannelMemberCount",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",XB);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(Array.isArray(t)&&t.every((function(e){return"string"==typeof e}))&&0!==t.length){e.next=6;break}throw new H("Invalid arguments: channelIds",Sr);case 6:if(!(32<t.length)){e.next=8;break}throw new H("getChannelMemberCount exceed limit of 32 channelIds",WB);case 8:n=0;case 9:if(!(n<t.length)){e.next=16;break}if(Aa(r=t[n])){e.next=13;break}throw new H(["getChannelMemberCount channel id %s is invalid",r],Sr);case 13:n++,e.next=9;break;case 16:return e.next=18,this.session.requestGetChannelMemberCount(t).toPromise();case 18:for(i=e.sent,o=i.groupInfos,a={},s=0;s<o.length;s++)u=o[s],c=u.group,l=u.memberCount,Aa(c)&&"number"==typeof l&&(this.internalEmitter.emit("channelMemberCountUpdated",c,l),a[c]=l);return e.abrupt("return",a);case 23:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"setLocalUserAttributes",value:function(){var e=J(x.mark((function e(t){var n,r;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Mf({attributes:t,maxAttrValueSize:8192,maxAttrsCount:32,maxTotalSize:16384}),this.connectionState===T.CONNECTED){e.next=3;break}throw new L("The client is not logged in",Zb);case 3:if(void 0!==this.session){e.next=5;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 5:return n=this.session.requestSetLocalUserAttributes(t).toPromise(),r={attribute:t,promise:n},this.attributeDrafts.add(r),e.prev=8,e.next=11,n;case 11:this.attributes=t,e.next=19;break;case 14:if(e.prev=14,e.t0=e.catch(8),!ta(e.t0)){e.next=18;break}throw e.t0;case 18:throw new H("arguments is not valid",Oa);case 19:return e.prev=19,this.attributeDrafts.delete(r),e.finish(19);case 22:case"end":return e.stop()}}),e,this,[[8,14,19,22]])})));return function(t){return e.apply(this,arguments)}}()},{key:"setChannelAttributes",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=2<u.length&&void 0!==u[2]?u[2]:{},i=r.enableNotificationToChannelMembers,o=void 0!==i&&i,Mf({attributes:n,maxAttrValueSize:8192,maxAttrsCount:32,maxTotalSize:32768}),this.connectionState===T.CONNECTED){e.next=4;break}throw new L("The client is not logged in",Zb);case 4:if(void 0!==this.session){e.next=6;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return a=this.session.requestSetChannelAttributes(t,n,o).toPromise(),e.prev=7,e.next=10,a;case 10:s=Bc(n,(function(e){return new Blob([e]).size})),this.channelAttributesCacheLru.set(t,s),e.next=19;break;case 14:if(e.prev=14,e.t0=e.catch(7),!ta(e.t0)){e.next=18;break}throw e.t0;case 18:throw new H("arguments is not valid",Oa);case 19:case"end":return e.stop()}}),e,this,[[7,14]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"addOrUpdateLocalUserAttributes",value:function(){var e=J(x.mark((function e(t){var n,r,i;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=wa(wa({},this.attributes),t),Mf({attributes:t,maxAttrValueSize:8192,maxAttrsCount:32,maxTotalSize:16384}),Mf({attributes:n,maxAttrValueSize:8192,maxAttrsCount:32,maxTotalSize:16384}),this.connectionState===T.CONNECTED){e.next=5;break}throw new L("The client is not logged in",Zb);case 5:if(void 0!==this.session){e.next=7;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 7:return r=this.session.requestAddOrUpdateLocalUserAttributes(t).toPromise(),i={attribute:n,promise:r},this.attributeDrafts.add(i),e.prev=10,e.next=13,r;case 13:this.attributes=n,e.next=21;break;case 16:if(e.prev=16,e.t0=e.catch(10),!ta(e.t0)){e.next=20;break}throw e.t0;case 20:throw new H("arguments is not valid",is);case 21:return e.prev=21,this.attributeDrafts.delete(i),e.finish(21);case 24:case"end":return e.stop()}}),e,this,[[10,16,21,24]])})));return function(t){return e.apply(this,arguments)}}()},{key:"addOrUpdateChannelAttributes",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=2<l.length&&void 0!==l[2]?l[2]:{},i=r.enableNotificationToChannelMembers,o=void 0!==i&&i,a=this.channelAttributesCacheLru.get(t,{}),s=Bc(n,(function(e){return new Blob([e]).size})),u=wa(wa({},a),s),Mf({attributes:n,attrSizeMap:u,maxAttrValueSize:8192,maxAttrsCount:32,maxTotalSize:32768}),this.connectionState===T.CONNECTED){e.next=7;break}throw new L("The client is not logged in",Zb);case 7:if(void 0!==this.session){e.next=9;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 9:return c=this.session.requestAddOrUpdateChannelAttributes(t,n,o).toPromise(),e.prev=10,e.next=13,c;case 13:this.channelAttributesCacheLru.set(t,u),e.next=21;break;case 16:if(e.prev=16,e.t0=e.catch(10),!ta(e.t0)){e.next=20;break}throw e.t0;case 20:throw new H("arguments is not valid",Oa);case 21:case"end":return e.stop()}}),e,this,[[10,16]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"deleteLocalUserAttributesByKeys",value:function(){var e=J(x.mark((function e(t){var n,r,i,o;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Array.isArray(t)&&0!==t.length&&!t.some((function(e){return 0===e.length}))){e.next=2;break}throw new L("arguments is not valid",Oa);case 2:if(this.connectionState===T.CONNECTED){e.next=4;break}throw new L("The client is not logged in",Zb);case 4:if(void 0!==this.session){e.next=6;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return n=this.session.requestDeleteLocalUserAttributesByKeys(t).toPromise(),r={attribute:ml(this.attributes,t),promise:n},this.attributeDrafts.add(r),e.prev=9,e.next=12,n;case 12:for(i=0;i<t.length;i++)o=t[i],delete this.attributes[o];e.next=20;break;case 15:if(e.prev=15,e.t0=e.catch(9),!ta(e.t0)){e.next=19;break}throw e.t0;case 19:throw new H("arguments is not valid",Oa);case 20:return e.prev=20,this.attributeDrafts.delete(r),e.finish(20);case 23:case"end":return e.stop()}}),e,this,[[9,15,20,23]])})));return function(t){return e.apply(this,arguments)}}()},{key:"deleteChannelAttributesByKeys",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=2<l.length&&void 0!==l[2]?l[2]:{},i=r.enableNotificationToChannelMembers,o=void 0!==i&&i,Array.isArray(n)&&0!==n.length&&Aa(t)&&!n.some((function(e){return 0===e.length||512<e.length}))){e.next=3;break}throw new L("arguments is not valid",Oa);case 3:if(this.connectionState===T.CONNECTED){e.next=5;break}throw new L("The client is not logged in",Zb);case 5:if(void 0!==this.session){e.next=7;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 7:return a=this.session.requestDeleteChannelAttributesByKeys(t,n,o).toPromise(),e.prev=8,e.next=11,a;case 11:if(s=this.channelAttributesCacheLru.get(t))for(u=0;u<n.length;u++)c=n[u],delete s[c];e.next=20;break;case 15:if(e.prev=15,e.t0=e.catch(8),!ta(e.t0)){e.next=19;break}throw e.t0;case 19:throw new H("arguments is not valid",Oa);case 20:case"end":return e.stop()}}),e,this,[[8,15]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"clearLocalUserAttributes",value:function(){var e=J(x.mark((function e(){var t,n;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",Zb);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:return t=this.session.requestClearLocalUserAttributes().toPromise(),n={attribute:{},promise:t},this.attributeDrafts.add(n),e.prev=7,e.next=10,t;case 10:this.attributes={},e.next=18;break;case 13:if(e.prev=13,e.t0=e.catch(7),!ta(e.t0)){e.next=17;break}throw e.t0;case 17:throw new H("arguments is not valid",Oa);case 18:return e.prev=18,this.attributeDrafts.delete(n),e.finish(18);case 21:case"end":return e.stop()}}),e,this,[[7,13,18,21]])})));return function(){return e.apply(this,arguments)}}()},{key:"clearChannelAttributes",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=1<a.length&&void 0!==a[1]?a[1]:{},r=n.enableNotificationToChannelMembers,i=void 0!==r&&r,this.connectionState===T.CONNECTED){e.next=3;break}throw new L("The client is not logged in",Zb);case 3:if(void 0!==this.session){e.next=5;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 5:return o=this.session.requestClearChannelAttributes(t,i).toPromise(),e.prev=6,e.next=9,o;case 9:this.channelAttributesCacheLru.delete(t),e.next=17;break;case 12:if(e.prev=12,e.t0=e.catch(6),!ta(e.t0)){e.next=16;break}throw e.t0;case 16:throw new H("arguments is not valid",Oa);case 17:case"end":return e.stop()}}),e,this,[[6,12]])})));return function(t){return e.apply(this,arguments)}}()},{key:"getUserAttributes",value:function(){var e=J(x.mark((function e(t){var n,r,i;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Aa(t)){e.next=2;break}throw new H("Not a valid user ID",Oa);case 2:if(this.connectionState===T.CONNECTED){e.next=4;break}throw new L("The client is not logged in",Zb);case 4:if(void 0!==this.session){e.next=6;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return e.prev=6,e.next=9,this.session.requestGetUserAttributeKeys(t).toPromise();case 9:return n=e.sent,r=n.keys,e.next=13,this.session.requestGetUserAttributesByKeys(t,r.slice(0,512)).toPromise();case 13:i=e.sent,e.next=21;break;case 16:if(e.prev=16,e.t0=e.catch(6),!ta(e.t0)){e.next=20;break}throw e.t0;case 20:throw new H("arguments is not valid",Oa);case 21:return e.abrupt("return",br(i.attributeInfos.map((function(e){return[e.key,e.value]}))));case 22:case"end":return e.stop()}}),e,this,[[6,16]])})));return function(t){return e.apply(this,arguments)}}()},{key:"getChannelAttributes",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l,f,h;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Aa(t)){e.next=2;break}throw new H("Not a valid channel ID",Oa);case 2:if(this.connectionState===T.CONNECTED){e.next=4;break}throw new L("The client is not logged in",Zb);case 4:if(void 0!==this.session){e.next=6;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return e.prev=6,e.next=9,this.session.requestGetChannelAttributesKeys(t).toPromise();case 9:return n=e.sent,r=n.keys,e.next=13,this.session.requestGetChannelAttributesByKeys(t,r).toPromise();case 13:i=e.sent,o=i.attributeMaps,e.next=22;break;case 17:if(e.prev=17,e.t0=e.catch(6),!ta(e.t0)){e.next=21;break}throw e.t0;case 21:throw new H("arguments is not valid",Oa);case 22:a={},s=0;case 24:if(!(s<o.length)){e.next=32;break}if(u=o[s],c=u.key,l=u.ms,f=u.value,h=u.origin,"string"==typeof c&&U.isLong(l)&&"string"==typeof f&&Aa(h)){e.next=28;break}return e.abrupt("break",32);case 28:a[c]={value:f,lastUpdateUserId:h,lastUpdateTs:l.toNumber()};case 29:s++,e.next=24;break;case 32:return this.channelAttributesCacheLru.set(t,Bc(a,(function(e){return new Blob([e.value]).size}))),e.abrupt("return",a);case 34:case"end":return e.stop()}}),e,this,[[6,17]])})));return function(t){return e.apply(this,arguments)}}()},{key:"getChannelAttributesByKeys",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c,l,f,h;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",Zb);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:return Mn(t,n),e.prev=5,e.next=8,this.session.requestGetChannelAttributesByKeys(t,n).toPromise();case 8:r=e.sent,i=r.attributeMaps,e.next=17;break;case 12:if(e.prev=12,e.t0=e.catch(5),!ta(e.t0)){e.next=16;break}throw e.t0;case 16:throw new H("arguments is not valid",Oa);case 17:o={},a=this.channelAttributesCacheLru.get(t,{}),s=0;case 20:if(!(s<i.length)){e.next=29;break}if(u=i[s],c=u.key,l=u.ms,f=u.value,h=u.origin,"string"==typeof c&&U.isLong(l)&&"string"==typeof f&&Aa(h)){e.next=24;break}return e.abrupt("break",29);case 24:a[c]=new Blob([f]).size,o[c]={value:f,lastUpdateUserId:h,lastUpdateTs:l.toNumber()};case 26:s++,e.next=20;break;case 29:return this.channelAttributesCacheLru.set(t,a),e.abrupt("return",o);case 31:case"end":return e.stop()}}),e,this,[[5,12]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"getUserAttributesByKeys",value:function(){var e=J(x.mark((function e(t,n){var r;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",Zb);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:return Mn(t,n),e.prev=5,e.next=8,this.session.requestGetUserAttributesByKeys(t,n).toPromise();case 8:r=e.sent,e.next=16;break;case 11:if(e.prev=11,e.t0=e.catch(5),!ta(e.t0)){e.next=15;break}throw e.t0;case 15:throw new H("arguments is not valid",Oa);case 16:return e.abrupt("return",br(r.attributeInfos.map((function(e){return[e.key,e.value]}))));case 17:case"end":return e.stop()}}),e,this,[[5,11]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"login",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(wn(!0),r=Yg(),i=t.token,t.token===this.context.appId&&(i=void 0),hb("Session",{appId:this.context.appId,did:navigator.userAgent,elapse:ib(this.session&&this.session.startTime),index:{index1:t.uid,index2:this.context.appId,index3:"enableLogUpload=".concat(this.context.config.enableLogUpload)},installId:zg,lts:U.fromNumber(Date.now()),os:7,sid:ab(r),token:i||"",userId:t.uid,ver:"1.4.5",buildno:415,subVersion:15,version:4},null!==(n=this.context.config.enableCloudProxy)&&void 0!==n&&n,!0),Hd(t)&&Aa(t.uid)){e.next=7;break}throw new H("not a valid user id",hi);case 7:if("string"!=typeof i||!i){e.next=11;break}this.context.token=i,e.next=13;break;case 11:if("string"==typeof i||null==i){e.next=13;break}throw new H('The "token" is not a valid string.',hi);case 13:return o=Date.now(),this.context.sid=ab(r),this.loginPromise=this.loginImpl({uid:t.uid,instanceId:r}),this.info("RTM Client logging in as ".concat(pa(t.uid))),e.prev=17,e.next=20,this.loginPromise;case 20:e.next=28;break;case 22:throw e.prev=22,e.t0=e.catch(17),ta(e.t0)&&hb("Link",{ackedServerIp:"",destServerIp:"",ec:e.t0.code||1,sc:e.t0.serverCode,elapse:ib(this.session&&this.session.startTime),lts:U.fromNumber(Date.now()),responseTime:Date.now()-o,sid:ab(r),userId:t.uid},null!==(a=this.context.config.enableCloudProxy)&&void 0!==a&&a),this.context.token=void 0,this.context.socketUseProxy=!1,e.t0;case 28:return e.prev=28,this.loginPromise=void 0,e.finish(28);case 31:this.context.socketUseProxy&&this.emit("FallbackProxyConnected"),wn(!1);case 33:case"end":return e.stop()}}),e,this,[[17,22,28,31]])})));return function(t){return e.apply(this,arguments)}}()},{key:"logout",value:function(){var e=J(x.mark((function e(){var t;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.loginPromise){e.next=3;break}return e.next=3,this.loginPromise;case 3:if(this.connectionState!==T.DISCONNECTED){e.next=6;break}throw this.logError("Already in logout state"),new L("Logout failure. The client has already been logged out",fs);case 6:if(this.internalEmitter.emit("LOGOUT"),this.connectionState!==T.ABORTED){e.next=11;break}return this.info('Reset connection state from "ABORTED" to "DISCONNECTED"'),this.onConnectionStateChanged(T.DISCONNECTED,Ib.LOGOUT),e.abrupt("return");case 11:if(void 0!==this.session){e.next=14;break}return this.onConnectionStateChanged(T.DISCONNECTED,Ib.LOGOUT),e.abrupt("return");case 14:return hb("Logout",{elapse:ib(this.session.startTime),lts:U.fromNumber(Date.now()),sid:ab(this.session.instanceId),userId:this.context.uid},null!==(t=this.context.config.enableCloudProxy)&&void 0!==t&&t),e.next=17,this.session.logoutHandler();case 17:this.onConnectionStateChanged(T.DISCONNECTED,Ib.LOGOUT),this.log("Log out success");case 19:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"logoutSync",value:function(){var e,t=this;if(this.connectionState===T.DISCONNECTED)throw this.logError("Already in logout state"),new L("Logout failure. The client has already been logged out",fs);this.connectionState===T.ABORTED?this.info('Reset connection state from "ABORTED" to "DISCONNECTED"'):void 0!==this.session&&(hb("Logout",{elapse:ib(this.session.startTime),lts:U.fromNumber(Date.now()),sid:ab(this.session.instanceId),userId:this.context.uid},null!==(e=this.context.config.enableCloudProxy)&&void 0!==e&&e),this.session.logoutHandler().then((function(){t.log("Log out success")}))),this.onConnectionStateChanged(T.DISCONNECTED,Ib.LOGOUT)}},{key:"sendMessageToPeer",value:function(){var e=J(x.mark((function e(t,n){var r,i,o,a,s,u,c=this,l=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=2<l.length&&void 0!==l[2]?l[2]:{},i=r.enableOfflineMessaging,o=void 0!==i&&i,a=r.enableHistoricalMessaging,s=void 0!==a&&a,Wn(t,Ie),this.connectionState!==T.RECONNECTING){e.next=5;break}return u=Date.now(),e.abrupt("return",new Promise((function(e,r){var i=function(){var i=J(x.mark((function i(){var l;return x.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:if(void 0!==c.session){i.next=2;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 2:return l=Date.now()-u,i.prev=3,i.t0=e,i.next=7,dh({message:t,peerId:n,toPeer:!0,session:c.session,errorCodes:{NOT_LOGGED_IN:Hl,TOO_OFTEN:hs},diff:l,logger:c.logger,options:{enableHistoricalMessaging:s,enableOfflineMessaging:o}});case 7:i.t1=i.sent,(0,i.t0)(i.t1),i.next=16;break;case 11:i.prev=11,i.t2=i.catch(3),Xa(i.t2)&&r(new gb(he(c.name,"sendMessageToPeer",1e4),Fl)),ta(i.t2)&&r(i.t2),r(new da("Peer-to-peer message send failure",{code:gs,originalError:i.t2}));case 16:return i.prev=16,clearTimeout(a),i.finish(16);case 19:case"end":return i.stop()}}),i,null,[[3,11,16,19]])})));return function(){return i.apply(this,arguments)}}();c.internalEmitter.once("RECONNECTED",i);var a=setTimeout((function(){c.internalEmitter.off("RECONNECTED",i),r(new gb(he(c.name,"sendMessageToPeer",1e4),Fl))}),9e3)})));case 5:if(this.connectionState===T.CONNECTED){e.next=7;break}throw new L("Failed to send the peer-to-peer message. The client is not logged in",Hl);case 7:if(void 0!==this.session){e.next=9;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 9:return e.prev=9,e.next=12,dh({message:t,peerId:n,toPeer:!0,session:this.session,errorCodes:{NOT_LOGGED_IN:Hl,TOO_OFTEN:hs},diff:0,logger:this.logger,options:{enableHistoricalMessaging:s,enableOfflineMessaging:o}});case 12:return e.abrupt("return",e.sent);case 15:if(e.prev=15,e.t0=e.catch(9),!Xa(e.t0)){e.next=19;break}throw new gb(he(this.name,"sendMessageToPeer",1e4),Fl);case 19:if(!ta(e.t0)){e.next=21;break}throw e.t0;case 21:throw new da("Peer-to-peer message send failure",{code:gs,originalError:e.t0});case 22:case"end":return e.stop()}}),e,this,[[9,15]])})));return function(t,n){return e.apply(this,arguments)}}()},{key:"createChannel",value:function(e){var t=this;if(!Aa(e))throw new H(["The %s in the arguments is invalid",Object.keys({channelId:e})[0]],VB);return new $F(e,(function(){return t.session}),this,this.logger)}},{key:"createLocalInvitation",value:function(e){if(!Aa(e))throw new H(["The %s in the arguments is invalid",Object.keys({calleeId:e})[0]],Ec);return this.invitationManager.genLocalInvitation(e)}},{key:"subscribePeersOnlineStatus",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l,f,h,p,d,v=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",Il);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(Array.isArray(t)&&0!==t.length){e.next=6;break}throw new H("Invalid arguments: peerIds",Cg);case 6:n=0;case 7:if(!(n<t.length)){e.next=14;break}if(Aa(r=t[n])){e.next=11;break}throw new H(["subscribePeersOnlineStatus peer id %s is invalid",r],Cg);case 11:n++,e.next=7;break;case 14:if(!(512<(i=t&&t.length?bl(t):[]).length+Object.keys(this.subscribedPeerStatusCache).length+this.pendingPeerStatusSubCount)){e.next=17;break}throw new lb("Subscribed peers overflows",ks);case 17:return this.pendingPeerStatusSubCount+=i.length,e.next=20,this.session.requestSubscribePeersOnlineStatus(i).toPromise();case 20:o=e.sent,a=o.errors,this.pendingPeerStatusSubCount-=i.length,s=[],u=[],c=0;case 26:if(!(c<a.length)){e.next=34;break}if(l=a[c],f=l.code,"string"==typeof(h=l.account)){e.next=30;break}throw new da("Returned account is invalid",js);case 30:0!==f&&s.push(h);case 31:c++,e.next=26;break;case 34:for(p=0;p<i.length;p++)d=i[p],s.includes(d)||(u.push(d),this.subscribedPeerStatusCache[d]=void 0);if(this.session.requestPeersOnlineStatus(u).pipe(ea((function(e){return Bc(pl(e.userInfos,"account"),(function(e){return!!e.ts}))}))).subscribe((function(e){e=Bc(e,(function(e,t){return e=e?S.PeerOnlineState.ONLINE:S.PeerOnlineState.OFFLINE,v.subscribedPeerStatusCache[t]=e})),v.emit("PeersOnlineStatusChanged",e)})),0===s.length){e.next=38;break}throw new da("Subscription failed",js);case 38:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"unsubscribePeersOnlineStatus",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",Il);case 2:if(void 0!==this.session){e.next=4;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(Array.isArray(t)&&0!==t.length){e.next=6;break}throw new H("Invalid arguments: peerIds",Cg);case 6:n=0;case 7:if(!(n<t.length)){e.next=14;break}if(Aa(r=t[n])){e.next=11;break}throw new H(["subscribePeersOnlineStatus peer id %s is invalid",r],Cg);case 11:n++,e.next=7;break;case 14:if(!(512<t.length)){e.next=16;break}throw new lb("Unsubscribed peers overflows",ks);case 16:for(i=t&&t.length?bl(t):[],this.session.requestUnsubscribePeersOnlineStatus(i),o=0;o<i.length;o++)a=i[o],delete this.subscribedPeerStatusCache[a];case 19:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"queryPeersBySubscriptionOption",value:function(){var e=J(x.mark((function e(t){return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===T.CONNECTED){e.next=2;break}throw new L("The client is not logged in",Il);case 2:if(t!==S.PeerSubscriptionOption.ONLINE_STATUS){e.next=4;break}return e.abrupt("return",Object.keys(this.subscribedPeerStatusCache));case 4:throw new H("Subscription option not supported",Cg);case 5:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"createMessage",value:function(e){return"IMAGE"===e.messageType?wa({width:0,height:0,fileName:"",description:"",thumbnail:new Blob,thumbnailWidth:0,thumbnailHeight:0,size:0},e):"FILE"===e.messageType?wa({fileName:"",description:"",thumbnail:new Blob,size:0},e):e}},{key:"downloadMedia",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l,f,h,p,d,v,b=this,g=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=1<g.length&&void 0!==g[1]?g[1]:{},"string"==typeof t){e.next=3;break}throw new H("invalid mediaId format",Jl);case 3:if(e.prev=3,r=t.split("z"),i=ua(r,3),o=i[0],a=i[1],s=i[2],u=o.slice(1,65),c=YE(u),l=parseInt(o.slice(65),10),f=parseInt(a,10),h=parseInt(s,10),!(Number.isNaN(l)||Number.isNaN(f)||Number.isNaN(h))){e.next=12;break}throw new H("Invalid mediaId content",Jl);case 12:e.next=19;break;case 14:if(e.prev=14,e.t0=e.catch(3),!ta(e.t0)){e.next=18;break}throw e.t0;case 18:throw new H("parse mediaId failure",{code:Jl,originalError:e.t0});case 19:if(this.connectionState===T.CONNECTED){e.next=21;break}throw new L("The client is not logged in, cannot download",yC);case 21:if(void 0!==this.session){e.next=23;break}throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});case 23:return p=this.mediaTaskManager.addDownloadTask({unit:f,zone:l,hashHexStr:u,size:h},(function(){if(void 0===b.session)throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});return b.session.requestFileDownloadIndexGet({hash:c,zone:l,unit:f,size:h}).toPromise()}),n),e.next=26,this.mediaTaskManager.waitMediaTask(p);case 26:return d=e.sent,v=d.payload,e.abrupt("return",v);case 29:case"end":return e.stop()}}),e,this,[[3,14]])})));return function(t){return e.apply(this,arguments)}}()},{key:"createMediaMessageByUploading",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l,f,h,p,d,v,b,g,y,m,E,w,_,O,A,I,k=this,R=arguments;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=1<R.length&&void 0!==R[1]?R[1]:{},r=2<R.length&&void 0!==R[2]?R[2]:{},Hd(n)){e.next=4;break}throw new H("Invalid params",Of);case 4:if(i="thumbnailWidth"in n||"thumbnailHeight"in n||"width"in n||"height"in n,o=n.messageType,a=void 0===o?i?"IMAGE":"FILE":o,s=n.description,u=void 0===s?"":s,c=n.fileName,l=void 0===c?"":c,f=n.thumbnail,"string"==typeof n.messageType&&"string"==typeof u&&"string"==typeof l&&(Tn(f)||void 0===f)&&Tn(t)){e.next=8;break}throw new H("Invalid message params type",Of);case 8:if(!i||"FILE"!==a){e.next=10;break}throw new H("Invalid message params, unexpected field in RtmFileMessage",Of);case 10:if(!(33554432<(h=t.size))){e.next=13;break}throw new lb("The payload size overflow 32 MB",sC);case 13:return e.next=15,pj(t);case 15:return p=e.sent,e.next=18,XE(p);case 18:if(d=e.sent,this.connectionState===T.CONNECTED){e.next=21;break}throw new L("The client is not logged in",uC);case 21:if("IMAGE"!==a){e.next=29;break}return e.next=24,Sv(n,p);case 24:v=e.sent,b=v.height,g=v.width,y=v.thumbnailWidth,m=v.thumbnailHeight;case 29:return E=this.mediaTaskManager.addUploadTask({file:new Uint8Array(p),hash:d},(function(){if(void 0===k.session)throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});return k.session.fetchFileUploadIndexGet({hash:d,size:h})}),(function(e,t){if(void 0===k.session)throw new Ha({SESSION_NOT_FOUND:"Failed to get session of the client"});return k.session.requestFileUploadIndexSet({hash:d,unit:e,servers:t}).toPromise()}),r),e.next=32,this.mediaTaskManager.waitMediaTask(E);case 32:if(w=e.sent,_=w.zone,O=w.retUnit,"IMAGE"!==a){e.next=38;break}return A={height:b,width:g,fileName:l,size:h,description:u,thumbnail:f,messageType:a,thumbnailWidth:y,thumbnailHeight:m,mediaId:"0".concat(et(d)).concat(_,"z").concat(O,"z").concat(h,"z").concat(b,"z").concat(g)},e.abrupt("return",A);case 38:return I={fileName:l,size:h,description:u,mediaId:"0".concat(et(d)).concat(_,"z").concat(O,"z").concat(h),thumbnail:f,messageType:a},e.abrupt("return",I);case 40:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"loginImpl",value:function(){var e=J(x.mark((function e(t){var n,r,i,o,a,s,u,c,l=this;return x.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.uid,r=t.instanceId,i=t.forceLoginTime,o=void 0===i?0:i,a=r,!(void 0!==this.lastLoginTime&&500>Date.now()-this.lastLoginTime)){e.next=4;break}throw new nE(["The frequency of login exceeded the limit of %d queries per second",2],iC);case 4:if(this.connectionState===T.DISCONNECTED||0!==o){e.next=6;break}throw new L("The SDK is either logging in or has logged in the Agora RTM system",gC);case 6:e.prev=6,this.context.uid=n,e.next=13;break;case 10:throw e.prev=10,e.t0=e.catch(6),new H(["The %s in the arguments is invalid",Object.keys({uid:n})[0]],hi);case 13:return 0===o&&this.onConnectionStateChanged(T.CONNECTING,Ib.LOGIN),(s=new ct(this.context,this.logger,!1)).blacklistedIP=this.blacklistedIP,this.session=u=new cu(this.context,s,a,this.logger),c=function(){l.connectionState===T.CONNECTED&&(l.onConnectionStateChanged(T.RECONNECTING,Ib.INTERRUPTED),l.session)&&l.session.once("userJoined",(function(){l.onConnectionStateChanged(T.CONNECTED,Ib.LOGIN_SUCCESS)}))},u.on("connectionLost",c),u.on("tokenExpired",(function(){l.emit("TokenExpired")})),u.once("userDrop",this.userDropHandler),this.session.on("peerTextMessage",(function(e){l.emit("MessageFromPeer",{text:e.text,messageType:S.MessageType.TEXT},e.peerId,e.properties)})),this.session.on("peerMediaMessage",(function(e){var t=e.peerId,n=e.properties,r=e.messageType;e=e.details,"FILE"===r?l.emit("MessageFromPeer",{messageType:S.MessageType.FILE,size:parseInt(ra(e.media_size),10),description:ra(e.media_description),fileName:ra(e.media_filename),mediaId:ra(e.media_id),thumbnail:new Blob([e.media_thumbnail])},t,n):"IMAGE"===r&&l.emit("MessageFromPeer",{messageType:S.MessageType.IMAGE,size:parseInt(ra(e.media_size),10),description:ra(e.media_description),fileName:ra(e.media_filename),mediaId:ra(e.media_id),thumbnail:new Blob([e.media_thumbnail]),height:parseInt(ra(e.media_height),10),width:parseInt(ra(e.media_width),10),thumbnailHeight:parseInt(ra(e.media_thumbnailheight),10),thumbnailWidth:parseInt(ra(e.media_thumbnailwidth),10)},t,n)})),this.session.on("peerRawMessage",(function(e){l.emit("MessageFromPeer",{rawMessage:e.raw,description:e.desc,messageType:S.MessageType.RAW},e.peerId,e.properties)})),u.on("instanceChanged",(function(e){return a=e})),u.on("peerOnlineStatusChanged",(function(e){var t=e.instance.toString()+e.state,n=l.peerStatusSeqLru.get(t);!n||e.seq.greaterThan(n)?(l.peerStatusSeqLru.set(t,e.seq),e.state!==l.subscribedPeerStatusCache[e.peerId]&&l.emit("PeersOnlineStatusChanged",m({},e.peerId,e.state)),l.subscribedPeerStatusCache[e.peerId]=e.state,clearTimeout(l.peerUnreachableTimers[t]),e.state===S.PeerOnlineState.UNREACHABLE&&(l.peerUnreachableTimers[t]=setTimeout((function(){l.subscribedPeerStatusCache[e.peerId]===S.PeerOnlineState.UNREACHABLE&&(l.subscribedPeerStatusCache[e.peerId]=S.PeerOnlineState.ONLINE,l.emit("PeersOnlineStatusChanged",m({},e.peerId,S.PeerOnlineState.ONLINE)))}),3e4))):l.log("peerOnlineStatusChanged dedup for %s, %d",t,e.seq.toNumber())})),u.on("invitationMessage",this.invitationManager.invitationMessageHandler.bind(this.invitationManager)),u.on("channelAttributesUpdated",(function(e){var t=e.channelId;e=e.attributeMaps;for(var n={},r=0;r<e.length;r++){var i=e[r],o=i.key,a=i.ms,s=i.value;if(i=i.origin,"string"!=typeof o||!U.isLong(a)||"string"!=typeof s||!Aa(i))break;n[o]=new Blob([s]).size}l.channelAttributesCacheLru.set(t,n)})),u.on("userJoined",(function(e){if(0!==Object.keys(l.attributes).length){if(void 0===l.session)return;l.session.requestSetLocalUserAttributes(l.attributes,e).toPromise()}if(0!==l.attributeDrafts.size)for(var t=function(t,n){var r=(t=n[t]).attribute;t.promise.then((function(){void 0!==l.session&&l.session.requestSetLocalUserAttributes(r,e).toPromise()}))},n=0,r=Array.from(l.attributeDrafts);n<r.length;n++)t(n,r);0!==Object.keys(l.subscribedPeerStatusCache).length&&u.requestSubscribePeersOnlineStatus(Object.keys(l.subscribedPeerStatusCache))})),u.on("banEdgeIP",(function(e){l.banIP(e)})),this.lastLoginTime=Date.now(),e.prev=32,e.next=35,u.loginHandler().toPromise();case 35:this.mediaTaskManager.setAuthInfo({ticket:u.connection.curOpenSockets.filter((function(e){return void 0!==e}))[0].ticket,instance:u.instanceId,useNewDomain:.5<=Math.random(),loginOpt:u.userJoinOptions.toLong()}),e.next=54;break;case 38:if(e.prev=38,e.t1=e.catch(32),!("loginRespTimeout"===e.t1.name&&2>o)){e.next=47;break}return u.removeAllListeners(),e.next=44,this.loginImpl({uid:n,instanceId:r,forceLoginTime:o+1});case 44:return e.abrupt("return");case 47:if(!Xa(e.t1)){e.next=50;break}throw this.onConnectionStateChanged(T.DISCONNECTED,Ib.LOGIN_TIMEOUT),new gb(he(this.name,"login",12e3),hC);case 50:if(this.onConnectionStateChanged(T.DISCONNECTED,Ib.LOGIN_FAILURE),!ta(e.t1)){e.next=53;break}throw e.t1;case 53:throw new da("Login failure",{code:cs,originalError:e.t1});case 54:this.onConnectionStateChanged(T.CONNECTED,Ib.LOGIN_SUCCESS);case 55:case"end":return e.stop()}}),e,this,[[6,10],[32,38]])})));return function(t){return e.apply(this,arguments)}}()},{key:"onConnectionStateChanged",value:function(e,t){var n,r=this;e===T.RECONNECTING&&(this.reconnId+=1),hb("ConnectionStateChange",{elapse:ib(this.session&&this.session.startTime),lts:U.fromNumber(Date.now()),newState:eu[e],oldState:eu[this.connectionState],reason:aG[t],sid:ab(this.session&&this.session.instanceId||U.fromNumber(0)),userId:this.context.uid,reconnId:this.reconnId},null!==(n=this.context.config.enableCloudProxy)&&void 0!==n&&n),this.connectionState===T.RECONNECTING&&e===T.CONNECTED&&(0!==Object.keys(this.subscribedPeerStatusCache).length&&void 0!==this.session&&this.session.requestPeersOnlineStatus(Object.keys(this.subscribedPeerStatusCache)).pipe(ea((function(e){return Bc(pl(e.userInfos,"account"),(function(e){return!!e.ts}))}))).subscribe((function(e){e=Bc(e,(function(e,t){return e=e?S.PeerOnlineState.ONLINE:S.PeerOnlineState.OFFLINE,r.subscribedPeerStatusCache[t]=e})),r.emit("PeersOnlineStatusChanged",e)})),this.internalEmitter.emit("RECONNECTED")),this.connectionState=e,e!==T.ABORTED&&e!==T.DISCONNECTED||(this.pendingPeerStatusSubCount=this.reconnId=0,this.attributes={},this.session&&(this.session.removeAllListeners(),this.session.msgDedupLru.empty(),this.session.dialogueSequenceLru.empty(),this.session.dialPendingMsgSubjectMap.clear()),this.channelAttributesCacheLru.empty(),this.peerStatusSeqLru.empty(),this.peerUnreachableTimers={},this.subscribedPeerStatusCache={},this.attributeDrafts.clear(),this.context.token=void 0),this.mediaTaskManager.emit("connectionStateChanged",e),this.emit("ConnectionStateChanged",e,t)}},{key:"banIP",value:function(e){var t;this.log("ip banned",e);var n=null!==(t=this.blacklistedIP[e])&&void 0!==t?t:0;this.blacklistedIP[e]=n+1}}]),t}(wb()),la(E.prototype,"renewToken",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"renewToken"),E.prototype),la(E.prototype,"queryPeersOnlineStatus",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"queryPeersOnlineStatus"),E.prototype),la(E.prototype,"getChannelMemberCount",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"getChannelMemberCount"),E.prototype),la(E.prototype,"setLocalUserAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"setLocalUserAttributes"),E.prototype),la(E.prototype,"setChannelAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"setChannelAttributes"),E.prototype),la(E.prototype,"addOrUpdateLocalUserAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"addOrUpdateLocalUserAttributes"),E.prototype),la(E.prototype,"addOrUpdateChannelAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"addOrUpdateChannelAttributes"),E.prototype),la(E.prototype,"deleteLocalUserAttributesByKeys",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"deleteLocalUserAttributesByKeys"),E.prototype),la(E.prototype,"deleteChannelAttributesByKeys",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"deleteChannelAttributesByKeys"),E.prototype),la(E.prototype,"clearLocalUserAttributes",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"clearLocalUserAttributes"),E.prototype),la(E.prototype,"clearChannelAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"clearChannelAttributes"),E.prototype),la(E.prototype,"getUserAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"getUserAttributes"),E.prototype),la(E.prototype,"getChannelAttributes",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"getChannelAttributes"),E.prototype),la(E.prototype,"getChannelAttributesByKeys",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"getChannelAttributesByKeys"),E.prototype),la(E.prototype,"getUserAttributesByKeys",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"getUserAttributesByKeys"),E.prototype),la(E.prototype,"login",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"login"),E.prototype),la(E.prototype,"logout",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"logout"),E.prototype),la(E.prototype,"logoutSync",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"logoutSync"),E.prototype),la(E.prototype,"sendMessageToPeer",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"sendMessageToPeer"),E.prototype),la(E.prototype,"createChannel",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"createChannel"),E.prototype),la(E.prototype,"createLocalInvitation",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"createLocalInvitation"),E.prototype),la(E.prototype,"subscribePeersOnlineStatus",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"subscribePeersOnlineStatus"),E.prototype),la(E.prototype,"unsubscribePeersOnlineStatus",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"unsubscribePeersOnlineStatus"),E.prototype),la(E.prototype,"queryPeersBySubscriptionOption",[Ra],Object.getOwnPropertyDescriptor(E.prototype,"queryPeersBySubscriptionOption"),E.prototype),la(E.prototype,"createMessage",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"createMessage"),E.prototype),la(E.prototype,"downloadMedia",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"downloadMedia"),E.prototype),la(E.prototype,"createMediaMessageByUploading",[Qb],Object.getOwnPropertyDescriptor(E.prototype,"createMediaMessageByUploading"),E.prototype),E),pm,qm,rm,sm,fu=null===(pm=/Chrome\/([0-9.]+)/.exec(null===(rm=window)||void 0===rm||null===(sm=rm.navigator)||void 0===sm?void 0:sm.userAgent))||void 0===pm||null===(qm=pm[1])||void 0===qm?void 0:qm.split(".")[0];if(fu&&88<=parseInt(fu,10)&&!pe()){var tm,me=document.createElement("video"),ne=document.createElement("canvas");me.setAttribute("style","display:none"),me.setAttribute("muted",""),me.muted=!0,me.setAttribute("autoplay",""),me.autoplay=!0,me.setAttribute("playsinline",""),ne.setAttribute("style","display:none"),ne.setAttribute("width","1"),ne.setAttribute("height","1"),null===(tm=ne.getContext("2d"))||void 0===tm||tm.fillRect(0,0,1,1),me.srcObject=null==ne?void 0:ne.captureStream()}var gu={LOG_FILTER_OFF:{error:!1,warn:!1,info:!1,track:!1,debug:!1},LOG_FILTER_ERROR:{error:!0,warn:!1,info:!1,track:!1,debug:!1},LOG_FILTER_WARNING:{error:!0,warn:!0,info:!1,track:!1,debug:!1},LOG_FILTER_INFO:{error:!0,warn:!0,info:!0,track:!1,debug:!1},LOG_FILTER_DEBUG:{error:!0,warn:!0,info:!0,track:!0,debug:!0}},hu={enableLogUpload:!1,logFilter:gu.LOG_FILTER_INFO,enableCloudProxy:!1},ie=wa(wa({createInstance:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=2<arguments.length?arguments[2]:void 0;if(!/^[\dA-Za-z]{32}$/.test(e))throw new H(["The %s in the arguments is invalid",Object.keys({appId:e})[0]],Rr);var r=Object.keys(t).filter((function(e){return!(e in hu)}));if(0!==r.length)throw new H("Invalid RTM config: ".concat(r.join(", ")),Rr);var i=wa(wa({},hu),t);if(void 0!==n&&(!Array.isArray(n)||0===n.length))throw new H("Invalid area config");if(null!=n){if(!n.every((function(e){return e in S.LegacyAreaCode})))throw new H("Invalid area codes: ".concat(n.filter((function(e){return!(e in S)})).join(", ")));P=Ke(n.map((function(e){return vE[e]})))}n=Ql=Ka.__global_unique_id__=(Ka.__global_unique_id__||0)+1;var o=zE(i);r=AE(i);var a=BE(i),s=CE(n,i),u=Xs(n,i),c=u("RTM:DEBUG","<Entry> ");return Qs.rtmConfig=i,o("The Agora RTM Web SDK version is %s","1.4.5"),t.enableCloudProxy&&o("RTM cloud proxy enabled"),t.enableLogUpload&&o("Log upload enabled"),P&&c("Area is set to %s",Array.from(P.CODES).map((function(e){return Pf(D).find((function(t){return D[t]===e}))})).join(", ")),c("Creating an RtmClient instance"),c('The Git commit ID is "'.concat("v1.4.5-0-g9cf39592",'"')),c("The App ID is %s",Xn(e,4,10,"*".repeat(6))),o("The process ID is %s",zg),c("The build is %s","v1.4.5-0-g9cf39592"),c("NODE_ENV is %s","production"),new bG(e,{genLogger:u,genTracker:s,info:o,warn:r,logError:a,loggerId:n},i,(function(e){for(var t=0,n=Pf(e);t<n.length;t++){var r=n[t];try{var a=e[r];null!=a&&(e.enableCloudProxy&&o("RTM cloud proxy enabled"),e.enableLogUpload&&o("Log upload enabled"),i[r]=a)}catch(e){throw new H(["The %s in the arguments is invalid",r],void 0)}}}))},BUILD:"v1.4.5-0-g9cf39592",VERSION:"1.4.5",END_CALL_PREFIX:"AgoraRTMLegacyEndcallCompatibleMessagePrefix",processId:zg,ConnectionChangeReason:S.ConnectionChangeReason,ConnectionState:S.ConnectionState,LocalInvitationFailureReason:S.LocalInvitationFailureReason,LocalInvitationState:S.LocalInvitationState,RemoteInvitationFailureReason:S.RemoteInvitationFailureReason,RemoteInvitationState:S.RemoteInvitationState,MessageType:S.MessageType,PeerOnlineState:S.PeerOnlineState,PeerSubscriptionOption:S.PeerSubscriptionOption},gu),{},{setParameter:function(e,t){Object.keys(lc).includes(e)&&(lc[e]=t)},getParameter:function(e){return lc[e]},setArea:function(e){var t=e.areaCodes;if(e=e.excludedArea,!Array.isArray(t)||0===t.length||!t.every((function(e){return e in S.AreaCode})))throw new H("Invalid area config");if(void 0!==e&&e===S.AreaCode.GLOBAL)throw new H("Excluded area cannot be global");if(void 0===e)P=Ke(t.map((function(e){return D[e]})));else{if(t.includes(e))throw new H("Excluded area cannot be in areaCodes");if(!(e in D))throw new H("Invalid excludedArea:",e);P=Xv({areas:t.map((function(e){return D[e]})),excludedArea:D[e]})}}});return ie}));

/**
  @license
                                 Apache License
                         Version 2.0, January 2004
                      http://www.apache.org/licenses/

 TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

 1. Definitions.

    "License" shall mean the terms and conditions for use, reproduction,
    and distribution as defined by Sections 1 through 9 of this document.

    "Licensor" shall mean the copyright owner or entity authorized by
    the copyright owner that is granting the License.

    "Legal Entity" shall mean the union of the acting entity and all
    other entities that control, are controlled by, or are under common
    control with that entity. For the purposes of this definition,
    "control" means (i) the power, direct or indirect, to cause the
    direction or management of such entity, whether by contract or
    otherwise, or (ii) ownership of fifty percent (50%) or more of the
    outstanding shares, or (iii) beneficial ownership of such entity.

    "You" (or "Your") shall mean an individual or Legal Entity
    exercising permissions granted by this License.

    "Source" form shall mean the preferred form for making modifications,
    including but not limited to software source code, documentation
    source, and configuration files.

    "Object" form shall mean any form resulting from mechanical
    transformation or translation of a Source form, including but
    not limited to compiled object code, generated documentation,
    and conversions to other media types.

    "Work" shall mean the work of authorship, whether in Source or
    Object form, made available under the License, as indicated by a
    copyright notice that is included in or attached to the work
    (an example is provided in the Appendix below).

    "Derivative Works" shall mean any work, whether in Source or Object
    form, that is based on (or derived from) the Work and for which the
    editorial revisions, annotations, elaborations, or other modifications
    represent, as a whole, an original work of authorship. For the purposes
    of this License, Derivative Works shall not include works that remain
    separable from, or merely link (or bind by name) to the interfaces of,
    the Work and Derivative Works thereof.

    "Contribution" shall mean any work of authorship, including
    the original version of the Work and any modifications or additions
    to that Work or Derivative Works thereof, that is intentionally
    submitted to Licensor for inclusion in the Work by the copyright owner
    or by an individual or Legal Entity authorized to submit on behalf of
    the copyright owner. For the purposes of this definition, "submitted"
    means any form of electronic, verbal, or written communication sent
    to the Licensor or its representatives, including but not limited to
    communication on electronic mailing lists, source code control systems,
    and issue tracking systems that are managed by, or on behalf of, the
    Licensor for the purpose of discussing and improving the Work, but
    excluding communication that is conspicuously marked or otherwise
    designated in writing by the copyright owner as "Not a Contribution."

    "Contributor" shall mean Licensor and any individual or Legal Entity
    on behalf of whom a Contribution has been received by Licensor and
    subsequently incorporated within the Work.

 2. Grant of Copyright License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    copyright license to reproduce, prepare Derivative Works of,
    publicly display, publicly perform, sublicense, and distribute the
    Work and such Derivative Works in Source or Object form.

 3. Grant of Patent License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    (except as stated in this section) patent license to make, have made,
    use, offer to sell, sell, import, and otherwise transfer the Work,
    where such license applies only to those patent claims licensable
    by such Contributor that are necessarily infringed by their
    Contribution(s) alone or by combination of their Contribution(s)
    with the Work to which such Contribution(s) was submitted. If You
    institute patent litigation against any entity (including a
    cross-claim or counterclaim in a lawsuit) alleging that the Work
    or a Contribution incorporated within the Work constitutes direct
    or contributory patent infringement, then any patent licenses
    granted to You under this License for that Work shall terminate
    as of the date such litigation is filed.

 4. Redistribution. You may reproduce and distribute copies of the
    Work or Derivative Works thereof in any medium, with or without
    modifications, and in Source or Object form, provided that You
    meet the following conditions:

    (a) You must give any other recipients of the Work or
        Derivative Works a copy of this License; and

    (b) You must cause any modified files to carry prominent notices
        stating that You changed the files; and

    (c) You must retain, in the Source form of any Derivative Works
        that You distribute, all copyright, patent, trademark, and
        attribution notices from the Source form of the Work,
        excluding those notices that do not pertain to any part of
        the Derivative Works; and

    (d) If the Work includes a "NOTICE" text file as part of its
        distribution, then any Derivative Works that You distribute must
        include a readable copy of the attribution notices contained
        within such NOTICE file, excluding those notices that do not
        pertain to any part of the Derivative Works, in at least one
        of the following places: within a NOTICE text file distributed
        as part of the Derivative Works; within the Source form or
        documentation, if provided along with the Derivative Works; or,
        within a display generated by the Derivative Works, if and
        wherever such third-party notices normally appear. The contents
        of the NOTICE file are for informational purposes only and
        do not modify the License. You may add Your own attribution
        notices within Derivative Works that You distribute, alongside
        or as an addendum to the NOTICE text from the Work, provided
        that such additional attribution notices cannot be construed
        as modifying the License.

    You may add Your own copyright statement to Your modifications and
    may provide additional or different license terms and conditions
    for use, reproduction, or distribution of Your modifications, or
    for any such Derivative Works as a whole, provided Your use,
    reproduction, and distribution of the Work otherwise complies with
    the conditions stated in this License.

 5. Submission of Contributions. Unless You explicitly state otherwise,
    any Contribution intentionally submitted for inclusion in the Work
    by You to the Licensor shall be under the terms and conditions of
    this License, without any additional terms or conditions.
    Notwithstanding the above, nothing herein shall supersede or modify
    the terms of any separate license agreement you may have executed
    with Licensor regarding such Contributions.

 6. Trademarks. This License does not grant permission to use the trade
    names, trademarks, service marks, or product names of the Licensor,
    except as required for reasonable and customary use in describing the
    origin of the Work and reproducing the content of the NOTICE file.

 7. Disclaimer of Warranty. Unless required by applicable law or
    agreed to in writing, Licensor provides the Work (and each
    Contributor provides its Contributions) on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied, including, without limitation, any warranties or conditions
    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
    PARTICULAR PURPOSE. You are solely responsible for determining the
    appropriateness of using or redistributing the Work and assume any
    risks associated with Your exercise of permissions under this License.

 8. Limitation of Liability. In no event and under no legal theory,
    whether in tort (including negligence), contract, or otherwise,
    unless required by applicable law (such as deliberate and grossly
    negligent acts) or agreed to in writing, shall any Contributor be
    liable to You for damages, including any direct, indirect, special,
    incidental, or consequential damages of any character arising as a
    result of this License or out of the use or inability to use the
    Work (including but not limited to damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all
    other commercial damages or losses), even if such Contributor
    has been advised of the possibility of such damages.

 9. Accepting Warranty or Additional Liability. While redistributing
    the Work or Derivative Works thereof, You may choose to offer,
    and charge a fee for, acceptance of support, warranty, indemnity,
    or other liability obligations and/or rights consistent with this
    License. However, in accepting such obligations, You may act only
    on Your own behalf and on Your sole responsibility, not on behalf
    of any other Contributor, and only if You agree to indemnify,
    defend, and hold each Contributor harmless for any liability
    incurred by, or claims asserted against, such Contributor by reason
    of your accepting any such warranty or additional liability.

 END OF TERMS AND CONDITIONS

 APPENDIX: How to apply the Apache License to your work.

    To apply the Apache License to your work, attach the following
    boilerplate notice, with the fields enclosed by brackets "[]"
    replaced with your own identifying information. (Don't include
    the brackets!)  The text should be enclosed in the appropriate
    comment syntax for the file format. We also recommend that a
    file or class name and description of purpose be included on the
    same "printed page" as the copyright notice for easier
    identification within third-party archives.

 Copyright (c) 2015-2018 Google, Inc., Netflix, Inc., Microsoft Corp. and contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 

 **/
/**
  @license
                                 Apache License
                         Version 2.0, January 2004
                      http://www.apache.org/licenses/

 TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

 1. Definitions.

    "License" shall mean the terms and conditions for use, reproduction,
    and distribution as defined by Sections 1 through 9 of this document.

    "Licensor" shall mean the copyright owner or entity authorized by
    the copyright owner that is granting the License.

    "Legal Entity" shall mean the union of the acting entity and all
    other entities that control, are controlled by, or are under common
    control with that entity. For the purposes of this definition,
    "control" means (i) the power, direct or indirect, to cause the
    direction or management of such entity, whether by contract or
    otherwise, or (ii) ownership of fifty percent (50%) or more of the
    outstanding shares, or (iii) beneficial ownership of such entity.

    "You" (or "Your") shall mean an individual or Legal Entity
    exercising permissions granted by this License.

    "Source" form shall mean the preferred form for making modifications,
    including but not limited to software source code, documentation
    source, and configuration files.

    "Object" form shall mean any form resulting from mechanical
    transformation or translation of a Source form, including but
    not limited to compiled object code, generated documentation,
    and conversions to other media types.

    "Work" shall mean the work of authorship, whether in Source or
    Object form, made available under the License, as indicated by a
    copyright notice that is included in or attached to the work
    (an example is provided in the Appendix below).

    "Derivative Works" shall mean any work, whether in Source or Object
    form, that is based on (or derived from) the Work and for which the
    editorial revisions, annotations, elaborations, or other modifications
    represent, as a whole, an original work of authorship. For the purposes
    of this License, Derivative Works shall not include works that remain
    separable from, or merely link (or bind by name) to the interfaces of,
    the Work and Derivative Works thereof.

    "Contribution" shall mean any work of authorship, including
    the original version of the Work and any modifications or additions
    to that Work or Derivative Works thereof, that is intentionally
    submitted to Licensor for inclusion in the Work by the copyright owner
    or by an individual or Legal Entity authorized to submit on behalf of
    the copyright owner. For the purposes of this definition, "submitted"
    means any form of electronic, verbal, or written communication sent
    to the Licensor or its representatives, including but not limited to
    communication on electronic mailing lists, source code control systems,
    and issue tracking systems that are managed by, or on behalf of, the
    Licensor for the purpose of discussing and improving the Work, but
    excluding communication that is conspicuously marked or otherwise
    designated in writing by the copyright owner as "Not a Contribution."

    "Contributor" shall mean Licensor and any individual or Legal Entity
    on behalf of whom a Contribution has been received by Licensor and
    subsequently incorporated within the Work.

 2. Grant of Copyright License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    copyright license to reproduce, prepare Derivative Works of,
    publicly display, publicly perform, sublicense, and distribute the
    Work and such Derivative Works in Source or Object form.

 3. Grant of Patent License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    (except as stated in this section) patent license to make, have made,
    use, offer to sell, sell, import, and otherwise transfer the Work,
    where such license applies only to those patent claims licensable
    by such Contributor that are necessarily infringed by their
    Contribution(s) alone or by combination of their Contribution(s)
    with the Work to which such Contribution(s) was submitted. If You
    institute patent litigation against any entity (including a
    cross-claim or counterclaim in a lawsuit) alleging that the Work
    or a Contribution incorporated within the Work constitutes direct
    or contributory patent infringement, then any patent licenses
    granted to You under this License for that Work shall terminate
    as of the date such litigation is filed.

 4. Redistribution. You may reproduce and distribute copies of the
    Work or Derivative Works thereof in any medium, with or without
    modifications, and in Source or Object form, provided that You
    meet the following conditions:

    (a) You must give any other recipients of the Work or
        Derivative Works a copy of this License; and

    (b) You must cause any modified files to carry prominent notices
        stating that You changed the files; and

    (c) You must retain, in the Source form of any Derivative Works
        that You distribute, all copyright, patent, trademark, and
        attribution notices from the Source form of the Work,
        excluding those notices that do not pertain to any part of
        the Derivative Works; and

    (d) If the Work includes a "NOTICE" text file as part of its
        distribution, then any Derivative Works that You distribute must
        include a readable copy of the attribution notices contained
        within such NOTICE file, excluding those notices that do not
        pertain to any part of the Derivative Works, in at least one
        of the following places: within a NOTICE text file distributed
        as part of the Derivative Works; within the Source form or
        documentation, if provided along with the Derivative Works; or,
        within a display generated by the Derivative Works, if and
        wherever such third-party notices normally appear. The contents
        of the NOTICE file are for informational purposes only and
        do not modify the License. You may add Your own attribution
        notices within Derivative Works that You distribute, alongside
        or as an addendum to the NOTICE text from the Work, provided
        that such additional attribution notices cannot be construed
        as modifying the License.

    You may add Your own copyright statement to Your modifications and
    may provide additional or different license terms and conditions
    for use, reproduction, or distribution of Your modifications, or
    for any such Derivative Works as a whole, provided Your use,
    reproduction, and distribution of the Work otherwise complies with
    the conditions stated in this License.

 5. Submission of Contributions. Unless You explicitly state otherwise,
    any Contribution intentionally submitted for inclusion in the Work
    by You to the Licensor shall be under the terms and conditions of
    this License, without any additional terms or conditions.
    Notwithstanding the above, nothing herein shall supersede or modify
    the terms of any separate license agreement you may have executed
    with Licensor regarding such Contributions.

 6. Trademarks. This License does not grant permission to use the trade
    names, trademarks, service marks, or product names of the Licensor,
    except as required for reasonable and customary use in describing the
    origin of the Work and reproducing the content of the NOTICE file.

 7. Disclaimer of Warranty. Unless required by applicable law or
    agreed to in writing, Licensor provides the Work (and each
    Contributor provides its Contributions) on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied, including, without limitation, any warranties or conditions
    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
    PARTICULAR PURPOSE. You are solely responsible for determining the
    appropriateness of using or redistributing the Work and assume any
    risks associated with Your exercise of permissions under this License.

 8. Limitation of Liability. In no event and under no legal theory,
    whether in tort (including negligence), contract, or otherwise,
    unless required by applicable law (such as deliberate and grossly
    negligent acts) or agreed to in writing, shall any Contributor be
    liable to You for damages, including any direct, indirect, special,
    incidental, or consequential damages of any character arising as a
    result of this License or out of the use or inability to use the
    Work (including but not limited to damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all
    other commercial damages or losses), even if such Contributor
    has been advised of the possibility of such damages.

 9. Accepting Warranty or Additional Liability. While redistributing
    the Work or Derivative Works thereof, You may choose to offer,
    and charge a fee for, acceptance of support, warranty, indemnity,
    or other liability obligations and/or rights consistent with this
    License. However, in accepting such obligations, You may act only
    on Your own behalf and on Your sole responsibility, not on behalf
    of any other Contributor, and only if You agree to indemnify,
    defend, and hold each Contributor harmless for any liability
    incurred by, or claims asserted against, such Contributor by reason
    of your accepting any such warranty or additional liability.

 END OF TERMS AND CONDITIONS

 APPENDIX: How to apply the Apache License to your work.

    To apply the Apache License to your work, attach the following
    boilerplate notice, with the fields enclosed by brackets "[]"
    replaced with your own identifying information. (Don't include
    the brackets!)  The text should be enclosed in the appropriate
    comment syntax for the file format. We also recommend that a
    file or class name and description of purpose be included on the
    same "printed page" as the copyright notice for easier
    identification within third-party archives.

 Copyright (c) 2015-2018 Google, Inc., Netflix, Inc., Microsoft Corp. and contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 

 **/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('rxjs', ['exports'], factory) :
    (factory((global.rxjs = {})));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    }

    function isFunction(x) {
        return typeof x === 'function';
    }

    var _enable_super_gross_mode_that_will_cause_bad_things = false;
    var config = {
        Promise: undefined,
        set useDeprecatedSynchronousErrorHandling(value) {
            if (value) {
                var error = new Error();
                console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
            }
            else if (_enable_super_gross_mode_that_will_cause_bad_things) {
                console.log('RxJS: Back to a better error behavior. Thank you. <3');
            }
            _enable_super_gross_mode_that_will_cause_bad_things = value;
        },
        get useDeprecatedSynchronousErrorHandling() {
            return _enable_super_gross_mode_that_will_cause_bad_things;
        },
    };

    function hostReportError(err) {
        setTimeout(function () { throw err; }, 0);
    }

    var empty = {
        closed: true,
        next: function (value) { },
        error: function (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        },
        complete: function () { }
    };

    var isArray = (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

    function isObject(x) {
        return x !== null && typeof x === 'object';
    }

    var UnsubscriptionErrorImpl = (function () {
        function UnsubscriptionErrorImpl(errors) {
            Error.call(this);
            this.message = errors ?
                errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
            return this;
        }
        UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
        return UnsubscriptionErrorImpl;
    })();
    var UnsubscriptionError = UnsubscriptionErrorImpl;

    var Subscription = (function () {
        function Subscription(unsubscribe) {
            this.closed = false;
            this._parentOrParents = null;
            this._subscriptions = null;
            if (unsubscribe) {
                this._ctorUnsubscribe = true;
                this._unsubscribe = unsubscribe;
            }
        }
        Subscription.prototype.unsubscribe = function () {
            var errors;
            if (this.closed) {
                return;
            }
            var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
            this.closed = true;
            this._parentOrParents = null;
            this._subscriptions = null;
            if (_parentOrParents instanceof Subscription) {
                _parentOrParents.remove(this);
            }
            else if (_parentOrParents !== null) {
                for (var index = 0; index < _parentOrParents.length; ++index) {
                    var parent_1 = _parentOrParents[index];
                    parent_1.remove(this);
                }
            }
            if (isFunction(_unsubscribe)) {
                if (_ctorUnsubscribe) {
                    this._unsubscribe = undefined;
                }
                try {
                    _unsubscribe.call(this);
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
                }
            }
            if (isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject(sub)) {
                        try {
                            sub.unsubscribe();
                        }
                        catch (e) {
                            errors = errors || [];
                            if (e instanceof UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                            }
                            else {
                                errors.push(e);
                            }
                        }
                    }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        };
        Subscription.prototype.add = function (teardown) {
            var subscription = teardown;
            if (!teardown) {
                return Subscription.EMPTY;
            }
            switch (typeof teardown) {
                case 'function':
                    subscription = new Subscription(teardown);
                case 'object':
                    if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                        return subscription;
                    }
                    else if (this.closed) {
                        subscription.unsubscribe();
                        return subscription;
                    }
                    else if (!(subscription instanceof Subscription)) {
                        var tmp = subscription;
                        subscription = new Subscription();
                        subscription._subscriptions = [tmp];
                    }
                    break;
                default: {
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
                }
            }
            var _parentOrParents = subscription._parentOrParents;
            if (_parentOrParents === null) {
                subscription._parentOrParents = this;
            }
            else if (_parentOrParents instanceof Subscription) {
                if (_parentOrParents === this) {
                    return subscription;
                }
                subscription._parentOrParents = [_parentOrParents, this];
            }
            else if (_parentOrParents.indexOf(this) === -1) {
                _parentOrParents.push(this);
            }
            else {
                return subscription;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions === null) {
                this._subscriptions = [subscription];
            }
            else {
                subscriptions.push(subscription);
            }
            return subscription;
        };
        Subscription.prototype.remove = function (subscription) {
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = (function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription()));
        return Subscription;
    }());
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
    }

    var rxSubscriber = (function () {
        return typeof Symbol === 'function'
            ? Symbol('rxSubscriber')
            : '@@rxSubscriber_' + Math.random();
    })();

    var Subscriber = (function (_super) {
        __extends(Subscriber, _super);
        function Subscriber(destinationOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this.syncErrorValue = null;
            _this.syncErrorThrown = false;
            _this.syncErrorThrowable = false;
            _this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    _this.destination = empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        _this.destination = empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                            _this.destination = destinationOrNext;
                            destinationOrNext.add(_this);
                        }
                        else {
                            _this.syncErrorThrowable = true;
                            _this.destination = new SafeSubscriber(_this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    _this.syncErrorThrowable = true;
                    _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                    break;
            }
            return _this;
        }
        Subscriber.prototype[rxSubscriber] = function () { return this; };
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        Subscriber.prototype._unsubscribeAndRecycle = function () {
            var _parentOrParents = this._parentOrParents;
            this._parentOrParents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parentOrParents = _parentOrParents;
            return this;
        };
        return Subscriber;
    }(Subscription));
    var SafeSubscriber = (function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this._parentSubscriber = _parentSubscriber;
            var next;
            var context = _this;
            if (isFunction(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (observerOrNext !== empty) {
                    context = Object.create(observerOrNext);
                    if (isFunction(context.unsubscribe)) {
                        _this.add(context.unsubscribe.bind(context));
                    }
                    context.unsubscribe = _this.unsubscribe.bind(_this);
                }
            }
            _this._context = context;
            _this._next = next;
            _this._error = error;
            _this._complete = complete;
            return _this;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parentSubscriber = this._parentSubscriber;
                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                }
                else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
                if (this._error) {
                    if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, this._error, err);
                        this.unsubscribe();
                    }
                }
                else if (!_parentSubscriber.syncErrorThrowable) {
                    this.unsubscribe();
                    if (useDeprecatedSynchronousErrorHandling) {
                        throw err;
                    }
                    hostReportError(err);
                }
                else {
                    if (useDeprecatedSynchronousErrorHandling) {
                        _parentSubscriber.syncErrorValue = err;
                        _parentSubscriber.syncErrorThrown = true;
                    }
                    else {
                        hostReportError(err);
                    }
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            var _this = this;
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._complete) {
                    var wrappedComplete = function () { return _this._complete.call(_this._context); };
                    if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(wrappedComplete);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                        this.unsubscribe();
                    }
                }
                else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                this.unsubscribe();
                if (config.useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                else {
                    hostReportError(err);
                }
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            if (!config.useDeprecatedSynchronousErrorHandling) {
                throw new Error('bad call');
            }
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    parent.syncErrorValue = err;
                    parent.syncErrorThrown = true;
                    return true;
                }
                else {
                    hostReportError(err);
                    return true;
                }
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;
            _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber));

    function canReportError(observer) {
        while (observer) {
            var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
            if (closed_1 || isStopped) {
                return false;
            }
            else if (destination && destination instanceof Subscriber) {
                observer = destination;
            }
            else {
                observer = null;
            }
        }
        return true;
    }

    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber]) {
                return nextOrObserver[rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber(empty);
        }
        return new Subscriber(nextOrObserver, error, complete);
    }

    var observable = (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

    function identity(x) {
        return x;
    }

    function pipe() {
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i] = arguments[_i];
        }
        return pipeFromArray(fns);
    }
    function pipeFromArray(fns) {
        if (fns.length === 0) {
            return identity;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    var Observable = (function () {
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable$$1 = new Observable();
            observable$$1.source = this;
            observable$$1.operator = operator;
            return observable$$1;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber(observerOrNext, error, complete);
            if (operator) {
                sink.add(operator.call(sink, this.source));
            }
            else {
                sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                    this._subscribe(sink) :
                    this._trySubscribe(sink));
            }
            if (config.useDeprecatedSynchronousErrorHandling) {
                if (sink.syncErrorThrowable) {
                    sink.syncErrorThrowable = false;
                    if (sink.syncErrorThrown) {
                        throw sink.syncErrorValue;
                    }
                }
            }
            return sink;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    sink.syncErrorThrown = true;
                    sink.syncErrorValue = err;
                }
                if (canReportError(sink)) {
                    sink.error(err);
                }
                else {
                    console.warn(err);
                }
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscription;
                subscription = _this.subscribe(function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        if (subscription) {
                            subscription.unsubscribe();
                        }
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            if (operations.length === 0) {
                return this;
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        if (!promiseCtor) {
            promiseCtor = config.Promise || Promise;
        }
        if (!promiseCtor) {
            throw new Error('no Promise impl found');
        }
        return promiseCtor;
    }

    var ObjectUnsubscribedErrorImpl = (function () {
        function ObjectUnsubscribedErrorImpl() {
            Error.call(this);
            this.message = 'object unsubscribed';
            this.name = 'ObjectUnsubscribedError';
            return this;
        }
        ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
        return ObjectUnsubscribedErrorImpl;
    })();
    var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

    var SubjectSubscription = (function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            var _this = _super.call(this) || this;
            _this.subject = subject;
            _this.subscriber = subscriber;
            _this.closed = false;
            return _this;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription));

    var SubjectSubscriber = (function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            return _this;
        }
        return SubjectSubscriber;
    }(Subscriber));
    var Subject = (function (_super) {
        __extends(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.observers = [];
            _this.closed = false;
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype[rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._trySubscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return _super.prototype._trySubscribe.call(this, subscriber);
            }
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscriber.complete();
                return Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                return new SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable));
    var AnonymousSubject = (function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            }
            else {
                return Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject));

    function refCount() {
        return function refCountOperatorFunction(source) {
            return source.lift(new RefCountOperator(source));
        };
    }
    var RefCountOperator = (function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }());
    var RefCountSubscriber = (function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));

    var ConnectableObservable = (function (_super) {
        __extends(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._refCount = 0;
            _this._isComplete = false;
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                this._isComplete = false;
                connection = this._connection = new Subscription();
                connection.add(this.source
                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription.EMPTY;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount()(this);
        };
        return ConnectableObservable;
    }(Observable));
    var connectableObservableDescriptor = (function () {
        var connectableProto = ConnectableObservable.prototype;
        return {
            operator: { value: null },
            _refCount: { value: 0, writable: true },
            _subject: { value: null, writable: true },
            _connection: { value: null, writable: true },
            _subscribe: { value: connectableProto._subscribe },
            _isComplete: { value: connectableProto._isComplete, writable: true },
            getSubject: { value: connectableProto.getSubject },
            connect: { value: connectableProto.connect },
            refCount: { value: connectableProto.refCount }
        };
    })();
    var ConnectableSubscriber = (function (_super) {
        __extends(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this.connectable._isComplete = true;
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(SubjectSubscriber));
    var RefCountSubscriber$1 = (function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount$$1 = connectable._refCount;
            if (refCount$$1 <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount$$1 - 1;
            if (refCount$$1 > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));

    function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
        return function (source) {
            return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
        };
    }
    var GroupByOperator = (function () {
        function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
            this.keySelector = keySelector;
            this.elementSelector = elementSelector;
            this.durationSelector = durationSelector;
            this.subjectSelector = subjectSelector;
        }
        GroupByOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
        };
        return GroupByOperator;
    }());
    var GroupBySubscriber = (function (_super) {
        __extends(GroupBySubscriber, _super);
        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.elementSelector = elementSelector;
            _this.durationSelector = durationSelector;
            _this.subjectSelector = subjectSelector;
            _this.groups = null;
            _this.attemptedToUnsubscribe = false;
            _this.count = 0;
            return _this;
        }
        GroupBySubscriber.prototype._next = function (value) {
            var key;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                this.error(err);
                return;
            }
            this._group(value, key);
        };
        GroupBySubscriber.prototype._group = function (value, key) {
            var groups = this.groups;
            if (!groups) {
                groups = this.groups = new Map();
            }
            var group = groups.get(key);
            var element;
            if (this.elementSelector) {
                try {
                    element = this.elementSelector(value);
                }
                catch (err) {
                    this.error(err);
                }
            }
            else {
                element = value;
            }
            if (!group) {
                group = (this.subjectSelector ? this.subjectSelector() : new Subject());
                groups.set(key, group);
                var groupedObservable = new GroupedObservable(key, group, this);
                this.destination.next(groupedObservable);
                if (this.durationSelector) {
                    var duration = void 0;
                    try {
                        duration = this.durationSelector(new GroupedObservable(key, group));
                    }
                    catch (err) {
                        this.error(err);
                        return;
                    }
                    this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
                }
            }
            if (!group.closed) {
                group.next(element);
            }
        };
        GroupBySubscriber.prototype._error = function (err) {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.error(err);
                });
                groups.clear();
            }
            this.destination.error(err);
        };
        GroupBySubscriber.prototype._complete = function () {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.complete();
                });
                groups.clear();
            }
            this.destination.complete();
        };
        GroupBySubscriber.prototype.removeGroup = function (key) {
            this.groups.delete(key);
        };
        GroupBySubscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.attemptedToUnsubscribe = true;
                if (this.count === 0) {
                    _super.prototype.unsubscribe.call(this);
                }
            }
        };
        return GroupBySubscriber;
    }(Subscriber));
    var GroupDurationSubscriber = (function (_super) {
        __extends(GroupDurationSubscriber, _super);
        function GroupDurationSubscriber(key, group, parent) {
            var _this = _super.call(this, group) || this;
            _this.key = key;
            _this.group = group;
            _this.parent = parent;
            return _this;
        }
        GroupDurationSubscriber.prototype._next = function (value) {
            this.complete();
        };
        GroupDurationSubscriber.prototype._unsubscribe = function () {
            var _a = this, parent = _a.parent, key = _a.key;
            this.key = this.parent = null;
            if (parent) {
                parent.removeGroup(key);
            }
        };
        return GroupDurationSubscriber;
    }(Subscriber));
    var GroupedObservable = (function (_super) {
        __extends(GroupedObservable, _super);
        function GroupedObservable(key, groupSubject, refCountSubscription) {
            var _this = _super.call(this) || this;
            _this.key = key;
            _this.groupSubject = groupSubject;
            _this.refCountSubscription = refCountSubscription;
            return _this;
        }
        GroupedObservable.prototype._subscribe = function (subscriber) {
            var subscription = new Subscription();
            var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
            if (refCountSubscription && !refCountSubscription.closed) {
                subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }
            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
        };
        return GroupedObservable;
    }(Observable));
    var InnerRefCountSubscription = (function (_super) {
        __extends(InnerRefCountSubscription, _super);
        function InnerRefCountSubscription(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            parent.count++;
            return _this;
        }
        InnerRefCountSubscription.prototype.unsubscribe = function () {
            var parent = this.parent;
            if (!parent.closed && !this.closed) {
                _super.prototype.unsubscribe.call(this);
                parent.count -= 1;
                if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                    parent.unsubscribe();
                }
            }
        };
        return InnerRefCountSubscription;
    }(Subscription));

    var BehaviorSubject = (function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            }
            else if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject));

    var Action = (function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            return this;
        };
        return Action;
    }(Subscription));

    var AsyncAction = (function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            return setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && this.delay === delay && this.pending === false) {
                return id;
            }
            clearInterval(id);
            return undefined;
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
        };
        return AsyncAction;
    }(Action));

    var QueueAction = (function (_super) {
        __extends(QueueAction, _super);
        function QueueAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction));

    var Scheduler = (function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) { now = Scheduler.now; }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) { delay = 0; }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = function () { return Date.now(); };
        return Scheduler;
    }());

    var AsyncScheduler = (function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) { now = Scheduler.now; }
            var _this = _super.call(this, SchedulerAction, function () {
                if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                    return AsyncScheduler.delegate.now();
                }
                else {
                    return now();
                }
            }) || this;
            _this.actions = [];
            _this.active = false;
            _this.scheduled = undefined;
            return _this;
        }
        AsyncScheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) { delay = 0; }
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
                return AsyncScheduler.delegate.schedule(work, delay, state);
            }
            else {
                return _super.prototype.schedule.call(this, work, delay, state);
            }
        };
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift());
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler));

    var QueueScheduler = (function (_super) {
        __extends(QueueScheduler, _super);
        function QueueScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QueueScheduler;
    }(AsyncScheduler));

    var queueScheduler = new QueueScheduler(QueueAction);
    var queue = queueScheduler;

    var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });
    function empty$1(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : EMPTY;
    }
    function emptyScheduled(scheduler) {
        return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
    }

    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }

    var subscribeToArray = function (array) { return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    }; };

    function scheduleArray(input, scheduler) {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }

    function fromArray(input, scheduler) {
        if (!scheduler) {
            return new Observable(subscribeToArray(input));
        }
        else {
            return scheduleArray(input, scheduler);
        }
    }

    function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = args[args.length - 1];
        if (isScheduler(scheduler)) {
            args.pop();
            return scheduleArray(args, scheduler);
        }
        else {
            return fromArray(args);
        }
    }

    function throwError(error, scheduler) {
        if (!scheduler) {
            return new Observable(function (subscriber) { return subscriber.error(error); });
        }
        else {
            return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
        }
    }
    function dispatch(_a) {
        var error = _a.error, subscriber = _a.subscriber;
        subscriber.error(error);
    }

    (function (NotificationKind) {
        NotificationKind["NEXT"] = "N";
        NotificationKind["ERROR"] = "E";
        NotificationKind["COMPLETE"] = "C";
    })(exports.NotificationKind || (exports.NotificationKind = {}));
    var Notification = (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            }
            else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return of(this.value);
                case 'E':
                    return throwError(this.error);
                case 'C':
                    return empty$1();
            }
            throw new Error('unexpected notification kind value');
        };
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return Notification.undefinedValueNotification;
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }());

    function observeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return function observeOnOperatorFunction(source) {
            return source.lift(new ObserveOnOperator(scheduler, delay));
        };
    }
    var ObserveOnOperator = (function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) { delay = 0; }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }());
    var ObserveOnSubscriber = (function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) { delay = 0; }
            var _this = _super.call(this, destination) || this;
            _this.scheduler = scheduler;
            _this.delay = delay;
            return _this;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification, destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            var destination = this.destination;
            destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification.createError(err));
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification.createComplete());
            this.unsubscribe();
        };
        return ObserveOnSubscriber;
    }(Subscriber));
    var ObserveOnMessage = (function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }());

    var ReplaySubject = (function (_super) {
        __extends(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
            if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
            var _this = _super.call(this) || this;
            _this.scheduler = scheduler;
            _this._events = [];
            _this._infiniteTimeWindow = false;
            _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            _this._windowTime = windowTime < 1 ? 1 : windowTime;
            if (windowTime === Number.POSITIVE_INFINITY) {
                _this._infiniteTimeWindow = true;
                _this.next = _this.nextInfiniteTimeWindow;
            }
            else {
                _this.next = _this.nextTimeWindow;
            }
            return _this;
        }
        ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
            var _events = this._events;
            _events.push(value);
            if (_events.length > this._bufferSize) {
                _events.shift();
            }
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype.nextTimeWindow = function (value) {
            this._events.push(new ReplayEvent(this._getNow(), value));
            this._trimBufferThenGetEvents();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            var _infiniteTimeWindow = this._infiniteTimeWindow;
            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            var len = _events.length;
            var subscription;
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.isStopped || this.hasError) {
                subscription = Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                subscription = new SubjectSubscription(this, subscriber);
            }
            if (scheduler) {
                subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
            }
            if (_infiniteTimeWindow) {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i]);
                }
            }
            else {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i].value);
                }
            }
            if (this.hasError) {
                subscriber.error(this.thrownError);
            }
            else if (this.isStopped) {
                subscriber.complete();
            }
            return subscription;
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            while (spliceCount < eventsCount) {
                if ((now - _events[spliceCount].time) < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject));
    var ReplayEvent = (function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }());

    var AsyncSubject = (function (_super) {
        __extends(AsyncSubject, _super);
        function AsyncSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.value = null;
            _this.hasNext = false;
            _this.hasCompleted = false;
            return _this;
        }
        AsyncSubject.prototype._subscribe = function (subscriber) {
            if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.hasCompleted && this.hasNext) {
                subscriber.next(this.value);
                subscriber.complete();
                return Subscription.EMPTY;
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.hasCompleted) {
                this.value = value;
                this.hasNext = true;
            }
        };
        AsyncSubject.prototype.error = function (error) {
            if (!this.hasCompleted) {
                _super.prototype.error.call(this, error);
            }
        };
        AsyncSubject.prototype.complete = function () {
            this.hasCompleted = true;
            if (this.hasNext) {
                _super.prototype.next.call(this, this.value);
            }
            _super.prototype.complete.call(this);
        };
        return AsyncSubject;
    }(Subject));

    var nextHandle = 1;
    var RESOLVED = (function () { return Promise.resolve(); })();
    var activeHandles = {};
    function findAndClearHandle(handle) {
        if (handle in activeHandles) {
            delete activeHandles[handle];
            return true;
        }
        return false;
    }
    var Immediate = {
        setImmediate: function (cb) {
            var handle = nextHandle++;
            activeHandles[handle] = true;
            RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
            return handle;
        },
        clearImmediate: function (handle) {
            findAndClearHandle(handle);
        },
    };

    var AsapAction = (function (_super) {
        __extends(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                Immediate.clearImmediate(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction));

    var AsapScheduler = (function (_super) {
        __extends(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler));

    var asapScheduler = new AsapScheduler(AsapAction);
    var asap = asapScheduler;

    var asyncScheduler = new AsyncScheduler(AsyncAction);
    var async = asyncScheduler;

    var AnimationFrameAction = (function (_super) {
        __extends(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                cancelAnimationFrame(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction));

    var AnimationFrameScheduler = (function (_super) {
        __extends(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnimationFrameScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler));

    var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
    var animationFrame = animationFrameScheduler;

    var VirtualTimeScheduler = (function (_super) {
        __extends(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(SchedulerAction, maxFrames) {
            if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
            if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
            var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
            _this.maxFrames = maxFrames;
            _this.frame = 0;
            _this.index = -1;
            return _this;
        }
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
            var error, action;
            while ((action = actions[0]) && action.delay <= maxFrames) {
                actions.shift();
                this.frame = action.delay;
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            }
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler));
    var VirtualAction = (function (_super) {
        __extends(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) { index = scheduler.index += 1; }
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.index = index;
            _this.active = true;
            _this.index = scheduler.index = index;
            return _this;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (!this.id) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.active = false;
            var action = new VirtualAction(this.scheduler, this.work);
            this.add(action);
            return action.schedule(state, delay);
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            return undefined;
        };
        VirtualAction.prototype._execute = function (state, delay) {
            if (this.active === true) {
                return _super.prototype._execute.call(this, state, delay);
            }
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                }
                else if (a.index > b.index) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            else if (a.delay > b.delay) {
                return 1;
            }
            else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction));

    function noop() { }

    function isObservable(obj) {
        return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
    }

    var ArgumentOutOfRangeErrorImpl = (function () {
        function ArgumentOutOfRangeErrorImpl() {
            Error.call(this);
            this.message = 'argument out of range';
            this.name = 'ArgumentOutOfRangeError';
            return this;
        }
        ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
        return ArgumentOutOfRangeErrorImpl;
    })();
    var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

    var EmptyErrorImpl = (function () {
        function EmptyErrorImpl() {
            Error.call(this);
            this.message = 'no elements in sequence';
            this.name = 'EmptyError';
            return this;
        }
        EmptyErrorImpl.prototype = Object.create(Error.prototype);
        return EmptyErrorImpl;
    })();
    var EmptyError = EmptyErrorImpl;

    var TimeoutErrorImpl = (function () {
        function TimeoutErrorImpl() {
            Error.call(this);
            this.message = 'Timeout has occurred';
            this.name = 'TimeoutError';
            return this;
        }
        TimeoutErrorImpl.prototype = Object.create(Error.prototype);
        return TimeoutErrorImpl;
    })();
    var TimeoutError = TimeoutErrorImpl;

    function map(project, thisArg) {
        return function mapOperation(source) {
            if (typeof project !== 'function') {
                throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
            }
            return source.lift(new MapOperator(project, thisArg));
        };
    }
    var MapOperator = (function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }());
    var MapSubscriber = (function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.count = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber));

    function bindCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
            if (isScheduler(resultSelector)) {
                scheduler = resultSelector;
            }
            else {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
                };
            }
        }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var context = this;
            var subject;
            var params = {
                context: context,
                subject: subject,
                callbackFunc: callbackFunc,
                scheduler: scheduler,
            };
            return new Observable(function (subscriber) {
                if (!scheduler) {
                    if (!subject) {
                        subject = new AsyncSubject();
                        var handler = function () {
                            var innerArgs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                innerArgs[_i] = arguments[_i];
                            }
                            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                            subject.complete();
                        };
                        try {
                            callbackFunc.apply(context, args.concat([handler]));
                        }
                        catch (err) {
                            if (canReportError(subject)) {
                                subject.error(err);
                            }
                            else {
                                console.warn(err);
                            }
                        }
                    }
                    return subject.subscribe(subscriber);
                }
                else {
                    var state = {
                        args: args, subscriber: subscriber, params: params,
                    };
                    return scheduler.schedule(dispatch$1, 0, state);
                }
            });
        };
    }
    function dispatch$1(state) {
        var _this = this;
        var args = state.args, subscriber = state.subscriber, params = state.params;
        var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
        var subject = params.subject;
        if (!subject) {
            subject = params.subject = new AsyncSubject();
            var handler = function () {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i] = arguments[_i];
                }
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            };
            try {
                callbackFunc.apply(context, args.concat([handler]));
            }
            catch (err) {
                subject.error(err);
            }
        }
        this.add(subject.subscribe(subscriber));
    }
    function dispatchNext(state) {
        var value = state.value, subject = state.subject;
        subject.next(value);
        subject.complete();
    }

    function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
            if (isScheduler(resultSelector)) {
                scheduler = resultSelector;
            }
            else {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
                };
            }
        }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var params = {
                subject: undefined,
                args: args,
                callbackFunc: callbackFunc,
                scheduler: scheduler,
                context: this,
            };
            return new Observable(function (subscriber) {
                var context = params.context;
                var subject = params.subject;
                if (!scheduler) {
                    if (!subject) {
                        subject = params.subject = new AsyncSubject();
                        var handler = function () {
                            var innerArgs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                innerArgs[_i] = arguments[_i];
                            }
                            var err = innerArgs.shift();
                            if (err) {
                                subject.error(err);
                                return;
                            }
                            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                            subject.complete();
                        };
                        try {
                            callbackFunc.apply(context, args.concat([handler]));
                        }
                        catch (err) {
                            if (canReportError(subject)) {
                                subject.error(err);
                            }
                            else {
                                console.warn(err);
                            }
                        }
                    }
                    return subject.subscribe(subscriber);
                }
                else {
                    return scheduler.schedule(dispatch$2, 0, { params: params, subscriber: subscriber, context: context });
                }
            });
        };
    }
    function dispatch$2(state) {
        var _this = this;
        var params = state.params, subscriber = state.subscriber, context = state.context;
        var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
        var subject = params.subject;
        if (!subject) {
            subject = params.subject = new AsyncSubject();
            var handler = function () {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i] = arguments[_i];
                }
                var err = innerArgs.shift();
                if (err) {
                    _this.add(scheduler.schedule(dispatchError$1, 0, { err: err, subject: subject }));
                }
                else {
                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                    _this.add(scheduler.schedule(dispatchNext$1, 0, { value: value, subject: subject }));
                }
            };
            try {
                callbackFunc.apply(context, args.concat([handler]));
            }
            catch (err) {
                this.add(scheduler.schedule(dispatchError$1, 0, { err: err, subject: subject }));
            }
        }
        this.add(subject.subscribe(subscriber));
    }
    function dispatchNext$1(arg) {
        var value = arg.value, subject = arg.subject;
        subject.next(value);
        subject.complete();
    }
    function dispatchError$1(arg) {
        var err = arg.err, subject = arg.subject;
        subject.error(err);
    }

    var OuterSubscriber = (function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber));

    var InnerSubscriber = (function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.outerValue = outerValue;
            _this.outerIndex = outerIndex;
            _this.index = 0;
            return _this;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber));

    var subscribeToPromise = function (promise) { return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, hostReportError);
        return subscriber;
    }; };

    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = getSymbolIterator();

    var subscribeToIterable = function (iterable) { return function (subscriber) {
        var iterator$$1 = iterable[iterator]();
        do {
            var item = void 0;
            try {
                item = iterator$$1.next();
            }
            catch (err) {
                subscriber.error(err);
                return subscriber;
            }
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        if (typeof iterator$$1.return === 'function') {
            subscriber.add(function () {
                if (iterator$$1.return) {
                    iterator$$1.return();
                }
            });
        }
        return subscriber;
    }; };

    var subscribeToObservable = function (obj) { return function (subscriber) {
        var obs = obj[observable]();
        if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    }; };

    var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    function isPromise(value) {
        return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }

    var subscribeTo = function (result) {
        if (!!result && typeof result[observable] === 'function') {
            return subscribeToObservable(result);
        }
        else if (isArrayLike(result)) {
            return subscribeToArray(result);
        }
        else if (isPromise(result)) {
            return subscribeToPromise(result);
        }
        else if (!!result && typeof result[iterator] === 'function') {
            return subscribeToIterable(result);
        }
        else {
            var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
            var msg = "You provided " + value + " where a stream was expected."
                + ' You can provide an Observable, Promise, Array, or Iterable.';
            throw new TypeError(msg);
        }
    };

    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
        if (innerSubscriber === void 0) { innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex); }
        if (innerSubscriber.closed) {
            return undefined;
        }
        if (result instanceof Observable) {
            return result.subscribe(innerSubscriber);
        }
        return subscribeTo(result)(innerSubscriber);
    }

    var NONE = {};
    function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var resultSelector = undefined;
        var scheduler = undefined;
        if (isScheduler(observables[observables.length - 1])) {
            scheduler = observables.pop();
        }
        if (typeof observables[observables.length - 1] === 'function') {
            resultSelector = observables.pop();
        }
        if (observables.length === 1 && isArray(observables[0])) {
            observables = observables[0];
        }
        return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
    }
    var CombineLatestOperator = (function () {
        function CombineLatestOperator(resultSelector) {
            this.resultSelector = resultSelector;
        }
        CombineLatestOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
        };
        return CombineLatestOperator;
    }());
    var CombineLatestSubscriber = (function (_super) {
        __extends(CombineLatestSubscriber, _super);
        function CombineLatestSubscriber(destination, resultSelector) {
            var _this = _super.call(this, destination) || this;
            _this.resultSelector = resultSelector;
            _this.active = 0;
            _this.values = [];
            _this.observables = [];
            return _this;
        }
        CombineLatestSubscriber.prototype._next = function (observable) {
            this.values.push(NONE);
            this.observables.push(observable);
        };
        CombineLatestSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                this.active = len;
                this.toRespond = len;
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    this.add(subscribeToResult(this, observable, undefined, i));
                }
            }
        };
        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
            if ((this.active -= 1) === 0) {
                this.destination.complete();
            }
        };
        CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond
                ? 0
                : oldVal === NONE ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;
            if (toRespond === 0) {
                if (this.resultSelector) {
                    this._tryResultSelector(values);
                }
                else {
                    this.destination.next(values.slice());
                }
            }
        };
        CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
            var result;
            try {
                result = this.resultSelector.apply(this, values);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return CombineLatestSubscriber;
    }(OuterSubscriber));

    function scheduleObservable(input, scheduler) {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                var observable$$1 = input[observable]();
                sub.add(observable$$1.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }

    function schedulePromise(input, scheduler) {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () { return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            }); }));
            return sub;
        });
    }

    function scheduleIterable(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var iterator$$1;
            sub.add(function () {
                if (iterator$$1 && typeof iterator$$1.return === 'function') {
                    iterator$$1.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator$$1 = input[iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator$$1.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }

    function isInteropObservable(input) {
        return input && typeof input[observable] === 'function';
    }

    function isIterable(input) {
        return input && typeof input[iterator] === 'function';
    }

    function scheduled(input, scheduler) {
        if (input != null) {
            if (isInteropObservable(input)) {
                return scheduleObservable(input, scheduler);
            }
            else if (isPromise(input)) {
                return schedulePromise(input, scheduler);
            }
            else if (isArrayLike(input)) {
                return scheduleArray(input, scheduler);
            }
            else if (isIterable(input) || typeof input === 'string') {
                return scheduleIterable(input, scheduler);
            }
        }
        throw new TypeError((input !== null && typeof input || input) + ' is not observable');
    }

    function from(input, scheduler) {
        if (!scheduler) {
            if (input instanceof Observable) {
                return input;
            }
            return new Observable(subscribeTo(input));
        }
        else {
            return scheduled(input, scheduler);
        }
    }

    var SimpleInnerSubscriber = (function (_super) {
        __extends(SimpleInnerSubscriber, _super);
        function SimpleInnerSubscriber(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            return _this;
        }
        SimpleInnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(value);
        };
        SimpleInnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error);
            this.unsubscribe();
        };
        SimpleInnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete();
            this.unsubscribe();
        };
        return SimpleInnerSubscriber;
    }(Subscriber));
    var ComplexInnerSubscriber = (function (_super) {
        __extends(ComplexInnerSubscriber, _super);
        function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.outerValue = outerValue;
            _this.outerIndex = outerIndex;
            return _this;
        }
        ComplexInnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
        };
        ComplexInnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error);
            this.unsubscribe();
        };
        ComplexInnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return ComplexInnerSubscriber;
    }(Subscriber));
    var SimpleOuterSubscriber = (function (_super) {
        __extends(SimpleOuterSubscriber, _super);
        function SimpleOuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
            this.destination.next(innerValue);
        };
        SimpleOuterSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        SimpleOuterSubscriber.prototype.notifyComplete = function () {
            this.destination.complete();
        };
        return SimpleOuterSubscriber;
    }(Subscriber));
    var ComplexOuterSubscriber = (function (_super) {
        __extends(ComplexOuterSubscriber, _super);
        function ComplexOuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {
            this.destination.next(innerValue);
        };
        ComplexOuterSubscriber.prototype.notifyError = function (error) {
            this.destination.error(error);
        };
        ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {
            this.destination.complete();
        };
        return ComplexOuterSubscriber;
    }(Subscriber));
    function innerSubscribe(result, innerSubscriber) {
        if (innerSubscriber.closed) {
            return undefined;
        }
        if (result instanceof Observable) {
            return result.subscribe(innerSubscriber);
        }
        return subscribeTo(result)(innerSubscriber);
    }

    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        if (typeof resultSelector === 'function') {
            return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
    }
    var MergeMapOperator = (function () {
        function MergeMapOperator(project, concurrent) {
            if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
            this.project = project;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
        };
        return MergeMapOperator;
    }());
    var MergeMapSubscriber = (function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, concurrent) {
            if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish) {
            var innerSubscriber = new SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = innerSubscribe(ish, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
            }
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
            this.destination.next(innerValue);
        };
        MergeMapSubscriber.prototype.notifyComplete = function () {
            var buffer = this.buffer;
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(SimpleOuterSubscriber));
    var flatMap = mergeMap;

    function mergeAll(concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        return mergeMap(identity, concurrent);
    }

    function concatAll() {
        return mergeAll(1);
    }

    function concat() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        return concatAll()(of.apply(void 0, observables));
    }

    function defer(observableFactory) {
        return new Observable(function (subscriber) {
            var input;
            try {
                input = observableFactory();
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            var source = input ? from(input) : empty$1();
            return source.subscribe(subscriber);
        });
    }

    function forkJoin() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        if (sources.length === 1) {
            var first_1 = sources[0];
            if (isArray(first_1)) {
                return forkJoinInternal(first_1, null);
            }
            if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
                var keys = Object.keys(first_1);
                return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
            }
        }
        if (typeof sources[sources.length - 1] === 'function') {
            var resultSelector_1 = sources.pop();
            sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;
            return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));
        }
        return forkJoinInternal(sources, null);
    }
    function forkJoinInternal(sources, keys) {
        return new Observable(function (subscriber) {
            var len = sources.length;
            if (len === 0) {
                subscriber.complete();
                return;
            }
            var values = new Array(len);
            var completed = 0;
            var emitted = 0;
            var _loop_1 = function (i) {
                var source = from(sources[i]);
                var hasValue = false;
                subscriber.add(source.subscribe({
                    next: function (value) {
                        if (!hasValue) {
                            hasValue = true;
                            emitted++;
                        }
                        values[i] = value;
                    },
                    error: function (err) { return subscriber.error(err); },
                    complete: function () {
                        completed++;
                        if (completed === len || !hasValue) {
                            if (emitted === len) {
                                subscriber.next(keys ?
                                    keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
                                    values);
                            }
                            subscriber.complete();
                        }
                    }
                }));
            };
            for (var i = 0; i < len; i++) {
                _loop_1(i);
            }
        });
    }

    function fromEvent(target, eventName, options, resultSelector) {
        if (isFunction(options)) {
            resultSelector = options;
            options = undefined;
        }
        if (resultSelector) {
            return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
        }
        return new Observable(function (subscriber) {
            function handler(e) {
                if (arguments.length > 1) {
                    subscriber.next(Array.prototype.slice.call(arguments));
                }
                else {
                    subscriber.next(e);
                }
            }
            setupSubscription(target, eventName, handler, subscriber, options);
        });
    }
    function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
        var unsubscribe;
        if (isEventTarget(sourceObj)) {
            var source_1 = sourceObj;
            sourceObj.addEventListener(eventName, handler, options);
            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
        }
        else if (isJQueryStyleEventEmitter(sourceObj)) {
            var source_2 = sourceObj;
            sourceObj.on(eventName, handler);
            unsubscribe = function () { return source_2.off(eventName, handler); };
        }
        else if (isNodeStyleEventEmitter(sourceObj)) {
            var source_3 = sourceObj;
            sourceObj.addListener(eventName, handler);
            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
        }
        else if (sourceObj && sourceObj.length) {
            for (var i = 0, len = sourceObj.length; i < len; i++) {
                setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
            }
        }
        else {
            throw new TypeError('Invalid event target');
        }
        subscriber.add(unsubscribe);
    }
    function isNodeStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
    }
    function isJQueryStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
    }
    function isEventTarget(sourceObj) {
        return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
    }

    function fromEventPattern(addHandler, removeHandler, resultSelector) {
        if (resultSelector) {
            return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
        }
        return new Observable(function (subscriber) {
            var handler = function () {
                var e = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    e[_i] = arguments[_i];
                }
                return subscriber.next(e.length === 1 ? e[0] : e);
            };
            var retValue;
            try {
                retValue = addHandler(handler);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            if (!isFunction(removeHandler)) {
                return undefined;
            }
            return function () { return removeHandler(handler, retValue); };
        });
    }

    function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
        var resultSelector;
        var initialState;
        if (arguments.length == 1) {
            var options = initialStateOrOptions;
            initialState = options.initialState;
            condition = options.condition;
            iterate = options.iterate;
            resultSelector = options.resultSelector || identity;
            scheduler = options.scheduler;
        }
        else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {
            initialState = initialStateOrOptions;
            resultSelector = identity;
            scheduler = resultSelectorOrObservable;
        }
        else {
            initialState = initialStateOrOptions;
            resultSelector = resultSelectorOrObservable;
        }
        return new Observable(function (subscriber) {
            var state = initialState;
            if (scheduler) {
                return scheduler.schedule(dispatch$3, 0, {
                    subscriber: subscriber,
                    iterate: iterate,
                    condition: condition,
                    resultSelector: resultSelector,
                    state: state
                });
            }
            do {
                if (condition) {
                    var conditionResult = void 0;
                    try {
                        conditionResult = condition(state);
                    }
                    catch (err) {
                        subscriber.error(err);
                        return undefined;
                    }
                    if (!conditionResult) {
                        subscriber.complete();
                        break;
                    }
                }
                var value = void 0;
                try {
                    value = resultSelector(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                subscriber.next(value);
                if (subscriber.closed) {
                    break;
                }
                try {
                    state = iterate(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
            } while (true);
            return undefined;
        });
    }
    function dispatch$3(state) {
        var subscriber = state.subscriber, condition = state.condition;
        if (subscriber.closed) {
            return undefined;
        }
        if (state.needIterate) {
            try {
                state.state = state.iterate(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        }
        else {
            state.needIterate = true;
        }
        if (condition) {
            var conditionResult = void 0;
            try {
                conditionResult = condition(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            if (!conditionResult) {
                subscriber.complete();
                return undefined;
            }
            if (subscriber.closed) {
                return undefined;
            }
        }
        var value;
        try {
            value = state.resultSelector(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return undefined;
        }
        return this.schedule(state);
    }

    function iif(condition, trueResult, falseResult) {
        if (trueResult === void 0) { trueResult = EMPTY; }
        if (falseResult === void 0) { falseResult = EMPTY; }
        return defer(function () { return condition() ? trueResult : falseResult; });
    }

    function isNumeric(val) {
        return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
    }

    function interval(period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = async; }
        if (!isNumeric(period) || period < 0) {
            period = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            scheduler = async;
        }
        return new Observable(function (subscriber) {
            subscriber.add(scheduler.schedule(dispatch$4, period, { subscriber: subscriber, counter: 0, period: period }));
            return subscriber;
        });
    }
    function dispatch$4(state) {
        var subscriber = state.subscriber, counter = state.counter, period = state.period;
        subscriber.next(counter);
        this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
    }

    function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler(last)) {
            scheduler = observables.pop();
            if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
                concurrent = observables.pop();
            }
        }
        else if (typeof last === 'number') {
            concurrent = observables.pop();
        }
        if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
            return observables[0];
        }
        return mergeAll(concurrent)(fromArray(observables, scheduler));
    }

    var NEVER = new Observable(noop);
    function never() {
        return NEVER;
    }

    function onErrorResumeNext() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        if (sources.length === 0) {
            return EMPTY;
        }
        var first = sources[0], remainder = sources.slice(1);
        if (sources.length === 1 && isArray(first)) {
            return onErrorResumeNext.apply(void 0, first);
        }
        return new Observable(function (subscriber) {
            var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
            return from(first).subscribe({
                next: function (value) { subscriber.next(value); },
                error: subNext,
                complete: subNext,
            });
        });
    }

    function pairs(obj, scheduler) {
        if (!scheduler) {
            return new Observable(function (subscriber) {
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                    var key = keys[i];
                    if (obj.hasOwnProperty(key)) {
                        subscriber.next([key, obj[key]]);
                    }
                }
                subscriber.complete();
            });
        }
        else {
            return new Observable(function (subscriber) {
                var keys = Object.keys(obj);
                var subscription = new Subscription();
                subscription.add(scheduler.schedule(dispatch$5, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
                return subscription;
            });
        }
    }
    function dispatch$5(state) {
        var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
        if (!subscriber.closed) {
            if (index < keys.length) {
                var key = keys[index];
                subscriber.next([key, obj[key]]);
                subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
            }
            else {
                subscriber.complete();
            }
        }
    }

    function not(pred, thisArg) {
        function notPred() {
            return !(notPred.pred.apply(notPred.thisArg, arguments));
        }
        notPred.pred = pred;
        notPred.thisArg = thisArg;
        return notPred;
    }

    function filter(predicate, thisArg) {
        return function filterOperatorFunction(source) {
            return source.lift(new FilterOperator(predicate, thisArg));
        };
    }
    var FilterOperator = (function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }());
    var FilterSubscriber = (function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.count = 0;
            return _this;
        }
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber));

    function partition(source, predicate, thisArg) {
        return [
            filter(predicate, thisArg)(new Observable(subscribeTo(source))),
            filter(not(predicate, thisArg))(new Observable(subscribeTo(source)))
        ];
    }

    function race() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        if (observables.length === 1) {
            if (isArray(observables[0])) {
                observables = observables[0];
            }
            else {
                return observables[0];
            }
        }
        return fromArray(observables, undefined).lift(new RaceOperator());
    }
    var RaceOperator = (function () {
        function RaceOperator() {
        }
        RaceOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new RaceSubscriber(subscriber));
        };
        return RaceOperator;
    }());
    var RaceSubscriber = (function (_super) {
        __extends(RaceSubscriber, _super);
        function RaceSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasFirst = false;
            _this.observables = [];
            _this.subscriptions = [];
            return _this;
        }
        RaceSubscriber.prototype._next = function (observable) {
            this.observables.push(observable);
        };
        RaceSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                for (var i = 0; i < len && !this.hasFirst; i++) {
                    var observable = observables[i];
                    var subscription = subscribeToResult(this, observable, undefined, i);
                    if (this.subscriptions) {
                        this.subscriptions.push(subscription);
                    }
                    this.add(subscription);
                }
                this.observables = null;
            }
        };
        RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
            if (!this.hasFirst) {
                this.hasFirst = true;
                for (var i = 0; i < this.subscriptions.length; i++) {
                    if (i !== outerIndex) {
                        var subscription = this.subscriptions[i];
                        subscription.unsubscribe();
                        this.remove(subscription);
                    }
                }
                this.subscriptions = null;
            }
            this.destination.next(innerValue);
        };
        return RaceSubscriber;
    }(OuterSubscriber));

    function range(start, count, scheduler) {
        if (start === void 0) { start = 0; }
        return new Observable(function (subscriber) {
            if (count === undefined) {
                count = start;
                start = 0;
            }
            var index = 0;
            var current = start;
            if (scheduler) {
                return scheduler.schedule(dispatch$6, 0, {
                    index: index, count: count, start: start, subscriber: subscriber
                });
            }
            else {
                do {
                    if (index++ >= count) {
                        subscriber.complete();
                        break;
                    }
                    subscriber.next(current++);
                    if (subscriber.closed) {
                        break;
                    }
                } while (true);
            }
            return undefined;
        });
    }
    function dispatch$6(state) {
        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(start);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        state.start = start + 1;
        this.schedule(state);
    }

    function timer(dueTime, periodOrScheduler, scheduler) {
        if (dueTime === void 0) { dueTime = 0; }
        var period = -1;
        if (isNumeric(periodOrScheduler)) {
            period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
        }
        else if (isScheduler(periodOrScheduler)) {
            scheduler = periodOrScheduler;
        }
        if (!isScheduler(scheduler)) {
            scheduler = async;
        }
        return new Observable(function (subscriber) {
            var due = isNumeric(dueTime)
                ? dueTime
                : (+dueTime - scheduler.now());
            return scheduler.schedule(dispatch$7, due, {
                index: 0, period: period, subscriber: subscriber
            });
        });
    }
    function dispatch$7(state) {
        var index = state.index, period = state.period, subscriber = state.subscriber;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        else if (period === -1) {
            return subscriber.complete();
        }
        state.index = index + 1;
        this.schedule(state, period);
    }

    function using(resourceFactory, observableFactory) {
        return new Observable(function (subscriber) {
            var resource;
            try {
                resource = resourceFactory();
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            var result;
            try {
                result = observableFactory(resource);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            var source = result ? from(result) : EMPTY;
            var subscription = source.subscribe(subscriber);
            return function () {
                subscription.unsubscribe();
                if (resource) {
                    resource.unsubscribe();
                }
            };
        });
    }

    function zip() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var resultSelector = observables[observables.length - 1];
        if (typeof resultSelector === 'function') {
            observables.pop();
        }
        return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
    }
    var ZipOperator = (function () {
        function ZipOperator(resultSelector) {
            this.resultSelector = resultSelector;
        }
        ZipOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
        };
        return ZipOperator;
    }());
    var ZipSubscriber = (function (_super) {
        __extends(ZipSubscriber, _super);
        function ZipSubscriber(destination, resultSelector, values) {
            if (values === void 0) { values = Object.create(null); }
            var _this = _super.call(this, destination) || this;
            _this.resultSelector = resultSelector;
            _this.iterators = [];
            _this.active = 0;
            _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;
            return _this;
        }
        ZipSubscriber.prototype._next = function (value) {
            var iterators = this.iterators;
            if (isArray(value)) {
                iterators.push(new StaticArrayIterator(value));
            }
            else if (typeof value[iterator] === 'function') {
                iterators.push(new StaticIterator(value[iterator]()));
            }
            else {
                iterators.push(new ZipBufferIterator(this.destination, this, value));
            }
        };
        ZipSubscriber.prototype._complete = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            this.unsubscribe();
            if (len === 0) {
                this.destination.complete();
                return;
            }
            this.active = len;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (iterator$$1.stillUnsubscribed) {
                    var destination = this.destination;
                    destination.add(iterator$$1.subscribe());
                }
                else {
                    this.active--;
                }
            }
        };
        ZipSubscriber.prototype.notifyInactive = function () {
            this.active--;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        ZipSubscriber.prototype.checkIterators = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                    return;
                }
            }
            var shouldComplete = false;
            var args = [];
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                var result = iterator$$1.next();
                if (iterator$$1.hasCompleted()) {
                    shouldComplete = true;
                }
                if (result.done) {
                    destination.complete();
                    return;
                }
                args.push(result.value);
            }
            if (this.resultSelector) {
                this._tryresultSelector(args);
            }
            else {
                destination.next(args);
            }
            if (shouldComplete) {
                destination.complete();
            }
        };
        ZipSubscriber.prototype._tryresultSelector = function (args) {
            var result;
            try {
                result = this.resultSelector.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return ZipSubscriber;
    }(Subscriber));
    var StaticIterator = (function () {
        function StaticIterator(iterator$$1) {
            this.iterator = iterator$$1;
            this.nextResult = iterator$$1.next();
        }
        StaticIterator.prototype.hasValue = function () {
            return true;
        };
        StaticIterator.prototype.next = function () {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
        };
        StaticIterator.prototype.hasCompleted = function () {
            var nextResult = this.nextResult;
            return Boolean(nextResult && nextResult.done);
        };
        return StaticIterator;
    }());
    var StaticArrayIterator = (function () {
        function StaticArrayIterator(array) {
            this.array = array;
            this.index = 0;
            this.length = 0;
            this.length = array.length;
        }
        StaticArrayIterator.prototype[iterator] = function () {
            return this;
        };
        StaticArrayIterator.prototype.next = function (value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
        };
        StaticArrayIterator.prototype.hasValue = function () {
            return this.array.length > this.index;
        };
        StaticArrayIterator.prototype.hasCompleted = function () {
            return this.array.length === this.index;
        };
        return StaticArrayIterator;
    }());
    var ZipBufferIterator = (function (_super) {
        __extends(ZipBufferIterator, _super);
        function ZipBufferIterator(destination, parent, observable) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            _this.observable = observable;
            _this.stillUnsubscribed = true;
            _this.buffer = [];
            _this.isComplete = false;
            return _this;
        }
        ZipBufferIterator.prototype[iterator] = function () {
            return this;
        };
        ZipBufferIterator.prototype.next = function () {
            var buffer = this.buffer;
            if (buffer.length === 0 && this.isComplete) {
                return { value: null, done: true };
            }
            else {
                return { value: buffer.shift(), done: false };
            }
        };
        ZipBufferIterator.prototype.hasValue = function () {
            return this.buffer.length > 0;
        };
        ZipBufferIterator.prototype.hasCompleted = function () {
            return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator.prototype.notifyComplete = function () {
            if (this.buffer.length > 0) {
                this.isComplete = true;
                this.parent.notifyInactive();
            }
            else {
                this.destination.complete();
            }
        };
        ZipBufferIterator.prototype.notifyNext = function (innerValue) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
        };
        ZipBufferIterator.prototype.subscribe = function () {
            return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));
        };
        return ZipBufferIterator;
    }(SimpleOuterSubscriber));

    function audit(durationSelector) {
        return function auditOperatorFunction(source) {
            return source.lift(new AuditOperator(durationSelector));
        };
    }
    var AuditOperator = (function () {
        function AuditOperator(durationSelector) {
            this.durationSelector = durationSelector;
        }
        AuditOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
        };
        return AuditOperator;
    }());
    var AuditSubscriber = (function (_super) {
        __extends(AuditSubscriber, _super);
        function AuditSubscriber(destination, durationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.durationSelector = durationSelector;
            _this.hasValue = false;
            return _this;
        }
        AuditSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
            if (!this.throttled) {
                var duration = void 0;
                try {
                    var durationSelector = this.durationSelector;
                    duration = durationSelector(value);
                }
                catch (err) {
                    return this.destination.error(err);
                }
                var innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));
                if (!innerSubscription || innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        };
        AuditSubscriber.prototype.clearThrottle = function () {
            var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = undefined;
                throttled.unsubscribe();
            }
            if (hasValue) {
                this.value = undefined;
                this.hasValue = false;
                this.destination.next(value);
            }
        };
        AuditSubscriber.prototype.notifyNext = function () {
            this.clearThrottle();
        };
        AuditSubscriber.prototype.notifyComplete = function () {
            this.clearThrottle();
        };
        return AuditSubscriber;
    }(SimpleOuterSubscriber));

    function auditTime(duration, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return audit(function () { return timer(duration, scheduler); });
    }

    function buffer(closingNotifier) {
        return function bufferOperatorFunction(source) {
            return source.lift(new BufferOperator(closingNotifier));
        };
    }
    var BufferOperator = (function () {
        function BufferOperator(closingNotifier) {
            this.closingNotifier = closingNotifier;
        }
        BufferOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
        };
        return BufferOperator;
    }());
    var BufferSubscriber = (function (_super) {
        __extends(BufferSubscriber, _super);
        function BufferSubscriber(destination, closingNotifier) {
            var _this = _super.call(this, destination) || this;
            _this.buffer = [];
            _this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(_this)));
            return _this;
        }
        BufferSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferSubscriber.prototype.notifyNext = function () {
            var buffer = this.buffer;
            this.buffer = [];
            this.destination.next(buffer);
        };
        return BufferSubscriber;
    }(SimpleOuterSubscriber));

    function bufferCount(bufferSize, startBufferEvery) {
        if (startBufferEvery === void 0) { startBufferEvery = null; }
        return function bufferCountOperatorFunction(source) {
            return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
        };
    }
    var BufferCountOperator = (function () {
        function BufferCountOperator(bufferSize, startBufferEvery) {
            this.bufferSize = bufferSize;
            this.startBufferEvery = startBufferEvery;
            if (!startBufferEvery || bufferSize === startBufferEvery) {
                this.subscriberClass = BufferCountSubscriber;
            }
            else {
                this.subscriberClass = BufferSkipCountSubscriber;
            }
        }
        BufferCountOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
        };
        return BufferCountOperator;
    }());
    var BufferCountSubscriber = (function (_super) {
        __extends(BufferCountSubscriber, _super);
        function BufferCountSubscriber(destination, bufferSize) {
            var _this = _super.call(this, destination) || this;
            _this.bufferSize = bufferSize;
            _this.buffer = [];
            return _this;
        }
        BufferCountSubscriber.prototype._next = function (value) {
            var buffer = this.buffer;
            buffer.push(value);
            if (buffer.length == this.bufferSize) {
                this.destination.next(buffer);
                this.buffer = [];
            }
        };
        BufferCountSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer.length > 0) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        return BufferCountSubscriber;
    }(Subscriber));
    var BufferSkipCountSubscriber = (function (_super) {
        __extends(BufferSkipCountSubscriber, _super);
        function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
            var _this = _super.call(this, destination) || this;
            _this.bufferSize = bufferSize;
            _this.startBufferEvery = startBufferEvery;
            _this.buffers = [];
            _this.count = 0;
            return _this;
        }
        BufferSkipCountSubscriber.prototype._next = function (value) {
            var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
            this.count++;
            if (count % startBufferEvery === 0) {
                buffers.push([]);
            }
            for (var i = buffers.length; i--;) {
                var buffer = buffers[i];
                buffer.push(value);
                if (buffer.length === bufferSize) {
                    buffers.splice(i, 1);
                    this.destination.next(buffer);
                }
            }
        };
        BufferSkipCountSubscriber.prototype._complete = function () {
            var _a = this, buffers = _a.buffers, destination = _a.destination;
            while (buffers.length > 0) {
                var buffer = buffers.shift();
                if (buffer.length > 0) {
                    destination.next(buffer);
                }
            }
            _super.prototype._complete.call(this);
        };
        return BufferSkipCountSubscriber;
    }(Subscriber));

    function bufferTime(bufferTimeSpan) {
        var length = arguments.length;
        var scheduler = async;
        if (isScheduler(arguments[arguments.length - 1])) {
            scheduler = arguments[arguments.length - 1];
            length--;
        }
        var bufferCreationInterval = null;
        if (length >= 2) {
            bufferCreationInterval = arguments[1];
        }
        var maxBufferSize = Number.POSITIVE_INFINITY;
        if (length >= 3) {
            maxBufferSize = arguments[2];
        }
        return function bufferTimeOperatorFunction(source) {
            return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
        };
    }
    var BufferTimeOperator = (function () {
        function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            this.bufferTimeSpan = bufferTimeSpan;
            this.bufferCreationInterval = bufferCreationInterval;
            this.maxBufferSize = maxBufferSize;
            this.scheduler = scheduler;
        }
        BufferTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
        };
        return BufferTimeOperator;
    }());
    var Context = (function () {
        function Context() {
            this.buffer = [];
        }
        return Context;
    }());
    var BufferTimeSubscriber = (function (_super) {
        __extends(BufferTimeSubscriber, _super);
        function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.bufferTimeSpan = bufferTimeSpan;
            _this.bufferCreationInterval = bufferCreationInterval;
            _this.maxBufferSize = maxBufferSize;
            _this.scheduler = scheduler;
            _this.contexts = [];
            var context = _this.openContext();
            _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
            if (_this.timespanOnly) {
                var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
                _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
            else {
                var closeState = { subscriber: _this, context: context };
                var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
                _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
                _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
            }
            return _this;
        }
        BufferTimeSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            var filledBufferContext;
            for (var i = 0; i < len; i++) {
                var context_1 = contexts[i];
                var buffer = context_1.buffer;
                buffer.push(value);
                if (buffer.length == this.maxBufferSize) {
                    filledBufferContext = context_1;
                }
            }
            if (filledBufferContext) {
                this.onBufferFull(filledBufferContext);
            }
        };
        BufferTimeSubscriber.prototype._error = function (err) {
            this.contexts.length = 0;
            _super.prototype._error.call(this, err);
        };
        BufferTimeSubscriber.prototype._complete = function () {
            var _a = this, contexts = _a.contexts, destination = _a.destination;
            while (contexts.length > 0) {
                var context_2 = contexts.shift();
                destination.next(context_2.buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferTimeSubscriber.prototype._unsubscribe = function () {
            this.contexts = null;
        };
        BufferTimeSubscriber.prototype.onBufferFull = function (context) {
            this.closeContext(context);
            var closeAction = context.closeAction;
            closeAction.unsubscribe();
            this.remove(closeAction);
            if (!this.closed && this.timespanOnly) {
                context = this.openContext();
                var bufferTimeSpan = this.bufferTimeSpan;
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
        };
        BufferTimeSubscriber.prototype.openContext = function () {
            var context = new Context();
            this.contexts.push(context);
            return context;
        };
        BufferTimeSubscriber.prototype.closeContext = function (context) {
            this.destination.next(context.buffer);
            var contexts = this.contexts;
            var spliceIndex = contexts ? contexts.indexOf(context) : -1;
            if (spliceIndex >= 0) {
                contexts.splice(contexts.indexOf(context), 1);
            }
        };
        return BufferTimeSubscriber;
    }(Subscriber));
    function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;
        if (prevContext) {
            subscriber.closeContext(prevContext);
        }
        if (!subscriber.closed) {
            state.context = subscriber.openContext();
            state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
        }
    }
    function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
        var context = subscriber.openContext();
        var action = this;
        if (!subscriber.closed) {
            subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
            action.schedule(state, bufferCreationInterval);
        }
    }
    function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber, context = arg.context;
        subscriber.closeContext(context);
    }

    function bufferToggle(openings, closingSelector) {
        return function bufferToggleOperatorFunction(source) {
            return source.lift(new BufferToggleOperator(openings, closingSelector));
        };
    }
    var BufferToggleOperator = (function () {
        function BufferToggleOperator(openings, closingSelector) {
            this.openings = openings;
            this.closingSelector = closingSelector;
        }
        BufferToggleOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
        };
        return BufferToggleOperator;
    }());
    var BufferToggleSubscriber = (function (_super) {
        __extends(BufferToggleSubscriber, _super);
        function BufferToggleSubscriber(destination, openings, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.closingSelector = closingSelector;
            _this.contexts = [];
            _this.add(subscribeToResult(_this, openings));
            return _this;
        }
        BufferToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].buffer.push(value);
            }
        };
        BufferToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context_1 = contexts.shift();
                context_1.subscription.unsubscribe();
                context_1.buffer = null;
                context_1.subscription = null;
            }
            this.contexts = null;
            _super.prototype._error.call(this, err);
        };
        BufferToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context_2 = contexts.shift();
                this.destination.next(context_2.buffer);
                context_2.subscription.unsubscribe();
                context_2.buffer = null;
                context_2.subscription = null;
            }
            this.contexts = null;
            _super.prototype._complete.call(this);
        };
        BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
            outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
        };
        BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
            this.closeBuffer(innerSub.context);
        };
        BufferToggleSubscriber.prototype.openBuffer = function (value) {
            try {
                var closingSelector = this.closingSelector;
                var closingNotifier = closingSelector.call(this, value);
                if (closingNotifier) {
                    this.trySubscribe(closingNotifier);
                }
            }
            catch (err) {
                this._error(err);
            }
        };
        BufferToggleSubscriber.prototype.closeBuffer = function (context) {
            var contexts = this.contexts;
            if (contexts && context) {
                var buffer = context.buffer, subscription = context.subscription;
                this.destination.next(buffer);
                contexts.splice(contexts.indexOf(context), 1);
                this.remove(subscription);
                subscription.unsubscribe();
            }
        };
        BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
            var contexts = this.contexts;
            var buffer = [];
            var subscription = new Subscription();
            var context = { buffer: buffer, subscription: subscription };
            contexts.push(context);
            var innerSubscription = subscribeToResult(this, closingNotifier, context);
            if (!innerSubscription || innerSubscription.closed) {
                this.closeBuffer(context);
            }
            else {
                innerSubscription.context = context;
                this.add(innerSubscription);
                subscription.add(innerSubscription);
            }
        };
        return BufferToggleSubscriber;
    }(OuterSubscriber));

    function bufferWhen(closingSelector) {
        return function (source) {
            return source.lift(new BufferWhenOperator(closingSelector));
        };
    }
    var BufferWhenOperator = (function () {
        function BufferWhenOperator(closingSelector) {
            this.closingSelector = closingSelector;
        }
        BufferWhenOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
        };
        return BufferWhenOperator;
    }());
    var BufferWhenSubscriber = (function (_super) {
        __extends(BufferWhenSubscriber, _super);
        function BufferWhenSubscriber(destination, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.closingSelector = closingSelector;
            _this.subscribing = false;
            _this.openBuffer();
            return _this;
        }
        BufferWhenSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferWhenSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferWhenSubscriber.prototype._unsubscribe = function () {
            this.buffer = undefined;
            this.subscribing = false;
        };
        BufferWhenSubscriber.prototype.notifyNext = function () {
            this.openBuffer();
        };
        BufferWhenSubscriber.prototype.notifyComplete = function () {
            if (this.subscribing) {
                this.complete();
            }
            else {
                this.openBuffer();
            }
        };
        BufferWhenSubscriber.prototype.openBuffer = function () {
            var closingSubscription = this.closingSubscription;
            if (closingSubscription) {
                this.remove(closingSubscription);
                closingSubscription.unsubscribe();
            }
            var buffer = this.buffer;
            if (this.buffer) {
                this.destination.next(buffer);
            }
            this.buffer = [];
            var closingNotifier;
            try {
                var closingSelector = this.closingSelector;
                closingNotifier = closingSelector();
            }
            catch (err) {
                return this.error(err);
            }
            closingSubscription = new Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));
            this.subscribing = false;
        };
        return BufferWhenSubscriber;
    }(SimpleOuterSubscriber));

    function catchError(selector) {
        return function catchErrorOperatorFunction(source) {
            var operator = new CatchOperator(selector);
            var caught = source.lift(operator);
            return (operator.caught = caught);
        };
    }
    var CatchOperator = (function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }());
    var CatchSubscriber = (function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            var _this = _super.call(this, destination) || this;
            _this.selector = selector;
            _this.caught = caught;
            return _this;
        }
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                }
                catch (err2) {
                    _super.prototype.error.call(this, err2);
                    return;
                }
                this._unsubscribeAndRecycle();
                var innerSubscriber = new SimpleInnerSubscriber(this);
                this.add(innerSubscriber);
                var innerSubscription = innerSubscribe(result, innerSubscriber);
                if (innerSubscription !== innerSubscriber) {
                    this.add(innerSubscription);
                }
            }
        };
        return CatchSubscriber;
    }(SimpleOuterSubscriber));

    function combineAll(project) {
        return function (source) { return source.lift(new CombineLatestOperator(project)); };
    }

    function combineLatest$1() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var project = null;
        if (typeof observables[observables.length - 1] === 'function') {
            project = observables.pop();
        }
        if (observables.length === 1 && isArray(observables[0])) {
            observables = observables[0].slice();
        }
        return function (source) { return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project)); };
    }

    function concat$1() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        return function (source) { return source.lift.call(concat.apply(void 0, [source].concat(observables))); };
    }

    function concatMap(project, resultSelector) {
        return mergeMap(project, resultSelector, 1);
    }

    function concatMapTo(innerObservable, resultSelector) {
        return concatMap(function () { return innerObservable; }, resultSelector);
    }

    function count(predicate) {
        return function (source) { return source.lift(new CountOperator(predicate, source)); };
    }
    var CountOperator = (function () {
        function CountOperator(predicate, source) {
            this.predicate = predicate;
            this.source = source;
        }
        CountOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
        };
        return CountOperator;
    }());
    var CountSubscriber = (function (_super) {
        __extends(CountSubscriber, _super);
        function CountSubscriber(destination, predicate, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.count = 0;
            _this.index = 0;
            return _this;
        }
        CountSubscriber.prototype._next = function (value) {
            if (this.predicate) {
                this._tryPredicate(value);
            }
            else {
                this.count++;
            }
        };
        CountSubscriber.prototype._tryPredicate = function (value) {
            var result;
            try {
                result = this.predicate(value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.count++;
            }
        };
        CountSubscriber.prototype._complete = function () {
            this.destination.next(this.count);
            this.destination.complete();
        };
        return CountSubscriber;
    }(Subscriber));

    function debounce(durationSelector) {
        return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
    }
    var DebounceOperator = (function () {
        function DebounceOperator(durationSelector) {
            this.durationSelector = durationSelector;
        }
        DebounceOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
        };
        return DebounceOperator;
    }());
    var DebounceSubscriber = (function (_super) {
        __extends(DebounceSubscriber, _super);
        function DebounceSubscriber(destination, durationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.durationSelector = durationSelector;
            _this.hasValue = false;
            return _this;
        }
        DebounceSubscriber.prototype._next = function (value) {
            try {
                var result = this.durationSelector.call(this, value);
                if (result) {
                    this._tryNext(value, result);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DebounceSubscriber.prototype._complete = function () {
            this.emitValue();
            this.destination.complete();
        };
        DebounceSubscriber.prototype._tryNext = function (value, duration) {
            var subscription = this.durationSubscription;
            this.value = value;
            this.hasValue = true;
            if (subscription) {
                subscription.unsubscribe();
                this.remove(subscription);
            }
            subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));
            if (subscription && !subscription.closed) {
                this.add(this.durationSubscription = subscription);
            }
        };
        DebounceSubscriber.prototype.notifyNext = function () {
            this.emitValue();
        };
        DebounceSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        DebounceSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                var value = this.value;
                var subscription = this.durationSubscription;
                if (subscription) {
                    this.durationSubscription = undefined;
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
                this.value = undefined;
                this.hasValue = false;
                _super.prototype._next.call(this, value);
            }
        };
        return DebounceSubscriber;
    }(SimpleOuterSubscriber));

    function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
    }
    var DebounceTimeOperator = (function () {
        function DebounceTimeOperator(dueTime, scheduler) {
            this.dueTime = dueTime;
            this.scheduler = scheduler;
        }
        DebounceTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
        };
        return DebounceTimeOperator;
    }());
    var DebounceTimeSubscriber = (function (_super) {
        __extends(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.dueTime = dueTime;
            _this.scheduler = scheduler;
            _this.debouncedSubscription = null;
            _this.lastValue = null;
            _this.hasValue = false;
            return _this;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                var lastValue = this.lastValue;
                this.lastValue = null;
                this.hasValue = false;
                this.destination.next(lastValue);
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber));
    function dispatchNext$2(subscriber) {
        subscriber.debouncedNext();
    }

    function defaultIfEmpty(defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
    }
    var DefaultIfEmptyOperator = (function () {
        function DefaultIfEmptyOperator(defaultValue) {
            this.defaultValue = defaultValue;
        }
        DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
        };
        return DefaultIfEmptyOperator;
    }());
    var DefaultIfEmptySubscriber = (function (_super) {
        __extends(DefaultIfEmptySubscriber, _super);
        function DefaultIfEmptySubscriber(destination, defaultValue) {
            var _this = _super.call(this, destination) || this;
            _this.defaultValue = defaultValue;
            _this.isEmpty = true;
            return _this;
        }
        DefaultIfEmptySubscriber.prototype._next = function (value) {
            this.isEmpty = false;
            this.destination.next(value);
        };
        DefaultIfEmptySubscriber.prototype._complete = function () {
            if (this.isEmpty) {
                this.destination.next(this.defaultValue);
            }
            this.destination.complete();
        };
        return DefaultIfEmptySubscriber;
    }(Subscriber));

    function isDate(value) {
        return value instanceof Date && !isNaN(+value);
    }

    function delay(delay, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        var absoluteDelay = isDate(delay);
        var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
        return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
    }
    var DelayOperator = (function () {
        function DelayOperator(delay, scheduler) {
            this.delay = delay;
            this.scheduler = scheduler;
        }
        DelayOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
        };
        return DelayOperator;
    }());
    var DelaySubscriber = (function (_super) {
        __extends(DelaySubscriber, _super);
        function DelaySubscriber(destination, delay, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.delay = delay;
            _this.scheduler = scheduler;
            _this.queue = [];
            _this.active = false;
            _this.errored = false;
            return _this;
        }
        DelaySubscriber.dispatch = function (state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;
            while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
                queue.shift().notification.observe(destination);
            }
            if (queue.length > 0) {
                var delay_1 = Math.max(0, queue[0].time - scheduler.now());
                this.schedule(state, delay_1);
            }
            else {
                this.unsubscribe();
                source.active = false;
            }
        };
        DelaySubscriber.prototype._schedule = function (scheduler) {
            this.active = true;
            var destination = this.destination;
            destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
                source: this, destination: this.destination, scheduler: scheduler
            }));
        };
        DelaySubscriber.prototype.scheduleNotification = function (notification) {
            if (this.errored === true) {
                return;
            }
            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);
            if (this.active === false) {
                this._schedule(scheduler);
            }
        };
        DelaySubscriber.prototype._next = function (value) {
            this.scheduleNotification(Notification.createNext(value));
        };
        DelaySubscriber.prototype._error = function (err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
            this.unsubscribe();
        };
        DelaySubscriber.prototype._complete = function () {
            this.scheduleNotification(Notification.createComplete());
            this.unsubscribe();
        };
        return DelaySubscriber;
    }(Subscriber));
    var DelayMessage = (function () {
        function DelayMessage(time, notification) {
            this.time = time;
            this.notification = notification;
        }
        return DelayMessage;
    }());

    function delayWhen(delayDurationSelector, subscriptionDelay) {
        if (subscriptionDelay) {
            return function (source) {
                return new SubscriptionDelayObservable(source, subscriptionDelay)
                    .lift(new DelayWhenOperator(delayDurationSelector));
            };
        }
        return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
    }
    var DelayWhenOperator = (function () {
        function DelayWhenOperator(delayDurationSelector) {
            this.delayDurationSelector = delayDurationSelector;
        }
        DelayWhenOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
        };
        return DelayWhenOperator;
    }());
    var DelayWhenSubscriber = (function (_super) {
        __extends(DelayWhenSubscriber, _super);
        function DelayWhenSubscriber(destination, delayDurationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.delayDurationSelector = delayDurationSelector;
            _this.completed = false;
            _this.delayNotifierSubscriptions = [];
            _this.index = 0;
            return _this;
        }
        DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
            this.destination.next(outerValue);
            this.removeSubscription(innerSub);
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            var value = this.removeSubscription(innerSub);
            if (value) {
                this.destination.next(value);
            }
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype._next = function (value) {
            var index = this.index++;
            try {
                var delayNotifier = this.delayDurationSelector(value, index);
                if (delayNotifier) {
                    this.tryDelay(delayNotifier, value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DelayWhenSubscriber.prototype._complete = function () {
            this.completed = true;
            this.tryComplete();
            this.unsubscribe();
        };
        DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
            subscription.unsubscribe();
            var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
            if (subscriptionIdx !== -1) {
                this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            }
            return subscription.outerValue;
        };
        DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
            var notifierSubscription = subscribeToResult(this, delayNotifier, value);
            if (notifierSubscription && !notifierSubscription.closed) {
                var destination = this.destination;
                destination.add(notifierSubscription);
                this.delayNotifierSubscriptions.push(notifierSubscription);
            }
        };
        DelayWhenSubscriber.prototype.tryComplete = function () {
            if (this.completed && this.delayNotifierSubscriptions.length === 0) {
                this.destination.complete();
            }
        };
        return DelayWhenSubscriber;
    }(OuterSubscriber));
    var SubscriptionDelayObservable = (function (_super) {
        __extends(SubscriptionDelayObservable, _super);
        function SubscriptionDelayObservable(source, subscriptionDelay) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subscriptionDelay = subscriptionDelay;
            return _this;
        }
        SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
            this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
        };
        return SubscriptionDelayObservable;
    }(Observable));
    var SubscriptionDelaySubscriber = (function (_super) {
        __extends(SubscriptionDelaySubscriber, _super);
        function SubscriptionDelaySubscriber(parent, source) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.source = source;
            _this.sourceSubscribed = false;
            return _this;
        }
        SubscriptionDelaySubscriber.prototype._next = function (unused) {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype._error = function (err) {
            this.unsubscribe();
            this.parent.error(err);
        };
        SubscriptionDelaySubscriber.prototype._complete = function () {
            this.unsubscribe();
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
            if (!this.sourceSubscribed) {
                this.sourceSubscribed = true;
                this.unsubscribe();
                this.source.subscribe(this.parent);
            }
        };
        return SubscriptionDelaySubscriber;
    }(Subscriber));

    function dematerialize() {
        return function dematerializeOperatorFunction(source) {
            return source.lift(new DeMaterializeOperator());
        };
    }
    var DeMaterializeOperator = (function () {
        function DeMaterializeOperator() {
        }
        DeMaterializeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DeMaterializeSubscriber(subscriber));
        };
        return DeMaterializeOperator;
    }());
    var DeMaterializeSubscriber = (function (_super) {
        __extends(DeMaterializeSubscriber, _super);
        function DeMaterializeSubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        DeMaterializeSubscriber.prototype._next = function (value) {
            value.observe(this.destination);
        };
        return DeMaterializeSubscriber;
    }(Subscriber));

    function distinct(keySelector, flushes) {
        return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
    }
    var DistinctOperator = (function () {
        function DistinctOperator(keySelector, flushes) {
            this.keySelector = keySelector;
            this.flushes = flushes;
        }
        DistinctOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
        };
        return DistinctOperator;
    }());
    var DistinctSubscriber = (function (_super) {
        __extends(DistinctSubscriber, _super);
        function DistinctSubscriber(destination, keySelector, flushes) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.values = new Set();
            if (flushes) {
                _this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(_this)));
            }
            return _this;
        }
        DistinctSubscriber.prototype.notifyNext = function () {
            this.values.clear();
        };
        DistinctSubscriber.prototype.notifyError = function (error) {
            this._error(error);
        };
        DistinctSubscriber.prototype._next = function (value) {
            if (this.keySelector) {
                this._useKeySelector(value);
            }
            else {
                this._finalizeNext(value, value);
            }
        };
        DistinctSubscriber.prototype._useKeySelector = function (value) {
            var key;
            var destination = this.destination;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this._finalizeNext(key, value);
        };
        DistinctSubscriber.prototype._finalizeNext = function (key, value) {
            var values = this.values;
            if (!values.has(key)) {
                values.add(key);
                this.destination.next(value);
            }
        };
        return DistinctSubscriber;
    }(SimpleOuterSubscriber));

    function distinctUntilChanged(compare, keySelector) {
        return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
    }
    var DistinctUntilChangedOperator = (function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
            this.compare = compare;
            this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        };
        return DistinctUntilChangedOperator;
    }());
    var DistinctUntilChangedSubscriber = (function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.hasKey = false;
            if (typeof compare === 'function') {
                _this.compare = compare;
            }
            return _this;
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var key;
            try {
                var keySelector = this.keySelector;
                key = keySelector ? keySelector(value) : value;
            }
            catch (err) {
                return this.destination.error(err);
            }
            var result = false;
            if (this.hasKey) {
                try {
                    var compare = this.compare;
                    result = compare(this.key, key);
                }
                catch (err) {
                    return this.destination.error(err);
                }
            }
            else {
                this.hasKey = true;
            }
            if (!result) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber));

    function distinctUntilKeyChanged(key, compare) {
        return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
    }

    function throwIfEmpty(errorFactory) {
        if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
        return function (source) {
            return source.lift(new ThrowIfEmptyOperator(errorFactory));
        };
    }
    var ThrowIfEmptyOperator = (function () {
        function ThrowIfEmptyOperator(errorFactory) {
            this.errorFactory = errorFactory;
        }
        ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
        };
        return ThrowIfEmptyOperator;
    }());
    var ThrowIfEmptySubscriber = (function (_super) {
        __extends(ThrowIfEmptySubscriber, _super);
        function ThrowIfEmptySubscriber(destination, errorFactory) {
            var _this = _super.call(this, destination) || this;
            _this.errorFactory = errorFactory;
            _this.hasValue = false;
            return _this;
        }
        ThrowIfEmptySubscriber.prototype._next = function (value) {
            this.hasValue = true;
            this.destination.next(value);
        };
        ThrowIfEmptySubscriber.prototype._complete = function () {
            if (!this.hasValue) {
                var err = void 0;
                try {
                    err = this.errorFactory();
                }
                catch (e) {
                    err = e;
                }
                this.destination.error(err);
            }
            else {
                return this.destination.complete();
            }
        };
        return ThrowIfEmptySubscriber;
    }(Subscriber));
    function defaultErrorFactory() {
        return new EmptyError();
    }

    function take(count) {
        return function (source) {
            if (count === 0) {
                return empty$1();
            }
            else {
                return source.lift(new TakeOperator(count));
            }
        };
    }
    var TakeOperator = (function () {
        function TakeOperator(total) {
            this.total = total;
            if (this.total < 0) {
                throw new ArgumentOutOfRangeError;
            }
        }
        TakeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TakeSubscriber(subscriber, this.total));
        };
        return TakeOperator;
    }());
    var TakeSubscriber = (function (_super) {
        __extends(TakeSubscriber, _super);
        function TakeSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.count = 0;
            return _this;
        }
        TakeSubscriber.prototype._next = function (value) {
            var total = this.total;
            var count = ++this.count;
            if (count <= total) {
                this.destination.next(value);
                if (count === total) {
                    this.destination.complete();
                    this.unsubscribe();
                }
            }
        };
        return TakeSubscriber;
    }(Subscriber));

    function elementAt(index, defaultValue) {
        if (index < 0) {
            throw new ArgumentOutOfRangeError();
        }
        var hasDefaultValue = arguments.length >= 2;
        return function (source) { return source.pipe(filter(function (v, i) { return i === index; }), take(1), hasDefaultValue
            ? defaultIfEmpty(defaultValue)
            : throwIfEmpty(function () { return new ArgumentOutOfRangeError(); })); };
    }

    function endWith() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i] = arguments[_i];
        }
        return function (source) { return concat(source, of.apply(void 0, array)); };
    }

    function every(predicate, thisArg) {
        return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
    }
    var EveryOperator = (function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }());
    var EverySubscriber = (function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.source = source;
            _this.index = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber));

    function exhaust() {
        return function (source) { return source.lift(new SwitchFirstOperator()); };
    }
    var SwitchFirstOperator = (function () {
        function SwitchFirstOperator() {
        }
        SwitchFirstOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SwitchFirstSubscriber(subscriber));
        };
        return SwitchFirstOperator;
    }());
    var SwitchFirstSubscriber = (function (_super) {
        __extends(SwitchFirstSubscriber, _super);
        function SwitchFirstSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasCompleted = false;
            _this.hasSubscription = false;
            return _this;
        }
        SwitchFirstSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.hasSubscription = true;
                this.add(innerSubscribe(value, new SimpleInnerSubscriber(this)));
            }
        };
        SwitchFirstSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstSubscriber.prototype.notifyComplete = function () {
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstSubscriber;
    }(SimpleOuterSubscriber));

    function exhaustMap(project, resultSelector) {
        if (resultSelector) {
            return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
        }
        return function (source) {
            return source.lift(new ExhaustMapOperator(project));
        };
    }
    var ExhaustMapOperator = (function () {
        function ExhaustMapOperator(project) {
            this.project = project;
        }
        ExhaustMapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
        };
        return ExhaustMapOperator;
    }());
    var ExhaustMapSubscriber = (function (_super) {
        __extends(ExhaustMapSubscriber, _super);
        function ExhaustMapSubscriber(destination, project) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.hasSubscription = false;
            _this.hasCompleted = false;
            _this.index = 0;
            return _this;
        }
        ExhaustMapSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.tryNext(value);
            }
        };
        ExhaustMapSubscriber.prototype.tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.hasSubscription = true;
            this._innerSub(result);
        };
        ExhaustMapSubscriber.prototype._innerSub = function (result) {
            var innerSubscriber = new SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = innerSubscribe(result, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
            }
        };
        ExhaustMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
            this.destination.next(innerValue);
        };
        ExhaustMapSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        ExhaustMapSubscriber.prototype.notifyComplete = function () {
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return ExhaustMapSubscriber;
    }(SimpleOuterSubscriber));

    function expand(project, concurrent, scheduler) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
        return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
    }
    var ExpandOperator = (function () {
        function ExpandOperator(project, concurrent, scheduler) {
            this.project = project;
            this.concurrent = concurrent;
            this.scheduler = scheduler;
        }
        ExpandOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
        };
        return ExpandOperator;
    }());
    var ExpandSubscriber = (function (_super) {
        __extends(ExpandSubscriber, _super);
        function ExpandSubscriber(destination, project, concurrent, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.scheduler = scheduler;
            _this.index = 0;
            _this.active = 0;
            _this.hasCompleted = false;
            if (concurrent < Number.POSITIVE_INFINITY) {
                _this.buffer = [];
            }
            return _this;
        }
        ExpandSubscriber.dispatch = function (arg) {
            var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
            subscriber.subscribeToProjection(result, value, index);
        };
        ExpandSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (destination.closed) {
                this._complete();
                return;
            }
            var index = this.index++;
            if (this.active < this.concurrent) {
                destination.next(value);
                try {
                    var project = this.project;
                    var result = project(value, index);
                    if (!this.scheduler) {
                        this.subscribeToProjection(result, value, index);
                    }
                    else {
                        var state = { subscriber: this, result: result, value: value, index: index };
                        var destination_1 = this.destination;
                        destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                    }
                }
                catch (e) {
                    destination.error(e);
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
            this.active++;
            var destination = this.destination;
            destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));
        };
        ExpandSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        ExpandSubscriber.prototype.notifyNext = function (innerValue) {
            this._next(innerValue);
        };
        ExpandSubscriber.prototype.notifyComplete = function () {
            var buffer = this.buffer;
            this.active--;
            if (buffer && buffer.length > 0) {
                this._next(buffer.shift());
            }
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        return ExpandSubscriber;
    }(SimpleOuterSubscriber));

    function finalize(callback) {
        return function (source) { return source.lift(new FinallyOperator(callback)); };
    }
    var FinallyOperator = (function () {
        function FinallyOperator(callback) {
            this.callback = callback;
        }
        FinallyOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FinallySubscriber(subscriber, this.callback));
        };
        return FinallyOperator;
    }());
    var FinallySubscriber = (function (_super) {
        __extends(FinallySubscriber, _super);
        function FinallySubscriber(destination, callback) {
            var _this = _super.call(this, destination) || this;
            _this.add(new Subscription(callback));
            return _this;
        }
        return FinallySubscriber;
    }(Subscriber));

    function find(predicate, thisArg) {
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate is not a function');
        }
        return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
    }
    var FindValueOperator = (function () {
        function FindValueOperator(predicate, source, yieldIndex, thisArg) {
            this.predicate = predicate;
            this.source = source;
            this.yieldIndex = yieldIndex;
            this.thisArg = thisArg;
        }
        FindValueOperator.prototype.call = function (observer, source) {
            return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
        };
        return FindValueOperator;
    }());
    var FindValueSubscriber = (function (_super) {
        __extends(FindValueSubscriber, _super);
        function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.yieldIndex = yieldIndex;
            _this.thisArg = thisArg;
            _this.index = 0;
            return _this;
        }
        FindValueSubscriber.prototype.notifyComplete = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.unsubscribe();
        };
        FindValueSubscriber.prototype._next = function (value) {
            var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
            var index = this.index++;
            try {
                var result = predicate.call(thisArg || this, value, index, this.source);
                if (result) {
                    this.notifyComplete(this.yieldIndex ? index : value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        FindValueSubscriber.prototype._complete = function () {
            this.notifyComplete(this.yieldIndex ? -1 : undefined);
        };
        return FindValueSubscriber;
    }(Subscriber));

    function findIndex(predicate, thisArg) {
        return function (source) { return source.lift(new FindValueOperator(predicate, source, true, thisArg)); };
    }

    function first(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
    }

    function ignoreElements() {
        return function ignoreElementsOperatorFunction(source) {
            return source.lift(new IgnoreElementsOperator());
        };
    }
    var IgnoreElementsOperator = (function () {
        function IgnoreElementsOperator() {
        }
        IgnoreElementsOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new IgnoreElementsSubscriber(subscriber));
        };
        return IgnoreElementsOperator;
    }());
    var IgnoreElementsSubscriber = (function (_super) {
        __extends(IgnoreElementsSubscriber, _super);
        function IgnoreElementsSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IgnoreElementsSubscriber.prototype._next = function (unused) {
        };
        return IgnoreElementsSubscriber;
    }(Subscriber));

    function isEmpty() {
        return function (source) { return source.lift(new IsEmptyOperator()); };
    }
    var IsEmptyOperator = (function () {
        function IsEmptyOperator() {
        }
        IsEmptyOperator.prototype.call = function (observer, source) {
            return source.subscribe(new IsEmptySubscriber(observer));
        };
        return IsEmptyOperator;
    }());
    var IsEmptySubscriber = (function (_super) {
        __extends(IsEmptySubscriber, _super);
        function IsEmptySubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
            var destination = this.destination;
            destination.next(isEmpty);
            destination.complete();
        };
        IsEmptySubscriber.prototype._next = function (value) {
            this.notifyComplete(false);
        };
        IsEmptySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return IsEmptySubscriber;
    }(Subscriber));

    function takeLast(count) {
        return function takeLastOperatorFunction(source) {
            if (count === 0) {
                return empty$1();
            }
            else {
                return source.lift(new TakeLastOperator(count));
            }
        };
    }
    var TakeLastOperator = (function () {
        function TakeLastOperator(total) {
            this.total = total;
            if (this.total < 0) {
                throw new ArgumentOutOfRangeError;
            }
        }
        TakeLastOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
        };
        return TakeLastOperator;
    }());
    var TakeLastSubscriber = (function (_super) {
        __extends(TakeLastSubscriber, _super);
        function TakeLastSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.ring = new Array();
            _this.count = 0;
            return _this;
        }
        TakeLastSubscriber.prototype._next = function (value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;
            if (ring.length < total) {
                ring.push(value);
            }
            else {
                var index = count % total;
                ring[index] = value;
            }
        };
        TakeLastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            var count = this.count;
            if (count > 0) {
                var total = this.count >= this.total ? this.total : this.count;
                var ring = this.ring;
                for (var i = 0; i < total; i++) {
                    var idx = (count++) % total;
                    destination.next(ring[idx]);
                }
            }
            destination.complete();
        };
        return TakeLastSubscriber;
    }(Subscriber));

    function last(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
    }

    function mapTo(value) {
        return function (source) { return source.lift(new MapToOperator(value)); };
    }
    var MapToOperator = (function () {
        function MapToOperator(value) {
            this.value = value;
        }
        MapToOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapToSubscriber(subscriber, this.value));
        };
        return MapToOperator;
    }());
    var MapToSubscriber = (function (_super) {
        __extends(MapToSubscriber, _super);
        function MapToSubscriber(destination, value) {
            var _this = _super.call(this, destination) || this;
            _this.value = value;
            return _this;
        }
        MapToSubscriber.prototype._next = function (x) {
            this.destination.next(this.value);
        };
        return MapToSubscriber;
    }(Subscriber));

    function materialize() {
        return function materializeOperatorFunction(source) {
            return source.lift(new MaterializeOperator());
        };
    }
    var MaterializeOperator = (function () {
        function MaterializeOperator() {
        }
        MaterializeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MaterializeSubscriber(subscriber));
        };
        return MaterializeOperator;
    }());
    var MaterializeSubscriber = (function (_super) {
        __extends(MaterializeSubscriber, _super);
        function MaterializeSubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        MaterializeSubscriber.prototype._next = function (value) {
            this.destination.next(Notification.createNext(value));
        };
        MaterializeSubscriber.prototype._error = function (err) {
            var destination = this.destination;
            destination.next(Notification.createError(err));
            destination.complete();
        };
        MaterializeSubscriber.prototype._complete = function () {
            var destination = this.destination;
            destination.next(Notification.createComplete());
            destination.complete();
        };
        return MaterializeSubscriber;
    }(Subscriber));

    function scan(accumulator, seed) {
        var hasSeed = false;
        if (arguments.length >= 2) {
            hasSeed = true;
        }
        return function scanOperatorFunction(source) {
            return source.lift(new ScanOperator(accumulator, seed, hasSeed));
        };
    }
    var ScanOperator = (function () {
        function ScanOperator(accumulator, seed, hasSeed) {
            if (hasSeed === void 0) { hasSeed = false; }
            this.accumulator = accumulator;
            this.seed = seed;
            this.hasSeed = hasSeed;
        }
        ScanOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
        };
        return ScanOperator;
    }());
    var ScanSubscriber = (function (_super) {
        __extends(ScanSubscriber, _super);
        function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
            var _this = _super.call(this, destination) || this;
            _this.accumulator = accumulator;
            _this._seed = _seed;
            _this.hasSeed = hasSeed;
            _this.index = 0;
            return _this;
        }
        Object.defineProperty(ScanSubscriber.prototype, "seed", {
            get: function () {
                return this._seed;
            },
            set: function (value) {
                this.hasSeed = true;
                this._seed = value;
            },
            enumerable: true,
            configurable: true
        });
        ScanSubscriber.prototype._next = function (value) {
            if (!this.hasSeed) {
                this.seed = value;
                this.destination.next(value);
            }
            else {
                return this._tryNext(value);
            }
        };
        ScanSubscriber.prototype._tryNext = function (value) {
            var index = this.index++;
            var result;
            try {
                result = this.accumulator(this.seed, value, index);
            }
            catch (err) {
                this.destination.error(err);
            }
            this.seed = result;
            this.destination.next(result);
        };
        return ScanSubscriber;
    }(Subscriber));

    function reduce(accumulator, seed) {
        if (arguments.length >= 2) {
            return function reduceOperatorFunctionWithSeed(source) {
                return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);
            };
        }
        return function reduceOperatorFunction(source) {
            return pipe(scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast(1))(source);
        };
    }

    function max(comparer) {
        var max = (typeof comparer === 'function')
            ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
            : function (x, y) { return x > y ? x : y; };
        return reduce(max);
    }

    function merge$1() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        return function (source) { return source.lift.call(merge.apply(void 0, [source].concat(observables))); };
    }

    function mergeMapTo(innerObservable, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        if (typeof resultSelector === 'function') {
            return mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return mergeMap(function () { return innerObservable; }, concurrent);
    }

    function mergeScan(accumulator, seed, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
    }
    var MergeScanOperator = (function () {
        function MergeScanOperator(accumulator, seed, concurrent) {
            this.accumulator = accumulator;
            this.seed = seed;
            this.concurrent = concurrent;
        }
        MergeScanOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
        };
        return MergeScanOperator;
    }());
    var MergeScanSubscriber = (function (_super) {
        __extends(MergeScanSubscriber, _super);
        function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
            var _this = _super.call(this, destination) || this;
            _this.accumulator = accumulator;
            _this.acc = acc;
            _this.concurrent = concurrent;
            _this.hasValue = false;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeScanSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var index = this.index++;
                var destination = this.destination;
                var ish = void 0;
                try {
                    var accumulator = this.accumulator;
                    ish = accumulator(this.acc, value, index);
                }
                catch (e) {
                    return destination.error(e);
                }
                this.active++;
                this._innerSub(ish);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeScanSubscriber.prototype._innerSub = function (ish) {
            var innerSubscriber = new SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = innerSubscribe(ish, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
            }
        };
        MergeScanSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeScanSubscriber.prototype.notifyNext = function (innerValue) {
            var destination = this.destination;
            this.acc = innerValue;
            this.hasValue = true;
            destination.next(innerValue);
        };
        MergeScanSubscriber.prototype.notifyComplete = function () {
            var buffer = this.buffer;
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        return MergeScanSubscriber;
    }(SimpleOuterSubscriber));

    function min(comparer) {
        var min = (typeof comparer === 'function')
            ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
            : function (x, y) { return x < y ? x : y; };
        return reduce(min);
    }

    function multicast(subjectOrSubjectFactory, selector) {
        return function multicastOperatorFunction(source) {
            var subjectFactory;
            if (typeof subjectOrSubjectFactory === 'function') {
                subjectFactory = subjectOrSubjectFactory;
            }
            else {
                subjectFactory = function subjectFactory() {
                    return subjectOrSubjectFactory;
                };
            }
            if (typeof selector === 'function') {
                return source.lift(new MulticastOperator(subjectFactory, selector));
            }
            var connectable = Object.create(source, connectableObservableDescriptor);
            connectable.source = source;
            connectable.subjectFactory = subjectFactory;
            return connectable;
        };
    }
    var MulticastOperator = (function () {
        function MulticastOperator(subjectFactory, selector) {
            this.subjectFactory = subjectFactory;
            this.selector = selector;
        }
        MulticastOperator.prototype.call = function (subscriber, source) {
            var selector = this.selector;
            var subject = this.subjectFactory();
            var subscription = selector(subject).subscribe(subscriber);
            subscription.add(source.subscribe(subject));
            return subscription;
        };
        return MulticastOperator;
    }());

    function onErrorResumeNext$1() {
        var nextSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            nextSources[_i] = arguments[_i];
        }
        if (nextSources.length === 1 && isArray(nextSources[0])) {
            nextSources = nextSources[0];
        }
        return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
    }
    var OnErrorResumeNextOperator = (function () {
        function OnErrorResumeNextOperator(nextSources) {
            this.nextSources = nextSources;
        }
        OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
        };
        return OnErrorResumeNextOperator;
    }());
    var OnErrorResumeNextSubscriber = (function (_super) {
        __extends(OnErrorResumeNextSubscriber, _super);
        function OnErrorResumeNextSubscriber(destination, nextSources) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.nextSources = nextSources;
            return _this;
        }
        OnErrorResumeNextSubscriber.prototype.notifyError = function () {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._error = function (err) {
            this.subscribeToNextSource();
            this.unsubscribe();
        };
        OnErrorResumeNextSubscriber.prototype._complete = function () {
            this.subscribeToNextSource();
            this.unsubscribe();
        };
        OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
            var next = this.nextSources.shift();
            if (!!next) {
                var innerSubscriber = new SimpleInnerSubscriber(this);
                var destination = this.destination;
                destination.add(innerSubscriber);
                var innerSubscription = innerSubscribe(next, innerSubscriber);
                if (innerSubscription !== innerSubscriber) {
                    destination.add(innerSubscription);
                }
            }
            else {
                this.destination.complete();
            }
        };
        return OnErrorResumeNextSubscriber;
    }(SimpleOuterSubscriber));

    function pairwise() {
        return function (source) { return source.lift(new PairwiseOperator()); };
    }
    var PairwiseOperator = (function () {
        function PairwiseOperator() {
        }
        PairwiseOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new PairwiseSubscriber(subscriber));
        };
        return PairwiseOperator;
    }());
    var PairwiseSubscriber = (function (_super) {
        __extends(PairwiseSubscriber, _super);
        function PairwiseSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasPrev = false;
            return _this;
        }
        PairwiseSubscriber.prototype._next = function (value) {
            var pair;
            if (this.hasPrev) {
                pair = [this.prev, value];
            }
            else {
                this.hasPrev = true;
            }
            this.prev = value;
            if (pair) {
                this.destination.next(pair);
            }
        };
        return PairwiseSubscriber;
    }(Subscriber));

    function partition$1(predicate, thisArg) {
        return function (source) { return [
            filter(predicate, thisArg)(source),
            filter(not(predicate, thisArg))(source)
        ]; };
    }

    function pluck() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
            throw new Error('list of properties cannot be empty.');
        }
        return function (source) { return map(plucker(properties, length))(source); };
    }
    function plucker(props, length) {
        var mapper = function (x) {
            var currentProp = x;
            for (var i = 0; i < length; i++) {
                var p = currentProp != null ? currentProp[props[i]] : undefined;
                if (p !== void 0) {
                    currentProp = p;
                }
                else {
                    return undefined;
                }
            }
            return currentProp;
        };
        return mapper;
    }

    function publish(selector) {
        return selector ?
            multicast(function () { return new Subject(); }, selector) :
            multicast(new Subject());
    }

    function publishBehavior(value) {
        return function (source) { return multicast(new BehaviorSubject(value))(source); };
    }

    function publishLast() {
        return function (source) { return multicast(new AsyncSubject())(source); };
    }

    function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
        if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
            scheduler = selectorOrScheduler;
        }
        var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
        var subject = new ReplaySubject(bufferSize, windowTime, scheduler);
        return function (source) { return multicast(function () { return subject; }, selector)(source); };
    }

    function race$1() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        return function raceOperatorFunction(source) {
            if (observables.length === 1 && isArray(observables[0])) {
                observables = observables[0];
            }
            return source.lift.call(race.apply(void 0, [source].concat(observables)));
        };
    }

    function repeat(count) {
        if (count === void 0) { count = -1; }
        return function (source) {
            if (count === 0) {
                return empty$1();
            }
            else if (count < 0) {
                return source.lift(new RepeatOperator(-1, source));
            }
            else {
                return source.lift(new RepeatOperator(count - 1, source));
            }
        };
    }
    var RepeatOperator = (function () {
        function RepeatOperator(count, source) {
            this.count = count;
            this.source = source;
        }
        RepeatOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
        };
        return RepeatOperator;
    }());
    var RepeatSubscriber = (function (_super) {
        __extends(RepeatSubscriber, _super);
        function RepeatSubscriber(destination, count, source) {
            var _this = _super.call(this, destination) || this;
            _this.count = count;
            _this.source = source;
            return _this;
        }
        RepeatSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.complete.call(this);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RepeatSubscriber;
    }(Subscriber));

    function repeatWhen(notifier) {
        return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
    }
    var RepeatWhenOperator = (function () {
        function RepeatWhenOperator(notifier) {
            this.notifier = notifier;
        }
        RepeatWhenOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
        };
        return RepeatWhenOperator;
    }());
    var RepeatWhenSubscriber = (function (_super) {
        __extends(RepeatWhenSubscriber, _super);
        function RepeatWhenSubscriber(destination, notifier, source) {
            var _this = _super.call(this, destination) || this;
            _this.notifier = notifier;
            _this.source = source;
            _this.sourceIsBeingSubscribedTo = true;
            return _this;
        }
        RepeatWhenSubscriber.prototype.notifyNext = function () {
            this.sourceIsBeingSubscribedTo = true;
            this.source.subscribe(this);
        };
        RepeatWhenSubscriber.prototype.notifyComplete = function () {
            if (this.sourceIsBeingSubscribedTo === false) {
                return _super.prototype.complete.call(this);
            }
        };
        RepeatWhenSubscriber.prototype.complete = function () {
            this.sourceIsBeingSubscribedTo = false;
            if (!this.isStopped) {
                if (!this.retries) {
                    this.subscribeToRetries();
                }
                if (!this.retriesSubscription || this.retriesSubscription.closed) {
                    return _super.prototype.complete.call(this);
                }
                this._unsubscribeAndRecycle();
                this.notifications.next(undefined);
            }
        };
        RepeatWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
            if (notifications) {
                notifications.unsubscribe();
                this.notifications = undefined;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = undefined;
            }
            this.retries = undefined;
        };
        RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;
            _super.prototype._unsubscribeAndRecycle.call(this);
            this._unsubscribe = _unsubscribe;
            return this;
        };
        RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
            this.notifications = new Subject();
            var retries;
            try {
                var notifier = this.notifier;
                retries = notifier(this.notifications);
            }
            catch (e) {
                return _super.prototype.complete.call(this);
            }
            this.retries = retries;
            this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));
        };
        return RepeatWhenSubscriber;
    }(SimpleOuterSubscriber));

    function retry(count) {
        if (count === void 0) { count = -1; }
        return function (source) { return source.lift(new RetryOperator(count, source)); };
    }
    var RetryOperator = (function () {
        function RetryOperator(count, source) {
            this.count = count;
            this.source = source;
        }
        RetryOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
        };
        return RetryOperator;
    }());
    var RetrySubscriber = (function (_super) {
        __extends(RetrySubscriber, _super);
        function RetrySubscriber(destination, count, source) {
            var _this = _super.call(this, destination) || this;
            _this.count = count;
            _this.source = source;
            return _this;
        }
        RetrySubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.error.call(this, err);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RetrySubscriber;
    }(Subscriber));

    function retryWhen(notifier) {
        return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
    }
    var RetryWhenOperator = (function () {
        function RetryWhenOperator(notifier, source) {
            this.notifier = notifier;
            this.source = source;
        }
        RetryWhenOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
        };
        return RetryWhenOperator;
    }());
    var RetryWhenSubscriber = (function (_super) {
        __extends(RetryWhenSubscriber, _super);
        function RetryWhenSubscriber(destination, notifier, source) {
            var _this = _super.call(this, destination) || this;
            _this.notifier = notifier;
            _this.source = source;
            return _this;
        }
        RetryWhenSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var errors = this.errors;
                var retries = this.retries;
                var retriesSubscription = this.retriesSubscription;
                if (!retries) {
                    errors = new Subject();
                    try {
                        var notifier = this.notifier;
                        retries = notifier(errors);
                    }
                    catch (e) {
                        return _super.prototype.error.call(this, e);
                    }
                    retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));
                }
                else {
                    this.errors = undefined;
                    this.retriesSubscription = undefined;
                }
                this._unsubscribeAndRecycle();
                this.errors = errors;
                this.retries = retries;
                this.retriesSubscription = retriesSubscription;
                errors.next(err);
            }
        };
        RetryWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
            if (errors) {
                errors.unsubscribe();
                this.errors = undefined;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = undefined;
            }
            this.retries = undefined;
        };
        RetryWhenSubscriber.prototype.notifyNext = function () {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;
            this._unsubscribeAndRecycle();
            this._unsubscribe = _unsubscribe;
            this.source.subscribe(this);
        };
        return RetryWhenSubscriber;
    }(SimpleOuterSubscriber));

    function sample(notifier) {
        return function (source) { return source.lift(new SampleOperator(notifier)); };
    }
    var SampleOperator = (function () {
        function SampleOperator(notifier) {
            this.notifier = notifier;
        }
        SampleOperator.prototype.call = function (subscriber, source) {
            var sampleSubscriber = new SampleSubscriber(subscriber);
            var subscription = source.subscribe(sampleSubscriber);
            subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));
            return subscription;
        };
        return SampleOperator;
    }());
    var SampleSubscriber = (function (_super) {
        __extends(SampleSubscriber, _super);
        function SampleSubscriber() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.hasValue = false;
            return _this;
        }
        SampleSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
        };
        SampleSubscriber.prototype.notifyNext = function () {
            this.emitValue();
        };
        SampleSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        SampleSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.value);
            }
        };
        return SampleSubscriber;
    }(SimpleOuterSubscriber));

    function sampleTime(period, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
    }
    var SampleTimeOperator = (function () {
        function SampleTimeOperator(period, scheduler) {
            this.period = period;
            this.scheduler = scheduler;
        }
        SampleTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
        };
        return SampleTimeOperator;
    }());
    var SampleTimeSubscriber = (function (_super) {
        __extends(SampleTimeSubscriber, _super);
        function SampleTimeSubscriber(destination, period, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.period = period;
            _this.scheduler = scheduler;
            _this.hasValue = false;
            _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
            return _this;
        }
        SampleTimeSubscriber.prototype._next = function (value) {
            this.lastValue = value;
            this.hasValue = true;
        };
        SampleTimeSubscriber.prototype.notifyNext = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.lastValue);
            }
        };
        return SampleTimeSubscriber;
    }(Subscriber));
    function dispatchNotification(state) {
        var subscriber = state.subscriber, period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
    }

    function sequenceEqual(compareTo, comparator) {
        return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparator)); };
    }
    var SequenceEqualOperator = (function () {
        function SequenceEqualOperator(compareTo, comparator) {
            this.compareTo = compareTo;
            this.comparator = comparator;
        }
        SequenceEqualOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
        };
        return SequenceEqualOperator;
    }());
    var SequenceEqualSubscriber = (function (_super) {
        __extends(SequenceEqualSubscriber, _super);
        function SequenceEqualSubscriber(destination, compareTo, comparator) {
            var _this = _super.call(this, destination) || this;
            _this.compareTo = compareTo;
            _this.comparator = comparator;
            _this._a = [];
            _this._b = [];
            _this._oneComplete = false;
            _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
            return _this;
        }
        SequenceEqualSubscriber.prototype._next = function (value) {
            if (this._oneComplete && this._b.length === 0) {
                this.emit(false);
            }
            else {
                this._a.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype._complete = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
            this.unsubscribe();
        };
        SequenceEqualSubscriber.prototype.checkValues = function () {
            var _c = this, _a = _c._a, _b = _c._b, comparator = _c.comparator;
            while (_a.length > 0 && _b.length > 0) {
                var a = _a.shift();
                var b = _b.shift();
                var areEqual = false;
                try {
                    areEqual = comparator ? comparator(a, b) : a === b;
                }
                catch (e) {
                    this.destination.error(e);
                }
                if (!areEqual) {
                    this.emit(false);
                }
            }
        };
        SequenceEqualSubscriber.prototype.emit = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        SequenceEqualSubscriber.prototype.nextB = function (value) {
            if (this._oneComplete && this._a.length === 0) {
                this.emit(false);
            }
            else {
                this._b.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype.completeB = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
        };
        return SequenceEqualSubscriber;
    }(Subscriber));
    var SequenceEqualCompareToSubscriber = (function (_super) {
        __extends(SequenceEqualCompareToSubscriber, _super);
        function SequenceEqualCompareToSubscriber(destination, parent) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            return _this;
        }
        SequenceEqualCompareToSubscriber.prototype._next = function (value) {
            this.parent.nextB(value);
        };
        SequenceEqualCompareToSubscriber.prototype._error = function (err) {
            this.parent.error(err);
            this.unsubscribe();
        };
        SequenceEqualCompareToSubscriber.prototype._complete = function () {
            this.parent.completeB();
            this.unsubscribe();
        };
        return SequenceEqualCompareToSubscriber;
    }(Subscriber));

    function shareSubjectFactory() {
        return new Subject();
    }
    function share() {
        return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };
    }

    function shareReplay(configOrBufferSize, windowTime, scheduler) {
        var config;
        if (configOrBufferSize && typeof configOrBufferSize === 'object') {
            config = configOrBufferSize;
        }
        else {
            config = {
                bufferSize: configOrBufferSize,
                windowTime: windowTime,
                refCount: false,
                scheduler: scheduler
            };
        }
        return function (source) { return source.lift(shareReplayOperator(config)); };
    }
    function shareReplayOperator(_a) {
        var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
        var subject;
        var refCount = 0;
        var subscription;
        var hasError = false;
        var isComplete = false;
        return function shareReplayOperation(source) {
            refCount++;
            var innerSub;
            if (!subject || hasError) {
                hasError = false;
                subject = new ReplaySubject(bufferSize, windowTime, scheduler);
                innerSub = subject.subscribe(this);
                subscription = source.subscribe({
                    next: function (value) { subject.next(value); },
                    error: function (err) {
                        hasError = true;
                        subject.error(err);
                    },
                    complete: function () {
                        isComplete = true;
                        subscription = undefined;
                        subject.complete();
                    },
                });
            }
            else {
                innerSub = subject.subscribe(this);
            }
            this.add(function () {
                refCount--;
                innerSub.unsubscribe();
                if (subscription && !isComplete && useRefCount && refCount === 0) {
                    subscription.unsubscribe();
                    subscription = undefined;
                    subject = undefined;
                }
            });
        };
    }

    function single(predicate) {
        return function (source) { return source.lift(new SingleOperator(predicate, source)); };
    }
    var SingleOperator = (function () {
        function SingleOperator(predicate, source) {
            this.predicate = predicate;
            this.source = source;
        }
        SingleOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
        };
        return SingleOperator;
    }());
    var SingleSubscriber = (function (_super) {
        __extends(SingleSubscriber, _super);
        function SingleSubscriber(destination, predicate, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.seenValue = false;
            _this.index = 0;
            return _this;
        }
        SingleSubscriber.prototype.applySingleValue = function (value) {
            if (this.seenValue) {
                this.destination.error('Sequence contains more than one element');
            }
            else {
                this.seenValue = true;
                this.singleValue = value;
            }
        };
        SingleSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this.tryNext(value, index);
            }
            else {
                this.applySingleValue(value);
            }
        };
        SingleSubscriber.prototype.tryNext = function (value, index) {
            try {
                if (this.predicate(value, index, this.source)) {
                    this.applySingleValue(value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        SingleSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index > 0) {
                destination.next(this.seenValue ? this.singleValue : undefined);
                destination.complete();
            }
            else {
                destination.error(new EmptyError);
            }
        };
        return SingleSubscriber;
    }(Subscriber));

    function skip(count) {
        return function (source) { return source.lift(new SkipOperator(count)); };
    }
    var SkipOperator = (function () {
        function SkipOperator(total) {
            this.total = total;
        }
        SkipOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SkipSubscriber(subscriber, this.total));
        };
        return SkipOperator;
    }());
    var SkipSubscriber = (function (_super) {
        __extends(SkipSubscriber, _super);
        function SkipSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.count = 0;
            return _this;
        }
        SkipSubscriber.prototype._next = function (x) {
            if (++this.count > this.total) {
                this.destination.next(x);
            }
        };
        return SkipSubscriber;
    }(Subscriber));

    function skipLast(count) {
        return function (source) { return source.lift(new SkipLastOperator(count)); };
    }
    var SkipLastOperator = (function () {
        function SkipLastOperator(_skipCount) {
            this._skipCount = _skipCount;
            if (this._skipCount < 0) {
                throw new ArgumentOutOfRangeError;
            }
        }
        SkipLastOperator.prototype.call = function (subscriber, source) {
            if (this._skipCount === 0) {
                return source.subscribe(new Subscriber(subscriber));
            }
            else {
                return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
            }
        };
        return SkipLastOperator;
    }());
    var SkipLastSubscriber = (function (_super) {
        __extends(SkipLastSubscriber, _super);
        function SkipLastSubscriber(destination, _skipCount) {
            var _this = _super.call(this, destination) || this;
            _this._skipCount = _skipCount;
            _this._count = 0;
            _this._ring = new Array(_skipCount);
            return _this;
        }
        SkipLastSubscriber.prototype._next = function (value) {
            var skipCount = this._skipCount;
            var count = this._count++;
            if (count < skipCount) {
                this._ring[count] = value;
            }
            else {
                var currentIndex = count % skipCount;
                var ring = this._ring;
                var oldValue = ring[currentIndex];
                ring[currentIndex] = value;
                this.destination.next(oldValue);
            }
        };
        return SkipLastSubscriber;
    }(Subscriber));

    function skipUntil(notifier) {
        return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
    }
    var SkipUntilOperator = (function () {
        function SkipUntilOperator(notifier) {
            this.notifier = notifier;
        }
        SkipUntilOperator.prototype.call = function (destination, source) {
            return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
        };
        return SkipUntilOperator;
    }());
    var SkipUntilSubscriber = (function (_super) {
        __extends(SkipUntilSubscriber, _super);
        function SkipUntilSubscriber(destination, notifier) {
            var _this = _super.call(this, destination) || this;
            _this.hasValue = false;
            var innerSubscriber = new SimpleInnerSubscriber(_this);
            _this.add(innerSubscriber);
            _this.innerSubscription = innerSubscriber;
            var innerSubscription = innerSubscribe(notifier, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                _this.add(innerSubscription);
                _this.innerSubscription = innerSubscription;
            }
            return _this;
        }
        SkipUntilSubscriber.prototype._next = function (value) {
            if (this.hasValue) {
                _super.prototype._next.call(this, value);
            }
        };
        SkipUntilSubscriber.prototype.notifyNext = function () {
            this.hasValue = true;
            if (this.innerSubscription) {
                this.innerSubscription.unsubscribe();
            }
        };
        SkipUntilSubscriber.prototype.notifyComplete = function () {
        };
        return SkipUntilSubscriber;
    }(SimpleOuterSubscriber));

    function skipWhile(predicate) {
        return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
    }
    var SkipWhileOperator = (function () {
        function SkipWhileOperator(predicate) {
            this.predicate = predicate;
        }
        SkipWhileOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
        };
        return SkipWhileOperator;
    }());
    var SkipWhileSubscriber = (function (_super) {
        __extends(SkipWhileSubscriber, _super);
        function SkipWhileSubscriber(destination, predicate) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.skipping = true;
            _this.index = 0;
            return _this;
        }
        SkipWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (this.skipping) {
                this.tryCallPredicate(value);
            }
            if (!this.skipping) {
                destination.next(value);
            }
        };
        SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
            try {
                var result = this.predicate(value, this.index++);
                this.skipping = Boolean(result);
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        return SkipWhileSubscriber;
    }(Subscriber));

    function startWith() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler(scheduler)) {
            array.pop();
            return function (source) { return concat(array, source, scheduler); };
        }
        else {
            return function (source) { return concat(array, source); };
        }
    }

    var SubscribeOnObservable = (function (_super) {
        __extends(SubscribeOnObservable, _super);
        function SubscribeOnObservable(source, delayTime, scheduler) {
            if (delayTime === void 0) { delayTime = 0; }
            if (scheduler === void 0) { scheduler = asap; }
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.delayTime = delayTime;
            _this.scheduler = scheduler;
            if (!isNumeric(delayTime) || delayTime < 0) {
                _this.delayTime = 0;
            }
            if (!scheduler || typeof scheduler.schedule !== 'function') {
                _this.scheduler = asap;
            }
            return _this;
        }
        SubscribeOnObservable.create = function (source, delay, scheduler) {
            if (delay === void 0) { delay = 0; }
            if (scheduler === void 0) { scheduler = asap; }
            return new SubscribeOnObservable(source, delay, scheduler);
        };
        SubscribeOnObservable.dispatch = function (arg) {
            var source = arg.source, subscriber = arg.subscriber;
            return this.add(source.subscribe(subscriber));
        };
        SubscribeOnObservable.prototype._subscribe = function (subscriber) {
            var delay = this.delayTime;
            var source = this.source;
            var scheduler = this.scheduler;
            return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
                source: source, subscriber: subscriber
            });
        };
        return SubscribeOnObservable;
    }(Observable));

    function subscribeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return function subscribeOnOperatorFunction(source) {
            return source.lift(new SubscribeOnOperator(scheduler, delay));
        };
    }
    var SubscribeOnOperator = (function () {
        function SubscribeOnOperator(scheduler, delay) {
            this.scheduler = scheduler;
            this.delay = delay;
        }
        SubscribeOnOperator.prototype.call = function (subscriber, source) {
            return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
        };
        return SubscribeOnOperator;
    }());

    function switchMap(project, resultSelector) {
        if (typeof resultSelector === 'function') {
            return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
        }
        return function (source) { return source.lift(new SwitchMapOperator(project)); };
    }
    var SwitchMapOperator = (function () {
        function SwitchMapOperator(project) {
            this.project = project;
        }
        SwitchMapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
        };
        return SwitchMapOperator;
    }());
    var SwitchMapSubscriber = (function (_super) {
        __extends(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.index = 0;
            return _this;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            var innerSubscriber = new SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            this.innerSubscription = innerSubscribe(result, innerSubscriber);
            if (this.innerSubscription !== innerSubscriber) {
                destination.add(this.innerSubscription);
            }
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
            this.unsubscribe();
        };
        SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = undefined;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function () {
            this.innerSubscription = undefined;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
            this.destination.next(innerValue);
        };
        return SwitchMapSubscriber;
    }(SimpleOuterSubscriber));

    function switchAll() {
        return switchMap(identity);
    }

    function switchMapTo(innerObservable, resultSelector) {
        return resultSelector ? switchMap(function () { return innerObservable; }, resultSelector) : switchMap(function () { return innerObservable; });
    }

    function takeUntil(notifier) {
        return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
    }
    var TakeUntilOperator = (function () {
        function TakeUntilOperator(notifier) {
            this.notifier = notifier;
        }
        TakeUntilOperator.prototype.call = function (subscriber, source) {
            var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
            var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));
            if (notifierSubscription && !takeUntilSubscriber.seenValue) {
                takeUntilSubscriber.add(notifierSubscription);
                return source.subscribe(takeUntilSubscriber);
            }
            return takeUntilSubscriber;
        };
        return TakeUntilOperator;
    }());
    var TakeUntilSubscriber = (function (_super) {
        __extends(TakeUntilSubscriber, _super);
        function TakeUntilSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.seenValue = false;
            return _this;
        }
        TakeUntilSubscriber.prototype.notifyNext = function () {
            this.seenValue = true;
            this.complete();
        };
        TakeUntilSubscriber.prototype.notifyComplete = function () {
        };
        return TakeUntilSubscriber;
    }(SimpleOuterSubscriber));

    function takeWhile(predicate, inclusive) {
        if (inclusive === void 0) { inclusive = false; }
        return function (source) {
            return source.lift(new TakeWhileOperator(predicate, inclusive));
        };
    }
    var TakeWhileOperator = (function () {
        function TakeWhileOperator(predicate, inclusive) {
            this.predicate = predicate;
            this.inclusive = inclusive;
        }
        TakeWhileOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
        };
        return TakeWhileOperator;
    }());
    var TakeWhileSubscriber = (function (_super) {
        __extends(TakeWhileSubscriber, _super);
        function TakeWhileSubscriber(destination, predicate, inclusive) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.inclusive = inclusive;
            _this.index = 0;
            return _this;
        }
        TakeWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            var result;
            try {
                result = this.predicate(value, this.index++);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this.nextOrComplete(value, result);
        };
        TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
            var destination = this.destination;
            if (Boolean(predicateResult)) {
                destination.next(value);
            }
            else {
                if (this.inclusive) {
                    destination.next(value);
                }
                destination.complete();
            }
        };
        return TakeWhileSubscriber;
    }(Subscriber));

    function tap(nextOrObserver, error, complete) {
        return function tapOperatorFunction(source) {
            return source.lift(new DoOperator(nextOrObserver, error, complete));
        };
    }
    var DoOperator = (function () {
        function DoOperator(nextOrObserver, error, complete) {
            this.nextOrObserver = nextOrObserver;
            this.error = error;
            this.complete = complete;
        }
        DoOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        };
        return DoOperator;
    }());
    var TapSubscriber = (function (_super) {
        __extends(TapSubscriber, _super);
        function TapSubscriber(destination, observerOrNext, error, complete) {
            var _this = _super.call(this, destination) || this;
            _this._tapNext = noop;
            _this._tapError = noop;
            _this._tapComplete = noop;
            _this._tapError = error || noop;
            _this._tapComplete = complete || noop;
            if (isFunction(observerOrNext)) {
                _this._context = _this;
                _this._tapNext = observerOrNext;
            }
            else if (observerOrNext) {
                _this._context = observerOrNext;
                _this._tapNext = observerOrNext.next || noop;
                _this._tapError = observerOrNext.error || noop;
                _this._tapComplete = observerOrNext.complete || noop;
            }
            return _this;
        }
        TapSubscriber.prototype._next = function (value) {
            try {
                this._tapNext.call(this._context, value);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(value);
        };
        TapSubscriber.prototype._error = function (err) {
            try {
                this._tapError.call(this._context, err);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.error(err);
        };
        TapSubscriber.prototype._complete = function () {
            try {
                this._tapComplete.call(this._context);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            return this.destination.complete();
        };
        return TapSubscriber;
    }(Subscriber));

    var defaultThrottleConfig = {
        leading: true,
        trailing: false
    };
    function throttle(durationSelector, config) {
        if (config === void 0) { config = defaultThrottleConfig; }
        return function (source) { return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing)); };
    }
    var ThrottleOperator = (function () {
        function ThrottleOperator(durationSelector, leading, trailing) {
            this.durationSelector = durationSelector;
            this.leading = leading;
            this.trailing = trailing;
        }
        ThrottleOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
        };
        return ThrottleOperator;
    }());
    var ThrottleSubscriber = (function (_super) {
        __extends(ThrottleSubscriber, _super);
        function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.durationSelector = durationSelector;
            _this._leading = _leading;
            _this._trailing = _trailing;
            _this._hasValue = false;
            return _this;
        }
        ThrottleSubscriber.prototype._next = function (value) {
            this._hasValue = true;
            this._sendValue = value;
            if (!this._throttled) {
                if (this._leading) {
                    this.send();
                }
                else {
                    this.throttle(value);
                }
            }
        };
        ThrottleSubscriber.prototype.send = function () {
            var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
            if (_hasValue) {
                this.destination.next(_sendValue);
                this.throttle(_sendValue);
            }
            this._hasValue = false;
            this._sendValue = undefined;
        };
        ThrottleSubscriber.prototype.throttle = function (value) {
            var duration = this.tryDurationSelector(value);
            if (!!duration) {
                this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));
            }
        };
        ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
            try {
                return this.durationSelector(value);
            }
            catch (err) {
                this.destination.error(err);
                return null;
            }
        };
        ThrottleSubscriber.prototype.throttlingDone = function () {
            var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
            if (_throttled) {
                _throttled.unsubscribe();
            }
            this._throttled = undefined;
            if (_trailing) {
                this.send();
            }
        };
        ThrottleSubscriber.prototype.notifyNext = function () {
            this.throttlingDone();
        };
        ThrottleSubscriber.prototype.notifyComplete = function () {
            this.throttlingDone();
        };
        return ThrottleSubscriber;
    }(SimpleOuterSubscriber));

    function throttleTime(duration, scheduler, config) {
        if (scheduler === void 0) { scheduler = async; }
        if (config === void 0) { config = defaultThrottleConfig; }
        return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
    }
    var ThrottleTimeOperator = (function () {
        function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
            this.duration = duration;
            this.scheduler = scheduler;
            this.leading = leading;
            this.trailing = trailing;
        }
        ThrottleTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
        };
        return ThrottleTimeOperator;
    }());
    var ThrottleTimeSubscriber = (function (_super) {
        __extends(ThrottleTimeSubscriber, _super);
        function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
            var _this = _super.call(this, destination) || this;
            _this.duration = duration;
            _this.scheduler = scheduler;
            _this.leading = leading;
            _this.trailing = trailing;
            _this._hasTrailingValue = false;
            _this._trailingValue = null;
            return _this;
        }
        ThrottleTimeSubscriber.prototype._next = function (value) {
            if (this.throttled) {
                if (this.trailing) {
                    this._trailingValue = value;
                    this._hasTrailingValue = true;
                }
            }
            else {
                this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
                if (this.leading) {
                    this.destination.next(value);
                }
                else if (this.trailing) {
                    this._trailingValue = value;
                    this._hasTrailingValue = true;
                }
            }
        };
        ThrottleTimeSubscriber.prototype._complete = function () {
            if (this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this.destination.complete();
            }
            else {
                this.destination.complete();
            }
        };
        ThrottleTimeSubscriber.prototype.clearThrottle = function () {
            var throttled = this.throttled;
            if (throttled) {
                if (this.trailing && this._hasTrailingValue) {
                    this.destination.next(this._trailingValue);
                    this._trailingValue = null;
                    this._hasTrailingValue = false;
                }
                throttled.unsubscribe();
                this.remove(throttled);
                this.throttled = null;
            }
        };
        return ThrottleTimeSubscriber;
    }(Subscriber));
    function dispatchNext$3(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
    }

    function timeInterval(scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return function (source) { return defer(function () {
            return source.pipe(scan(function (_a, value) {
                var current = _a.current;
                return ({ value: value, current: scheduler.now(), last: current });
            }, { current: scheduler.now(), value: undefined, last: undefined }), map(function (_a) {
                var current = _a.current, last = _a.last, value = _a.value;
                return new TimeInterval(value, current - last);
            }));
        }); };
    }
    var TimeInterval = (function () {
        function TimeInterval(value, interval) {
            this.value = value;
            this.interval = interval;
        }
        return TimeInterval;
    }());

    function timeoutWith(due, withObservable, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return function (source) {
            var absoluteTimeout = isDate(due);
            var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
            return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
        };
    }
    var TimeoutWithOperator = (function () {
        function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
            this.waitFor = waitFor;
            this.absoluteTimeout = absoluteTimeout;
            this.withObservable = withObservable;
            this.scheduler = scheduler;
        }
        TimeoutWithOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
        };
        return TimeoutWithOperator;
    }());
    var TimeoutWithSubscriber = (function (_super) {
        __extends(TimeoutWithSubscriber, _super);
        function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.absoluteTimeout = absoluteTimeout;
            _this.waitFor = waitFor;
            _this.withObservable = withObservable;
            _this.scheduler = scheduler;
            _this.scheduleTimeout();
            return _this;
        }
        TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
            var withObservable = subscriber.withObservable;
            subscriber._unsubscribeAndRecycle();
            subscriber.add(innerSubscribe(withObservable, new SimpleInnerSubscriber(subscriber)));
        };
        TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
            var action = this.action;
            if (action) {
                this.action = action.schedule(this, this.waitFor);
            }
            else {
                this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
            }
        };
        TimeoutWithSubscriber.prototype._next = function (value) {
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
            _super.prototype._next.call(this, value);
        };
        TimeoutWithSubscriber.prototype._unsubscribe = function () {
            this.action = undefined;
            this.scheduler = null;
            this.withObservable = null;
        };
        return TimeoutWithSubscriber;
    }(SimpleOuterSubscriber));

    function timeout(due, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return timeoutWith(due, throwError(new TimeoutError()), scheduler);
    }

    function timestamp(scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return map(function (value) { return new Timestamp(value, scheduler.now()); });
    }
    var Timestamp = (function () {
        function Timestamp(value, timestamp) {
            this.value = value;
            this.timestamp = timestamp;
        }
        return Timestamp;
    }());

    function toArrayReducer(arr, item, index) {
        if (index === 0) {
            return [item];
        }
        arr.push(item);
        return arr;
    }
    function toArray() {
        return reduce(toArrayReducer, []);
    }

    function window$1(windowBoundaries) {
        return function windowOperatorFunction(source) {
            return source.lift(new WindowOperator(windowBoundaries));
        };
    }
    var WindowOperator = (function () {
        function WindowOperator(windowBoundaries) {
            this.windowBoundaries = windowBoundaries;
        }
        WindowOperator.prototype.call = function (subscriber, source) {
            var windowSubscriber = new WindowSubscriber(subscriber);
            var sourceSubscription = source.subscribe(windowSubscriber);
            if (!sourceSubscription.closed) {
                windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));
            }
            return sourceSubscription;
        };
        return WindowOperator;
    }());
    var WindowSubscriber = (function (_super) {
        __extends(WindowSubscriber, _super);
        function WindowSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.window = new Subject();
            destination.next(_this.window);
            return _this;
        }
        WindowSubscriber.prototype.notifyNext = function () {
            this.openWindow();
        };
        WindowSubscriber.prototype.notifyError = function (error) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function () {
            this._complete();
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
        };
        WindowSubscriber.prototype._unsubscribe = function () {
            this.window = null;
        };
        WindowSubscriber.prototype.openWindow = function () {
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var destination = this.destination;
            var newWindow = this.window = new Subject();
            destination.next(newWindow);
        };
        return WindowSubscriber;
    }(SimpleOuterSubscriber));

    function windowCount(windowSize, startWindowEvery) {
        if (startWindowEvery === void 0) { startWindowEvery = 0; }
        return function windowCountOperatorFunction(source) {
            return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
        };
    }
    var WindowCountOperator = (function () {
        function WindowCountOperator(windowSize, startWindowEvery) {
            this.windowSize = windowSize;
            this.startWindowEvery = startWindowEvery;
        }
        WindowCountOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
        };
        return WindowCountOperator;
    }());
    var WindowCountSubscriber = (function (_super) {
        __extends(WindowCountSubscriber, _super);
        function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.windowSize = windowSize;
            _this.startWindowEvery = startWindowEvery;
            _this.windows = [new Subject()];
            _this.count = 0;
            destination.next(_this.windows[0]);
            return _this;
        }
        WindowCountSubscriber.prototype._next = function (value) {
            var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
            var destination = this.destination;
            var windowSize = this.windowSize;
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len && !this.closed; i++) {
                windows[i].next(value);
            }
            var c = this.count - windowSize + 1;
            if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
                windows.shift().complete();
            }
            if (++this.count % startWindowEvery === 0 && !this.closed) {
                var window_1 = new Subject();
                windows.push(window_1);
                destination.next(window_1);
            }
        };
        WindowCountSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().error(err);
                }
            }
            this.destination.error(err);
        };
        WindowCountSubscriber.prototype._complete = function () {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().complete();
                }
            }
            this.destination.complete();
        };
        WindowCountSubscriber.prototype._unsubscribe = function () {
            this.count = 0;
            this.windows = null;
        };
        return WindowCountSubscriber;
    }(Subscriber));

    function windowTime(windowTimeSpan) {
        var scheduler = async;
        var windowCreationInterval = null;
        var maxWindowSize = Number.POSITIVE_INFINITY;
        if (isScheduler(arguments[3])) {
            scheduler = arguments[3];
        }
        if (isScheduler(arguments[2])) {
            scheduler = arguments[2];
        }
        else if (isNumeric(arguments[2])) {
            maxWindowSize = Number(arguments[2]);
        }
        if (isScheduler(arguments[1])) {
            scheduler = arguments[1];
        }
        else if (isNumeric(arguments[1])) {
            windowCreationInterval = Number(arguments[1]);
        }
        return function windowTimeOperatorFunction(source) {
            return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
        };
    }
    var WindowTimeOperator = (function () {
        function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
            this.windowTimeSpan = windowTimeSpan;
            this.windowCreationInterval = windowCreationInterval;
            this.maxWindowSize = maxWindowSize;
            this.scheduler = scheduler;
        }
        WindowTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
        };
        return WindowTimeOperator;
    }());
    var CountedSubject = (function (_super) {
        __extends(CountedSubject, _super);
        function CountedSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._numberOfNextedValues = 0;
            return _this;
        }
        CountedSubject.prototype.next = function (value) {
            this._numberOfNextedValues++;
            _super.prototype.next.call(this, value);
        };
        Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
            get: function () {
                return this._numberOfNextedValues;
            },
            enumerable: true,
            configurable: true
        });
        return CountedSubject;
    }(Subject));
    var WindowTimeSubscriber = (function (_super) {
        __extends(WindowTimeSubscriber, _super);
        function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.windowTimeSpan = windowTimeSpan;
            _this.windowCreationInterval = windowCreationInterval;
            _this.maxWindowSize = maxWindowSize;
            _this.scheduler = scheduler;
            _this.windows = [];
            var window = _this.openWindow();
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                var closeState = { subscriber: _this, window: window, context: null };
                var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
                _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
                _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
            }
            else {
                var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
                _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
            }
            return _this;
        }
        WindowTimeSubscriber.prototype._next = function (value) {
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len; i++) {
                var window_1 = windows[i];
                if (!window_1.closed) {
                    window_1.next(value);
                    if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                        this.closeWindow(window_1);
                    }
                }
            }
        };
        WindowTimeSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            while (windows.length > 0) {
                windows.shift().error(err);
            }
            this.destination.error(err);
        };
        WindowTimeSubscriber.prototype._complete = function () {
            var windows = this.windows;
            while (windows.length > 0) {
                var window_2 = windows.shift();
                if (!window_2.closed) {
                    window_2.complete();
                }
            }
            this.destination.complete();
        };
        WindowTimeSubscriber.prototype.openWindow = function () {
            var window = new CountedSubject();
            this.windows.push(window);
            var destination = this.destination;
            destination.next(window);
            return window;
        };
        WindowTimeSubscriber.prototype.closeWindow = function (window) {
            window.complete();
            var windows = this.windows;
            windows.splice(windows.indexOf(window), 1);
        };
        return WindowTimeSubscriber;
    }(Subscriber));
    function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
        if (window) {
            subscriber.closeWindow(window);
        }
        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
    }
    function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
        var window = subscriber.openWindow();
        var action = this;
        var context = { action: action, subscription: null };
        var timeSpanState = { subscriber: subscriber, window: window, context: context };
        context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
        action.add(context.subscription);
        action.schedule(state, windowCreationInterval);
    }
    function dispatchWindowClose(state) {
        var subscriber = state.subscriber, window = state.window, context = state.context;
        if (context && context.action && context.subscription) {
            context.action.remove(context.subscription);
        }
        subscriber.closeWindow(window);
    }

    function windowToggle(openings, closingSelector) {
        return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
    }
    var WindowToggleOperator = (function () {
        function WindowToggleOperator(openings, closingSelector) {
            this.openings = openings;
            this.closingSelector = closingSelector;
        }
        WindowToggleOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
        };
        return WindowToggleOperator;
    }());
    var WindowToggleSubscriber = (function (_super) {
        __extends(WindowToggleSubscriber, _super);
        function WindowToggleSubscriber(destination, openings, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.openings = openings;
            _this.closingSelector = closingSelector;
            _this.contexts = [];
            _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
            return _this;
        }
        WindowToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            if (contexts) {
                var len = contexts.length;
                for (var i = 0; i < len; i++) {
                    contexts[i].window.next(value);
                }
            }
        };
        WindowToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_1 = contexts[index];
                    context_1.window.error(err);
                    context_1.subscription.unsubscribe();
                }
            }
            _super.prototype._error.call(this, err);
        };
        WindowToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_2 = contexts[index];
                    context_2.window.complete();
                    context_2.subscription.unsubscribe();
                }
            }
            _super.prototype._complete.call(this);
        };
        WindowToggleSubscriber.prototype._unsubscribe = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_3 = contexts[index];
                    context_3.window.unsubscribe();
                    context_3.subscription.unsubscribe();
                }
            }
        };
        WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (outerValue === this.openings) {
                var closingNotifier = void 0;
                try {
                    var closingSelector = this.closingSelector;
                    closingNotifier = closingSelector(innerValue);
                }
                catch (e) {
                    return this.error(e);
                }
                var window_1 = new Subject();
                var subscription = new Subscription();
                var context_4 = { window: window_1, subscription: subscription };
                this.contexts.push(context_4);
                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context_4;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
            else {
                this.closeWindow(this.contexts.indexOf(outerValue));
            }
        };
        WindowToggleSubscriber.prototype.notifyError = function (err) {
            this.error(err);
        };
        WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
            if (inner !== this.openSubscription) {
                this.closeWindow(this.contexts.indexOf(inner.context));
            }
        };
        WindowToggleSubscriber.prototype.closeWindow = function (index) {
            if (index === -1) {
                return;
            }
            var contexts = this.contexts;
            var context = contexts[index];
            var window = context.window, subscription = context.subscription;
            contexts.splice(index, 1);
            window.complete();
            subscription.unsubscribe();
        };
        return WindowToggleSubscriber;
    }(OuterSubscriber));

    function windowWhen(closingSelector) {
        return function windowWhenOperatorFunction(source) {
            return source.lift(new WindowOperator$1(closingSelector));
        };
    }
    var WindowOperator$1 = (function () {
        function WindowOperator(closingSelector) {
            this.closingSelector = closingSelector;
        }
        WindowOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new WindowSubscriber$1(subscriber, this.closingSelector));
        };
        return WindowOperator;
    }());
    var WindowSubscriber$1 = (function (_super) {
        __extends(WindowSubscriber, _super);
        function WindowSubscriber(destination, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.closingSelector = closingSelector;
            _this.openWindow();
            return _this;
        }
        WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype.notifyError = function (error) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
            if (this.closingNotification) {
                this.closingNotification.unsubscribe();
            }
        };
        WindowSubscriber.prototype.openWindow = function (innerSub) {
            if (innerSub === void 0) { innerSub = null; }
            if (innerSub) {
                this.remove(innerSub);
                innerSub.unsubscribe();
            }
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var window = this.window = new Subject();
            this.destination.next(window);
            var closingNotifier;
            try {
                var closingSelector = this.closingSelector;
                closingNotifier = closingSelector();
            }
            catch (e) {
                this.destination.error(e);
                this.window.error(e);
                return;
            }
            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
        };
        return WindowSubscriber;
    }(OuterSubscriber));

    function withLatestFrom() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return function (source) {
            var project;
            if (typeof args[args.length - 1] === 'function') {
                project = args.pop();
            }
            var observables = args;
            return source.lift(new WithLatestFromOperator(observables, project));
        };
    }
    var WithLatestFromOperator = (function () {
        function WithLatestFromOperator(observables, project) {
            this.observables = observables;
            this.project = project;
        }
        WithLatestFromOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
        };
        return WithLatestFromOperator;
    }());
    var WithLatestFromSubscriber = (function (_super) {
        __extends(WithLatestFromSubscriber, _super);
        function WithLatestFromSubscriber(destination, observables, project) {
            var _this = _super.call(this, destination) || this;
            _this.observables = observables;
            _this.project = project;
            _this.toRespond = [];
            var len = observables.length;
            _this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                _this.toRespond.push(i);
            }
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                _this.add(subscribeToResult(_this, observable, undefined, i));
            }
            return _this;
        }
        WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;
            if (toRespond.length > 0) {
                var found = toRespond.indexOf(outerIndex);
                if (found !== -1) {
                    toRespond.splice(found, 1);
                }
            }
        };
        WithLatestFromSubscriber.prototype.notifyComplete = function () {
        };
        WithLatestFromSubscriber.prototype._next = function (value) {
            if (this.toRespond.length === 0) {
                var args = [value].concat(this.values);
                if (this.project) {
                    this._tryProject(args);
                }
                else {
                    this.destination.next(args);
                }
            }
        };
        WithLatestFromSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return WithLatestFromSubscriber;
    }(OuterSubscriber));

    function zip$1() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        return function zipOperatorFunction(source) {
            return source.lift.call(zip.apply(void 0, [source].concat(observables)));
        };
    }

    function zipAll(project) {
        return function (source) { return source.lift(new ZipOperator(project)); };
    }



    var _operators = /*#__PURE__*/Object.freeze({
        audit: audit,
        auditTime: auditTime,
        buffer: buffer,
        bufferCount: bufferCount,
        bufferTime: bufferTime,
        bufferToggle: bufferToggle,
        bufferWhen: bufferWhen,
        catchError: catchError,
        combineAll: combineAll,
        combineLatest: combineLatest$1,
        concat: concat$1,
        concatAll: concatAll,
        concatMap: concatMap,
        concatMapTo: concatMapTo,
        count: count,
        debounce: debounce,
        debounceTime: debounceTime,
        defaultIfEmpty: defaultIfEmpty,
        delay: delay,
        delayWhen: delayWhen,
        dematerialize: dematerialize,
        distinct: distinct,
        distinctUntilChanged: distinctUntilChanged,
        distinctUntilKeyChanged: distinctUntilKeyChanged,
        elementAt: elementAt,
        endWith: endWith,
        every: every,
        exhaust: exhaust,
        exhaustMap: exhaustMap,
        expand: expand,
        filter: filter,
        finalize: finalize,
        find: find,
        findIndex: findIndex,
        first: first,
        groupBy: groupBy,
        ignoreElements: ignoreElements,
        isEmpty: isEmpty,
        last: last,
        map: map,
        mapTo: mapTo,
        materialize: materialize,
        max: max,
        merge: merge$1,
        mergeAll: mergeAll,
        mergeMap: mergeMap,
        flatMap: flatMap,
        mergeMapTo: mergeMapTo,
        mergeScan: mergeScan,
        min: min,
        multicast: multicast,
        observeOn: observeOn,
        onErrorResumeNext: onErrorResumeNext$1,
        pairwise: pairwise,
        partition: partition$1,
        pluck: pluck,
        publish: publish,
        publishBehavior: publishBehavior,
        publishLast: publishLast,
        publishReplay: publishReplay,
        race: race$1,
        reduce: reduce,
        repeat: repeat,
        repeatWhen: repeatWhen,
        retry: retry,
        retryWhen: retryWhen,
        refCount: refCount,
        sample: sample,
        sampleTime: sampleTime,
        scan: scan,
        sequenceEqual: sequenceEqual,
        share: share,
        shareReplay: shareReplay,
        single: single,
        skip: skip,
        skipLast: skipLast,
        skipUntil: skipUntil,
        skipWhile: skipWhile,
        startWith: startWith,
        subscribeOn: subscribeOn,
        switchAll: switchAll,
        switchMap: switchMap,
        switchMapTo: switchMapTo,
        take: take,
        takeLast: takeLast,
        takeUntil: takeUntil,
        takeWhile: takeWhile,
        tap: tap,
        throttle: throttle,
        throttleTime: throttleTime,
        throwIfEmpty: throwIfEmpty,
        timeInterval: timeInterval,
        timeout: timeout,
        timeoutWith: timeoutWith,
        timestamp: timestamp,
        toArray: toArray,
        window: window$1,
        windowCount: windowCount,
        windowTime: windowTime,
        windowToggle: windowToggle,
        windowWhen: windowWhen,
        withLatestFrom: withLatestFrom,
        zip: zip$1,
        zipAll: zipAll
    });

    var SubscriptionLog = (function () {
        function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
            if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }
            this.subscribedFrame = subscribedFrame;
            this.unsubscribedFrame = unsubscribedFrame;
        }
        return SubscriptionLog;
    }());

    var SubscriptionLoggable = (function () {
        function SubscriptionLoggable() {
            this.subscriptions = [];
        }
        SubscriptionLoggable.prototype.logSubscribedFrame = function () {
            this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));
            return this.subscriptions.length - 1;
        };
        SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {
            var subscriptionLogs = this.subscriptions;
            var oldSubscriptionLog = subscriptionLogs[index];
            subscriptionLogs[index] = new SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
        };
        return SubscriptionLoggable;
    }());

    function applyMixins(derivedCtor, baseCtors) {
        for (var i = 0, len = baseCtors.length; i < len; i++) {
            var baseCtor = baseCtors[i];
            var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
            for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
                var name_1 = propertyKeys[j];
                derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
            }
        }
    }

    var ColdObservable = (function (_super) {
        __extends(ColdObservable, _super);
        function ColdObservable(messages, scheduler) {
            var _this = _super.call(this, function (subscriber) {
                var observable = this;
                var index = observable.logSubscribedFrame();
                var subscription = new Subscription();
                subscription.add(new Subscription(function () {
                    observable.logUnsubscribedFrame(index);
                }));
                observable.scheduleMessages(subscriber);
                return subscription;
            }) || this;
            _this.messages = messages;
            _this.subscriptions = [];
            _this.scheduler = scheduler;
            return _this;
        }
        ColdObservable.prototype.scheduleMessages = function (subscriber) {
            var messagesLength = this.messages.length;
            for (var i = 0; i < messagesLength; i++) {
                var message = this.messages[i];
                subscriber.add(this.scheduler.schedule(function (_a) {
                    var message = _a.message, subscriber = _a.subscriber;
                    message.notification.observe(subscriber);
                }, message.frame, { message: message, subscriber: subscriber }));
            }
        };
        return ColdObservable;
    }(Observable));
    applyMixins(ColdObservable, [SubscriptionLoggable]);

    var HotObservable = (function (_super) {
        __extends(HotObservable, _super);
        function HotObservable(messages, scheduler) {
            var _this = _super.call(this) || this;
            _this.messages = messages;
            _this.subscriptions = [];
            _this.scheduler = scheduler;
            return _this;
        }
        HotObservable.prototype._subscribe = function (subscriber) {
            var subject = this;
            var index = subject.logSubscribedFrame();
            var subscription = new Subscription();
            subscription.add(new Subscription(function () {
                subject.logUnsubscribedFrame(index);
            }));
            subscription.add(_super.prototype._subscribe.call(this, subscriber));
            return subscription;
        };
        HotObservable.prototype.setup = function () {
            var subject = this;
            var messagesLength = subject.messages.length;
            for (var i = 0; i < messagesLength; i++) {
                (function () {
                    var message = subject.messages[i];
                    subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);
                })();
            }
        };
        return HotObservable;
    }(Subject));
    applyMixins(HotObservable, [SubscriptionLoggable]);

    var defaultMaxFrame = 750;
    var TestScheduler = (function (_super) {
        __extends(TestScheduler, _super);
        function TestScheduler(assertDeepEqual) {
            var _this = _super.call(this, VirtualAction, defaultMaxFrame) || this;
            _this.assertDeepEqual = assertDeepEqual;
            _this.hotObservables = [];
            _this.coldObservables = [];
            _this.flushTests = [];
            _this.runMode = false;
            return _this;
        }
        TestScheduler.prototype.createTime = function (marbles) {
            var indexOf = marbles.indexOf('|');
            if (indexOf === -1) {
                throw new Error('marble diagram for time should have a completion marker "|"');
            }
            return indexOf * TestScheduler.frameTimeFactor;
        };
        TestScheduler.prototype.createColdObservable = function (marbles, values, error) {
            if (marbles.indexOf('^') !== -1) {
                throw new Error('cold observable cannot have subscription offset "^"');
            }
            if (marbles.indexOf('!') !== -1) {
                throw new Error('cold observable cannot have unsubscription marker "!"');
            }
            var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);
            var cold = new ColdObservable(messages, this);
            this.coldObservables.push(cold);
            return cold;
        };
        TestScheduler.prototype.createHotObservable = function (marbles, values, error) {
            if (marbles.indexOf('!') !== -1) {
                throw new Error('hot observable cannot have unsubscription marker "!"');
            }
            var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);
            var subject = new HotObservable(messages, this);
            this.hotObservables.push(subject);
            return subject;
        };
        TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {
            var _this = this;
            var messages = [];
            observable.subscribe(function (value) {
                messages.push({ frame: _this.frame - outerFrame, notification: Notification.createNext(value) });
            }, function (err) {
                messages.push({ frame: _this.frame - outerFrame, notification: Notification.createError(err) });
            }, function () {
                messages.push({ frame: _this.frame - outerFrame, notification: Notification.createComplete() });
            });
            return messages;
        };
        TestScheduler.prototype.expectObservable = function (observable, subscriptionMarbles) {
            var _this = this;
            if (subscriptionMarbles === void 0) { subscriptionMarbles = null; }
            var actual = [];
            var flushTest = { actual: actual, ready: false };
            var subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);
            var subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ?
                0 : subscriptionParsed.subscribedFrame;
            var unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;
            var subscription;
            this.schedule(function () {
                subscription = observable.subscribe(function (x) {
                    var value = x;
                    if (x instanceof Observable) {
                        value = _this.materializeInnerObservable(value, _this.frame);
                    }
                    actual.push({ frame: _this.frame, notification: Notification.createNext(value) });
                }, function (err) {
                    actual.push({ frame: _this.frame, notification: Notification.createError(err) });
                }, function () {
                    actual.push({ frame: _this.frame, notification: Notification.createComplete() });
                });
            }, subscriptionFrame);
            if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
                this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);
            }
            this.flushTests.push(flushTest);
            var runMode = this.runMode;
            return {
                toBe: function (marbles, values, errorValue) {
                    flushTest.ready = true;
                    flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);
                }
            };
        };
        TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {
            var flushTest = { actual: actualSubscriptionLogs, ready: false };
            this.flushTests.push(flushTest);
            var runMode = this.runMode;
            return {
                toBe: function (marbles) {
                    var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;
                    flushTest.ready = true;
                    flushTest.expected = marblesArray.map(function (marbles) {
                        return TestScheduler.parseMarblesAsSubscriptions(marbles, runMode);
                    });
                }
            };
        };
        TestScheduler.prototype.flush = function () {
            var _this = this;
            var hotObservables = this.hotObservables;
            while (hotObservables.length > 0) {
                hotObservables.shift().setup();
            }
            _super.prototype.flush.call(this);
            this.flushTests = this.flushTests.filter(function (test) {
                if (test.ready) {
                    _this.assertDeepEqual(test.actual, test.expected);
                    return false;
                }
                return true;
            });
        };
        TestScheduler.parseMarblesAsSubscriptions = function (marbles, runMode) {
            var _this = this;
            if (runMode === void 0) { runMode = false; }
            if (typeof marbles !== 'string') {
                return new SubscriptionLog(Number.POSITIVE_INFINITY);
            }
            var len = marbles.length;
            var groupStart = -1;
            var subscriptionFrame = Number.POSITIVE_INFINITY;
            var unsubscriptionFrame = Number.POSITIVE_INFINITY;
            var frame = 0;
            var _loop_1 = function (i) {
                var nextFrame = frame;
                var advanceFrameBy = function (count) {
                    nextFrame += count * _this.frameTimeFactor;
                };
                var c = marbles[i];
                switch (c) {
                    case ' ':
                        if (!runMode) {
                            advanceFrameBy(1);
                        }
                        break;
                    case '-':
                        advanceFrameBy(1);
                        break;
                    case '(':
                        groupStart = frame;
                        advanceFrameBy(1);
                        break;
                    case ')':
                        groupStart = -1;
                        advanceFrameBy(1);
                        break;
                    case '^':
                        if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
                            throw new Error('found a second subscription point \'^\' in a ' +
                                'subscription marble diagram. There can only be one.');
                        }
                        subscriptionFrame = groupStart > -1 ? groupStart : frame;
                        advanceFrameBy(1);
                        break;
                    case '!':
                        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
                            throw new Error('found a second subscription point \'^\' in a ' +
                                'subscription marble diagram. There can only be one.');
                        }
                        unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
                        break;
                    default:
                        if (runMode && c.match(/^[0-9]$/)) {
                            if (i === 0 || marbles[i - 1] === ' ') {
                                var buffer = marbles.slice(i);
                                var match = buffer.match(/^([0-9]+(?:\.[0-9]+)?)(ms|s|m) /);
                                if (match) {
                                    i += match[0].length - 1;
                                    var duration = parseFloat(match[1]);
                                    var unit = match[2];
                                    var durationInMs = void 0;
                                    switch (unit) {
                                        case 'ms':
                                            durationInMs = duration;
                                            break;
                                        case 's':
                                            durationInMs = duration * 1000;
                                            break;
                                        case 'm':
                                            durationInMs = duration * 1000 * 60;
                                            break;
                                        default:
                                            break;
                                    }
                                    advanceFrameBy(durationInMs / this_1.frameTimeFactor);
                                    break;
                                }
                            }
                        }
                        throw new Error('there can only be \'^\' and \'!\' markers in a ' +
                            'subscription marble diagram. Found instead \'' + c + '\'.');
                }
                frame = nextFrame;
                out_i_1 = i;
            };
            var this_1 = this, out_i_1;
            for (var i = 0; i < len; i++) {
                _loop_1(i);
                i = out_i_1;
            }
            if (unsubscriptionFrame < 0) {
                return new SubscriptionLog(subscriptionFrame);
            }
            else {
                return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
            }
        };
        TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables, runMode) {
            var _this = this;
            if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }
            if (runMode === void 0) { runMode = false; }
            if (marbles.indexOf('!') !== -1) {
                throw new Error('conventional marble diagrams cannot have the ' +
                    'unsubscription marker "!"');
            }
            var len = marbles.length;
            var testMessages = [];
            var subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');
            var frame = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);
            var getValue = typeof values !== 'object' ?
                function (x) { return x; } :
                function (x) {
                    if (materializeInnerObservables && values[x] instanceof ColdObservable) {
                        return values[x].messages;
                    }
                    return values[x];
                };
            var groupStart = -1;
            var _loop_2 = function (i) {
                var nextFrame = frame;
                var advanceFrameBy = function (count) {
                    nextFrame += count * _this.frameTimeFactor;
                };
                var notification = void 0;
                var c = marbles[i];
                switch (c) {
                    case ' ':
                        if (!runMode) {
                            advanceFrameBy(1);
                        }
                        break;
                    case '-':
                        advanceFrameBy(1);
                        break;
                    case '(':
                        groupStart = frame;
                        advanceFrameBy(1);
                        break;
                    case ')':
                        groupStart = -1;
                        advanceFrameBy(1);
                        break;
                    case '|':
                        notification = Notification.createComplete();
                        advanceFrameBy(1);
                        break;
                    case '^':
                        advanceFrameBy(1);
                        break;
                    case '#':
                        notification = Notification.createError(errorValue || 'error');
                        advanceFrameBy(1);
                        break;
                    default:
                        if (runMode && c.match(/^[0-9]$/)) {
                            if (i === 0 || marbles[i - 1] === ' ') {
                                var buffer = marbles.slice(i);
                                var match = buffer.match(/^([0-9]+(?:\.[0-9]+)?)(ms|s|m) /);
                                if (match) {
                                    i += match[0].length - 1;
                                    var duration = parseFloat(match[1]);
                                    var unit = match[2];
                                    var durationInMs = void 0;
                                    switch (unit) {
                                        case 'ms':
                                            durationInMs = duration;
                                            break;
                                        case 's':
                                            durationInMs = duration * 1000;
                                            break;
                                        case 'm':
                                            durationInMs = duration * 1000 * 60;
                                            break;
                                        default:
                                            break;
                                    }
                                    advanceFrameBy(durationInMs / this_2.frameTimeFactor);
                                    break;
                                }
                            }
                        }
                        notification = Notification.createNext(getValue(c));
                        advanceFrameBy(1);
                        break;
                }
                if (notification) {
                    testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });
                }
                frame = nextFrame;
                out_i_2 = i;
            };
            var this_2 = this, out_i_2;
            for (var i = 0; i < len; i++) {
                _loop_2(i);
                i = out_i_2;
            }
            return testMessages;
        };
        TestScheduler.prototype.run = function (callback) {
            var prevFrameTimeFactor = TestScheduler.frameTimeFactor;
            var prevMaxFrames = this.maxFrames;
            TestScheduler.frameTimeFactor = 1;
            this.maxFrames = Number.POSITIVE_INFINITY;
            this.runMode = true;
            AsyncScheduler.delegate = this;
            var helpers = {
                cold: this.createColdObservable.bind(this),
                hot: this.createHotObservable.bind(this),
                flush: this.flush.bind(this),
                expectObservable: this.expectObservable.bind(this),
                expectSubscriptions: this.expectSubscriptions.bind(this),
            };
            try {
                var ret = callback(helpers);
                this.flush();
                return ret;
            }
            finally {
                TestScheduler.frameTimeFactor = prevFrameTimeFactor;
                this.maxFrames = prevMaxFrames;
                this.runMode = false;
                AsyncScheduler.delegate = undefined;
            }
        };
        return TestScheduler;
    }(VirtualTimeScheduler));



    var _testing = /*#__PURE__*/Object.freeze({
        TestScheduler: TestScheduler
    });

    var __window = typeof window !== 'undefined' && window;
    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
        self instanceof WorkerGlobalScope && self;
    var __global = typeof global !== 'undefined' && global;
    var _root = __window || __global || __self;
    (function () {
        if (!_root) {
            throw new Error('RxJS could not find any global context (window, self, global)');
        }
    })();

    function getCORSRequest() {
        if (_root.XMLHttpRequest) {
            return new _root.XMLHttpRequest();
        }
        else if (!!_root.XDomainRequest) {
            return new _root.XDomainRequest();
        }
        else {
            throw new Error('CORS is not supported by your browser');
        }
    }
    function getXMLHttpRequest() {
        if (_root.XMLHttpRequest) {
            return new _root.XMLHttpRequest();
        }
        else {
            var progId = void 0;
            try {
                var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
                for (var i = 0; i < 3; i++) {
                    try {
                        progId = progIds[i];
                        if (new _root.ActiveXObject(progId)) {
                            break;
                        }
                    }
                    catch (e) {
                    }
                }
                return new _root.ActiveXObject(progId);
            }
            catch (e) {
                throw new Error('XMLHttpRequest is not supported by your browser');
            }
        }
    }
    function ajaxGet(url, headers) {
        if (headers === void 0) { headers = null; }
        return new AjaxObservable({ method: 'GET', url: url, headers: headers });
    }
    function ajaxPost(url, body, headers) {
        return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
    }
    function ajaxDelete(url, headers) {
        return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
    }
    function ajaxPut(url, body, headers) {
        return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
    }
    function ajaxPatch(url, body, headers) {
        return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });
    }
    var mapResponse = map(function (x, index) { return x.response; });
    function ajaxGetJSON(url, headers) {
        return mapResponse(new AjaxObservable({
            method: 'GET',
            url: url,
            responseType: 'json',
            headers: headers
        }));
    }
    var AjaxObservable = (function (_super) {
        __extends(AjaxObservable, _super);
        function AjaxObservable(urlOrRequest) {
            var _this = _super.call(this) || this;
            var request = {
                async: true,
                createXHR: function () {
                    return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();
                },
                crossDomain: true,
                withCredentials: false,
                headers: {},
                method: 'GET',
                responseType: 'json',
                timeout: 0
            };
            if (typeof urlOrRequest === 'string') {
                request.url = urlOrRequest;
            }
            else {
                for (var prop in urlOrRequest) {
                    if (urlOrRequest.hasOwnProperty(prop)) {
                        request[prop] = urlOrRequest[prop];
                    }
                }
            }
            _this.request = request;
            return _this;
        }
        AjaxObservable.prototype._subscribe = function (subscriber) {
            return new AjaxSubscriber(subscriber, this.request);
        };
        AjaxObservable.create = (function () {
            var create = function (urlOrRequest) {
                return new AjaxObservable(urlOrRequest);
            };
            create.get = ajaxGet;
            create.post = ajaxPost;
            create.delete = ajaxDelete;
            create.put = ajaxPut;
            create.patch = ajaxPatch;
            create.getJSON = ajaxGetJSON;
            return create;
        })();
        return AjaxObservable;
    }(Observable));
    var AjaxSubscriber = (function (_super) {
        __extends(AjaxSubscriber, _super);
        function AjaxSubscriber(destination, request) {
            var _this = _super.call(this, destination) || this;
            _this.request = request;
            _this.done = false;
            var headers = request.headers = request.headers || {};
            if (!request.crossDomain && !_this.getHeader(headers, 'X-Requested-With')) {
                headers['X-Requested-With'] = 'XMLHttpRequest';
            }
            var contentTypeHeader = _this.getHeader(headers, 'Content-Type');
            if (!contentTypeHeader && !(_root.FormData && request.body instanceof _root.FormData) && typeof request.body !== 'undefined') {
                headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
            }
            request.body = _this.serializeBody(request.body, _this.getHeader(request.headers, 'Content-Type'));
            _this.send();
            return _this;
        }
        AjaxSubscriber.prototype.next = function (e) {
            this.done = true;
            var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
            var result;
            try {
                result = new AjaxResponse(e, xhr, request);
            }
            catch (err) {
                return destination.error(err);
            }
            destination.next(result);
        };
        AjaxSubscriber.prototype.send = function () {
            var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
            try {
                var xhr = this.xhr = request.createXHR();
                this.setupEvents(xhr, request);
                if (user) {
                    xhr.open(method, url, async, user, password);
                }
                else {
                    xhr.open(method, url, async);
                }
                if (async) {
                    xhr.timeout = request.timeout;
                    xhr.responseType = request.responseType;
                }
                if ('withCredentials' in xhr) {
                    xhr.withCredentials = !!request.withCredentials;
                }
                this.setHeaders(xhr, headers);
                if (body) {
                    xhr.send(body);
                }
                else {
                    xhr.send();
                }
            }
            catch (err) {
                this.error(err);
            }
        };
        AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
            if (!body || typeof body === 'string') {
                return body;
            }
            else if (_root.FormData && body instanceof _root.FormData) {
                return body;
            }
            if (contentType) {
                var splitIndex = contentType.indexOf(';');
                if (splitIndex !== -1) {
                    contentType = contentType.substring(0, splitIndex);
                }
            }
            switch (contentType) {
                case 'application/x-www-form-urlencoded':
                    return Object.keys(body).map(function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(body[key]); }).join('&');
                case 'application/json':
                    return JSON.stringify(body);
                default:
                    return body;
            }
        };
        AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
            for (var key in headers) {
                if (headers.hasOwnProperty(key)) {
                    xhr.setRequestHeader(key, headers[key]);
                }
            }
        };
        AjaxSubscriber.prototype.getHeader = function (headers, headerName) {
            for (var key in headers) {
                if (key.toLowerCase() === headerName.toLowerCase()) {
                    return headers[key];
                }
            }
            return undefined;
        };
        AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
            var progressSubscriber = request.progressSubscriber;
            function xhrTimeout(e) {
                var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
                if (progressSubscriber) {
                    progressSubscriber.error(e);
                }
                var error;
                try {
                    error = new AjaxTimeoutError(this, request);
                }
                catch (err) {
                    error = err;
                }
                subscriber.error(error);
            }
            xhr.ontimeout = xhrTimeout;
            xhrTimeout.request = request;
            xhrTimeout.subscriber = this;
            xhrTimeout.progressSubscriber = progressSubscriber;
            if (xhr.upload && 'withCredentials' in xhr) {
                if (progressSubscriber) {
                    var xhrProgress_1;
                    xhrProgress_1 = function (e) {
                        var progressSubscriber = xhrProgress_1.progressSubscriber;
                        progressSubscriber.next(e);
                    };
                    if (_root.XDomainRequest) {
                        xhr.onprogress = xhrProgress_1;
                    }
                    else {
                        xhr.upload.onprogress = xhrProgress_1;
                    }
                    xhrProgress_1.progressSubscriber = progressSubscriber;
                }
                var xhrError_1;
                xhrError_1 = function (e) {
                    var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
                    if (progressSubscriber) {
                        progressSubscriber.error(e);
                    }
                    var error;
                    try {
                        error = new AjaxError('ajax error', this, request);
                    }
                    catch (err) {
                        error = err;
                    }
                    subscriber.error(error);
                };
                xhr.onerror = xhrError_1;
                xhrError_1.request = request;
                xhrError_1.subscriber = this;
                xhrError_1.progressSubscriber = progressSubscriber;
            }
            function xhrReadyStateChange(e) {
                return;
            }
            xhr.onreadystatechange = xhrReadyStateChange;
            xhrReadyStateChange.subscriber = this;
            xhrReadyStateChange.progressSubscriber = progressSubscriber;
            xhrReadyStateChange.request = request;
            function xhrLoad(e) {
                var _a = xhrLoad, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
                if (this.readyState === 4) {
                    var status_1 = this.status === 1223 ? 204 : this.status;
                    var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);
                    if (status_1 === 0) {
                        status_1 = response ? 200 : 0;
                    }
                    if (status_1 < 400) {
                        if (progressSubscriber) {
                            progressSubscriber.complete();
                        }
                        subscriber.next(e);
                        subscriber.complete();
                    }
                    else {
                        if (progressSubscriber) {
                            progressSubscriber.error(e);
                        }
                        var error = void 0;
                        try {
                            error = new AjaxError('ajax error ' + status_1, this, request);
                        }
                        catch (err) {
                            error = err;
                        }
                        subscriber.error(error);
                    }
                }
            }
            xhr.onload = xhrLoad;
            xhrLoad.subscriber = this;
            xhrLoad.progressSubscriber = progressSubscriber;
            xhrLoad.request = request;
        };
        AjaxSubscriber.prototype.unsubscribe = function () {
            var _a = this, done = _a.done, xhr = _a.xhr;
            if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
                xhr.abort();
            }
            _super.prototype.unsubscribe.call(this);
        };
        return AjaxSubscriber;
    }(Subscriber));
    var AjaxResponse = (function () {
        function AjaxResponse(originalEvent, xhr, request) {
            this.originalEvent = originalEvent;
            this.xhr = xhr;
            this.request = request;
            this.status = xhr.status;
            this.responseType = xhr.responseType || request.responseType;
            this.response = parseXhrResponse(this.responseType, xhr);
        }
        return AjaxResponse;
    }());
    var AjaxErrorImpl = (function () {
        function AjaxErrorImpl(message, xhr, request) {
            Error.call(this);
            this.message = message;
            this.name = 'AjaxError';
            this.xhr = xhr;
            this.request = request;
            this.status = xhr.status;
            this.responseType = xhr.responseType || request.responseType;
            this.response = parseXhrResponse(this.responseType, xhr);
            return this;
        }
        AjaxErrorImpl.prototype = Object.create(Error.prototype);
        return AjaxErrorImpl;
    })();
    var AjaxError = AjaxErrorImpl;
    function parseJson(xhr) {
        if ('response' in xhr) {
            return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
        }
        else {
            return JSON.parse(xhr.responseText || 'null');
        }
    }
    function parseXhrResponse(responseType, xhr) {
        switch (responseType) {
            case 'json':
                return parseJson(xhr);
            case 'xml':
                return xhr.responseXML;
            case 'text':
            default:
                return ('response' in xhr) ? xhr.response : xhr.responseText;
        }
    }
    function AjaxTimeoutErrorImpl(xhr, request) {
        AjaxError.call(this, 'ajax timeout', xhr, request);
        this.name = 'AjaxTimeoutError';
        return this;
    }
    var AjaxTimeoutError = AjaxTimeoutErrorImpl;

    var ajax = (function () { return AjaxObservable.create; })();



    var _ajax = /*#__PURE__*/Object.freeze({
        ajax: ajax,
        AjaxResponse: AjaxResponse,
        AjaxError: AjaxError,
        AjaxTimeoutError: AjaxTimeoutError
    });

    var DEFAULT_WEBSOCKET_CONFIG = {
        url: '',
        deserializer: function (e) { return JSON.parse(e.data); },
        serializer: function (value) { return JSON.stringify(value); },
    };
    var WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';
    var WebSocketSubject = (function (_super) {
        __extends(WebSocketSubject, _super);
        function WebSocketSubject(urlConfigOrSource, destination) {
            var _this = _super.call(this) || this;
            if (urlConfigOrSource instanceof Observable) {
                _this.destination = destination;
                _this.source = urlConfigOrSource;
            }
            else {
                var config = _this._config = __assign({}, DEFAULT_WEBSOCKET_CONFIG);
                _this._output = new Subject();
                if (typeof urlConfigOrSource === 'string') {
                    config.url = urlConfigOrSource;
                }
                else {
                    for (var key in urlConfigOrSource) {
                        if (urlConfigOrSource.hasOwnProperty(key)) {
                            config[key] = urlConfigOrSource[key];
                        }
                    }
                }
                if (!config.WebSocketCtor && WebSocket) {
                    config.WebSocketCtor = WebSocket;
                }
                else if (!config.WebSocketCtor) {
                    throw new Error('no WebSocket constructor can be found');
                }
                _this.destination = new ReplaySubject();
            }
            return _this;
        }
        WebSocketSubject.prototype.lift = function (operator) {
            var sock = new WebSocketSubject(this._config, this.destination);
            sock.operator = operator;
            sock.source = this;
            return sock;
        };
        WebSocketSubject.prototype._resetState = function () {
            this._socket = null;
            if (!this.source) {
                this.destination = new ReplaySubject();
            }
            this._output = new Subject();
        };
        WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {
            var self = this;
            return new Observable(function (observer) {
                try {
                    self.next(subMsg());
                }
                catch (err) {
                    observer.error(err);
                }
                var subscription = self.subscribe(function (x) {
                    try {
                        if (messageFilter(x)) {
                            observer.next(x);
                        }
                    }
                    catch (err) {
                        observer.error(err);
                    }
                }, function (err) { return observer.error(err); }, function () { return observer.complete(); });
                return function () {
                    try {
                        self.next(unsubMsg());
                    }
                    catch (err) {
                        observer.error(err);
                    }
                    subscription.unsubscribe();
                };
            });
        };
        WebSocketSubject.prototype._connectSocket = function () {
            var _this = this;
            var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;
            var observer = this._output;
            var socket = null;
            try {
                socket = protocol ?
                    new WebSocketCtor(url, protocol) :
                    new WebSocketCtor(url);
                this._socket = socket;
                if (binaryType) {
                    this._socket.binaryType = binaryType;
                }
            }
            catch (e) {
                observer.error(e);
                return;
            }
            var subscription = new Subscription(function () {
                _this._socket = null;
                if (socket && socket.readyState === 1) {
                    socket.close();
                }
            });
            socket.onopen = function (e) {
                var _socket = _this._socket;
                if (!_socket) {
                    socket.close();
                    _this._resetState();
                    return;
                }
                var openObserver = _this._config.openObserver;
                if (openObserver) {
                    openObserver.next(e);
                }
                var queue = _this.destination;
                _this.destination = Subscriber.create(function (x) {
                    if (socket.readyState === 1) {
                        try {
                            var serializer = _this._config.serializer;
                            socket.send(serializer(x));
                        }
                        catch (e) {
                            _this.destination.error(e);
                        }
                    }
                }, function (e) {
                    var closingObserver = _this._config.closingObserver;
                    if (closingObserver) {
                        closingObserver.next(undefined);
                    }
                    if (e && e.code) {
                        socket.close(e.code, e.reason);
                    }
                    else {
                        observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));
                    }
                    _this._resetState();
                }, function () {
                    var closingObserver = _this._config.closingObserver;
                    if (closingObserver) {
                        closingObserver.next(undefined);
                    }
                    socket.close();
                    _this._resetState();
                });
                if (queue && queue instanceof ReplaySubject) {
                    subscription.add(queue.subscribe(_this.destination));
                }
            };
            socket.onerror = function (e) {
                _this._resetState();
                observer.error(e);
            };
            socket.onclose = function (e) {
                _this._resetState();
                var closeObserver = _this._config.closeObserver;
                if (closeObserver) {
                    closeObserver.next(e);
                }
                if (e.wasClean) {
                    observer.complete();
                }
                else {
                    observer.error(e);
                }
            };
            socket.onmessage = function (e) {
                try {
                    var deserializer = _this._config.deserializer;
                    observer.next(deserializer(e));
                }
                catch (err) {
                    observer.error(err);
                }
            };
        };
        WebSocketSubject.prototype._subscribe = function (subscriber) {
            var _this = this;
            var source = this.source;
            if (source) {
                return source.subscribe(subscriber);
            }
            if (!this._socket) {
                this._connectSocket();
            }
            this._output.subscribe(subscriber);
            subscriber.add(function () {
                var _socket = _this._socket;
                if (_this._output.observers.length === 0) {
                    if (_socket && _socket.readyState === 1) {
                        _socket.close();
                    }
                    _this._resetState();
                }
            });
            return subscriber;
        };
        WebSocketSubject.prototype.unsubscribe = function () {
            var _socket = this._socket;
            if (_socket && _socket.readyState === 1) {
                _socket.close();
            }
            this._resetState();
            _super.prototype.unsubscribe.call(this);
        };
        return WebSocketSubject;
    }(AnonymousSubject));

    function webSocket(urlConfigOrSource) {
        return new WebSocketSubject(urlConfigOrSource);
    }



    var _webSocket = /*#__PURE__*/Object.freeze({
        webSocket: webSocket,
        WebSocketSubject: WebSocketSubject
    });

    function fromFetch(input, initWithSelector) {
        if (initWithSelector === void 0) { initWithSelector = {}; }
        var selector = initWithSelector.selector, init = __rest(initWithSelector, ["selector"]);
        return new Observable(function (subscriber) {
            var controller = new AbortController();
            var signal = controller.signal;
            var abortable = true;
            var unsubscribed = false;
            var subscription = new Subscription();
            subscription.add(function () {
                unsubscribed = true;
                if (abortable) {
                    controller.abort();
                }
            });
            var perSubscriberInit;
            if (init) {
                if (init.signal) {
                    if (init.signal.aborted) {
                        controller.abort();
                    }
                    else {
                        var outerSignal_1 = init.signal;
                        var outerSignalHandler_1 = function () {
                            if (!signal.aborted) {
                                controller.abort();
                            }
                        };
                        outerSignal_1.addEventListener('abort', outerSignalHandler_1);
                        subscription.add(function () { return outerSignal_1.removeEventListener('abort', outerSignalHandler_1); });
                    }
                }
                perSubscriberInit = __assign({}, init, { signal: signal });
            }
            else {
                perSubscriberInit = { signal: signal };
            }
            fetch(input, perSubscriberInit).then(function (response) {
                if (selector) {
                    subscription.add(from(selector(response)).subscribe(function (value) { return subscriber.next(value); }, function (err) {
                        abortable = false;
                        if (!unsubscribed) {
                            subscriber.error(err);
                        }
                    }, function () {
                        abortable = false;
                        subscriber.complete();
                    }));
                }
                else {
                    abortable = false;
                    subscriber.next(response);
                    subscriber.complete();
                }
            }).catch(function (err) {
                abortable = false;
                if (!unsubscribed) {
                    subscriber.error(err);
                }
            });
            return subscription;
        });
    }



    var _fetch = /*#__PURE__*/Object.freeze({
        fromFetch: fromFetch
    });

    var operators = _operators;
    var testing = _testing;
    var ajax$1 = _ajax;
    var webSocket$1 = _webSocket;
    var fetch$1 = _fetch;

    exports.operators = operators;
    exports.testing = testing;
    exports.ajax = ajax$1;
    exports.webSocket = webSocket$1;
    exports.fetch = fetch$1;
    exports.Observable = Observable;
    exports.ConnectableObservable = ConnectableObservable;
    exports.GroupedObservable = GroupedObservable;
    exports.observable = observable;
    exports.Subject = Subject;
    exports.BehaviorSubject = BehaviorSubject;
    exports.ReplaySubject = ReplaySubject;
    exports.AsyncSubject = AsyncSubject;
    exports.asap = asap;
    exports.asapScheduler = asapScheduler;
    exports.async = async;
    exports.asyncScheduler = asyncScheduler;
    exports.queue = queue;
    exports.queueScheduler = queueScheduler;
    exports.animationFrame = animationFrame;
    exports.animationFrameScheduler = animationFrameScheduler;
    exports.VirtualTimeScheduler = VirtualTimeScheduler;
    exports.VirtualAction = VirtualAction;
    exports.Scheduler = Scheduler;
    exports.Subscription = Subscription;
    exports.Subscriber = Subscriber;
    exports.Notification = Notification;
    exports.pipe = pipe;
    exports.noop = noop;
    exports.identity = identity;
    exports.isObservable = isObservable;
    exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
    exports.EmptyError = EmptyError;
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    exports.UnsubscriptionError = UnsubscriptionError;
    exports.TimeoutError = TimeoutError;
    exports.bindCallback = bindCallback;
    exports.bindNodeCallback = bindNodeCallback;
    exports.combineLatest = combineLatest;
    exports.concat = concat;
    exports.defer = defer;
    exports.empty = empty$1;
    exports.forkJoin = forkJoin;
    exports.from = from;
    exports.fromEvent = fromEvent;
    exports.fromEventPattern = fromEventPattern;
    exports.generate = generate;
    exports.iif = iif;
    exports.interval = interval;
    exports.merge = merge;
    exports.never = never;
    exports.of = of;
    exports.onErrorResumeNext = onErrorResumeNext;
    exports.pairs = pairs;
    exports.partition = partition;
    exports.race = race;
    exports.range = range;
    exports.throwError = throwError;
    exports.timer = timer;
    exports.using = using;
    exports.zip = zip;
    exports.scheduled = scheduled;
    exports.EMPTY = EMPTY;
    exports.NEVER = NEVER;
    exports.config = config;

    Object.defineProperty(exports, '__esModule', { value: true });

})));




/**
 * @license rxcomp v1.0.0-beta.21
 * (c) 2022 Luca Zampetti <lzampetti@gmail.com>
 * License: MIT
 */

var rxcomp=(function(exports,rxjs,operators){'use strict';function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}var CONTEXTS = {};
var NODES = {};

var Factory = function () {
  var _proto = Factory.prototype;

  _proto.onInit = function onInit() {};

  _proto.onChanges = function onChanges(changes) {};

  _proto.onView = function onView() {};

  _proto.onDestroy = function onDestroy() {};

  _proto.pushChanges = function pushChanges() {
    var _getContext = getContext(this),
        module = _getContext.module;

    if (module.instances) {
      this.changes$.next(this);
      this.onView();
    }
  };

  _proto.onParentDidChange = function onParentDidChange(changes) {
    var _getContext2 = getContext(this),
        module = _getContext2.module;

    module.resolveInputsOutputs(this, changes);
    this.onChanges(changes);
    this.pushChanges();
  };

  function Factory() {
    this.rxcompId = -1;
    this.unsubscribe$ = new rxjs.Subject();
    this.changes$ = new rxjs.ReplaySubject(1);
  }

  Factory.getInputsTokens = function getInputsTokens(instance, node, module) {
    var _this$meta$inputs;

    var inputs = {};
    (_this$meta$inputs = this.meta.inputs) == null ? void 0 : _this$meta$inputs.forEach(function (key) {
      var expression = module.resolveAttribute(key, node);

      if (expression) {
        inputs[key] = expression;
      }
    });
    return inputs;
  };

  return Factory;
}();

Factory.meta = void 0;
function getContext(instance) {
  return CONTEXTS[instance.rxcompId];
}var Directive = function (_Factory) {
  _inheritsLoose(Directive, _Factory);

  function Directive() {
    return _Factory.apply(this, arguments) || this;
  }

  return Directive;
}(Factory);var ClassDirective = function (_Directive) {
  _inheritsLoose(ClassDirective, _Directive);

  function ClassDirective() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Directive.call.apply(_Directive, [this].concat(args)) || this;
    _this.class = '';
    _this.keys = [];
    return _this;
  }

  var _proto = ClassDirective.prototype;

  _proto.onInit = function onInit() {
    var _this2 = this;

    var _getContext = getContext(this),
        node = _getContext.node;

    Array.prototype.slice.call(node.classList).forEach(function (value) {
      _this2.keys.push(value);
    });
  };

  _proto.onChanges = function onChanges() {
    var _getContext2 = getContext(this),
        node = _getContext2.node;

    var keys = [];
    var object = this.class;

    if (typeof object === 'object') {
      for (var key in object) {
        if (object[key]) {
          keys.push(key);
        }
      }
    } else if (typeof object === 'string') {
      keys = object.split(/\s+/);
    }

    keys = keys.concat(this.keys);
    node.setAttribute('class', keys.join(' '));
  };

  return ClassDirective;
}(Directive);

ClassDirective.meta = {
  selector: "[[class]]",
  inputs: ['class']
};var ModuleError = function (_Error) {
  _inheritsLoose(ModuleError, _Error);

  function ModuleError() {
    return _Error.apply(this, arguments) || this;
  }

  return ModuleError;
}(_wrapNativeSuper(Error));
var ExpressionError = function (_Error2) {
  _inheritsLoose(ExpressionError, _Error2);

  function ExpressionError(error, module, instance, expression, params) {
    var _this;

    var message = "ExpressionError in " + instance.constructor.name + " \"" + expression + "\"\n\t\t" + error.message;
    _this = _Error2.call(this, message) || this;
    _this.module = void 0;
    _this.instance = void 0;
    _this.expression = void 0;
    _this.params = void 0;
    _this.template = void 0;
    _this.name = error.name;
    _this.module = module;
    _this.instance = instance;
    _this.expression = expression;
    _this.params = params;

    var _getContext = getContext(instance),
        node = _getContext.node;

    _this.template = node.outerHTML;
    return _this;
  }

  return ExpressionError;
}(_wrapNativeSuper(Error));
var ErrorInterceptorHandler = function () {
  function ErrorInterceptorHandler(next, interceptor) {
    this.next = void 0;
    this.interceptor = void 0;
    this.next = next;
    this.interceptor = interceptor;
  }

  var _proto = ErrorInterceptorHandler.prototype;

  _proto.handle = function handle(error) {
    return this.interceptor.intercept(error, this.next);
  };

  return ErrorInterceptorHandler;
}();
var DefaultErrorHandler = function () {
  function DefaultErrorHandler() {}

  var _proto2 = DefaultErrorHandler.prototype;

  _proto2.handle = function handle(error) {
    return rxjs.of(error);
  };

  return DefaultErrorHandler;
}();
var ErrorInterceptors = [];
var nextError$ = new rxjs.ReplaySubject(1);
var errors$ = nextError$.pipe(operators.switchMap(function (error) {
  var chain = ErrorInterceptors.reduceRight(function (next, interceptor) {
    return new ErrorInterceptorHandler(next, interceptor);
  }, new DefaultErrorHandler());
  return chain.handle(error);
}), operators.tap(function (error) {
  if (error) {
    console.error(error);
  }
}));var EVENTS = ['mousedown', 'mouseup', 'mousemove', 'click', 'dblclick', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave', 'contextmenu', 'touchstart', 'touchmove', 'touchend', 'keydown', 'keyup', 'input', 'change', 'loaded'];

var EventDirective = function (_Directive) {
  _inheritsLoose(EventDirective, _Directive);

  function EventDirective() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Directive.call.apply(_Directive, [this].concat(args)) || this;
    _this.event = '';
    return _this;
  }

  var _proto = EventDirective.prototype;

  _proto.onInit = function onInit() {
    var _getContext = getContext(this),
        module = _getContext.module,
        node = _getContext.node,
        parentInstance = _getContext.parentInstance,
        selector = _getContext.selector;

    var event = this.event = selector.replace(/\[|\]|\(|\)/g, '');
    var event$ = rxjs.fromEvent(node, event).pipe(operators.shareReplay(1));
    var expression = node.getAttribute("(" + event + ")");

    if (expression) {
      var outputFunction = module.makeFunction(expression, ['$event']);
      event$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
        module.resolve(outputFunction, parentInstance, event);
      });
    } else {
      parentInstance[event + "$"] = event$;
    }
  };

  return EventDirective;
}(Directive);

EventDirective.meta = {
  selector: "[(" + EVENTS.join(')],[(') + ")]"
};var Structure = function (_Factory) {
  _inheritsLoose(Structure, _Factory);

  function Structure() {
    return _Factory.apply(this, arguments) || this;
  }

  return Structure;
}(Factory);var Component = function (_Factory) {
  _inheritsLoose(Component, _Factory);

  function Component() {
    return _Factory.apply(this, arguments) || this;
  }

  var _proto = Component.prototype;

  _proto.pushChanges = function pushChanges() {
    var _getContext = getContext(this),
        module = _getContext.module,
        node = _getContext.node;

    if (module.instances) {
      this.changes$.next(this);
      module.parse(node, this);
      this.onView();
    }
  };

  return Component;
}(Factory);var RESERVED_PROPERTIES = ['constructor', 'rxcompId', 'onInit', 'onChanges', 'onDestroy', 'pushChanges', 'changes$', 'unsubscribe$'];

var Context = function (_Component) {
  _inheritsLoose(Context, _Component);

  function Context(parentInstance, descriptors) {
    var _this;

    if (descriptors === void 0) {
      descriptors = {};
    }

    _this = _Component.call(this) || this;
    descriptors = Context.mergeDescriptors(parentInstance, parentInstance, descriptors);
    descriptors = Context.mergeDescriptors(Object.getPrototypeOf(parentInstance), parentInstance, descriptors);
    Object.defineProperties(_assertThisInitialized(_this), descriptors);
    return _this;
  }

  var _proto = Context.prototype;

  _proto.pushChanges = function pushChanges() {
    var _this2 = this;

    var context = getContext(this);

    if (!context.keys) {
      context.keys = Object.keys(context.parentInstance).filter(function (key) {
        return RESERVED_PROPERTIES.indexOf(key) === -1;
      });
    }

    if (context.module.instances) {
      context.keys.forEach(function (key) {
        _this2[key] = context.parentInstance[key];
      });
    }

    _Component.prototype.pushChanges.call(this);
  };

  _proto.onParentDidChange = function onParentDidChange(changes) {
    this.onChanges(changes);
    this.pushChanges();
  };

  Context.mergeDescriptors = function mergeDescriptors(source, instance, descriptors) {
    if (descriptors === void 0) {
      descriptors = {};
    }

    var properties = Object.getOwnPropertyNames(source);

    var _loop = function _loop() {
      var key = properties.shift();

      if (RESERVED_PROPERTIES.indexOf(key) === -1 && !descriptors.hasOwnProperty(key)) {
        var descriptor = Object.getOwnPropertyDescriptor(source, key);

        if (typeof descriptor.value == 'function') {
          descriptor.value = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return instance[key].apply(instance, args);
          };
        }

        descriptors[key] = descriptor;
      }
    };

    while (properties.length) {
      _loop();
    }

    return descriptors;
  };

  return Context;
}(Component);var ForItem = function (_Context) {
  _inheritsLoose(ForItem, _Context);

  function ForItem(key, $key, value, $value, index, count, parentInstance) {
    var _this;

    _this = _Context.call(this, parentInstance) || this;
    _this.index = void 0;
    _this.count = void 0;
    _this[key] = $key;
    _this[value] = $value;
    _this.index = index;
    _this.count = count;
    return _this;
  }

  _createClass(ForItem, [{
    key: "first",
    get: function get() {
      return this.index === 0;
    }
  }, {
    key: "last",
    get: function get() {
      return this.index === this.count - 1;
    }
  }, {
    key: "even",
    get: function get() {
      return this.index % 2 === 0;
    }
  }, {
    key: "odd",
    get: function get() {
      return !this.even;
    }
  }]);

  return ForItem;
}(Context);var ForStructure = function (_Structure) {
  _inheritsLoose(ForStructure, _Structure);

  function ForStructure() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Structure.call.apply(_Structure, [this].concat(args)) || this;
    _this.instances = [];
    _this.forbegin = void 0;
    _this.forend = void 0;
    _this.tokens = void 0;
    return _this;
  }

  var _proto = ForStructure.prototype;

  _proto.onInit = function onInit() {
    var _getContext = getContext(this),
        node = _getContext.node;

    var forbegin = this.forbegin = document.createComment("*for begin");
    forbegin.rxcompId = node.rxcompId;
    node.parentNode.replaceChild(forbegin, node);
    var forend = this.forend = document.createComment("*for end");
    forbegin.parentNode.insertBefore(forend, forbegin.nextSibling);
    node.removeAttribute('*for');
  };

  _proto.onChanges = function onChanges() {
    var context = getContext(this);
    var module = context.module;
    var node = context.node;
    var tokens = this.tokens;
    var result = this.for || [];
    var isArray = Array.isArray(result);
    var array = isArray ? result : Object.keys(result);
    var total = array.length;
    var previous = this.instances.length;

    for (var i = 0; i < Math.max(previous, total); i++) {
      if (i < total) {
        var key = isArray ? i : array[i];
        var value = isArray ? array[key] : result[key];

        if (i < previous) {
          var instance = this.instances[i];
          instance[tokens.key] = key;
          instance[tokens.value] = value;
        } else {
          var clonedNode = node.cloneNode(true);
          delete clonedNode.rxcompId;
          this.forend.parentNode.insertBefore(clonedNode, this.forend);
          var args = [tokens.key, key, tokens.value, value, i, total, context.parentInstance];
          var skipSubscription = true;

          var _instance = module.makeInstance(clonedNode, ForItem, context.selector, context.parentInstance, args, undefined, skipSubscription);

          if (_instance) {
            module.compile(clonedNode, _instance);
            module.makeInstanceSubscription(_instance, context.parentInstance);
            this.instances.push(_instance);
          }
        }
      } else {
        var _instance2 = this.instances[i];

        var _getContext2 = getContext(_instance2),
            _node = _getContext2.node;

        _node.parentNode.removeChild(_node);

        module.remove(_node);
      }
    }

    this.instances.length = array.length;
  };

  ForStructure.getInputsTokens = function getInputsTokens(instance, node, module) {
    var inputs = {};
    var expression = node.getAttribute('*for');

    if (expression) {
      var tokens = ForStructure.getForExpressionTokens(expression);
      instance.tokens = tokens;
      inputs.for = tokens.iterable;
    }

    return inputs;
  };

  ForStructure.getForExpressionTokens = function getForExpressionTokens(expression) {
    if (expression === null) {
      throw new Error('invalid for');
    }

    if (expression.trim().indexOf('let ') === -1 || expression.trim().indexOf(' of ') === -1) {
      throw new Error('invalid for');
    }

    var expressions = expression.split(';').map(function (x) {
      return x.trim();
    }).filter(function (x) {
      return x !== '';
    });
    var forExpressions = expressions[0].split(' of ').map(function (x) {
      return x.trim();
    });
    var value = forExpressions[0].replace(/\s*let\s*/, '');
    var iterable = forExpressions[1];
    var key = 'index';
    var keyValueMatches = value.match(/\[(.+)\s*,\s*(.+)\]/);

    if (keyValueMatches) {
      key = keyValueMatches[1];
      value = keyValueMatches[2];
    }

    if (expressions.length > 1) {
      var indexExpressions = expressions[1].split(/\s*let\s*|\s*=\s*index/).map(function (x) {
        return x.trim();
      });

      if (indexExpressions.length === 3) {
        key = indexExpressions[1];
      }
    }

    return {
      key: key,
      value: value,
      iterable: iterable
    };
  };

  return ForStructure;
}(Structure);

ForStructure.meta = {
  selector: '[*for]',
  inputs: ['for']
};var HrefTargetDirective = function (_Directive) {
  _inheritsLoose(HrefTargetDirective, _Directive);

  function HrefTargetDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  _createClass(HrefTargetDirective, [{
    key: "target",
    get: function get() {
      return this.target_;
    },
    set: function set(target) {
      if (this.target_ !== target) {
        this.target_ = target;

        var _getContext = getContext(this),
            node = _getContext.node;

        target ? node.setAttribute('target', target) : node.removeAttribute('target');
      }
    }
  }]);

  return HrefTargetDirective;
}(Directive);

HrefTargetDirective.meta = {
  selector: '[[target]]',
  inputs: ['target']
};var HrefDirective = function (_Directive) {
  _inheritsLoose(HrefDirective, _Directive);

  function HrefDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  _createClass(HrefDirective, [{
    key: "href",
    get: function get() {
      return this.href_;
    },
    set: function set(href) {
      if (this.href_ !== href) {
        this.href_ = href;

        var _getContext = getContext(this),
            node = _getContext.node;

        href ? node.setAttribute('href', href) : node.removeAttribute('href');
      }
    }
  }]);

  return HrefDirective;
}(Directive);

HrefDirective.meta = {
  selector: '[[href]]',
  inputs: ['href']
};var IfStructure = function (_Structure) {
  _inheritsLoose(IfStructure, _Structure);

  function IfStructure() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Structure.call.apply(_Structure, [this].concat(args)) || this;
    _this.ifbegin = void 0;
    _this.ifend = void 0;
    _this.clonedNode = void 0;
    _this.element = void 0;
    return _this;
  }

  var _proto = IfStructure.prototype;

  _proto.onInit = function onInit() {
    var _getContext = getContext(this),
        node = _getContext.node;

    var ifbegin = this.ifbegin = document.createComment("*if begin");
    ifbegin.rxcompId = node.rxcompId;
    node.parentNode.replaceChild(ifbegin, node);
    var ifend = this.ifend = document.createComment("*if end");
    ifbegin.parentNode.insertBefore(ifend, ifbegin.nextSibling);
    var clonedNode = node.cloneNode(true);
    clonedNode.removeAttribute('*if');
    this.clonedNode = clonedNode;
    this.element = clonedNode.cloneNode(true);
  };

  _proto.onChanges = function onChanges() {
    var _getContext2 = getContext(this),
        module = _getContext2.module;

    var element = this.element;

    if (Boolean(this.if)) {
      if (!element.parentNode) {
        var ifend = this.ifend;
        ifend.parentNode.insertBefore(element, ifend);
        module.compile(element);
      }
    } else {
      if (element.parentNode) {
        module.remove(element, this);
        element.parentNode.removeChild(element);
        this.element = this.clonedNode.cloneNode(true);
      }
    }
  };

  return IfStructure;
}(Structure);

IfStructure.meta = {
  selector: '[*if]',
  inputs: ['if']
};var InnerHtmlDirective = function (_Directive) {
  _inheritsLoose(InnerHtmlDirective, _Directive);

  function InnerHtmlDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  _createClass(InnerHtmlDirective, [{
    key: "innerHTML",
    get: function get() {
      return this.innerHTML_;
    },
    set: function set(innerHTML) {
      if (this.innerHTML_ !== innerHTML) {
        this.innerHTML_ = innerHTML;

        var _getContext = getContext(this),
            node = _getContext.node;

        node.innerHTML = innerHTML == undefined ? '' : innerHTML;
      }
    }
  }]);

  return InnerHtmlDirective;
}(Directive);

InnerHtmlDirective.meta = {
  selector: "[innerHTML]",
  inputs: ['innerHTML']
};var JsonComponent = function (_Component) {
  _inheritsLoose(JsonComponent, _Component);

  function JsonComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.active = false;
    return _this;
  }

  var _proto = JsonComponent.prototype;

  _proto.onToggle = function onToggle() {
    this.active = !this.active;
    this.pushChanges();
  };

  return JsonComponent;
}(Component);

JsonComponent.meta = {
  selector: 'json-component',
  inputs: ['item'],
  template: "\n\t\t<div class=\"rxc-block\">\n\t\t\t<div class=\"rxc-head\">\n\t\t\t\t<span class=\"rxc-head__title\" (click)=\"onToggle()\">\n\t\t\t\t\t<span *if=\"!active\">+ json </span>\n\t\t\t\t\t<span *if=\"active\">- json </span>\n\t\t\t\t\t<span [innerHTML]=\"item\"></span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<ul class=\"rxc-list\" *if=\"active\">\n\t\t\t\t<li class=\"rxc-list__item\">\n\t\t\t\t\t<span class=\"rxc-list__value\" [innerHTML]=\"item | json\"></span>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>"
};var Pipe = function () {
  function Pipe() {}

  Pipe.transform = function transform(value) {
    return value;
  };

  return Pipe;
}();

Pipe.meta = void 0;var ORDER = [Structure, Component, Directive];

var Platform = function () {
  function Platform() {}

  Platform.bootstrap = function bootstrap(moduleFactory) {
    if (!moduleFactory) {
      throw new ModuleError('missing moduleFactory');
    }

    if (!moduleFactory.meta) {
      throw new ModuleError('missing moduleFactory meta');
    }

    if (!moduleFactory.meta.bootstrap) {
      throw new ModuleError('missing bootstrap');
    }

    if (!moduleFactory.meta.bootstrap.meta) {
      throw new ModuleError('missing bootstrap meta');
    }

    if (!moduleFactory.meta.bootstrap.meta.selector) {
      throw new ModuleError('missing bootstrap meta selector');
    }

    var meta = this.resolveMeta(moduleFactory);
    var module = new moduleFactory();
    module.meta = meta;
    meta.imports.forEach(function (moduleFactory) {
      moduleFactory.prototype.onInit.call(module);
    });
    return module;
  };

  Platform.querySelector = function querySelector(selector) {
    return document.querySelector(selector);
  };

  Platform.resolveMeta = function resolveMeta(moduleFactory) {
    var meta = this.resolveImportedMeta(moduleFactory);
    var bootstrap = moduleFactory.meta.bootstrap;
    var node = this.querySelector(bootstrap.meta.selector);

    if (!node) {
      throw new ModuleError("missing node " + bootstrap.meta.selector);
    }

    var nodeInnerHTML = node.innerHTML;
    var pipes = this.resolvePipes(meta);
    var factories = this.resolveFactories(meta);
    this.sortFactories(factories);
    factories.unshift(bootstrap);
    var selectors = this.unwrapSelectors(factories);
    return {
      factories: factories,
      pipes: pipes,
      selectors: selectors,
      bootstrap: bootstrap,
      node: node,
      nodeInnerHTML: nodeInnerHTML,
      imports: moduleFactory.meta.imports || []
    };
  };

  Platform.resolveImportedMeta = function resolveImportedMeta(moduleFactory) {
    var _this = this;

    var meta = Object.assign({
      imports: [],
      declarations: [],
      pipes: [],
      exports: []
    }, moduleFactory.meta);
    meta.imports = (moduleFactory.meta.imports || []).map(function (moduleFactory) {
      return _this.resolveImportedMeta(moduleFactory);
    });
    return meta;
  };

  Platform.resolvePipes = function resolvePipes(meta, exported) {
    var _this2 = this;

    var importedPipes = meta.imports.map(function (importMeta) {
      return _this2.resolvePipes(importMeta, true);
    });
    var pipes = {};
    var pipeList = (exported ? meta.exports : meta.declarations).filter(function (x) {
      return x.prototype instanceof Pipe;
    });
    pipeList.forEach(function (pipeFactory) {
      return pipes[pipeFactory.meta.name] = pipeFactory;
    });
    return Object.assign.apply(Object, [{}].concat(importedPipes, [pipes]));
  };

  Platform.resolveFactories = function resolveFactories(meta, exported) {
    var _this3 = this,
        _Array$prototype$conc;

    var importedFactories = meta.imports.map(function (importMeta) {
      return _this3.resolveFactories(importMeta, true);
    });
    var factoryList = (exported ? meta.exports : meta.declarations).filter(function (x) {
      return x.prototype instanceof Factory;
    });
    return (_Array$prototype$conc = Array.prototype.concat).call.apply(_Array$prototype$conc, [factoryList].concat(importedFactories));
  };

  Platform.sortFactories = function sortFactories(factories) {
    factories.sort(function (a, b) {
      var ai = ORDER.reduce(function (p, c, i) {
        return a.prototype instanceof c ? i : p;
      }, -1);
      var bi = ORDER.reduce(function (p, c, i) {
        return b.prototype instanceof c ? i : p;
      }, -1);
      var o = ai - bi;

      if (o === 0) {
        return (a.meta.hosts ? 1 : 0) - (b.meta.hosts ? 1 : 0);
      }

      return o;
    });
  };

  Platform.getExpressions = function getExpressions(selector) {
    var matchers = [];
    selector.replace(/\.([\w\-\_]+)|\[(.+?\]*)(\=)(.*?)\]|\[(.+?\]*)\]|([\w\-\_]+)/g, function (value, c1, a2, u3, v4, a5, e6) {
      if (c1) {
        matchers.push(function (node) {
          return node.classList.contains(c1);
        });
      }

      if (a2) {
        matchers.push(function (node) {
          return node.hasAttribute(a2) && node.getAttribute(a2) === v4 || node.hasAttribute("[" + a2 + "]") && node.getAttribute("[" + a2 + "]") === v4;
        });
      }

      if (a5) {
        matchers.push(function (node) {
          return node.hasAttribute(a5) || node.hasAttribute("[" + a5 + "]");
        });
      }

      if (e6) {
        matchers.push(function (node) {
          return node.nodeName.toLowerCase() === e6.toLowerCase();
        });
      }

      return '';
    });
    return matchers;
  };

  Platform.unwrapSelectors = function unwrapSelectors(factories) {
    var _this4 = this;

    var selectors = [];
    factories.forEach(function (factory) {
      if (factory.meta && factory.meta.selector) {
        factory.meta.selector.split(',').forEach(function (selector) {
          selector = selector.trim();
          var excludes = [];
          var matchSelector = selector.replace(/\:not\((.+?)\)/g, function (value, unmatchSelector) {
            excludes = _this4.getExpressions(unmatchSelector);
            return '';
          });

          var includes = _this4.getExpressions(matchSelector);

          selectors.push(function (node) {
            var included = includes.reduce(function (p, match) {
              return p && match(node);
            }, true);
            var excluded = excludes.reduce(function (p, match) {
              return p || match(node);
            }, false);

            if (included && !excluded) {
              return {
                node: node,
                factory: factory,
                selector: selector
              };
            } else {
              return false;
            }
          });
        });
      }
    });
    return selectors;
  };

  return Platform;
}();
var PLATFORM_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';
var PLATFORM_JS_DOM = typeof window !== 'undefined' && window.name === 'nodejs' || typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Node.js') !== -1 || typeof navigator !== 'undefined' && navigator.userAgent.indexOf('jsdom') !== -1;
var PLATFORM_NODE = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
var PLATFORM_WEB_WORKER = typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope';
var isPlatformServer = PLATFORM_NODE;
var isPlatformBrowser = !PLATFORM_NODE && PLATFORM_BROWSER;
var isPlatformWorker = PLATFORM_WEB_WORKER;var Serializer = function () {
  function Serializer() {}

  Serializer.encode = function encode(value, encoders) {
    if (encoders === void 0) {
      encoders = [_encodeJson];
    }

    return encoders.reduce(function (p, c) {
      return c(p);
    }, value);
  };

  Serializer.decode = function decode(value, decoders) {
    if (decoders === void 0) {
      decoders = [_decodeJson];
    }

    return decoders.reduce(function (p, c) {
      return c(p);
    }, value);
  };

  Serializer.encodeJson = function encodeJson(value) {
    return this.encode(value, [_encodeJson]);
  };

  Serializer.decodeJson = function decodeJson(value) {
    return this.decode(value, [_decodeJson]);
  };

  Serializer.encodeBase64 = function encodeBase64(value) {
    return this.encode(value, [_encodeJson, _encodeBase]);
  };

  Serializer.decodeBase64 = function decodeBase64(value) {
    return this.decode(value, [_decodeBase, _decodeJson]);
  };

  return Serializer;
}();

function _encodeJson(value, circularRef, space) {
  var decoded;

  try {
    var pool = [];
    var json = JSON.stringify(value, function (key, value) {
      if (typeof value === 'object' && value != null) {
        if (pool.indexOf(value) !== -1) {
          return circularRef;
        }

        pool.push(value);
      }

      return value;
    }, space);
    decoded = json;
  } catch (error) {}

  return decoded;
}
function encodeJsonWithOptions(circularRef, space) {
  return function (value) {
    return _encodeJson(value, circularRef, space);
  };
}

function _decodeJson(value) {
  var decoded;

  if (value) {
    try {
      decoded = JSON.parse(value);
    } catch (error) {}
  }

  return decoded;
}

function _encodeBase(value) {
  var encoded;

  try {
    encoded = isPlatformBrowser ? btoa(value) : Buffer.from(value).toString('base64');
  } catch (error) {
    encoded = value;
  }

  return encoded;
}

function _decodeBase(value) {
  var decoded;

  try {
    decoded = isPlatformBrowser ? atob(value) : Buffer.from(value, 'base64').toString();
  } catch (error) {
    decoded = value;
  }

  return decoded;
}var JsonPipe = function (_Pipe) {
  _inheritsLoose(JsonPipe, _Pipe);

  function JsonPipe() {
    return _Pipe.apply(this, arguments) || this;
  }

  JsonPipe.transform = function transform(value) {
    return Serializer.encode(value, [encodeJsonWithOptions('#ref', 2)]);
  };

  return JsonPipe;
}(Pipe);

JsonPipe.meta = {
  name: 'json'
};var WINDOW = typeof self === 'object' && self.self === self && self || typeof global === 'object' && global.global === global && global || undefined;var ID = 0;

var Module = function () {
  function Module() {
    this.meta = void 0;
    this.instances = void 0;
    this.unsubscribe$ = new rxjs.Subject();
  }

  var _proto = Module.prototype;

  _proto.onInit = function onInit() {};

  _proto.compile = function compile(node, parentInstance) {
    var _this = this;

    var componentNode;
    var instances = Module.querySelectorsAll(node, this.meta.selectors, []).map(function (match) {
      if (componentNode && componentNode !== match.node) {
        parentInstance = undefined;
      }

      var instance = _this.makeInstance(match.node, match.factory, match.selector, parentInstance);

      if (match.factory.prototype instanceof Component) {
        componentNode = match.node;
      }

      return instance;
    }).filter(function (x) {
      return x !== undefined;
    });
    return instances;
  };

  _proto.makeInstance = function makeInstance(node, factory, selector, parentInstance, args, inject, skipSubscription) {
    if (skipSubscription === void 0) {
      skipSubscription = false;
    }

    if (parentInstance || node.parentNode) {
      var meta = factory.meta;
      parentInstance = parentInstance || this.getParentInstance(node.parentNode);

      if (!parentInstance) {
        return undefined;
      }

      var instance = _construct(factory, args || []);

      if (inject) {
        Object.keys(inject).forEach(function (key) {
          Object.defineProperty(instance, key, {
            value: inject[key],
            configurable: false,
            enumerable: false,
            writable: true
          });
        });
      }

      var context = Module.makeContext(this, instance, parentInstance, node, factory, selector);

      if (!(instance instanceof Context)) {
        this.makeHosts(meta, instance, node);
        context.inputs = this.makeInputs(meta, instance, node, factory);
        context.outputs = this.makeOutputs(meta, instance);
        this.resolveInputsOutputs(instance, parentInstance);
      }

      instance.onInit();

      if (!skipSubscription) {
        this.makeInstanceSubscription(instance, parentInstance);
      }

      return instance;
    } else {
      return undefined;
    }
  };

  _proto.makeInstanceSubscription = function makeInstanceSubscription(instance, parentInstance) {
    if (parentInstance instanceof Factory) {
      parentInstance.changes$.pipe(operators.takeUntil(instance.unsubscribe$)).subscribe(function (changes) {
        instance.onParentDidChange(changes);
      });
    }
  };

  _proto.makeFunction = function makeFunction(expression, params) {
    if (params === void 0) {
      params = ['$instance'];
    }

    expression = Module.parseExpression(expression);
    var expressionFunction = "with(this) {\n\treturn (function (" + params.join(',') + ", $$module) {\n\t\ttry {\n\t\t\tconst $$pipes = $$module.meta.pipes;\n\t\t\treturn " + expression + ";\n\t\t} catch(error) {\n\t\t\t$$module.nextError(error, this, " + JSON.stringify(expression) + ", arguments);\n\t\t}\n\t}.bind(this)).apply(this, arguments);\n}";
    var callback = new Function(expressionFunction);
    callback.expression = expression;
    return callback;
  };

  _proto.resolveInputsOutputs = function resolveInputsOutputs(instance, changes) {
    var context = getContext(instance);
    var parentInstance = context.parentInstance;
    var inputs = context.inputs;

    for (var key in inputs) {
      var inputFunction = inputs[key];
      var value = this.resolve(inputFunction, parentInstance, instance);
      instance[key] = value;
    }
  };

  _proto.resolveAttribute = function resolveAttribute(key, node) {
    var expression = null;

    if (node.hasAttribute("[" + key + "]")) {
      expression = node.getAttribute("[" + key + "]");
    } else if (node.hasAttribute("*" + key)) {
      expression = node.getAttribute("*" + key);
    } else if (node.hasAttribute(key)) {
      expression = node.getAttribute(key);

      if (expression) {
        var attribute = expression.replace(/({{)|(}})|(")/g, function (substring, a, b, c) {
          if (a) {
            return '"+';
          }

          if (b) {
            return '+"';
          }

          if (c) {
            return '\"';
          }

          return '';
        });
        expression = "\"" + attribute + "\"";
      }
    }

    return expression;
  };

  _proto.resolve = function resolve(expression, parentInstance, payload) {
    return expression.apply(parentInstance, [payload, this]);
  };

  _proto.parse = function parse(node, instance) {
    for (var i = 0; i < node.childNodes.length; i++) {
      var child = node.childNodes[i];

      if (child.nodeType === 1) {
        var element = child;
        var context = getParsableContextByElement(element);

        if (!context) {
          this.parse(element, instance);
        }
      } else if (child.nodeType === 3) {
        var text = child;
        this.parseTextNode(text, instance);
      }
    }
  };

  _proto.remove = function remove(node, keepInstance) {
    var keepContext = keepInstance ? getContext(keepInstance) : undefined;
    Module.traverseDown(node, function (node) {
      var rxcompId = node.rxcompId;

      if (rxcompId) {
        var keepContexts = Module.deleteContext(rxcompId, keepContext);

        if (keepContexts.length === 0) {
          delete node.rxcompId;
        }
      }
    });
    return node;
  };

  _proto.destroy = function destroy() {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
    this.remove(this.meta.node);
    this.meta.node.innerHTML = this.meta.nodeInnerHTML;
  };

  _proto.nextError = function nextError(error, instance, expression, params) {
    var expressionError = new ExpressionError(error, this, instance, expression, params);
    nextError$.next(expressionError);
  };

  _proto.makeContext = function makeContext(instance, parentInstance, node, selector) {
    var context = Module.makeContext(this, instance, parentInstance, node, instance.constructor, selector);
    return context;
  };

  _proto.makeHosts = function makeHosts(meta, instance, node) {
    if (meta.hosts) {
      Object.keys(meta.hosts).forEach(function (key) {
        var factory = meta.hosts[key];
        instance[key] = getHost(instance, factory, node);
      });
    }
  };

  _proto.makeInputs = function makeInputs(meta, instance, node, factory) {
    var _this2 = this;

    var inputs = {};
    var inputsTokens = factory.getInputsTokens(instance, node, this);
    Object.keys(inputsTokens).forEach(function (key) {
      inputs[key] = _this2.makeFunction(inputsTokens[key]);
    });
    return inputs;
  };

  _proto.makeOutput = function makeOutput(instance, key) {
    var _this3 = this;

    var context = getContext(instance);
    var node = context.node;
    var parentInstance = context.parentInstance;
    var expression = node.getAttribute("(" + key + ")");
    var outputExpression = expression ? this.makeFunction(expression, ['$event']) : null;
    var output$ = new rxjs.Subject().pipe(operators.tap(function (event) {
      if (outputExpression) {
        _this3.resolve(outputExpression, parentInstance, event);
      }
    }));
    output$.pipe(operators.takeUntil(instance.unsubscribe$)).subscribe();
    instance[key] = output$;
    return output$;
  };

  _proto.makeOutputs = function makeOutputs(meta, instance) {
    var _this4 = this;

    var outputs = {};

    if (meta.outputs) {
      meta.outputs.forEach(function (key) {
        var output = _this4.makeOutput(instance, key);

        if (output) {
          outputs[key] = output;
        }
      });
    }

    return outputs;
  };

  _proto.getInstance = function getInstance(node) {
    if (node === document) {
      return WINDOW;
    }

    var context = getContextByNode(node);

    if (context) {
      return context.instance;
    } else {
      return undefined;
    }
  };

  _proto.getParentInstance = function getParentInstance(node) {
    var _this5 = this;

    return Module.traverseUp(node, function (node) {
      return _this5.getInstance(node);
    });
  };

  _proto.parseTextNode = function parseTextNode(node, instance) {
    var _this6 = this;

    var expressions = node.nodeExpressions;

    if (!expressions) {
      expressions = this.parseTextNodeExpression(node.wholeText);
    }

    if (expressions.length) {
      var replacedText = expressions.reduce(function (p, c) {
        var text;

        if (typeof c === 'function') {
          text = _this6.resolve(c, instance, instance);

          if (text == undefined) {
            text = '';
          }
        } else {
          text = c;
        }

        return p + text;
      }, '');

      if (node.nodeValue !== replacedText) {
        var textNode = document.createTextNode(replacedText);
        textNode.nodeExpressions = expressions;
        node.parentNode.replaceChild(textNode, node);
      }
    } else {
      node.nodeExpressions = expressions;
    }
  };

  _proto.pushFragment = function pushFragment(nodeValue, from, to, expressions) {
    var fragment = nodeValue.substring(from, to);
    expressions.push(fragment);
  };

  _proto.parseTextNodeExpression = function parseTextNodeExpression(nodeValue) {
    var expressions = [];
    var regex = /\{{2}((([^{}])|(\{([^{}]|(\{.*?\}))+?\}))*?)\}{2}/g;
    var lastIndex = 0,
        matches;

    while ((matches = regex.exec(nodeValue)) !== null) {
      var index = regex.lastIndex - matches[0].length;

      if (index > lastIndex) {
        this.pushFragment(nodeValue, index, lastIndex, expressions);
      }

      lastIndex = regex.lastIndex;

      if (matches[1]) {
        var expression = this.makeFunction(matches[1]);
        expressions.push(expression);
      }
    }

    var length = nodeValue.length;

    if (length > lastIndex) {
      this.pushFragment(nodeValue, lastIndex, length, expressions);
    }

    if (expressions.find(function (x) {
      return typeof x === 'function';
    })) {
      return expressions;
    } else {
      return [];
    }
  };

  Module.makeContext = function makeContext(module, instance, parentInstance, node, factory, selector) {
    instance.rxcompId = ++ID;
    var context = {
      module: module,
      instance: instance,
      parentInstance: parentInstance,
      node: node,
      factory: factory,
      selector: selector
    };
    var rxcompNodeId = node.rxcompId = node.rxcompId || instance.rxcompId;
    var nodeContexts = NODES[rxcompNodeId] || (NODES[rxcompNodeId] = []);
    nodeContexts.push(context);
    CONTEXTS[instance.rxcompId] = context;
    return context;
  };

  Module.parseExpression = function parseExpression(expression) {
    var l = '┌';
    var r = '┘';
    var rx1 = /(\()([^\(\)]*)(\))/;

    while (expression.match(rx1)) {
      expression = expression.replace(rx1, function (substring) {
        return "" + l + Module.parsePipes(arguments.length <= 2 ? undefined : arguments[2]) + r;
      });
    }

    expression = Module.parsePipes(expression);
    expression = expression.replace(/(┌)|(┘)/g, function (substring) {
      return (arguments.length <= 1 ? undefined : arguments[1]) ? '(' : ')';
    });
    return Module.parseOptionalChaining(expression);
  };

  Module.parsePipes = function parsePipes(expression) {
    var l = '┌';
    var r = '┘';
    var rx1 = /(.*?[^\|])\|([^\|]+)/;

    while (expression.match(rx1)) {
      expression = expression.replace(rx1, function (substring) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var value = args[0].trim();
        var params = Module.parsePipeParams(args[1]);
        var func = params.shift().trim();
        return "$$pipes." + func + ".transform" + l + [value].concat(params) + r;
      });
    }

    return expression;
  };

  Module.parsePipeParams = function parsePipeParams(expression) {
    var segments = [];
    var i = 0,
        word = '',
        block = 0;
    var t = expression.length;

    while (i < t) {
      var c = expression.substr(i, 1);

      if (c === '{' || c === '(' || c === '[') {
        block++;
      }

      if (c === '}' || c === ')' || c === ']') {
        block--;
      }

      if (c === ':' && block === 0) {
        if (word.length) {
          segments.push(word.trim());
        }

        word = '';
      } else {
        word += c;
      }

      i++;
    }

    if (word.length) {
      segments.push(word.trim());
    }

    return segments;
  };

  Module.parseOptionalChaining = function parseOptionalChaining(expression) {
    var regex = /(\w+(\?\.))+([\.|\w]+)/g;
    var previous;
    expression = expression.replace(regex, function (substring) {
      var tokens = substring.split('?.');

      for (var i = 0; i < tokens.length - 1; i++) {
        var a = i > 0 ? "(" + tokens[i] + " = " + previous + ")" : tokens[i];
        var b = tokens[i + 1];
        previous = i > 0 ? a + "." + b : "(" + a + " ? " + a + "." + b + " : void 0)";
      }

      return previous || '';
    });
    return expression;
  };

  Module.deleteContext = function deleteContext(id, keepContext) {
    var keepContexts = [];
    var nodeContexts = NODES[id];

    if (nodeContexts) {
      nodeContexts.forEach(function (context) {
        if (context === keepContext) {
          keepContexts.push(keepContext);
        } else {
          var instance = context.instance;
          instance.unsubscribe$.next();
          instance.unsubscribe$.complete();
          instance.onDestroy();
          delete CONTEXTS[instance.rxcompId];
        }
      });

      if (keepContexts.length) {
        NODES[id] = keepContexts;
      } else {
        delete NODES[id];
      }
    }

    return keepContexts;
  };

  Module.matchSelectors = function matchSelectors(node, selectors, results) {
    for (var i = 0; i < selectors.length; i++) {
      var selectorResult = selectors[i](node);

      if (selectorResult) {
        var factory = selectorResult.factory;

        if (factory.prototype instanceof Component && factory.meta.template) {
          node.innerHTML = factory.meta.template;
        }

        results.push(selectorResult);

        if (factory.prototype instanceof Structure) {
          break;
        }
      }
    }

    return results;
  };

  Module.querySelectorsAll = function querySelectorsAll(node, selectors, results) {
    if (node.nodeType === 1) {
      var selectorResults = this.matchSelectors(node, selectors, []);
      results = results.concat(selectorResults);
      var structure = selectorResults.find(function (x) {
        return x.factory.prototype instanceof Structure;
      });

      if (structure) {
        return results;
      }

      var childNodes = node.childNodes;

      for (var i = 0; i < childNodes.length; i++) {
        results = this.querySelectorsAll(childNodes[i], selectors, results);
      }
    }

    return results;
  };

  Module.traverseUp = function traverseUp(node, callback, i) {
    if (i === void 0) {
      i = 0;
    }

    if (!node) {
      return;
    }

    var result = callback(node, i);

    if (result) {
      return result;
    }

    return this.traverseUp(node.parentNode, callback, i + 1);
  };

  Module.traverseDown = function traverseDown(node, callback, i) {
    if (i === void 0) {
      i = 0;
    }

    if (!node) {
      return;
    }

    var result = callback(node, i);

    if (result) {
      return result;
    }

    if (node.nodeType === 1) {
      var j = 0,
          t = node.childNodes.length;

      while (j < t && !result) {
        result = this.traverseDown(node.childNodes[j], callback, i + 1);
        j++;
      }
    }

    return result;
  };

  Module.traversePrevious = function traversePrevious(node, callback, i) {
    if (i === void 0) {
      i = 0;
    }

    if (!node) {
      return;
    }

    var result = callback(node, i);

    if (result) {
      return result;
    }

    return this.traversePrevious(node.previousSibling, callback, i + 1);
  };

  Module.traverseNext = function traverseNext(node, callback, i) {
    if (i === void 0) {
      i = 0;
    }

    if (!node) {
      return;
    }

    var result = callback(node, i);

    if (result) {
      return result;
    }

    return this.traverseNext(node.nextSibling, callback, i + 1);
  };

  return Module;
}();

Module.forRoot = void 0;
Module.meta = void 0;
function getParsableContextByElement(element) {
  var context;
  var rxcompId = element.rxcompId;

  if (rxcompId) {
    var contexts = NODES[rxcompId];

    if (contexts) {
      context = contexts.reduce(function (previous, current) {
        if (current.instance instanceof Context) {
          return previous ? previous : current;
        } else if (current.instance instanceof Component) {
          return current;
        } else {
          return previous;
        }
      }, undefined);
    }
  }

  return context;
}
function getContextByNode(element) {
  var context = getParsableContextByElement(element);

  if (context && context.factory.prototype instanceof Structure) {
    return undefined;
  }

  return context;
}
function getHost(instance, factory, node) {
  if (!node) {
    node = getContext(instance).node;
  }

  if (node.rxcompId) {
    var nodeContexts = NODES[node.rxcompId];

    if (nodeContexts) {
      for (var i = 0; i < nodeContexts.length; i++) {
        var context = nodeContexts[i];

        if (context.instance !== instance) {
          if (context.instance instanceof factory) {
            return context.instance;
          }
        }
      }
    }
  }

  if (node.parentNode) {
    return getHost(instance, factory, node.parentNode);
  } else {
    return undefined;
  }
}var SrcDirective = function (_Directive) {
  _inheritsLoose(SrcDirective, _Directive);

  function SrcDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  _createClass(SrcDirective, [{
    key: "src",
    get: function get() {
      return this.src_;
    },
    set: function set(src) {
      if (this.src_ !== src) {
        this.src_ = src;

        var _getContext = getContext(this),
            node = _getContext.node;

        src ? node.setAttribute('src', src) : node.removeAttribute('src');
      }
    }
  }]);

  return SrcDirective;
}(Directive);

SrcDirective.meta = {
  selector: '[[src]]',
  inputs: ['src']
};var StyleDirective = function (_Directive) {
  _inheritsLoose(StyleDirective, _Directive);

  function StyleDirective() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Directive.call.apply(_Directive, [this].concat(args)) || this;
    _this.style = void 0;
    _this.previousStyle = void 0;
    return _this;
  }

  var _proto = StyleDirective.prototype;

  _proto.onChanges = function onChanges() {
    var _getContext = getContext(this),
        node = _getContext.node;

    var style = this.style;
    var previousStyle = this.previousStyle;

    if (previousStyle) {
      for (var key in previousStyle) {
        if (!style || !style[key]) {
          var splitted = key.split('.');
          var propertyName = splitted.shift();
          node.style.removeProperty(propertyName);
        }
      }
    }

    if (style) {
      for (var _key2 in style) {
        if (!previousStyle || previousStyle[_key2] !== style[_key2]) {
          var _splitted = _key2.split('.');

          var _propertyName = _splitted.shift();

          var value = style[_key2] + (_splitted.length ? _splitted[0] : '');
          node.style.setProperty(_propertyName, value);
        }
      }
    }

    this.previousStyle = style;
  };

  return StyleDirective;
}(Directive);

StyleDirective.meta = {
  selector: "[[style]]",
  inputs: ['style']
};var factories = [ClassDirective, EventDirective, ForStructure, HrefDirective, HrefTargetDirective, IfStructure, InnerHtmlDirective, JsonComponent, SrcDirective, StyleDirective];
var pipes = [JsonPipe];

var CoreModule = function (_Module) {
  _inheritsLoose(CoreModule, _Module);

  function CoreModule() {
    var _this;

    _this = _Module.call(this) || this;
    errors$.pipe(operators.takeUntil(_this.unsubscribe$)).subscribe();
    return _this;
  }

  return CoreModule;
}(Module);

CoreModule.meta = {
  declarations: [].concat(factories, pipes),
  exports: [].concat(factories, pipes)
};var Browser = function (_Platform) {
  _inheritsLoose(Browser, _Platform);

  function Browser() {
    return _Platform.apply(this, arguments) || this;
  }

  Browser.bootstrap = function bootstrap(moduleFactory) {
    if (!isPlatformBrowser) {
      throw new ModuleError('missing platform browser, Window not found');
    }

    if (!moduleFactory) {
      throw new ModuleError('missing moduleFactory');
    }

    if (!moduleFactory.meta) {
      throw new ModuleError('missing moduleFactory meta');
    }

    if (!moduleFactory.meta.bootstrap) {
      throw new ModuleError('missing bootstrap');
    }

    if (!moduleFactory.meta.bootstrap.meta) {
      throw new ModuleError('missing bootstrap meta');
    }

    if (!moduleFactory.meta.bootstrap.meta.selector) {
      throw new ModuleError('missing bootstrap meta selector');
    }

    var meta = this.resolveMeta(moduleFactory);
    var module = new moduleFactory();
    module.meta = meta;
    meta.imports.forEach(function (moduleFactory) {
      moduleFactory.prototype.onInit.call(module);
    });

    if (WINDOW.rxcomp_hydrate_) {
      var _meta$node$parentNode;

      var clonedNode = meta.node.cloneNode();
      clonedNode.innerHTML = meta.nodeInnerHTML = WINDOW.rxcomp_hydrate_.innerHTML;
      var instances = module.compile(clonedNode, WINDOW);
      module.instances = instances;
      var root = instances[0];
      root.pushChanges();
      (_meta$node$parentNode = meta.node.parentNode) == null ? void 0 : _meta$node$parentNode.replaceChild(clonedNode, meta.node);
    } else {
      var _instances = module.compile(meta.node, WINDOW);

      module.instances = _instances;
      var _root = _instances[0];

      _root.pushChanges();
    }

    return module;
  };

  return Browser;
}(Platform);function getLocationComponents(href) {
  var protocol = '';
  var host = '';
  var hostname = '';
  var port = '';
  var pathname = '';
  var search = '';
  var hash = '';
  var regExp = /^((http\:|https\:)?\/\/)?((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])|locahost)?(\:([^\/]+))?(\.?\/[^\?]+)?(\?[^\#]+)?(\#.+)?$/g;
  var matches = [];
  var match;

  while ((match = regExp.exec(href)) !== null) {
    matches.push(match);
  }

  for (var _i = 0, _matches = matches; _i < _matches.length; _i++) {
    var _match = _matches[_i];
    protocol = _match[2] || '';
    host = hostname = _match[3] || '';
    port = _match[11] || '';
    pathname = _match[12] || '';
    search = _match[13] || '';
    hash = _match[14] || '';
  }

  return {
    href: href,
    protocol: protocol,
    host: host,
    hostname: hostname,
    port: port,
    pathname: pathname,
    search: search,
    hash: hash
  };
}var TransferService = function () {
  function TransferService() {}

  TransferService.makeKey = function makeKey(base, params) {
    var paramsKey = params ? optionsToKey(params) : '';
    var key = "rxcomp-hydrate-" + base + "-" + paramsKey;
    key = key.replace(/(\s+)|(\W+)/g, function () {
      return (arguments.length <= 1 ? undefined : arguments[1]) ? '' : '_';
    });
    return key;
  };

  TransferService.has = function has(key) {
    var script = document.querySelector("#" + key);
    return script !== null;
  };

  TransferService.get = function get(key) {
    var node = document.querySelector("#" + key);

    if (node && node.firstChild) {
      var json = node.firstChild.nodeValue;
      return json ? Serializer.decode(json, [_decodeJson]) : undefined;
    } else {
      return undefined;
    }
  };

  TransferService.set = function set(key, value) {
    var json = Serializer.encode(value, [_encodeJson]);

    if (!json) {
      return;
    }

    var text = document.createTextNode(json);
    var node = document.querySelector("#" + key);

    if (!node) {
      node = document.createElement('script');
      node.setAttribute('id', key);
      node.setAttribute('type', 'text/template');
      node.append(text);
      document.head.append(node);
    } else {
      node.replaceChild(text, node.firstChild);
    }
  };

  TransferService.remove = function remove(key) {
    var node = document.querySelector("#" + key);

    if (node && node.parentNode) {
      node.parentNode.removeChild(node);
    }
  };

  return TransferService;
}();
function optionsToKey(v, s) {
  if (s === void 0) {
    s = '';
  }

  if (typeof v === 'number') {
    s += '-' + v.toString();
  } else if (typeof v === 'string') {
    s += '-' + v.substr(0, 20);
  } else if (v && Array.isArray(v)) {
    s += '-' + v.map(function (v) {
      return optionsToKey(v);
    }).join('');
  } else if (v && typeof v === 'object') {
    s += '-' + Object.keys(v).map(function (k) {
      return k + optionsToKey(v[k]);
    }).join('-');
  }

  return s;
}exports.Browser=Browser;exports.ClassDirective=ClassDirective;exports.Component=Component;exports.Context=Context;exports.CoreModule=CoreModule;exports.DefaultErrorHandler=DefaultErrorHandler;exports.Directive=Directive;exports.ErrorInterceptorHandler=ErrorInterceptorHandler;exports.ErrorInterceptors=ErrorInterceptors;exports.EventDirective=EventDirective;exports.ExpressionError=ExpressionError;exports.Factory=Factory;exports.ForItem=ForItem;exports.ForStructure=ForStructure;exports.HrefDirective=HrefDirective;exports.HrefTargetDirective=HrefTargetDirective;exports.IfStructure=IfStructure;exports.InnerHtmlDirective=InnerHtmlDirective;exports.JsonComponent=JsonComponent;exports.JsonPipe=JsonPipe;exports.Module=Module;exports.ModuleError=ModuleError;exports.PLATFORM_BROWSER=PLATFORM_BROWSER;exports.PLATFORM_JS_DOM=PLATFORM_JS_DOM;exports.PLATFORM_NODE=PLATFORM_NODE;exports.PLATFORM_WEB_WORKER=PLATFORM_WEB_WORKER;exports.Pipe=Pipe;exports.Platform=Platform;exports.Serializer=Serializer;exports.SrcDirective=SrcDirective;exports.Structure=Structure;exports.StyleDirective=StyleDirective;exports.TransferService=TransferService;exports.WINDOW=WINDOW;exports.decodeBase64=_decodeBase;exports.decodeJson=_decodeJson;exports.encodeBase64=_encodeBase;exports.encodeJson=_encodeJson;exports.encodeJsonWithOptions=encodeJsonWithOptions;exports.errors$=errors$;exports.getContext=getContext;exports.getContextByNode=getContextByNode;exports.getHost=getHost;exports.getLocationComponents=getLocationComponents;exports.getParsableContextByElement=getParsableContextByElement;exports.isPlatformBrowser=isPlatformBrowser;exports.isPlatformServer=isPlatformServer;exports.isPlatformWorker=isPlatformWorker;exports.nextError$=nextError$;exports.optionsToKey=optionsToKey;Object.defineProperty(exports,'__esModule',{value:true});return exports;})({},rxjs,rxjs.operators);
/**
 * @license rxcomp-form v1.0.0-beta.18
 * (c) 2020 Luca Zampetti <lzampetti@gmail.com>
 * License: MIT
 */

this.rxcomp=this.rxcomp||{};this.rxcomp.form=(function(exports,rxcomp,rxjs,operators){'use strict';function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}var FormAbstractCollectionDirective = function (_Directive) {
  _inheritsLoose(FormAbstractCollectionDirective, _Directive);

  function FormAbstractCollectionDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormAbstractCollectionDirective.prototype;

  _proto.onChanges = function onChanges(changes) {
    var _getContext = rxcomp.getContext(this),
        node = _getContext.node;

    var flags = this.control.flags;
    Object.keys(flags).forEach(function (key) {
      flags[key] ? node.classList.add(key) : node.classList.remove(key);
    });
  };

  _createClass(FormAbstractCollectionDirective, [{
    key: "control",
    get: function get() {
      return {};
    }
  }]);

  return FormAbstractCollectionDirective;
}(rxcomp.Directive);
FormAbstractCollectionDirective.meta = {
  selector: '',
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormArrayDirective = function (_FormAbstractCollecti) {
  _inheritsLoose(FormArrayDirective, _FormAbstractCollecti);

  function FormArrayDirective() {
    return _FormAbstractCollecti.apply(this, arguments) || this;
  }

  _createClass(FormArrayDirective, [{
    key: "control",
    get: function get() {
      if (this.formArray) {
        return this.formArray;
      } else {
        if (!this.host) {
          throw 'missing form collection';
        }

        return this.host.control.get(this.formArrayName);
      }
    }
  }]);

  return FormArrayDirective;
}(FormAbstractCollectionDirective);
FormArrayDirective.meta = {
  selector: '[formArray],[formArrayName]',
  inputs: ['formArray', 'formArrayName'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormAbstractDirective = function (_Directive) {
  _inheritsLoose(FormAbstractDirective, _Directive);

  function FormAbstractDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormAbstractDirective.prototype;

  _proto.onInit = function onInit() {
    var _this = this;

    var node = rxcomp.getContext(this).node;
    rxjs.fromEvent(node, 'input').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onChange(event);
    });
    rxjs.fromEvent(node, 'change').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onChange(event);
    });
    rxjs.fromEvent(node, 'blur').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onBlur(event);
    });
  };

  _proto.onChanges = function onChanges(changes) {
    var node = rxcomp.getContext(this).node;

    if (this.formControlName) {
      node.name = this.formControlName;
    }

    var control = this.control;
    var flags = control.flags;
    Object.keys(flags).forEach(function (key) {
      flags[key] ? node.classList.add(key) : node.classList.remove(key);
    });
    this.writeValue(control.value);
  };

  _proto.writeValue = function writeValue(value) {
    var node = rxcomp.getContext(this).node;
    node.value = value == null ? '' : value;
  };

  _proto.onChange = function onChange(event) {
    var node = rxcomp.getContext(this).node;
    this.control.value = node.value === '' ? null : node.value;
  };

  _proto.onBlur = function onBlur(event) {
    this.control.touched = true;
  };

  _proto.setDisabledState = function setDisabledState(disabled) {
    var node = rxcomp.getContext(this).node;
    node.disabled = disabled;
  };

  _createClass(FormAbstractDirective, [{
    key: "control",
    get: function get() {
      if (this.formControl) {
        return this.formControl;
      } else {
        if (!this.host) {
          throw 'missing form collection';
        }

        return this.host.control.get(this.formControlName);
      }
    }
  }]);

  return FormAbstractDirective;
}(rxcomp.Directive);
FormAbstractDirective.meta = {
  selector: '',
  inputs: ['formControl', 'formControlName', 'value'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormCheckboxDirective = function (_FormAbstractDirectiv) {
  _inheritsLoose(FormCheckboxDirective, _FormAbstractDirectiv);

  function FormCheckboxDirective() {
    return _FormAbstractDirectiv.apply(this, arguments) || this;
  }

  var _proto = FormCheckboxDirective.prototype;

  _proto.onInit = function onInit() {
    var _this = this;

    var node = rxcomp.getContext(this).node;
    rxjs.fromEvent(node, 'change').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onChange(event);
    });
    rxjs.fromEvent(node, 'blur').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onBlur(event);
    });
  };

  _proto.writeValue = function writeValue(value) {
    var node = rxcomp.getContext(this).node;
    value === this.value ? node.setAttribute('checked', value) : node.removeAttribute('checked');
  };

  _proto.setDisabledState = function setDisabledState(disabled) {
    var node = rxcomp.getContext(this).node;
    node.disabled = disabled;
  };

  _proto.onChange = function onChange(event) {
    var node = rxcomp.getContext(this).node;
    this.control.value = node.checked ? this.value : this.value === true ? false : null;
  };

  _proto.onBlur = function onBlur(event) {
    this.control.touched = true;
  };

  return FormCheckboxDirective;
}(FormAbstractDirective);
FormCheckboxDirective.meta = {
  selector: 'input[type=checkbox][formControl],input[type=checkbox][formControlName]',
  inputs: ['formControl', 'formControlName', 'value'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormFieldComponent = function (_Component) {
  _inheritsLoose(FormFieldComponent, _Component);

  function FormFieldComponent() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = FormFieldComponent.prototype;

  _proto.onChanges = function onChanges(changes) {
    var _getContext = rxcomp.getContext(this),
        node = _getContext.node;

    var flags = this.control.flags;
    Object.keys(flags).forEach(function (key) {
      flags[key] ? node.classList.add(key) : node.classList.remove(key);
    });
  };

  _createClass(FormFieldComponent, [{
    key: "control",
    get: function get() {
      if (this.formField) {
        return this.formField;
      } else {
        if (!this.host) {
          throw 'missing form collection';
        }

        return this.host.control.get(this.formFieldName);
      }
    }
  }]);

  return FormFieldComponent;
}(rxcomp.Component);
FormFieldComponent.meta = {
  selector: '[formField],[formFieldName]',
  inputs: ['formField', 'formFieldName'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormGroupDirective = function (_FormAbstractCollecti) {
  _inheritsLoose(FormGroupDirective, _FormAbstractCollecti);

  function FormGroupDirective() {
    return _FormAbstractCollecti.apply(this, arguments) || this;
  }

  _createClass(FormGroupDirective, [{
    key: "control",
    get: function get() {
      if (this.formGroup) {
        return this.formGroup;
      } else {
        if (!this.host) {
          throw 'missing form collection';
        }

        return this.host.control.get(this.formGroupName);
      }
    }
  }]);

  return FormGroupDirective;
}(FormAbstractCollectionDirective);
FormGroupDirective.meta = {
  selector: '[formGroup],[formGroupName]',
  inputs: ['formGroup', 'formGroupName'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormInputDirective = function (_FormAbstractDirectiv) {
  _inheritsLoose(FormInputDirective, _FormAbstractDirectiv);

  function FormInputDirective() {
    return _FormAbstractDirectiv.apply(this, arguments) || this;
  }

  var _proto = FormInputDirective.prototype;

  _proto.writeValue = function writeValue(value) {
    var node = rxcomp.getContext(this).node;
    node.value = value == null ? '' : value;
  };

  _proto.onChange = function onChange(event) {
    var node = rxcomp.getContext(this).node;
    this.control.value = node.value === '' ? null : node.value;
  };

  _proto.onBlur = function onBlur(event) {
    this.control.touched = true;
  };

  return FormInputDirective;
}(FormAbstractDirective);
FormInputDirective.meta = {
  selector: 'input[type=text][formControl],input[type=text][formControlName],input[type=email][formControl],input[type=email][formControlName],input[type=password][formControl],input[type=password][formControlName],textarea[formControl],textarea[formControlName]',
  inputs: ['formControl', 'formControlName'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormPlaceholderDirective = function (_Directive) {
  _inheritsLoose(FormPlaceholderDirective, _Directive);

  function FormPlaceholderDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormPlaceholderDirective.prototype;

  _proto.onChanges = function onChanges(changes) {
    var node = rxcomp.getContext(this).node;
    node.setAttribute('placeholder', this.placeholder || '');
  };

  return FormPlaceholderDirective;
}(rxcomp.Directive);
FormPlaceholderDirective.meta = {
  selector: 'input[placeholder],textarea[placeholder]',
  inputs: ['placeholder']
};var FormRadioDirective = function (_FormAbstractDirectiv) {
  _inheritsLoose(FormRadioDirective, _FormAbstractDirectiv);

  function FormRadioDirective() {
    return _FormAbstractDirectiv.apply(this, arguments) || this;
  }

  var _proto = FormRadioDirective.prototype;

  _proto.onInit = function onInit() {
    var _this = this;

    var node = rxcomp.getContext(this).node;
    rxjs.fromEvent(node, 'change').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onChange(event);
    });
    rxjs.fromEvent(node, 'blur').pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
      return _this.onBlur(event);
    });
  };

  _proto.writeValue = function writeValue(value) {
    var node = rxcomp.getContext(this).node;
    node.checked = node.value === value;
  };

  _proto.setDisabledState = function setDisabledState(disabled) {
    var node = rxcomp.getContext(this).node;
    node.disabled = disabled;
  };

  _proto.onChange = function onChange(event) {
    var node = rxcomp.getContext(this).node;

    if (node.checked) {
      this.control.value = node.value;
    }
  };

  _proto.onBlur = function onBlur(event) {
    this.control.touched = true;
  };

  return FormRadioDirective;
}(FormAbstractDirective);
FormRadioDirective.meta = {
  selector: 'input[type=radio][formControl],input[type=radio][formControlName]',
  inputs: ['formControl', 'formControlName'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormSelectDirective = function (_FormAbstractDirectiv) {
  _inheritsLoose(FormSelectDirective, _FormAbstractDirectiv);

  function FormSelectDirective() {
    return _FormAbstractDirectiv.apply(this, arguments) || this;
  }

  var _proto = FormSelectDirective.prototype;

  _proto.writeValue = function writeValue(value) {
    var node = rxcomp.getContext(this).node;
    node.value = value == null ? '' : value;
  };

  _proto.setDisabledState = function setDisabledState(disabled) {
    var node = rxcomp.getContext(this).node;
    node.disabled = disabled;
  };

  _proto.onChange = function onChange(event) {
    var node = rxcomp.getContext(this).node;
    this.control.value = node.value === '' ? null : node.value;
  };

  _proto.onBlur = function onBlur(event) {
    this.control.touched = true;
  };

  return FormSelectDirective;
}(FormAbstractDirective);
FormSelectDirective.meta = {
  selector: 'select[formControl],select[formControlName]',
  inputs: ['formControl', 'formControlName'],
  hosts: {
    host: FormAbstractCollectionDirective
  }
};var FormSubmitDirective = function (_Directive) {
  _inheritsLoose(FormSubmitDirective, _Directive);

  function FormSubmitDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormSubmitDirective.prototype;

  _proto.onInit = function onInit() {
    var _getContext = rxcomp.getContext(this),
        module = _getContext.module,
        node = _getContext.node,
        selector = _getContext.selector,
        parentInstance = _getContext.parentInstance;

    var event = this.event = selector.replace(/\[|\]|\(|\)/g, '');
    var form = node;
    var event$ = this.event$ = rxjs.fromEvent(form, 'submit').pipe(operators.tap(function (event) {
      event.preventDefault();
    }), operators.shareReplay(1));
    var expression = node.getAttribute("(" + event + ")");

    if (expression) {
      var outputFunction = module.makeFunction(expression, ['$event']);
      event$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
        module.resolve(outputFunction, parentInstance, event);
      });
    } else {
      parentInstance[event + "$"] = event$;
    }
  };

  return FormSubmitDirective;
}(rxcomp.Directive);
FormSubmitDirective.meta = {
  selector: "[(submit)]"
};var FormValidator = function () {
  function FormValidator(validator, params) {
    this.validator = validator;
    this.params$ = new rxjs.BehaviorSubject(params);
  }

  var _proto = FormValidator.prototype;

  _proto.validate = function validate(value) {
    return this.validator(value, this.params);
  };

  _createClass(FormValidator, [{
    key: "params",
    get: function get() {
      return this.params$.getValue();
    },
    set: function set(params) {
      if (params) {
        var current = this.params;
        var differs = Object.keys(params).reduce(function (flag, key) {
          return flag || !current || current[key] !== params[key];
        }, false);

        if (differs) {
          this.params$.next(params);
        }
      }
    }
  }]);

  return FormValidator;
}();function NullValidator() {
  return new FormValidator(function (value, params) {
    return null;
  });
}
function RequiredValidator() {
  return new FormValidator(function (value, params) {
    return value == null || value.length === 0 ? {
      required: true
    } : null;
  });
}
function RequiredTrueValidator() {
  return new FormValidator(function (value, params) {
    return value === true ? null : {
      required: true
    };
  });
}
function MinValidator(min) {
  return new FormValidator(function (value, params) {
    var min = params.min;

    if (!value || !min) {
      return null;
    }

    value = parseFloat(value);
    return !isNaN(value) && value < min ? {
      min: {
        min: min,
        actual: value
      }
    } : null;
  }, {
    min: min
  });
}
function MaxValidator(max) {
  return new FormValidator(function (value, params) {
    var max = params.max;

    if (!value || !max) {
      return null;
    }

    value = parseFloat(value);
    return !isNaN(value) && value > max ? {
      max: {
        max: max,
        actual: value
      }
    } : null;
  }, {
    max: max
  });
}
function MinLengthValidator(minlength) {
  return new FormValidator(function (value, params) {
    var minlength = params.minlength;

    if (!value || !minlength) {
      return null;
    }

    var length = value ? value.length : 0;
    return length < minlength ? {
      minlength: {
        requiredLength: minlength,
        actualLength: length
      }
    } : null;
  }, {
    minlength: minlength
  });
}
function MaxLengthValidator(maxlength) {
  return new FormValidator(function (value, params) {
    var maxlength = params.maxlength;

    if (!value || !maxlength) {
      return null;
    }

    var length = value ? value.length : 0;
    return length > maxlength ? {
      minlength: {
        requiredLength: maxlength,
        actualLength: length
      }
    } : null;
  }, {
    maxlength: maxlength
  });
}
function PatternValidator(pattern) {
  return new FormValidator(function (value, params) {
    var pattern = params.pattern;

    if (!value || !pattern) {
      return null;
    }

    var regex = patternToRegEx(pattern);
    return regex.test(value) ? null : {
      pattern: {
        requiredPattern: regex.toString(),
        actualValue: value
      }
    };
  }, {
    pattern: pattern
  });
}
function EmailValidator() {
  var regex = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return new FormValidator(function (value, params) {
    if (!value) {
      return null;
    }

    return regex.test(value) ? null : {
      email: true
    };
  });
}

function patternToRegEx(pattern) {
  var regex;

  if (pattern instanceof RegExp) {
    regex = pattern;
  } else if (typeof pattern === 'string') {
    pattern = pattern.charAt(0) === '^' ? pattern : "^" + pattern;
    pattern = pattern.charAt(pattern.length - 1) === '$' ? pattern : pattern + "$";
    regex = new RegExp(pattern);
  }

  return regex || new RegExp('');
}var validators=/*#__PURE__*/Object.freeze({__proto__:null,NullValidator: NullValidator,RequiredValidator: RequiredValidator,RequiredTrueValidator: RequiredTrueValidator,MinValidator: MinValidator,MaxValidator: MaxValidator,MinLengthValidator: MinLengthValidator,MaxLengthValidator: MaxLengthValidator,PatternValidator: PatternValidator,EmailValidator: EmailValidator});var FormEmailDirective = function (_Directive) {
  _inheritsLoose(FormEmailDirective, _Directive);

  function FormEmailDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormEmailDirective.prototype;

  _proto.onInit = function onInit() {
    var validator = this.validator = EmailValidator();

    if (this.host) {
      this.host.control.addValidators(validator);
    }
  };

  return FormEmailDirective;
}(rxcomp.Directive);
FormEmailDirective.meta = {
  selector: '[email][formControl],[email][formControlName]',
  inputs: ['email'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormMaxLengthDirective = function (_Directive) {
  _inheritsLoose(FormMaxLengthDirective, _Directive);

  function FormMaxLengthDirective() {
    var _this;

    _this = _Directive.apply(this, arguments) || this;
    _this.maxlength = Number.POSITIVE_INFINITY;
    return _this;
  }

  var _proto = FormMaxLengthDirective.prototype;

  _proto.onInit = function onInit() {
    this.validator = MaxLengthValidator(this.maxlength);

    if (this.host) {
      this.host.control.addValidators(this.validator);
    }
  };

  _proto.onChanges = function onChanges(changes) {
    if (this.validator) {
      this.validator.params = {
        maxlength: this.maxlength
      };
    }
  };

  return FormMaxLengthDirective;
}(rxcomp.Directive);
FormMaxLengthDirective.meta = {
  selector: '[maxlength][formControl],[maxlength][formControlName]',
  inputs: ['maxlength'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormMaxDirective = function (_Directive) {
  _inheritsLoose(FormMaxDirective, _Directive);

  function FormMaxDirective() {
    var _this;

    _this = _Directive.apply(this, arguments) || this;
    _this.max = Number.POSITIVE_INFINITY;
    return _this;
  }

  var _proto = FormMaxDirective.prototype;

  _proto.onInit = function onInit() {
    this.validator = MaxValidator(this.max);

    if (this.host) {
      this.host.control.addValidators(this.validator);
    }
  };

  _proto.onChanges = function onChanges(changes) {
    if (this.validator) {
      this.validator.params = {
        max: this.max
      };
    }
  };

  return FormMaxDirective;
}(rxcomp.Directive);
FormMaxDirective.meta = {
  selector: '[max][formControl],[max][formControlName]',
  inputs: ['max'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormMinLengthDirective = function (_Directive) {
  _inheritsLoose(FormMinLengthDirective, _Directive);

  function FormMinLengthDirective() {
    var _this;

    _this = _Directive.apply(this, arguments) || this;
    _this.minlength = Number.NEGATIVE_INFINITY;
    return _this;
  }

  var _proto = FormMinLengthDirective.prototype;

  _proto.onInit = function onInit() {
    this.validator = MinLengthValidator(this.minlength);

    if (this.host) {
      this.host.control.addValidators(this.validator);
    }
  };

  _proto.onChanges = function onChanges(changes) {
    if (this.validator) {
      this.validator.params = {
        minlength: this.minlength
      };
    }
  };

  return FormMinLengthDirective;
}(rxcomp.Directive);
FormMinLengthDirective.meta = {
  selector: '[minlength][formControl],[minlength][formControlName]',
  inputs: ['minlength'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormMinDirective = function (_Directive) {
  _inheritsLoose(FormMinDirective, _Directive);

  function FormMinDirective() {
    var _this;

    _this = _Directive.apply(this, arguments) || this;
    _this.min = Number.NEGATIVE_INFINITY;
    return _this;
  }

  var _proto = FormMinDirective.prototype;

  _proto.onInit = function onInit() {
    this.validator = MinValidator(this.min);

    if (this.host) {
      this.host.control.addValidators(this.validator);
    }
  };

  _proto.onChanges = function onChanges(changes) {
    if (this.validator) {
      this.validator.params = {
        min: this.min
      };
    }
  };

  return FormMinDirective;
}(rxcomp.Directive);
FormMinDirective.meta = {
  selector: '[min][formControl],[min][formControlName]',
  inputs: ['min'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormPatternDirective = function (_Directive) {
  _inheritsLoose(FormPatternDirective, _Directive);

  function FormPatternDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormPatternDirective.prototype;

  _proto.onInit = function onInit() {
    if (this.pattern) {
      this.validator = PatternValidator(this.pattern);

      if (this.host) {
        this.host.control.addValidators(this.validator);
      }
    }
  };

  _proto.onChanges = function onChanges(changes) {
    if (this.validator) {
      this.validator.params = {
        pattern: this.pattern
      };
    }
  };

  return FormPatternDirective;
}(rxcomp.Directive);
FormPatternDirective.meta = {
  selector: '[pattern][formControl],[pattern][formControlName]',
  inputs: ['pattern'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormRequiredTrueDirective = function (_Directive) {
  _inheritsLoose(FormRequiredTrueDirective, _Directive);

  function FormRequiredTrueDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormRequiredTrueDirective.prototype;

  _proto.onInit = function onInit() {
    this.validator = RequiredTrueValidator();

    if (this.host) {
      this.host.control.addValidators(this.validator);
    }
  };

  return FormRequiredTrueDirective;
}(rxcomp.Directive);
FormRequiredTrueDirective.meta = {
  selector: '[requiredTrue][formControl],[requiredTrue][formControlName]',
  inputs: ['requiredTrue'],
  hosts: {
    host: FormAbstractDirective
  }
};var FormRequiredDirective = function (_Directive) {
  _inheritsLoose(FormRequiredDirective, _Directive);

  function FormRequiredDirective() {
    return _Directive.apply(this, arguments) || this;
  }

  var _proto = FormRequiredDirective.prototype;

  _proto.onInit = function onInit() {
    this.validator = RequiredValidator();

    if (this.host) {
      this.host.control.addValidators(this.validator);
    }
  };

  return FormRequiredDirective;
}(rxcomp.Directive);
FormRequiredDirective.meta = {
  selector: '[required][formControl],[required][formControlName]',
  inputs: ['required'],
  hosts: {
    host: FormAbstractDirective
  }
};var factories = [FormArrayDirective, FormCheckboxDirective, FormFieldComponent, FormGroupDirective, FormInputDirective, FormPlaceholderDirective, FormRadioDirective, FormSelectDirective, FormSubmitDirective, FormEmailDirective, FormMaxDirective, FormMaxLengthDirective, FormMinDirective, FormMinLengthDirective, FormPatternDirective, FormRequiredDirective, FormRequiredTrueDirective];
var pipes = [];

var FormModule = function (_Module) {
  _inheritsLoose(FormModule, _Module);

  function FormModule() {
    return _Module.apply(this, arguments) || this;
  }

  return FormModule;
}(rxcomp.Module);
FormModule.meta = {
  declarations: [].concat(factories, pipes),
  exports: [].concat(factories, pipes)
};var FormStatus;

(function (FormStatus) {
  FormStatus["Pending"] = "pending";
  FormStatus["Valid"] = "valid";
  FormStatus["Invalid"] = "invalid";
  FormStatus["Disabled"] = "disabled";
  FormStatus["Hidden"] = "hidden";
})(FormStatus || (FormStatus = {}));
var FormStatus$1 = FormStatus;var FormAbstract = function () {
  function FormAbstract(validators) {
    var _this = this;

    this.value_ = undefined;
    this.submitted_ = false;
    this.touched_ = false;
    this.dirty_ = false;
    this.valueSubject = new rxjs.BehaviorSubject(null);
    this.statusSubject = new rxjs.BehaviorSubject(null);
    this.validatorsSubject = new rxjs.ReplaySubject().pipe(operators.switchAll());
    this.value$ = this.valueSubject.pipe(operators.distinctUntilChanged(), operators.skip(1), operators.tap(function () {
      _this.submitted_ = false;
      _this.dirty_ = true;

      _this.statusSubject.next(null);
    }), operators.shareReplay(1));
    this.status$ = rxjs.merge(this.statusSubject, this.validatorsSubject).pipe(operators.switchMap(function () {
      return _this.validate$(_this.value);
    }), operators.shareReplay(1));
    this.changes$ = rxjs.merge(this.value$, this.status$).pipe(operators.map(function () {
      return _this.value;
    }), operators.auditTime(1), operators.shareReplay(1));
    this.validators = validators ? Array.isArray(validators) ? validators : [validators] : [];
  }

  var _proto = FormAbstract.prototype;

  _proto.initSubjects_ = function initSubjects_() {
    this.switchValidators_();
  };

  _proto.switchValidators_ = function switchValidators_() {
    var validatorParams = this.validators.map(function (x) {
      return x.params$;
    });
    var validatorParams$ = validatorParams.length ? rxjs.combineLatest(validatorParams) : rxjs.of(validatorParams);
    this.validatorsSubject.next(validatorParams$);
  };

  _proto.initObservables_ = function initObservables_() {};

  _proto.validate$ = function validate$(value) {
    var _this2 = this;

    if (this.status === FormStatus$1.Disabled || this.status === FormStatus$1.Hidden || this.submitted_ || !this.validators.length) {
      this.errors_ = {};

      if (this.status === FormStatus$1.Invalid) {
        this.status = FormStatus$1.Valid;
      }

      return rxjs.of(this.errors_);
    } else {
      return rxjs.combineLatest(this.validators.map(function (x) {
        var result$ = x.validate(value);
        return rxjs.isObservable(result$) ? result$ : rxjs.of(result$);
      })).pipe(operators.map(function (results) {
        _this2.errors_ = Object.assign.apply(Object, [{}].concat(results));
        _this2.status = Object.keys(_this2.errors_).length === 0 ? FormStatus$1.Valid : FormStatus$1.Invalid;
        return _this2.errors_;
      }));
    }
  };

  _proto.reset = function reset(status) {
    this.status = status || FormStatus$1.Pending;
    this.value_ = null;
    this.dirty_ = false;
    this.touched_ = false;
    this.submitted_ = false;
    this.statusSubject.next(null);
  };

  _proto.patch = function patch(value) {
    this.value_ = value;
    this.dirty_ = true;
    this.submitted_ = false;
    this.statusSubject.next(null);
  };

  _proto.addValidators = function addValidators() {
    var _this$validators;

    (_this$validators = this.validators).push.apply(_this$validators, arguments);

    this.switchValidators_();
  };

  _proto.replaceValidators = function replaceValidators() {
    for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {
      validators[_key] = arguments[_key];
    }

    this.validators = validators;
    this.switchValidators_();
  };

  _proto.clearValidators = function clearValidators() {
    this.validators = [];
    this.switchValidators_();
  };

  _createClass(FormAbstract, [{
    key: "errors",
    get: function get() {
      return this.errors_;
    },
    set: function set(errors) {
      this.errors_ = errors;
    }
  }, {
    key: "pending",
    get: function get() {
      return this.status === FormStatus$1.Pending;
    }
  }, {
    key: "valid",
    get: function get() {
      return this.status !== FormStatus$1.Invalid;
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.status === FormStatus$1.Invalid;
    }
  }, {
    key: "disabled",
    get: function get() {
      return this.status === FormStatus$1.Disabled;
    },
    set: function set(disabled) {
      if (disabled) {
        if (this.status !== FormStatus$1.Disabled) {
          this.status = FormStatus$1.Disabled;
          this.dirty_ = false;
          this.touched_ = false;
          this.submitted_ = false;
          this.statusSubject.next(null);
        }
      } else {
        if (this.status === FormStatus$1.Disabled) {
          this.status = FormStatus$1.Pending;
          this.dirty_ = false;
          this.touched_ = false;
          this.submitted_ = false;
          this.statusSubject.next(null);
        }
      }
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.status !== FormStatus$1.Disabled;
    }
  }, {
    key: "hidden",
    get: function get() {
      return this.status === FormStatus$1.Hidden;
    },
    set: function set(hidden) {
      if (hidden) {
        if (this.status !== FormStatus$1.Hidden) {
          this.status = FormStatus$1.Hidden;
          this.dirty_ = false;
          this.touched_ = false;
          this.submitted_ = false;
          this.statusSubject.next(null);
        }
      } else {
        if (this.status === FormStatus$1.Hidden) {
          this.status = FormStatus$1.Pending;
          this.dirty_ = false;
          this.touched_ = false;
          this.submitted_ = false;
          this.statusSubject.next(null);
        }
      }
    }
  }, {
    key: "visible",
    get: function get() {
      return this.status !== FormStatus$1.Hidden;
    }
  }, {
    key: "submitted",
    get: function get() {
      return this.submitted_;
    },
    set: function set(submitted) {
      this.submitted_ = submitted;
      this.statusSubject.next(null);
    }
  }, {
    key: "dirty",
    get: function get() {
      return this.dirty_;
    }
  }, {
    key: "pristine",
    get: function get() {
      return !this.dirty_;
    }
  }, {
    key: "touched",
    get: function get() {
      return this.touched_;
    },
    set: function set(touched) {
      this.touched_ = touched;
      this.statusSubject.next(null);
    }
  }, {
    key: "untouched",
    get: function get() {
      return !this.touched_;
    }
  }, {
    key: "flags",
    get: function get() {
      return {
        untouched: this.untouched,
        touched: this.touched,
        pristine: this.pristine,
        dirty: this.dirty,
        pending: this.pending,
        enabled: this.enabled,
        disabled: this.disabled,
        hidden: this.hidden,
        visible: this.visible,
        valid: this.valid,
        invalid: this.invalid,
        submitted: this.submitted
      };
    }
  }, {
    key: "value",
    get: function get() {
      return this.value_;
    },
    set: function set(value) {
      this.value_ = value;
      this.valueSubject.next(value);
    }
  }]);

  return FormAbstract;
}();var FormControl = function (_FormAbstract) {
  _inheritsLoose(FormControl, _FormAbstract);

  function FormControl(value, validators) {
    var _this;

    if (value === void 0) {
      value = null;
    }

    _this = _FormAbstract.call(this, validators) || this;
    _this.value_ = value;
    _this.status = FormStatus$1.Pending;
    _this.errors = {};

    _this.initSubjects_();

    _this.initObservables_();

    _this.statusSubject.next(null);

    return _this;
  }

  return FormControl;
}(FormAbstract);var FormAbstractCollection = function (_FormAbstract) {
  _inheritsLoose(FormAbstractCollection, _FormAbstract);

  function FormAbstractCollection(controls, validators) {
    var _this;

    _this = _FormAbstract.call(this, validators) || this;
    _this.changesChildren = new rxjs.BehaviorSubject(undefined);
    _this.controls = controls;

    _this.initControls_();

    _this.initSubjects_();

    _this.initObservables_();

    return _this;
  }

  var _proto = FormAbstractCollection.prototype;

  _proto.initControl_ = function initControl_(controlOrValue, key) {
    var control = controlOrValue instanceof FormAbstract ? controlOrValue : new FormControl(controlOrValue);
    control.addValidators.apply(control, this.validators);
    control.name = key;
    return control;
  };

  _proto.initControls_ = function initControls_() {
    var _this2 = this;

    this.forEach_(function (control, key) {
      _this2.init(control, key);
    });
    return this.controls;
  };

  _proto.initSubjects_ = function initSubjects_() {
    this.changesChildren = this.changesChildren.pipe(operators.switchAll());
    this.switchSubjects_();
  };

  _proto.switchSubjects_ = function switchSubjects_() {
    var changesChildren = this.reduce_(function (result, control) {
      result.push(control.changes$);
      return result;
    }, []);
    var changesChildren$ = changesChildren.length ? rxjs.combineLatest(changesChildren) : rxjs.of(changesChildren);
    this.changesChildren.next(changesChildren$);
  };

  _proto.initObservables_ = function initObservables_() {
    var _this3 = this;

    this.changes$ = this.changesChildren.pipe(operators.map(function () {
      return _this3.value;
    }), operators.shareReplay(1));
  };

  _proto.validate = function validate(value) {
    var errors;

    if (this.status === FormStatus$1.Disabled || this.status === FormStatus$1.Hidden) {
      errors = [];
    } else {
      var errors_ = this.validators.map(function (x) {
        return x.validate(value);
      }).filter(function (x) {
        return x !== null;
      });
      errors = this.reduce_(function (result, control) {
        return result.concat(control.errors);
      }, errors_);
      this.status = errors.length === 0 ? FormStatus$1.Valid : FormStatus$1.Invalid;
    }

    return errors;
  };

  _proto.forEach_ = function forEach_(callback) {
    var _this4 = this;

    Object.keys(this.controls).forEach(function (key) {
      return callback(_this4.controls[key], key);
    });
  };

  _proto.reduce_ = function reduce_(callback, result) {
    this.forEach_(function (control, key) {
      result = callback(result, control, key);
    });
    return result;
  };

  _proto.all_ = function all_(key, value) {
    return this.reduce_(function (result, control) {
      return result && control[key] === value;
    }, true);
  };

  _proto.any_ = function any_(key, value) {
    return this.reduce_(function (result, control) {
      return result || control[key] === value;
    }, false);
  };

  _proto.reset = function reset() {
    this.forEach_(function (control) {
      return control.reset();
    });
  };

  _proto.patch = function patch(value) {
    if (value) {
      this.forEach_(function (control, key) {
        if (value[key] != undefined) {
          control.patch(value[key]);
        }
      });
    }
  };

  _proto.init = function init(control, key) {
    this.controls[key] = this.initControl_(control, key);
  };

  _proto.get = function get(key) {
    return this.controls[key];
  };

  _proto.set = function set(control, key) {
    delete this.controls[key];
    this.controls[key] = this.initControl_(control, key);
    this.switchSubjects_();
  };

  _proto.add = function add(control, key) {
    this.controls[key] = this.initControl_(control, key);
    this.switchSubjects_();
  };

  _proto.remove = function remove(control) {
    var _this5 = this;

    var key = Object.keys(this.controls).find(function (key) {
      return _this5.controls[key] === control ? key : null;
    });

    if (key) {
      this.removeKey(key);
    }
  };

  _proto.removeKey = function removeKey(key) {
    var exhist = this.controls[key] !== undefined;
    delete this.controls[key];

    if (exhist) {
      this.switchSubjects_();
    }
  };

  _proto.addValidators = function addValidators() {
    for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {
      validators[_key] = arguments[_key];
    }

    this.forEach_(function (control) {
      return control.addValidators.apply(control, validators);
    });
  };

  _proto.replaceValidators = function replaceValidators() {
    for (var _len2 = arguments.length, validators = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      validators[_key2] = arguments[_key2];
    }

    this.forEach_(function (control) {
      return control.replaceValidators.apply(control, validators);
    });
  };

  _proto.clearValidators = function clearValidators() {
    this.forEach_(function (control) {
      return control.clearValidators();
    });
  };

  _createClass(FormAbstractCollection, [{
    key: "valid",
    get: function get() {
      return this.all_('valid', true);
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.any_('invalid', true);
    }
  }, {
    key: "pending",
    get: function get() {
      return this.any_('pending', true);
    }
  }, {
    key: "disabled",
    get: function get() {
      return this.all_('disabled', true);
    },
    set: function set(disabled) {
      this.forEach_(function (control) {
        control.disabled = disabled;
      });
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.any_('enabled', true);
    }
  }, {
    key: "hidden",
    get: function get() {
      return this.all_('hidden', true);
    },
    set: function set(hidden) {
      this.forEach_(function (control) {
        control.hidden = hidden;
      });
    }
  }, {
    key: "visible",
    get: function get() {
      return this.any_('visible', true);
    }
  }, {
    key: "submitted",
    get: function get() {
      return this.all_('submitted', true);
    },
    set: function set(submitted) {
      this.forEach_(function (control) {
        control.submitted = submitted;
      });
    }
  }, {
    key: "dirty",
    get: function get() {
      return this.any_('dirty', true);
    }
  }, {
    key: "pristine",
    get: function get() {
      return this.all_('pristine', true);
    }
  }, {
    key: "touched",
    get: function get() {
      return this.all_('touched', true);
    },
    set: function set(touched) {
      this.forEach_(function (control) {
        control.touched = touched;
      });
    }
  }, {
    key: "untouched",
    get: function get() {
      return this.any_('untouched', true);
    }
  }, {
    key: "value",
    get: function get() {
      return this.reduce_(function (result, control, key) {
        result[key] = control.value;
        return result;
      }, {});
    },
    set: function set(value) {
      this.forEach_(function (control, key) {
        control.value = value[key];
      });
    }
  }, {
    key: "errors",
    get: function get() {
      return this.reduce_(function (result, control) {
        return Object.assign(result, control.errors);
      }, {});
    },
    set: function set(errors) {}
  }]);

  return FormAbstractCollection;
}(FormAbstract);var FormArray = function (_FormAbstractCollecti) {
  _inheritsLoose(FormArray, _FormAbstractCollecti);

  function FormArray(controls, validators) {
    if (controls === void 0) {
      controls = [];
    }

    return _FormAbstractCollecti.call(this, controls, validators) || this;
  }

  var _proto = FormArray.prototype;

  _proto.forEach_ = function forEach_(callback) {
    this.controls.forEach(function (control, key) {
      return callback(control, key);
    });
  };

  _proto.init = function init(control, key) {
    this.controls.length = Math.max(this.controls.length, key);
    this.controls[key] = this.initControl_(control, key);
  };

  _proto.set = function set(control, key) {
    this.controls.splice(key, 1, this.initControl_(control, key));
    this.switchSubjects_();
  };

  _proto.add = function add(control, key) {
    this.controls.length = Math.max(this.controls.length, key);
    this.controls[key] = this.initControl_(control, key);
    this.switchSubjects_();
  };

  _proto.push = function push(control) {
    this.controls.push(this.initControl_(control, this.controls.length));
    this.switchSubjects_();
  };

  _proto.insert = function insert(control, key) {
    this.controls.splice(key, 0, this.initControl_(control, key));
    this.switchSubjects_();
  };

  _proto.remove = function remove(control) {
    var key = this.controls.indexOf(control);

    if (key !== -1) {
      this.removeKey(key);
    }
  };

  _proto.removeKey = function removeKey(key) {
    if (this.controls.length > key) {
      this.controls.splice(key, 1);
      this.switchSubjects_();
    }
  };

  _proto.at = function at(key) {
    return this.controls[key];
  };

  _createClass(FormArray, [{
    key: "value",
    get: function get() {
      return this.reduce_(function (result, control, key) {
        result[key] = control.value;
        return result;
      }, []);
    }
  }, {
    key: "length",
    get: function get() {
      return this.controls.length;
    }
  }]);

  return FormArray;
}(FormAbstractCollection);
function formArray(controls, validators) {
  if (controls === void 0) {
    controls = [];
  }

  return new FormArray(controls, validators);
}var FormGroup = function (_FormAbstractCollecti) {
  _inheritsLoose(FormGroup, _FormAbstractCollecti);

  function FormGroup(controls, validators) {
    if (controls === void 0) {
      controls = {};
    }

    return _FormAbstractCollecti.call(this, controls, validators) || this;
  }

  return FormGroup;
}(FormAbstractCollection);
function formGroup(controls, validators) {
  if (controls === void 0) {
    controls = {};
  }

  return new FormGroup(controls, validators);
}exports.EmailValidator=EmailValidator;exports.FormAbstract=FormAbstract;exports.FormAbstractCollection=FormAbstractCollection;exports.FormAbstractCollectionDirective=FormAbstractCollectionDirective;exports.FormArray=FormArray;exports.FormArrayDirective=FormArrayDirective;exports.FormCheckboxDirective=FormCheckboxDirective;exports.FormControl=FormControl;exports.FormEmailDirective=FormEmailDirective;exports.FormFieldComponent=FormFieldComponent;exports.FormGroup=FormGroup;exports.FormGroupDirective=FormGroupDirective;exports.FormInputDirective=FormInputDirective;exports.FormMaxDirective=FormMaxDirective;exports.FormMaxLengthDirective=FormMaxLengthDirective;exports.FormMinDirective=FormMinDirective;exports.FormMinLengthDirective=FormMinLengthDirective;exports.FormModule=FormModule;exports.FormPatternDirective=FormPatternDirective;exports.FormPlaceholderDirective=FormPlaceholderDirective;exports.FormRadioDirective=FormRadioDirective;exports.FormRequiredDirective=FormRequiredDirective;exports.FormRequiredTrueDirective=FormRequiredTrueDirective;exports.FormSelectDirective=FormSelectDirective;exports.FormStatus=FormStatus$1;exports.FormValidator=FormValidator;exports.MaxLengthValidator=MaxLengthValidator;exports.MaxValidator=MaxValidator;exports.MinLengthValidator=MinLengthValidator;exports.MinValidator=MinValidator;exports.NullValidator=NullValidator;exports.PatternValidator=PatternValidator;exports.RequiredTrueValidator=RequiredTrueValidator;exports.RequiredValidator=RequiredValidator;exports.Validators=validators;exports.formArray=formArray;exports.formGroup=formGroup;return exports;}({},rxcomp,rxjs,rxjs.operators));
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

	/*!
	 * EasePack 3.9.1
	 * https://greensock.com
	 *
	 * @license Copyright 2008-2021, GreenSock. All rights reserved.
	 * Subject to the terms at https://greensock.com/standard-license or for
	 * Club GreenSock members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/
	var gsap,
	    _registerEase,
	    _getGSAP = function _getGSAP() {
	  return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
	},
	    _boolean = function _boolean(value, defaultValue) {
	  return !!(typeof value === "undefined" ? defaultValue : value && !~(value + "").indexOf("false"));
	},
	    _initCore = function _initCore(core) {
	  gsap = core || _getGSAP();

	  if (gsap) {
	    _registerEase = gsap.registerEase;

	    var eases = gsap.parseEase(),
	        createConfig = function createConfig(ease) {
	      return function (ratio) {
	        var y = 0.5 + ratio / 2;

	        ease.config = function (p) {
	          return ease(2 * (1 - p) * p * y + p * p);
	        };
	      };
	    },
	        p;

	    for (p in eases) {
	      if (!eases[p].config) {
	        createConfig(eases[p]);
	      }
	    }

	    _registerEase("slow", SlowMo);

	    _registerEase("expoScale", ExpoScaleEase);

	    _registerEase("rough", RoughEase);

	    for (p in EasePack) {
	      p !== "version" && gsap.core.globals(p, EasePack[p]);
	    }
	  }
	},
	    _createSlowMo = function _createSlowMo(linearRatio, power, yoyoMode) {
	  linearRatio = Math.min(1, linearRatio || 0.7);

	  var pow = linearRatio < 1 ? power || power === 0 ? power : 0.7 : 0,
	      p1 = (1 - linearRatio) / 2,
	      p3 = p1 + linearRatio,
	      calcEnd = _boolean(yoyoMode);

	  return function (p) {
	    var r = p + (0.5 - p) * pow;
	    return p < p1 ? calcEnd ? 1 - (p = 1 - p / p1) * p : r - (p = 1 - p / p1) * p * p * p * r : p > p3 ? calcEnd ? p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p : r + (p - r) * (p = (p - p3) / p1) * p * p * p : calcEnd ? 1 : r;
	  };
	},
	    _createExpoScale = function _createExpoScale(start, end, ease) {
	  var p1 = Math.log(end / start),
	      p2 = end - start;
	  ease && (ease = gsap.parseEase(ease));
	  return function (p) {
	    return (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;
	  };
	},
	    EasePoint = function EasePoint(time, value, next) {
	  this.t = time;
	  this.v = value;

	  if (next) {
	    this.next = next;
	    next.prev = this;
	    this.c = next.v - value;
	    this.gap = next.t - time;
	  }
	},
	    _createRoughEase = function _createRoughEase(vars) {
	  if (typeof vars !== "object") {
	    vars = {
	      points: +vars || 20
	    };
	  }

	  var taper = vars.taper || "none",
	      a = [],
	      cnt = 0,
	      points = (+vars.points || 20) | 0,
	      i = points,
	      randomize = _boolean(vars.randomize, true),
	      clamp = _boolean(vars.clamp),
	      template = gsap ? gsap.parseEase(vars.template) : 0,
	      strength = (+vars.strength || 1) * 0.4,
	      x,
	      y,
	      bump,
	      invX,
	      obj,
	      pnt,
	      recent;

	  while (--i > -1) {
	    x = randomize ? Math.random() : 1 / points * i;
	    y = template ? template(x) : x;

	    if (taper === "none") {
	      bump = strength;
	    } else if (taper === "out") {
	      invX = 1 - x;
	      bump = invX * invX * strength;
	    } else if (taper === "in") {
	      bump = x * x * strength;
	    } else if (x < 0.5) {
	      invX = x * 2;
	      bump = invX * invX * 0.5 * strength;
	    } else {
	      invX = (1 - x) * 2;
	      bump = invX * invX * 0.5 * strength;
	    }

	    if (randomize) {
	      y += Math.random() * bump - bump * 0.5;
	    } else if (i % 2) {
	      y += bump * 0.5;
	    } else {
	      y -= bump * 0.5;
	    }

	    if (clamp) {
	      if (y > 1) {
	        y = 1;
	      } else if (y < 0) {
	        y = 0;
	      }
	    }

	    a[cnt++] = {
	      x: x,
	      y: y
	    };
	  }

	  a.sort(function (a, b) {
	    return a.x - b.x;
	  });
	  pnt = new EasePoint(1, 1, null);
	  i = points;

	  while (i--) {
	    obj = a[i];
	    pnt = new EasePoint(obj.x, obj.y, pnt);
	  }

	  recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);
	  return function (p) {
	    var pnt = recent;

	    if (p > pnt.t) {
	      while (pnt.next && p >= pnt.t) {
	        pnt = pnt.next;
	      }

	      pnt = pnt.prev;
	    } else {
	      while (pnt.prev && p <= pnt.t) {
	        pnt = pnt.prev;
	      }
	    }

	    recent = pnt;
	    return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;
	  };
	};

	var SlowMo = _createSlowMo(0.7);
	SlowMo.ease = SlowMo;
	SlowMo.config = _createSlowMo;
	var ExpoScaleEase = _createExpoScale(1, 2);
	ExpoScaleEase.config = _createExpoScale;
	var RoughEase = _createRoughEase();
	RoughEase.ease = RoughEase;
	RoughEase.config = _createRoughEase;
	var EasePack = {
	  SlowMo: SlowMo,
	  RoughEase: RoughEase,
	  ExpoScaleEase: ExpoScaleEase
	};

	for (var p in EasePack) {
	  EasePack[p].register = _initCore;
	  EasePack[p].version = "3.9.1";
	}

	_getGSAP() && gsap.registerPlugin(SlowMo);

	exports.EasePack = EasePack;
	exports.ExpoScaleEase = ExpoScaleEase;
	exports.RoughEase = RoughEase;
	exports.SlowMo = SlowMo;
	exports.default = EasePack;

	Object.defineProperty(exports, '__esModule', { value: true });

})));

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /*!
   * GSAP 3.9.1
   * https://greensock.com
   *
   * @license Copyright 2008-2021, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
      _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
      _suppressOverwrites,
      _bigNum = 1e8,
      _tinyNum = 1 / _bigNum,
      _2PI = Math.PI * 2,
      _HALF_PI = _2PI / 4,
      _gsID = 0,
      _sqrt = Math.sqrt,
      _cos = Math.cos,
      _sin = Math.sin,
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
      _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
      _isArray = Array.isArray,
      _strictNumExp = /(?:-?\.?\d|\.)+/gi,
      _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
      _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
      _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
      _relExp = /[+-]=-?[.\d]+/,
      _delimitedValueExp = /[^,'"\[\]\s]+/gi,
      _unitExp = /[\d.+\-=]+(?:e[-+]\d*)*/i,
      _globalTimeline,
      _win,
      _coreInitted,
      _doc,
      _globals = {},
      _installScope = {},
      _coreReady,
      _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
      _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
      _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
      _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
      _emptyFunc = function _emptyFunc() {
    return 0;
  },
      _reservedProps = {},
      _lazyTweens = [],
      _lazyLookup = {},
      _lastRenderedFrame,
      _plugins = {},
      _effects = {},
      _nextGCFrame = 30,
      _harnessPlugins = [],
      _callbackNames = "",
      _harness = function _harness(targets) {
    var target = targets[0],
        harnessPlugin,
        i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);

    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      i = _harnessPlugins.length;

      while (i-- && !_harnessPlugins[i].targetTest(target)) {}

      harnessPlugin = _harnessPlugins[i];
    }

    i = targets.length;

    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }

    return targets;
  },
      _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
      _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
      _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
      _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    var l = toFind.length,
        i = 0;

    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

    return i < l;
  },
      _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
        a = _lazyTweens.slice(0),
        i,
        tween;

    _lazyLookup = {};
    _lazyTweens.length = 0;

    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && _lazyRender();
    animation.render(time, suppressEvents, force);
    _lazyTweens.length && _lazyRender();
  },
      _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
      _passThrough = function _passThrough(p) {
    return p;
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
      _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }

    return base;
  },
      _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }

    return base;
  },
      _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
        p;

    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }

    return copy;
  },
      _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }

    return vars;
  },
      _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
        match = i === a2.length;

    while (match && i-- && a1[i] === a2[i]) {}

    return i < 0;
  },
      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = parent[lastProp],
        t;

    if (sortBy) {
      t = child[sortBy];

      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }

    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }

    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }

    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = child._prev,
        next = child._next;

    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }

    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }

    child._next = child._prev = child.parent = null;
  },
      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
    child._act = 0;
  },
      _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      var a = animation;

      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }

    return animation;
  },
      _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;

    while (parent && parent.parent) {
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }

    return animation;
  },
      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
      _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
      _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
      _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    var parent = animation._dp;

    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

      _setEnd(animation);

      parent._dirty || _uncache(parent, animation);
    }

    return animation;
  },
      _postAddChecks = function _postAddChecks(timeline, child) {
    var t;

    if (child._time || child._initted && !child._dur) {
      t = _parentToChildTotalTime(timeline.rawTime(), child);

      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    }

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      if (timeline._dur < timeline.duration()) {
        t = timeline;

        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime);
          t = t._dp;
        }
      }

      timeline._zTime = -_tinyNum;
    }
  },
      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    return timeline;
  },
      _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
      _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
    _initTween(tween, totalTime);

    if (!tween._initted) {
      return 1;
    }

    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);

      tween._lazy = [totalTime, suppressEvents];
      return 1;
    }
  },
      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
        repeatDelay = tween._rDelay,
        tTime = 0,
        pt,
        iteration,
        prevIteration;

    if (repeatDelay && tween._repeat) {
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }

    if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
        return;
      }

      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);
      suppressEvents || (suppressEvents = totalTime && !prevIteration);
      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);

        if (!suppressEvents) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;

    if (time > prevTime) {
      child = animation._first;

      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }

        child = child._next;
      }
    } else {
      child = animation._last;

      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }

        child = child._prev;
      }
    }
  },
      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
        dur = _roundPrecise(duration) || 0,
        totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
      _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
      _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
        recent = animation._recent || _zeroPosition,
        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
        i,
        offset,
        isPercent;

    if (_isString(position) && (isNaN(position) || position in labels)) {
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");

      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }

      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }

      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }

      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }

    return position == null ? clippedDuration : +position;
  },
      _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
        vars = params[varsIndex],
        irVars,
        parent;

    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;

    if (type) {
      irVars = vars;
      parent = timeline;

      while (parent && !("immediateRender" in irVars)) {
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }

      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
      _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
      _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
      getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : value.substr(v.index + v[0].length);
  },
      clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
      _slice = [].slice,
      _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
      _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }

    return ar.forEach(function (value) {
      var _accumulator;

      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
      toArray = function toArray(value, scope, leaveStrings) {
    return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
      selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
      shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
      distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }

    var vars = _isObject(v) ? v : {
      each: v
    },
        ease = _parseEase(vars.ease),
        from = vars.from || 0,
        base = parseFloat(vars.base) || 0,
        cache = {},
        isDecimal = from > 0 && from < 1,
        ratios = isNaN(from) || isDecimal,
        axis = vars.axis,
        ratioX = from,
        ratioY = from;

    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }

    return function (i, target, a) {
      var l = (a || vars).length,
          distances = cache[l],
          originX,
          originY,
          x,
          y,
          d,
          j,
          max,
          min,
          wrapAt;

      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

        if (!wrapAt) {
          max = -_bigNum;

          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

          wrapAt--;
        }

        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;

        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }

        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0;
        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }

      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;
    };
  },
      _roundModifier = function _roundModifier(v) {
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length);
    return function (raw) {
      var n = Math.round(parseFloat(raw) / v) * v * p;
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));
    };
  },
      snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
        radius,
        is2D;

    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;

      if (snapTo.values) {
        snapTo = toArray(snapTo.values);

        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius;
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }

    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
          y = parseFloat(is2D ? raw.y : 0),
          min = _bigNum,
          closest = 0,
          i = snapTo.length,
          dx,
          dy;

      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }

        if (dx < min) {
          min = dx;
          closest = i;
        }
      }

      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
      random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
      pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }

    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
      unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
      normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
      _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
      wrap = function wrap(min, max, value) {
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
      wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
        total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
      _replaceRandom = function _replaceRandom(value) {
    var prev = 0,
        s = "",
        i,
        nums,
        end,
        isArray;

    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }

    return s + value.substr(prev, value.length - prev);
  },
      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
        outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
      interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };

    if (!func) {
      var isString = _isString(start),
          master = {},
          p,
          i,
          interpolators,
          l,
          il;

      progress === true && (mutate = 1) && (progress = null);

      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;

        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i]));
        }

        l--;

        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };

        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }

      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }

        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }

    return _conditionalReturn(progress, func);
  },
      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    var labels = timeline.labels,
        min = _bigNum,
        p,
        distance,
        label;

    for (p in labels) {
      distance = labels[p] - fromTime;

      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }

    return label;
  },
      _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
        callback = v[type],
        params,
        scope;

    if (!callback) {
      return;
    }

    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender();
    return params ? callback.apply(scope, params) : callback.call(scope);
  },
      _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);

    animation.scrollTrigger && animation.scrollTrigger.kill(false);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
      _quickTween,
      _createPlugin = function _createPlugin(config) {
    config = !config.name && config["default"] || config;

    var name = config.name,
        isFunc = _isFunction(config),
        Plugin = name && !isFunc && config.init ? function () {
      this._props = [];
    } : config,
        instanceDefaults = {
      init: _emptyFunc,
      render: _renderPropTweens,
      add: _addPropTween,
      kill: _killPropTweensOf,
      modifier: _addPluginModifier,
      rawVars: 0
    },
        statics = {
      targetTest: 0,
      get: 0,
      getSetter: _getSetter,
      aliases: {},
      register: 0
    };

    _wake();

    if (config !== Plugin) {
      if (_plugins[name]) {
        return;
      }

      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));

      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));

      _plugins[Plugin.prop = name] = Plugin;

      if (config.targetTest) {
        _harnessPlugins.push(Plugin);

        _reservedProps[name] = 1;
      }

      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin";
    }

    _addGlobal(name, Plugin);

    config.register && config.register(gsap, Plugin, PropTween);
  },
      _255 = 255,
      _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
      _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
      splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
        r,
        g,
        b,
        h,
        s,
        l,
        max,
        min,
        d,
        wasHSL;

    if (!a) {
      if (v.substr(-1) === ",") {
        v = v.substr(0, v.length - 1);
      }

      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }

        if (v.length === 9) {
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }

        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);

        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1);
          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }

      a = a.map(Number);
    }

    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;

      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }

      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }

    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
      _colorOrderData = function _colorOrderData(v) {
    var values = [],
        c = [],
        i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
      _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
        colors = (s + result).match(_colorExp),
        type = toHSL ? "hsla(" : "rgba(",
        i = 0,
        c,
        shell,
        d,
        l;

    if (!colors) {
      return s;
    }

    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });

    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;

      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }

    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }

    return result + shell[l];
  },
      _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
        p;

    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }

    return new RegExp(s + ")", "gi");
  }(),
      _hslExp = /hsl[a]?\(/,
      _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
        toHSL;
    _colorExp.lastIndex = 0;

    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));
      return true;
    }
  },
      _tickerActive,
      _ticker = function () {
    var _getTime = Date.now,
        _lagThreshold = 500,
        _adjustedLag = 33,
        _startTime = _getTime(),
        _lastUpdate = _startTime,
        _gap = 1000 / 240,
        _nextTime = _gap,
        _listeners = [],
        _id,
        _req,
        _raf,
        _self,
        _delta,
        _i,
        _tick = function _tick(v) {
      var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;

      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
      _lastUpdate += elapsed;
      time = _lastUpdate - _startTime;
      overlap = time - _nextTime;

      if (overlap > 0 || manual) {
        frame = ++_self.frame;
        _delta = time - _self.time * 1000;
        _self.time = time = time / 1000;
        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
        dispatch = 1;
      }

      manual || (_id = _req(_tick));

      if (dispatch) {
        for (_i = 0; _i < _listeners.length; _i++) {
          _listeners[_i](time, _delta, frame, v);
        }
      }
    };

    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

            _raf = _win.requestAnimationFrame;
          }

          _id && _self.sleep();

          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };

          _tickerActive = 1;

          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || 1 / _tinyNum;
        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback) {
        _listeners.indexOf(callback) < 0 && _listeners.push(callback);

        _wake();
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
      _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
      _easeMap = {},
      _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
      _quotesExp = /["']/g,
      _parseObjectInString = function _parseObjectInString(value) {
    var obj = {},
        split = value.substr(1, value.length - 3).split(":"),
        key = split[0],
        i = 1,
        l = split.length,
        index,
        val,
        parsedVal;

    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }

    return obj;
  },
      _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
        close = value.indexOf(")"),
        nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
      _configEaseFromString = function _configEaseFromString(name) {
    var split = (name + "").split("("),
        ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
      _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
        ease;

    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }

      child = child._next;
    }
  },
      _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }

    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }

    var ease = {
      easeIn: easeIn,
      easeOut: easeOut,
      easeInOut: easeInOut
    },
        lowercaseName;

    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });

    return ease;
  },
      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
      _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
        easeOut = function easeOut(p) {
      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    p2 = _2PI / p2;

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };

    return ease;
  },
      _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }

    var easeOut = function easeOut(p) {
      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };

    return ease;
  };

  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
    var power = i < 5 ? i + 1 : i;

    _insertEase(name + ",Power" + (power - 1), i ? function (p) {
      return Math.pow(p, power);
    } : function (p) {
      return p;
    }, function (p) {
      return 1 - Math.pow(1 - p, power);
    }, function (p) {
      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
  });

  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

  (function (n, c) {
    var n1 = 1 / c,
        n2 = 2 * n1,
        n3 = 2.5 * n1,
        easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };

    _insertEase("Bounce", function (p) {
      return 1 - easeOut(1 - p);
    }, easeOut);
  })(7.5625, 2.75);

  _insertEase("Expo", function (p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
  });

  _insertEase("Circ", function (p) {
    return -(_sqrt(1 - p * p) - 1);
  });

  _insertEase("Sine", function (p) {
    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
  });

  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
    config: function config(steps, immediateStart) {
      if (steps === void 0) {
        steps = 1;
      }

      var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
      return function (p) {
        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
      };
    }
  };
  _defaults.ease = _easeMap["quad.out"];

  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
    return _callbackNames += name + "," + name + "Params,";
  });

  var GSCache = function GSCache(target, harness) {
    this.id = _gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : _getProperty;
    this.set = harness ? harness.getSetter : _getSetter;
  };
  var Animation = function () {
    function Animation(vars) {
      this.vars = vars;
      this._delay = +vars.delay || 0;

      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
        this._rDelay = vars.repeatDelay || 0;
        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
      }

      this._ts = 1;

      _setDuration(this, +vars.duration, 1, 1);

      this.data = vars.data;
      _tickerActive || _ticker.wake();
    }

    var _proto = Animation.prototype;

    _proto.delay = function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }

      return this._delay;
    };

    _proto.duration = function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };

    _proto.totalDuration = function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }

      this._dirty = 0;
      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
    };

    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
      _wake();

      if (!arguments.length) {
        return this._tTime;
      }

      var parent = this._dp;

      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime);

        !parent._dp || parent.parent || _postAddChecks(parent, this);

        while (parent && parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }

          parent = parent.parent;
        }

        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }

      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
        this._ts || (this._pTime = _totalTime);

        _lazySafeRender(this, _totalTime, suppressEvents);
      }

      return this;
    };

    _proto.time = function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;
    };

    _proto.totalProgress = function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };

    _proto.progress = function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };

    _proto.iteration = function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;

      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    };

    _proto.timeScale = function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts;
      }

      if (this._rts === value) {
        return this;
      }

      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;
      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;

      _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));

      _setEnd(this);

      return this;
    };

    _proto.paused = function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }

      if (this._ps !== value) {
        this._ps = value;

        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());
          this._ts = this._act = 0;
        } else {
          _wake();

          this._ts = this._rts;
          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));
        }
      }

      return this;
    };

    _proto.startTime = function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }

      return this._start;
    };

    _proto.endTime = function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    };

    _proto.rawTime = function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp;
      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };

    _proto.globalTime = function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();

      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }

      return time;
    };

    _proto.repeat = function repeat(value) {
      if (arguments.length) {
        this._repeat = value === Infinity ? -2 : value;
        return _onUpdateTotalDuration(this);
      }

      return this._repeat === -2 ? Infinity : this._repeat;
    };

    _proto.repeatDelay = function repeatDelay(value) {
      if (arguments.length) {
        var time = this._time;
        this._rDelay = value;

        _onUpdateTotalDuration(this);

        return time ? this.time(time) : this;
      }

      return this._rDelay;
    };

    _proto.yoyo = function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }

      return this._yoyo;
    };

    _proto.seek = function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    };

    _proto.restart = function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    };

    _proto.play = function play(from, suppressEvents) {
      from != null && this.seek(from, suppressEvents);
      return this.reversed(false).paused(false);
    };

    _proto.reverse = function reverse(from, suppressEvents) {
      from != null && this.seek(from || this.totalDuration(), suppressEvents);
      return this.reversed(true).paused(false);
    };

    _proto.pause = function pause(atTime, suppressEvents) {
      atTime != null && this.seek(atTime, suppressEvents);
      return this.paused(true);
    };

    _proto.resume = function resume() {
      return this.paused(false);
    };

    _proto.reversed = function reversed(value) {
      if (arguments.length) {
        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));
        return this;
      }

      return this._rts < 0;
    };

    _proto.invalidate = function invalidate() {
      this._initted = this._act = 0;
      this._zTime = -_tinyNum;
      return this;
    };

    _proto.isActive = function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    };

    _proto.eventCallback = function eventCallback(type, callback, params) {
      var vars = this.vars;

      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;
          params && (vars[type + "Params"] = params);
          type === "onUpdate" && (this._onUpdate = callback);
        }

        return this;
      }

      return vars[type];
    };

    _proto.then = function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null;
          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };

        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    };

    _proto.kill = function kill() {
      _interrupt(this);
    };

    return Animation;
  }();

  _setDefaults(Animation.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
  });

  var Timeline = function (_Animation) {
    _inheritsLoose(Timeline, _Animation);

    function Timeline(vars, position) {
      var _this;

      if (vars === void 0) {
        vars = {};
      }

      _this = _Animation.call(this, vars) || this;
      _this.labels = {};
      _this.smoothChildTiming = !!vars.smoothChildTiming;
      _this.autoRemoveChildren = !!vars.autoRemoveChildren;
      _this._sort = _isNotFalse(vars.sortChildren);
      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
      vars.reversed && _this.reverse();
      vars.paused && _this.paused(true);
      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
      return _this;
    }

    var _proto2 = Timeline.prototype;

    _proto2.to = function to(targets, vars, position) {
      _createTweenType(0, arguments, this);

      return this;
    };

    _proto2.from = function from(targets, vars, position) {
      _createTweenType(1, arguments, this);

      return this;
    };

    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
      _createTweenType(2, arguments, this);

      return this;
    };

    _proto2.set = function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    };

    _proto2.call = function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
    };

    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    };

    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;
      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }

        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;

        if (crossingStart) {
          dur || (prevTime = this._zTime);
          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }

        if (this._repeat) {
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration);

          if (tTime === tDur) {
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);

          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }

          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);
            iteration < prevIteration && (rewinding = !rewinding);
            prevTime = rewinding ? 0 : dur;
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
            this._tTime = tTime;
            !suppressEvents && this.parent && _callback(this, "onRepeat");
            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
              return this;
            }

            dur = this._dur;
            tDur = this._tDur;

            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }

            this._lock = 0;

            if (!this._ts && !prevPaused) {
              return this;
            }

            _propagateYoyoEase(this, isYoyo);
          }
        }

        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }

        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale;

        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
          prevTime = 0;
        }

        if (!prevTime && time && !suppressEvents) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            return this;
          }
        }

        if (time >= prevTime && totalTime >= 0) {
          child = this._first;

          while (child) {
            next = child._next;

            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum);
                break;
              }
            }

            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time;

          while (child) {
            next = child._prev;

            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);
                break;
              }
            }

            child = next;
          }
        }

        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

          if (this._ts) {
            this._start = prevStart;

            _setEnd(this);

            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
            _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto2.add = function add(child, position) {
      var _this2 = this;

      _isNumber(position) || (position = _parsePosition(this, position, child));

      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return this;
        }

        if (_isString(child)) {
          return this.addLabel(child, position);
        }

        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }

      return this !== child ? _addToTimeline(this, child, position) : this;
    };

    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
      if (nested === void 0) {
        nested = true;
      }

      if (tweens === void 0) {
        tweens = true;
      }

      if (timelines === void 0) {
        timelines = true;
      }

      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = -_bigNum;
      }

      var a = [],
          child = this._first;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
          }
        }

        child = child._next;
      }

      return a;
    };

    _proto2.getById = function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;

      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    };

    _proto2.remove = function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }

      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }

      _removeLinkedListItem(this, child);

      if (child === this._recent) {
        this._recent = this._last;
      }

      return _uncache(this);
    };

    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }

      this._forcing = 1;

      if (!this._dp && this._ts) {
        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }

      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

      this._forcing = 0;
      return this;
    };

    _proto2.addLabel = function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    };

    _proto2.removeLabel = function removeLabel(label) {
      delete this.labels[label];
      return this;
    };

    _proto2.addPause = function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    };

    _proto2.removePause = function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);

      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }

        child = child._next;
      }
    };

    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;

      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }

      return this;
    };

    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          children;

      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, children);
        }

        child = child._next;
      }

      return a;
    };

    _proto2.tweenTo = function tweenTo(position, vars) {
      vars = vars || {};

      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          immediateRender = _vars.immediateRender,
          initted,
          tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();

          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }

          _onStart && _onStart.apply(tween, onStartParams || []);
        }
      }, vars));

      return immediateRender ? tween.render(0) : tween;
    };

    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    };

    _proto2.recent = function recent() {
      return this._recent;
    };

    _proto2.nextLabel = function nextLabel(afterTime) {
      if (afterTime === void 0) {
        afterTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    };

    _proto2.previousLabel = function previousLabel(beforeTime) {
      if (beforeTime === void 0) {
        beforeTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    };

    _proto2.currentLabel = function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    };

    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = 0;
      }

      var child = this._first,
          labels = this.labels,
          p;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
          child._end += amount;
        }

        child = child._next;
      }

      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }

      return _uncache(this);
    };

    _proto2.invalidate = function invalidate() {
      var child = this._first;
      this._lock = 0;

      while (child) {
        child.invalidate();
        child = child._next;
      }

      return _Animation.prototype.invalidate.call(this);
    };

    _proto2.clear = function clear(includeLabels) {
      if (includeLabels === void 0) {
        includeLabels = true;
      }

      var child = this._first,
          next;

      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }

      this._dp && (this._time = this._tTime = this._pTime = 0);
      includeLabels && (this.labels = {});
      return _uncache(this);
    };

    _proto2.totalDuration = function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          start,
          parent;

      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }

      if (self._dirty) {
        parent = self.parent;

        while (child) {
          prev = child._prev;
          child._dirty && child.totalDuration();
          start = child._start;

          if (start > prevStart && self._sort && child._ts && !self._lock) {
            self._lock = 1;
            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }

          if (start < 0 && child._ts) {
            max -= start;

            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }

            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }

          child._end > max && child._ts && (max = child._end);
          child = prev;
        }

        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

        self._dirty = 0;
      }

      return self._tDur;
    };

    Timeline.updateRoot = function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

        _lastRenderedFrame = _ticker.frame;
      }

      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
      }
    };

    return Timeline;
  }(Animation);

  _setDefaults(Timeline.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });

  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
        index = 0,
        matchIndex = 0,
        result,
        startNums,
        color,
        endNum,
        chunk,
        startNum,
        hasRandom,
        a;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop);
      start = a[0];
      end = a[1];
    }

    startNums = start.match(_complexStringNumExp) || [];

    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }

      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0;
        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          s: startNum,
          c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : "";
    pt.fp = funcParam;

    if (_relExp.test(end) || hasRandom) {
      pt.e = 0;
    }

    this._pt = pt;
    return pt;
  },
      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
        pt;

    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (end.charAt(1) === "=") {
        pt = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + (getUnit(parsedStart) || 0);

        if (pt || pt === 0) {
          end = pt;
        }
      }
    }

    if (parsedStart !== end) {
      if (!isNaN(parsedStart * end) && end !== "") {
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }

      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
      _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }

    var copy = {},
        p;

    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }

    return copy;
  },
      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;

    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];
        i = plugin._props.length;

        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }

    return plugin;
  },
      _overwritingTween,
      _initTween = function _initTween(tween, time) {
    var vars = tween.vars,
        ease = vars.ease,
        startAt = vars.startAt,
        immediateRender = vars.immediateRender,
        lazy = vars.lazy,
        onUpdate = vars.onUpdate,
        onUpdateParams = vars.onUpdateParams,
        callbackScope = vars.callbackScope,
        runBackwards = vars.runBackwards,
        yoyoEase = vars.yoyoEase,
        keyframes = vars.keyframes,
        autoRevert = vars.autoRevert,
        dur = tween._dur,
        prevStartAt = tween._startAt,
        targets = tween._targets,
        parent = tween.parent,
        fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
        autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
        tl = tween.timeline,
        cleanVars,
        i,
        p,
        pt,
        target,
        hasPriority,
        gsData,
        harness,
        plugin,
        ptLookup,
        index,
        harnessVars,
        overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

    if (yoyoEase && tween._yoyo && !tween._repeat) {
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }

    tween._from = !tl && !!vars.runBackwards;

    if (!tl || keyframes && !vars.stagger) {
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop];
      cleanVars = _copyExcluding(vars, _reservedProps);
      prevStartAt && _removeFromParent(prevStartAt.render(-1, true));

      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt)));

        time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true);

        if (immediateRender) {
          time > 0 && !autoRevert && (tween._startAt = 0);

          if (dur && time <= 0) {
            time && (tween._zTime = time);
            return;
          }
        } else if (autoRevert === false) {
          tween._startAt = 0;
        }
      } else if (runBackwards && dur) {
        if (prevStartAt) {
          !autoRevert && (tween._startAt = 0);
        } else {
          time && (immediateRender = false);
          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            lazy: immediateRender && _isNotFalse(lazy),
            immediateRender: immediateRender,
            stagger: 0,
            parent: parent
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars);

          _removeFromParent(tween._startAt = Tween.set(targets, p));

          time < 0 && tween._startAt.render(-1, true);
          tween._zTime = time;

          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum);
          } else if (!time) {
            return;
          }
        }
      }

      tween._pt = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;

      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();
        index = fullTargets === targets ? i : fullTargets.indexOf(target);

        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });

          plugin.priority && (hasPriority = 1);
        }

        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }

        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;

          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }

        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }

      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween);
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten;
    keyframes && time <= 0 && tl.render(_bigNum, true, true);
  },
      _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
        propertyAliases = harness && harness.aliases,
        copy,
        p,
        i,
        aliases;

    if (!propertyAliases) {
      return vars;
    }

    copy = _merge({}, vars);

    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;

        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }

    return copy;
  },
      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
        p,
        a;

    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []);
      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",
      _staggerPropsToSkip = {};

  _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
    return _staggerPropsToSkip[name] = 1;
  });

  var Tween = function (_Animation2) {
    _inheritsLoose(Tween, _Animation2);

    function Tween(targets, vars, position, skipInherit) {
      var _this3;

      if (typeof vars === "number") {
        position.duration = vars;
        vars = position;
        position = null;
      }

      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
      var _this3$vars = _this3.vars,
          duration = _this3$vars.duration,
          delay = _this3$vars.delay,
          immediateRender = _this3$vars.immediateRender,
          stagger = _this3$vars.stagger,
          overwrite = _this3$vars.overwrite,
          keyframes = _this3$vars.keyframes,
          defaults = _this3$vars.defaults,
          scrollTrigger = _this3$vars.scrollTrigger,
          yoyoEase = _this3$vars.yoyoEase,
          parent = vars.parent || _globalTimeline,
          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
          tl,
          i,
          copy,
          l,
          p,
          curTarget,
          staggerFunc,
          staggerVarsToMerge;
      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
      _this3._ptLookup = [];
      _this3._overwrite = overwrite;

      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        vars = _this3.vars;
        tl = _this3.timeline = new Timeline({
          data: "nested",
          defaults: defaults || {}
        });
        tl.kill();
        tl.parent = tl._dp = _assertThisInitialized(_this3);
        tl._start = 0;

        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          l = parsedTargets.length;
          staggerFunc = stagger && distribute(stagger);

          if (_isObject(stagger)) {
            for (p in stagger) {
              if (~_staggerTweenProps.indexOf(p)) {
                staggerVarsToMerge || (staggerVarsToMerge = {});
                staggerVarsToMerge[p] = stagger[p];
              }
            }
          }

          for (i = 0; i < l; i++) {
            copy = _copyExcluding(vars, _staggerPropsToSkip);
            copy.stagger = 0;
            yoyoEase && (copy.yoyoEase = yoyoEase);
            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
            curTarget = parsedTargets[i];
            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

            if (!stagger && l === 1 && copy.delay) {
              _this3._delay = delay = copy.delay;
              _this3._start += delay;
              copy.delay = 0;
            }

            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
            tl._ease = _easeMap.none;
          }

          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;
        } else if (keyframes) {
          _inheritDefaults(_setDefaults(tl.vars.defaults, {
            ease: "none"
          }));

          tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
          var time = 0,
              a,
              kf,
              v;

          if (_isArray(keyframes)) {
            keyframes.forEach(function (frame) {
              return tl.to(parsedTargets, frame, ">");
            });
          } else {
            copy = {};

            for (p in keyframes) {
              p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
            }

            for (p in copy) {
              a = copy[p].sort(function (a, b) {
                return a.t - b.t;
              });
              time = 0;

              for (i = 0; i < a.length; i++) {
                kf = a[i];
                v = {
                  ease: kf.e,
                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
                };
                v[p] = kf.v;
                tl.to(parsedTargets, v, time);
                time += v.duration;
              }
            }

            tl.duration() < duration && tl.to({}, {
              duration: duration - tl.duration()
            });
          }
        }

        duration || _this3.duration(duration = tl.duration());
      } else {
        _this3.timeline = 0;
      }

      if (overwrite === true && !_suppressOverwrites) {
        _overwritingTween = _assertThisInitialized(_this3);

        _globalTimeline.killTweensOf(parsedTargets);

        _overwritingTween = 0;
      }

      _addToTimeline(parent, _assertThisInitialized(_this3), position);

      vars.reversed && _this3.reverse();
      vars.paused && _this3.paused(true);

      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
        _this3._tTime = -_tinyNum;

        _this3.render(Math.max(0, -delay));
      }

      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
      return _this3;
    }

    var _proto3 = Tween.prototype;

    _proto3.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;

      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {
        time = tTime;
        timeline = this.timeline;

        if (this._repeat) {
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration);

          if (tTime === tDur) {
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          isYoyo = this._yoyo && iteration & 1;

          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);

          if (time === prevTime && !force && this._initted) {
            return this;
          }

          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);

            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1;
              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }

        if (!this._initted) {
          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
            this._tTime = 0;
            return this;
          }

          if (dur !== this._dur) {
            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._tTime = tTime;
        this._time = time;

        if (!this._act && this._ts) {
          this._act = 1;
          this._lazy = 0;
        }

        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }

        if (time && !prevTime && !suppressEvents) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            return this;
          }
        }

        pt = this._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

        if (this._onUpdate && !suppressEvents) {
          totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force);

          _callback(this, "onUpdate");
        }

        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto3.targets = function targets() {
      return this._targets;
    };

    _proto3.invalidate = function invalidate() {
      this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate();
      return _Animation2.prototype.invalidate.call(this);
    };

    _proto3.kill = function kill(targets, vars) {
      if (vars === void 0) {
        vars = "all";
      }

      if (!targets && (!vars || vars === "all")) {
        this._lazy = this._pt = 0;
        return this.parent ? _interrupt(this) : this;
      }

      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);
        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);
        return this;
      }

      var parsedTargets = this._targets,
          killingTargets = targets ? toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;

      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        vars === "all" && (this._pt = 0);
        return _interrupt(this);
      }

      overwrittenProps = this._op = this._op || [];

      if (vars !== "all") {
        if (_isString(vars)) {
          p = {};

          _forEachName(vars, function (name) {
            return p[name] = 1;
          });

          vars = p;
        }

        vars = _addAliasesToVars(parsedTargets, vars);
      }

      i = parsedTargets.length;

      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];

          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }

          for (p in props) {
            pt = curLookup && curLookup[p];

            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }

              delete curLookup[p];
            }

            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }

      this._initted && !this._pt && firstPT && _interrupt(this);
      return this;
    };

    Tween.to = function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    };

    Tween.from = function from(targets, vars) {
      return _createTweenType(1, arguments);
    };

    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      });
    };

    Tween.fromTo = function fromTo(targets, fromVars, toVars) {
      return _createTweenType(2, arguments);
    };

    Tween.set = function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    };

    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    };

    return Tween;
  }(Animation);

  _setDefaults(Tween.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  });

  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
    Tween[name] = function () {
      var tl = new Timeline(),
          params = _slice.call(arguments, 0);

      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
      return tl[name].apply(tl, params);
    };
  });

  var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
      _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
      _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
      _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
      _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
      _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
      _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
        s = "";

    if (!ratio && data.b) {
      s = data.b;
    } else if (ratio === 1 && data.e) {
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;
        pt = pt._next;
      }

      s += data.c;
    }

    data.set(data.t, data.p, s, data);
  },
      _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
        next;

    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
      _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
        hasNonDependentRemaining,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }

      pt = next;
    }

    return !hasNonDependentRemaining;
  },
      _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
        next,
        pt2,
        first,
        last;

    while (pt) {
      next = pt._next;
      pt2 = first;

      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }

      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }

      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }

      pt = next;
    }

    parent._pt = first;
  };

  var PropTween = function () {
    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
      this.t = target;
      this.s = start;
      this.c = change;
      this.p = prop;
      this.r = renderer || _renderPlain;
      this.d = data || this;
      this.set = setter || _setterPlain;
      this.pr = priority || 0;
      this._next = next;

      if (next) {
        next._prev = this;
      }
    }

    var _proto4 = PropTween.prototype;

    _proto4.modifier = function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set;
      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target;
      this.tween = tween;
    };

    return PropTween;
  }();

  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
    return _reservedProps[name] = 1;
  });

  _globals.TweenMax = _globals.TweenLite = Tween;
  _globals.TimelineLite = _globals.TimelineMax = Timeline;
  _globalTimeline = new Timeline({
    sortChildren: false,
    defaults: _defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  _config.stringFilter = _colorStringFilter;
  var _gsap = {
    registerPlugin: function registerPlugin() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      args.forEach(function (config) {
        return _createPlugin(config);
      });
    },
    timeline: function timeline(vars) {
      return new Timeline(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
      return _globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property, unit, uncache) {
      _isString(target) && (target = toArray(target)[0]);

      var getter = _getCache(target || {}).get,
          format = unit ? _passThrough : _numericIfPossible;

      unit === "native" && (unit = "");
      return !target ? target : !property ? function (property, unit, uncache) {
        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    },
    quickSetter: function quickSetter(target, property, unit) {
      target = toArray(target);

      if (target.length > 1) {
        var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
            l = setters.length;
        return function (value) {
          var i = l;

          while (i--) {
            setters[i](value);
          }
        };
      }

      target = target[0] || {};

      var Plugin = _plugins[property],
          cache = _getCache(target),
          p = cache.harness && (cache.harness.aliases || {})[property] || property,
          setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);

      return Plugin ? setter : function (value) {
        return setter(target, p, unit ? value + unit : value, cache, 1);
      };
    },
    isTweening: function isTweening(targets) {
      return _globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
      return _mergeDeep(_defaults, value || {});
    },
    config: function config(value) {
      return _mergeDeep(_config, value || {});
    },
    registerEffect: function registerEffect(_ref3) {
      var name = _ref3.name,
          effect = _ref3.effect,
          plugins = _ref3.plugins,
          defaults = _ref3.defaults,
          extendTimeline = _ref3.extendTimeline;
      (plugins || "").split(",").forEach(function (pluginName) {
        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
      });

      _effects[name] = function (targets, vars, tl) {
        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
      };

      if (extendTimeline) {
        Timeline.prototype[name] = function (targets, vars, position) {
          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
        };
      }
    },
    registerEase: function registerEase(name, ease) {
      _easeMap[name] = _parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
    },
    getById: function getById(id) {
      return _globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
      if (vars === void 0) {
        vars = {};
      }

      var tl = new Timeline(vars),
          child,
          next;
      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

      _globalTimeline.remove(tl);

      tl._dp = 0;
      tl._time = tl._tTime = _globalTimeline._time;
      child = _globalTimeline._first;

      while (child) {
        next = child._next;

        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
          _addToTimeline(tl, child, child._start - child._delay);
        }

        child = next;
      }

      _addToTimeline(_globalTimeline, tl, 0);

      return tl;
    },
    utils: {
      wrap: wrap,
      wrapYoyo: wrapYoyo,
      distribute: distribute,
      random: random,
      snap: snap,
      normalize: normalize,
      getUnit: getUnit,
      clamp: clamp,
      splitColor: splitColor,
      toArray: toArray,
      selector: selector,
      mapRange: mapRange,
      pipe: pipe,
      unitize: unitize,
      interpolate: interpolate,
      shuffle: shuffle
    },
    install: _install,
    effects: _effects,
    ticker: _ticker,
    updateRoot: Timeline.updateRoot,
    plugins: _plugins,
    globalTimeline: _globalTimeline,
    core: {
      PropTween: PropTween,
      globals: _addGlobal,
      Tween: Tween,
      Timeline: Timeline,
      Animation: Animation,
      getCache: _getCache,
      _removeLinkedListItem: _removeLinkedListItem,
      suppressOverwrites: function suppressOverwrites(value) {
        return _suppressOverwrites = value;
      }
    }
  };

  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
    return _gsap[name] = Tween[name];
  });

  _ticker.add(Timeline.updateRoot);

  _quickTween = _gsap.to({}, {
    duration: 0
  });

  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;

    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }

    return pt;
  },
      _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
        p,
        i,
        pt;

    for (p in modifiers) {
      i = targets.length;

      while (i--) {
        pt = tween._ptLookup[i][p];

        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            pt = _getPluginPropTween(pt, p);
          }

          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;

          if (_isString(vars)) {
            temp = {};

            _forEachName(vars, function (name) {
              return temp[name] = 1;
            });

            vars = temp;
          }

          if (modifier) {
            temp = {};

            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }

            vars = temp;
          }

          _addModifiers(tween, vars);
        };
      }
    };
  };

  var gsap = _gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
      var p, pt;

      for (p in vars) {
        pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
        pt && (pt.op = p);

        this._props.push(p);
      }
    }
  }, {
    name: "endArray",
    init: function init(target, value) {
      var i = value.length;

      while (i--) {
        this.add(target, i, target[i] || 0, value[i]);
      }
    }
  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap;
  Tween.version = Timeline.version = gsap.version = "3.9.1";
  _coreReady = 1;
  _windowExists() && _wake();
  var Power0 = _easeMap.Power0,
      Power1 = _easeMap.Power1,
      Power2 = _easeMap.Power2,
      Power3 = _easeMap.Power3,
      Power4 = _easeMap.Power4,
      Linear = _easeMap.Linear,
      Quad = _easeMap.Quad,
      Cubic = _easeMap.Cubic,
      Quart = _easeMap.Quart,
      Quint = _easeMap.Quint,
      Strong = _easeMap.Strong,
      Elastic = _easeMap.Elastic,
      Back = _easeMap.Back,
      SteppedEase = _easeMap.SteppedEase,
      Bounce = _easeMap.Bounce,
      Sine = _easeMap.Sine,
      Expo = _easeMap.Expo,
      Circ = _easeMap.Circ;

  var _win$1,
      _doc$1,
      _docElement,
      _pluginInitted,
      _tempDiv,
      _tempDivStyler,
      _recentSetterPlugin,
      _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
      _transformProps = {},
      _RAD2DEG = 180 / Math.PI,
      _DEG2RAD = Math.PI / 180,
      _atan2 = Math.atan2,
      _bigNum$1 = 1e8,
      _capsExp = /([A-Z])/g,
      _horizontalExp = /(?:left|right|width|margin|padding|x)/i,
      _complexExp = /[\s,\(]\S/,
      _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
      _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
      _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
      _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
      _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
      _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
      _transformProp = "transform",
      _transformOriginProp = _transformProp + "Origin",
      _supports3D,
      _createElement = function _createElement(type, ns) {
    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$1.createElement(type);
    return e.style ? e : _doc$1.createElement(type);
  },
      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || "";
  },
      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
        s = e.style,
        i = 5;

    if (property in s && !preferPrefix) {
      return property;
    }

    property = property.charAt(0).toUpperCase() + property.substr(1);

    while (i-- && !(_prefixes[i] + property in s)) {}

    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
      _initCore = function _initCore() {
    if (_windowExists$1() && window.document) {
      _win$1 = window;
      _doc$1 = _win$1.document;
      _docElement = _doc$1.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0";
      _supports3D = !!_checkPropPrefix("perspective");
      _pluginInitted = 1;
    }
  },
      _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
        oldParent = this.parentNode,
        oldSibling = this.nextSibling,
        oldCSS = this.style.cssText,
        bbox;

    _docElement.appendChild(svg);

    svg.appendChild(this);
    this.style.display = "block";

    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox;
        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }

    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }

    _docElement.removeChild(svg);

    this.style.cssText = oldCSS;
    return bbox;
  },
      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;

    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
      _getBBox = function _getBBox(target) {
    var bounds;

    try {
      bounds = target.getBBox();
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }

    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
      _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
      _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;

      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }

      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          property = "-" + property;
        }

        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        style.removeAttribute(property);
      }
    }
  },
      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;

    plugin._props.push(property);

    return pt;
  },
      _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
      _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
        curUnit = (value + "").trim().substr((curValue + "").length) || "px",
        style = _tempDiv.style,
        horizontal = _horizontalExp.test(property),
        isRootSVG = target.tagName.toLowerCase() === "svg",
        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
        amount = 100,
        toPixels = unit === "px",
        toPercent = unit === "%",
        px,
        parent,
        cache,
        isSVG;

    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }

    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);

    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
    }

    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }

    if (!parent || parent === _doc$1 || !parent.appendChild) {
      parent = _doc$1.body;
    }

    cache = parent._gsap;

    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static");
      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";

      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }

    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
      _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();

    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];

      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }

    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];

      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0);
      }
    }

    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    if (!start || start === "none") {
      var p = _checkPropPrefix(prop, target, 1),
          s = p && _getComputedProperty(target, p, 1);

      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor");
      }
    }

    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
        index = 0,
        matchIndex = 0,
        a,
        result,
        startValues,
        startNum,
        color,
        startValue,
        endValue,
        endNum,
        chunk,
        endUnit,
        startUnit,
        relative,
        endValues;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }

    a = [start, end];

    _colorStringFilter(a);

    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];

    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }

        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;

          if (relative) {
            endValue = endValue.substr(2);
          }

          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;

          if (!endUnit) {
            endUnit = endUnit || _config.units[prop] || startUnit;

            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }

          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          }

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            s: startNum,
            c: relative ? relative * endNum : endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : "";
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }

    _relExp.test(end) && (pt.e = 0);
    this._pt = pt;
    return pt;
  },
      _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
        x = split[0],
        y = split[1] || "50%";

    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      value = x;
      x = y;
      y = value;
    }

    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
      _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
          style = target.style,
          props = data.u,
          cache = target._gsap,
          prop,
          clearTransforms,
          i;

      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;

        while (--i > -1) {
          prop = props[i];

          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }

          _removeProperty(target, prop);
        }
      }

      if (clearTransforms) {
        _removeProperty(target, _transformProp);

        if (cache) {
          cache.svg && target.removeAttribute("transform");

          _parseTransform(target, 1);

          cache.uncache = 1;
        }
      }
    }
  },
      _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;

        plugin._props.push(property);

        return 1;
      }
    }
  },
      _identity2DMatrix = [1, 0, 0, 1, 0, 0],
      _rotationalProperties = {},
      _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);

    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
      _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
        style = target.style,
        matrix = _getComputedTransformMatrixAsArray(target),
        parent,
        nextSibling,
        temp,
        addedToDOM;

    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix;
      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;

      if (!parent || !target.offsetParent) {
        addedToDOM = 1;
        nextSibling = target.nextSibling;

        _docElement.appendChild(target);
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");

      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }

    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
        matrix = matrixArray || _getMatrix(target, true),
        xOriginOld = cache.xOrigin || 0,
        yOriginOld = cache.yOrigin || 0,
        xOffsetOld = cache.xOffset || 0,
        yOffsetOld = cache.yOffset || 0,
        a = matrix[0],
        b = matrix[1],
        c = matrix[2],
        d = matrix[3],
        tx = matrix[4],
        ty = matrix[5],
        originSplit = origin.split(" "),
        xOrigin = parseFloat(originSplit[0]) || 0,
        yOrigin = parseFloat(originSplit[1]) || 0,
        bounds,
        determinant,
        x,
        y;

    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }

    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }

    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px";

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }

    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
      _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);

    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }

    var style = target.style,
        invertedScaleX = cache.scaleX < 0,
        px = "px",
        deg = "deg",
        origin = _getComputedProperty(target, _transformOriginProp) || "0",
        x,
        y,
        z,
        scaleX,
        scaleY,
        rotation,
        rotationX,
        rotationY,
        skewX,
        skewY,
        perspective,
        xOrigin,
        yOrigin,
        matrix,
        angle,
        cos,
        sin,
        a,
        b,
        c,
        d,
        a12,
        a22,
        t1,
        t2,
        t3,
        a13,
        a23,
        a33,
        a42,
        a43,
        a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    matrix = _getMatrix(target, cache.svg);

    if (cache.svg) {
      t1 = (!cache.uncache || origin === "0px 0px") && !uncache && target.getAttribute("data-svg-origin");

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }

    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;

    if (matrix !== _identity2DMatrix) {
      a = matrix[0];
      b = matrix[1];
      c = matrix[2];
      d = matrix[3];
      x = a12 = matrix[4];
      y = a22 = matrix[5];

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;
        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        }
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        }

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        }

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }

        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }

        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }

      if (cache.svg) {
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }

    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }

    cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;

    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }

    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
      _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
      _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;

    _renderCSSTransforms(ratio, cache);
  },
      _zeroDeg = "0deg",
      _zeroPx = "0px",
      _endParenthesis = ") ",
      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
        xPercent = _ref.xPercent,
        yPercent = _ref.yPercent,
        x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        rotation = _ref.rotation,
        rotationY = _ref.rotationY,
        rotationX = _ref.rotationX,
        skewX = _ref.skewX,
        skewY = _ref.skewY,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        transformPerspective = _ref.transformPerspective,
        force3D = _ref.force3D,
        target = _ref.target,
        zOrigin = _ref.zOrigin,
        transforms = "",
        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true;

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
          a13 = Math.sin(angle),
          a33 = Math.cos(angle),
          cos;

      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }

    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }

    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }

    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }

    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }

    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }

    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }

    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }

    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }

    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
        xPercent = _ref2.xPercent,
        yPercent = _ref2.yPercent,
        x = _ref2.x,
        y = _ref2.y,
        rotation = _ref2.rotation,
        skewX = _ref2.skewX,
        skewY = _ref2.skewY,
        scaleX = _ref2.scaleX,
        scaleY = _ref2.scaleY,
        target = _ref2.target,
        xOrigin = _ref2.xOrigin,
        yOrigin = _ref2.yOrigin,
        xOffset = _ref2.xOffset,
        yOffset = _ref2.yOffset,
        forceCSS = _ref2.forceCSS,
        tx = parseFloat(x),
        ty = parseFloat(y),
        a11,
        a21,
        a12,
        a22,
        temp;

    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);

    if (skewY) {
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }

    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;

      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;

        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }

      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }

    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }

    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }

    if (xPercent || yPercent) {
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }

    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp);
  },
      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {
    var cap = 360,
        isString = _isString(endValue),
        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
        change = relative ? endNum * relative : endNum - startNum,
        finalValue = startNum + change + "deg",
        direction,
        pt;

    if (isString) {
      direction = endValue.split("_")[1];

      if (direction === "short") {
        change %= cap;

        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }

      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      }
    }

    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";

    plugin._props.push(property);

    return pt;
  },
      _assign = function _assign(target, source) {
    for (var p in source) {
      target[p] = source[p];
    }

    return target;
  },
      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    var startCache = _assign({}, target._gsap),
        exclude = "perspective,force3D,transformOrigin,svgOrigin",
        style = target.style,
        endCache,
        p,
        startValue,
        endValue,
        startNum,
        endNum,
        startUnit,
        endUnit;

    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);

      _removeProperty(target, _transformProp);

      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }

    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];

      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;

        plugin._props.push(p);
      }
    }

    _assign(endCache, startCache);
  };

  _forEachName("padding,margin,Width,Radius", function (name, index) {
    var t = "Top",
        r = "Right",
        b = "Bottom",
        l = "Left",
        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });

    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
      var a, vars;

      if (arguments.length < 4) {
        a = props.map(function (prop) {
          return _get(plugin, prop, property);
        });
        vars = a.join(" ");
        return vars.split(a[0]).length === 5 ? a[0] : vars;
      }

      a = (endValue + "").split(" ");
      vars = {};
      props.forEach(function (prop, i) {
        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
      });
      plugin.init(target, vars, tween);
    };
  });

  var CSSPlugin = {
    name: "css",
    register: _initCore,
    targetTest: function targetTest(target) {
      return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
      var props = this._props,
          style = target.style,
          startAt = tween.vars.startAt,
          startValue,
          endValue,
          endNum,
          startNum,
          type,
          specialProp,
          p,
          startUnit,
          endUnit,
          relative,
          isTransformRelated,
          transformPropTween,
          cache,
          smooth,
          hasPriority;
      _pluginInitted || _initCore();

      for (p in vars) {
        if (p === "autoRound") {
          continue;
        }

        endValue = vars[p];

        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
          continue;
        }

        type = typeof endValue;
        specialProp = _specialProps[p];

        if (type === "function") {
          endValue = endValue.call(tween, index, target, targets);
          type = typeof endValue;
        }

        if (type === "string" && ~endValue.indexOf("random(")) {
          endValue = _replaceRandom(endValue);
        }

        if (specialProp) {
          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
        } else if (p.substr(0, 2) === "--") {
          startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
          endValue += "";
          _colorExp.lastIndex = 0;

          if (!_colorExp.test(startValue)) {
            startUnit = getUnit(startValue);
            endUnit = getUnit(endValue);
          }

          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
          this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
          props.push(p);
        } else if (type !== "undefined") {
          if (startAt && p in startAt) {
            startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
            _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
            getUnit(startValue + "") || (startValue += _config.units[p] || getUnit(_get(target, p)) || "");
            (startValue + "").charAt(1) === "=" && (startValue = _get(target, p));
          } else {
            startValue = _get(target, p);
          }

          startNum = parseFloat(startValue);
          relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;
          relative && (endValue = endValue.substr(2));
          endNum = parseFloat(endValue);

          if (p in _propertyAliases) {
            if (p === "autoAlpha") {
              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                startNum = 0;
              }

              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
            }

            if (p !== "scale" && p !== "transform") {
              p = _propertyAliases[p];
              ~p.indexOf(",") && (p = p.split(",")[0]);
            }
          }

          isTransformRelated = p in _transformProps;

          if (isTransformRelated) {
            if (!transformPropTween) {
              cache = target._gsap;
              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);
              smooth = vars.smoothOrigin !== false && cache.smooth;
              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);
              transformPropTween.dep = 1;
            }

            if (p === "scale") {
              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? relative * endNum : endNum - cache.scaleY) || 0);
              props.push("scaleY", p);
              p += "X";
            } else if (p === "transformOrigin") {
              endValue = _convertKeywordsToPercentages(endValue);

              if (cache.svg) {
                _applySVGOrigin(target, endValue, 0, smooth, 0, this);
              } else {
                endUnit = parseFloat(endValue.split(" ")[2]) || 0;
                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
              }

              continue;
            } else if (p === "svgOrigin") {
              _applySVGOrigin(target, endValue, 1, smooth, 0, this);

              continue;
            } else if (p in _rotationalProperties) {
              _addRotationalPropTween(this, cache, p, startNum, endValue, relative);

              continue;
            } else if (p === "smoothOrigin") {
              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

              continue;
            } else if (p === "force3D") {
              cache[p] = endValue;
              continue;
            } else if (p === "transform") {
              _addRawTransformPTs(this, endValue, target);

              continue;
            }
          } else if (!(p in style)) {
            p = _checkPropPrefix(p) || p;
          }

          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
            startUnit = (startValue + "").substr((startNum + "").length);
            endNum || (endNum = 0);
            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
            this._pt.u = endUnit || 0;

            if (startUnit !== endUnit && endUnit !== "%") {
              this._pt.b = startValue;
              this._pt.r = _renderCSSPropWithBeginning;
            }
          } else if (!(p in style)) {
            if (p in target) {
              this.add(target, p, startValue || target[p], endValue, index, targets);
            } else {
              _missingPlugin(p, endValue);

              continue;
            }
          } else {
            _tweenComplexCSSString.call(this, target, p, startValue, endValue);
          }

          props.push(p);
        }
      }

      hasPriority && _sortPropTweensByPriority(this);
    },
    get: _get,
    aliases: _propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
      var p = _propertyAliases[property];
      p && p.indexOf(",") < 0 && (property = p);
      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
    },
    core: {
      _removeProperty: _removeProperty,
      _getMatrix: _getMatrix
    }
  };
  gsap.utils.checkPrefix = _checkPropPrefix;

  (function (positionAndScale, rotation, others, aliases) {
    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
      _transformProps[name] = 1;
    });

    _forEachName(rotation, function (name) {
      _config.units[name] = "deg";
      _rotationalProperties[name] = 1;
    });

    _propertyAliases[all[13]] = positionAndScale + "," + rotation;

    _forEachName(aliases, function (name) {
      var split = name.split(":");
      _propertyAliases[split[1]] = all[split[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
    _config.units[name] = "px";
  });

  gsap.registerPlugin(CSSPlugin);

  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,
      TweenMaxWithCSS = gsapWithCSS.core.Tween;

  exports.Back = Back;
  exports.Bounce = Bounce;
  exports.CSSPlugin = CSSPlugin;
  exports.Circ = Circ;
  exports.Cubic = Cubic;
  exports.Elastic = Elastic;
  exports.Expo = Expo;
  exports.Linear = Linear;
  exports.Power0 = Power0;
  exports.Power1 = Power1;
  exports.Power2 = Power2;
  exports.Power3 = Power3;
  exports.Power4 = Power4;
  exports.Quad = Quad;
  exports.Quart = Quart;
  exports.Quint = Quint;
  exports.Sine = Sine;
  exports.SteppedEase = SteppedEase;
  exports.Strong = Strong;
  exports.TimelineLite = Timeline;
  exports.TimelineMax = Timeline;
  exports.TweenLite = Tween;
  exports.TweenMax = TweenMaxWithCSS;
  exports.default = gsapWithCSS;
  exports.gsap = gsapWithCSS;

  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}

})));

/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));
})(this, (function (exports) { 'use strict';

	const REVISION = '138';
	const MOUSE = {
		LEFT: 0,
		MIDDLE: 1,
		RIGHT: 2,
		ROTATE: 0,
		DOLLY: 1,
		PAN: 2
	};
	const TOUCH = {
		ROTATE: 0,
		PAN: 1,
		DOLLY_PAN: 2,
		DOLLY_ROTATE: 3
	};
	const CullFaceNone = 0;
	const CullFaceBack = 1;
	const CullFaceFront = 2;
	const CullFaceFrontBack = 3;
	const BasicShadowMap = 0;
	const PCFShadowMap = 1;
	const PCFSoftShadowMap = 2;
	const VSMShadowMap = 3;
	const FrontSide = 0;
	const BackSide = 1;
	const DoubleSide = 2;
	const FlatShading = 1;
	const SmoothShading = 2;
	const NoBlending = 0;
	const NormalBlending = 1;
	const AdditiveBlending = 2;
	const SubtractiveBlending = 3;
	const MultiplyBlending = 4;
	const CustomBlending = 5;
	const AddEquation = 100;
	const SubtractEquation = 101;
	const ReverseSubtractEquation = 102;
	const MinEquation = 103;
	const MaxEquation = 104;
	const ZeroFactor = 200;
	const OneFactor = 201;
	const SrcColorFactor = 202;
	const OneMinusSrcColorFactor = 203;
	const SrcAlphaFactor = 204;
	const OneMinusSrcAlphaFactor = 205;
	const DstAlphaFactor = 206;
	const OneMinusDstAlphaFactor = 207;
	const DstColorFactor = 208;
	const OneMinusDstColorFactor = 209;
	const SrcAlphaSaturateFactor = 210;
	const NeverDepth = 0;
	const AlwaysDepth = 1;
	const LessDepth = 2;
	const LessEqualDepth = 3;
	const EqualDepth = 4;
	const GreaterEqualDepth = 5;
	const GreaterDepth = 6;
	const NotEqualDepth = 7;
	const MultiplyOperation = 0;
	const MixOperation = 1;
	const AddOperation = 2;
	const NoToneMapping = 0;
	const LinearToneMapping = 1;
	const ReinhardToneMapping = 2;
	const CineonToneMapping = 3;
	const ACESFilmicToneMapping = 4;
	const CustomToneMapping = 5;
	const UVMapping = 300;
	const CubeReflectionMapping = 301;
	const CubeRefractionMapping = 302;
	const EquirectangularReflectionMapping = 303;
	const EquirectangularRefractionMapping = 304;
	const CubeUVReflectionMapping = 306;
	const CubeUVRefractionMapping = 307;
	const RepeatWrapping = 1000;
	const ClampToEdgeWrapping = 1001;
	const MirroredRepeatWrapping = 1002;
	const NearestFilter = 1003;
	const NearestMipmapNearestFilter = 1004;
	const NearestMipMapNearestFilter = 1004;
	const NearestMipmapLinearFilter = 1005;
	const NearestMipMapLinearFilter = 1005;
	const LinearFilter = 1006;
	const LinearMipmapNearestFilter = 1007;
	const LinearMipMapNearestFilter = 1007;
	const LinearMipmapLinearFilter = 1008;
	const LinearMipMapLinearFilter = 1008;
	const UnsignedByteType = 1009;
	const ByteType = 1010;
	const ShortType = 1011;
	const UnsignedShortType = 1012;
	const IntType = 1013;
	const UnsignedIntType = 1014;
	const FloatType = 1015;
	const HalfFloatType = 1016;
	const UnsignedShort4444Type = 1017;
	const UnsignedShort5551Type = 1018;
	const UnsignedInt248Type = 1020;
	const AlphaFormat = 1021;
	const RGBFormat = 1022;
	const RGBAFormat = 1023;
	const LuminanceFormat = 1024;
	const LuminanceAlphaFormat = 1025;
	const DepthFormat = 1026;
	const DepthStencilFormat = 1027;
	const RedFormat = 1028;
	const RedIntegerFormat = 1029;
	const RGFormat = 1030;
	const RGIntegerFormat = 1031;
	const RGBAIntegerFormat = 1033;
	const RGB_S3TC_DXT1_Format = 33776;
	const RGBA_S3TC_DXT1_Format = 33777;
	const RGBA_S3TC_DXT3_Format = 33778;
	const RGBA_S3TC_DXT5_Format = 33779;
	const RGB_PVRTC_4BPPV1_Format = 35840;
	const RGB_PVRTC_2BPPV1_Format = 35841;
	const RGBA_PVRTC_4BPPV1_Format = 35842;
	const RGBA_PVRTC_2BPPV1_Format = 35843;
	const RGB_ETC1_Format = 36196;
	const RGB_ETC2_Format = 37492;
	const RGBA_ETC2_EAC_Format = 37496;
	const RGBA_ASTC_4x4_Format = 37808;
	const RGBA_ASTC_5x4_Format = 37809;
	const RGBA_ASTC_5x5_Format = 37810;
	const RGBA_ASTC_6x5_Format = 37811;
	const RGBA_ASTC_6x6_Format = 37812;
	const RGBA_ASTC_8x5_Format = 37813;
	const RGBA_ASTC_8x6_Format = 37814;
	const RGBA_ASTC_8x8_Format = 37815;
	const RGBA_ASTC_10x5_Format = 37816;
	const RGBA_ASTC_10x6_Format = 37817;
	const RGBA_ASTC_10x8_Format = 37818;
	const RGBA_ASTC_10x10_Format = 37819;
	const RGBA_ASTC_12x10_Format = 37820;
	const RGBA_ASTC_12x12_Format = 37821;
	const RGBA_BPTC_Format = 36492;
	const LoopOnce = 2200;
	const LoopRepeat = 2201;
	const LoopPingPong = 2202;
	const InterpolateDiscrete = 2300;
	const InterpolateLinear = 2301;
	const InterpolateSmooth = 2302;
	const ZeroCurvatureEnding = 2400;
	const ZeroSlopeEnding = 2401;
	const WrapAroundEnding = 2402;
	const NormalAnimationBlendMode = 2500;
	const AdditiveAnimationBlendMode = 2501;
	const TrianglesDrawMode = 0;
	const TriangleStripDrawMode = 1;
	const TriangleFanDrawMode = 2;
	const LinearEncoding = 3000;
	const sRGBEncoding = 3001;
	const BasicDepthPacking = 3200;
	const RGBADepthPacking = 3201;
	const TangentSpaceNormalMap = 0;
	const ObjectSpaceNormalMap = 1;
	const ZeroStencilOp = 0;
	const KeepStencilOp = 7680;
	const ReplaceStencilOp = 7681;
	const IncrementStencilOp = 7682;
	const DecrementStencilOp = 7683;
	const IncrementWrapStencilOp = 34055;
	const DecrementWrapStencilOp = 34056;
	const InvertStencilOp = 5386;
	const NeverStencilFunc = 512;
	const LessStencilFunc = 513;
	const EqualStencilFunc = 514;
	const LessEqualStencilFunc = 515;
	const GreaterStencilFunc = 516;
	const NotEqualStencilFunc = 517;
	const GreaterEqualStencilFunc = 518;
	const AlwaysStencilFunc = 519;
	const StaticDrawUsage = 35044;
	const DynamicDrawUsage = 35048;
	const StreamDrawUsage = 35040;
	const StaticReadUsage = 35045;
	const DynamicReadUsage = 35049;
	const StreamReadUsage = 35041;
	const StaticCopyUsage = 35046;
	const DynamicCopyUsage = 35050;
	const StreamCopyUsage = 35042;
	const GLSL1 = '100';
	const GLSL3 = '300 es';
	const _SRGBAFormat = 1035; // fallback for WebGL 1

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */
	class EventDispatcher {
		addEventListener(type, listener) {
			if (this._listeners === undefined) this._listeners = {};
			const listeners = this._listeners;

			if (listeners[type] === undefined) {
				listeners[type] = [];
			}

			if (listeners[type].indexOf(listener) === -1) {
				listeners[type].push(listener);
			}
		}

		hasEventListener(type, listener) {
			if (this._listeners === undefined) return false;
			const listeners = this._listeners;
			return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
		}

		removeEventListener(type, listener) {
			if (this._listeners === undefined) return;
			const listeners = this._listeners;
			const listenerArray = listeners[type];

			if (listenerArray !== undefined) {
				const index = listenerArray.indexOf(listener);

				if (index !== -1) {
					listenerArray.splice(index, 1);
				}
			}
		}

		dispatchEvent(event) {
			if (this._listeners === undefined) return;
			const listeners = this._listeners;
			const listenerArray = listeners[event.type];

			if (listenerArray !== undefined) {
				event.target = this; // Make a copy, in case listeners are removed while iterating.

				const array = listenerArray.slice(0);

				for (let i = 0, l = array.length; i < l; i++) {
					array[i].call(this, event);
				}

				event.target = null;
			}
		}

	}

	const _lut = [];

	for (let i = 0; i < 256; i++) {
		_lut[i] = (i < 16 ? '0' : '') + i.toString(16);
	}

	let _seed = 1234567;
	const DEG2RAD = Math.PI / 180;
	const RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

	function generateUUID() {
		const d0 = Math.random() * 0xffffffff | 0;
		const d1 = Math.random() * 0xffffffff | 0;
		const d2 = Math.random() * 0xffffffff | 0;
		const d3 = Math.random() * 0xffffffff | 0;
		const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.

		return uuid.toUpperCase();
	}

	function clamp(value, min, max) {
		return Math.max(min, Math.min(max, value));
	} // compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation


	function euclideanModulo(n, m) {
		return (n % m + m) % m;
	} // Linear mapping from range <a1, a2> to range <b1, b2>


	function mapLinear(x, a1, a2, b1, b2) {
		return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
	} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/


	function inverseLerp(x, y, value) {
		if (x !== y) {
			return (value - x) / (y - x);
		} else {
			return 0;
		}
	} // https://en.wikipedia.org/wiki/Linear_interpolation


	function lerp(x, y, t) {
		return (1 - t) * x + t * y;
	} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/


	function damp(x, y, lambda, dt) {
		return lerp(x, y, 1 - Math.exp(-lambda * dt));
	} // https://www.desmos.com/calculator/vcsjnyz7x4


	function pingpong(x, length = 1) {
		return length - Math.abs(euclideanModulo(x, length * 2) - length);
	} // http://en.wikipedia.org/wiki/Smoothstep


	function smoothstep(x, min, max) {
		if (x <= min) return 0;
		if (x >= max) return 1;
		x = (x - min) / (max - min);
		return x * x * (3 - 2 * x);
	}

	function smootherstep(x, min, max) {
		if (x <= min) return 0;
		if (x >= max) return 1;
		x = (x - min) / (max - min);
		return x * x * x * (x * (x * 6 - 15) + 10);
	} // Random integer from <low, high> interval


	function randInt(low, high) {
		return low + Math.floor(Math.random() * (high - low + 1));
	} // Random float from <low, high> interval


	function randFloat(low, high) {
		return low + Math.random() * (high - low);
	} // Random float from <-range/2, range/2> interval


	function randFloatSpread(range) {
		return range * (0.5 - Math.random());
	} // Deterministic pseudo-random float in the interval [ 0, 1 ]


	function seededRandom(s) {
		if (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm

		_seed = _seed * 16807 % 2147483647;
		return (_seed - 1) / 2147483646;
	}

	function degToRad(degrees) {
		return degrees * DEG2RAD;
	}

	function radToDeg(radians) {
		return radians * RAD2DEG;
	}

	function isPowerOfTwo(value) {
		return (value & value - 1) === 0 && value !== 0;
	}

	function ceilPowerOfTwo(value) {
		return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
	}

	function floorPowerOfTwo(value) {
		return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
	}

	function setQuaternionFromProperEuler(q, a, b, c, order) {
		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
		// rotations are applied to the axes in the order specified by 'order'
		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
		// angles are in radians
		const cos = Math.cos;
		const sin = Math.sin;
		const c2 = cos(b / 2);
		const s2 = sin(b / 2);
		const c13 = cos((a + c) / 2);
		const s13 = sin((a + c) / 2);
		const c1_3 = cos((a - c) / 2);
		const s1_3 = sin((a - c) / 2);
		const c3_1 = cos((c - a) / 2);
		const s3_1 = sin((c - a) / 2);

		switch (order) {
			case 'XYX':
				q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
				break;

			case 'YZY':
				q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
				break;

			case 'ZXZ':
				q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
				break;

			case 'XZX':
				q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
				break;

			case 'YXY':
				q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
				break;

			case 'ZYZ':
				q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
				break;

			default:
				console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
		}
	}

	var MathUtils = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DEG2RAD: DEG2RAD,
		RAD2DEG: RAD2DEG,
		generateUUID: generateUUID,
		clamp: clamp,
		euclideanModulo: euclideanModulo,
		mapLinear: mapLinear,
		inverseLerp: inverseLerp,
		lerp: lerp,
		damp: damp,
		pingpong: pingpong,
		smoothstep: smoothstep,
		smootherstep: smootherstep,
		randInt: randInt,
		randFloat: randFloat,
		randFloatSpread: randFloatSpread,
		seededRandom: seededRandom,
		degToRad: degToRad,
		radToDeg: radToDeg,
		isPowerOfTwo: isPowerOfTwo,
		ceilPowerOfTwo: ceilPowerOfTwo,
		floorPowerOfTwo: floorPowerOfTwo,
		setQuaternionFromProperEuler: setQuaternionFromProperEuler
	});

	class Vector2 {
		constructor(x = 0, y = 0) {
			this.x = x;
			this.y = y;
		}

		get width() {
			return this.x;
		}

		set width(value) {
			this.x = value;
		}

		get height() {
			return this.y;
		}

		set height(value) {
			this.y = value;
		}

		set(x, y) {
			this.x = x;
			this.y = y;
			return this;
		}

		setScalar(scalar) {
			this.x = scalar;
			this.y = scalar;
			return this;
		}

		setX(x) {
			this.x = x;
			return this;
		}

		setY(y) {
			this.y = y;
			return this;
		}

		setComponent(index, value) {
			switch (index) {
				case 0:
					this.x = value;
					break;

				case 1:
					this.y = value;
					break;

				default:
					throw new Error('index is out of range: ' + index);
			}

			return this;
		}

		getComponent(index) {
			switch (index) {
				case 0:
					return this.x;

				case 1:
					return this.y;

				default:
					throw new Error('index is out of range: ' + index);
			}
		}

		clone() {
			return new this.constructor(this.x, this.y);
		}

		copy(v) {
			this.x = v.x;
			this.y = v.y;
			return this;
		}

		add(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);
			}

			this.x += v.x;
			this.y += v.y;
			return this;
		}

		addScalar(s) {
			this.x += s;
			this.y += s;
			return this;
		}

		addVectors(a, b) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			return this;
		}

		addScaledVector(v, s) {
			this.x += v.x * s;
			this.y += v.y * s;
			return this;
		}

		sub(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);
			}

			this.x -= v.x;
			this.y -= v.y;
			return this;
		}

		subScalar(s) {
			this.x -= s;
			this.y -= s;
			return this;
		}

		subVectors(a, b) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			return this;
		}

		multiply(v) {
			this.x *= v.x;
			this.y *= v.y;
			return this;
		}

		multiplyScalar(scalar) {
			this.x *= scalar;
			this.y *= scalar;
			return this;
		}

		divide(v) {
			this.x /= v.x;
			this.y /= v.y;
			return this;
		}

		divideScalar(scalar) {
			return this.multiplyScalar(1 / scalar);
		}

		applyMatrix3(m) {
			const x = this.x,
						y = this.y;
			const e = m.elements;
			this.x = e[0] * x + e[3] * y + e[6];
			this.y = e[1] * x + e[4] * y + e[7];
			return this;
		}

		min(v) {
			this.x = Math.min(this.x, v.x);
			this.y = Math.min(this.y, v.y);
			return this;
		}

		max(v) {
			this.x = Math.max(this.x, v.x);
			this.y = Math.max(this.y, v.y);
			return this;
		}

		clamp(min, max) {
			// assumes min < max, componentwise
			this.x = Math.max(min.x, Math.min(max.x, this.x));
			this.y = Math.max(min.y, Math.min(max.y, this.y));
			return this;
		}

		clampScalar(minVal, maxVal) {
			this.x = Math.max(minVal, Math.min(maxVal, this.x));
			this.y = Math.max(minVal, Math.min(maxVal, this.y));
			return this;
		}

		clampLength(min, max) {
			const length = this.length();
			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
		}

		floor() {
			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			return this;
		}

		ceil() {
			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			return this;
		}

		round() {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			return this;
		}

		roundToZero() {
			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			return this;
		}

		negate() {
			this.x = -this.x;
			this.y = -this.y;
			return this;
		}

		dot(v) {
			return this.x * v.x + this.y * v.y;
		}

		cross(v) {
			return this.x * v.y - this.y * v.x;
		}

		lengthSq() {
			return this.x * this.x + this.y * this.y;
		}

		length() {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		}

		manhattanLength() {
			return Math.abs(this.x) + Math.abs(this.y);
		}

		normalize() {
			return this.divideScalar(this.length() || 1);
		}

		angle() {
			// computes the angle in radians with respect to the positive x-axis
			const angle = Math.atan2(-this.y, -this.x) + Math.PI;
			return angle;
		}

		distanceTo(v) {
			return Math.sqrt(this.distanceToSquared(v));
		}

		distanceToSquared(v) {
			const dx = this.x - v.x,
						dy = this.y - v.y;
			return dx * dx + dy * dy;
		}

		manhattanDistanceTo(v) {
			return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
		}

		setLength(length) {
			return this.normalize().multiplyScalar(length);
		}

		lerp(v, alpha) {
			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			return this;
		}

		lerpVectors(v1, v2, alpha) {
			this.x = v1.x + (v2.x - v1.x) * alpha;
			this.y = v1.y + (v2.y - v1.y) * alpha;
			return this;
		}

		equals(v) {
			return v.x === this.x && v.y === this.y;
		}

		fromArray(array, offset = 0) {
			this.x = array[offset];
			this.y = array[offset + 1];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.x;
			array[offset + 1] = this.y;
			return array;
		}

		fromBufferAttribute(attribute, index, offset) {
			if (offset !== undefined) {
				console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
			}

			this.x = attribute.getX(index);
			this.y = attribute.getY(index);
			return this;
		}

		rotateAround(center, angle) {
			const c = Math.cos(angle),
						s = Math.sin(angle);
			const x = this.x - center.x;
			const y = this.y - center.y;
			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;
			return this;
		}

		random() {
			this.x = Math.random();
			this.y = Math.random();
			return this;
		}

		*[Symbol.iterator]() {
			yield this.x;
			yield this.y;
		}

	}

	Vector2.prototype.isVector2 = true;

	class Matrix3 {
		constructor() {
			this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];

			if (arguments.length > 0) {
				console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
			}
		}

		set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
			const te = this.elements;
			te[0] = n11;
			te[1] = n21;
			te[2] = n31;
			te[3] = n12;
			te[4] = n22;
			te[5] = n32;
			te[6] = n13;
			te[7] = n23;
			te[8] = n33;
			return this;
		}

		identity() {
			this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
			return this;
		}

		copy(m) {
			const te = this.elements;
			const me = m.elements;
			te[0] = me[0];
			te[1] = me[1];
			te[2] = me[2];
			te[3] = me[3];
			te[4] = me[4];
			te[5] = me[5];
			te[6] = me[6];
			te[7] = me[7];
			te[8] = me[8];
			return this;
		}

		extractBasis(xAxis, yAxis, zAxis) {
			xAxis.setFromMatrix3Column(this, 0);
			yAxis.setFromMatrix3Column(this, 1);
			zAxis.setFromMatrix3Column(this, 2);
			return this;
		}

		setFromMatrix4(m) {
			const me = m.elements;
			this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
			return this;
		}

		multiply(m) {
			return this.multiplyMatrices(this, m);
		}

		premultiply(m) {
			return this.multiplyMatrices(m, this);
		}

		multiplyMatrices(a, b) {
			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;
			const a11 = ae[0],
						a12 = ae[3],
						a13 = ae[6];
			const a21 = ae[1],
						a22 = ae[4],
						a23 = ae[7];
			const a31 = ae[2],
						a32 = ae[5],
						a33 = ae[8];
			const b11 = be[0],
						b12 = be[3],
						b13 = be[6];
			const b21 = be[1],
						b22 = be[4],
						b23 = be[7];
			const b31 = be[2],
						b32 = be[5],
						b33 = be[8];
			te[0] = a11 * b11 + a12 * b21 + a13 * b31;
			te[3] = a11 * b12 + a12 * b22 + a13 * b32;
			te[6] = a11 * b13 + a12 * b23 + a13 * b33;
			te[1] = a21 * b11 + a22 * b21 + a23 * b31;
			te[4] = a21 * b12 + a22 * b22 + a23 * b32;
			te[7] = a21 * b13 + a22 * b23 + a23 * b33;
			te[2] = a31 * b11 + a32 * b21 + a33 * b31;
			te[5] = a31 * b12 + a32 * b22 + a33 * b32;
			te[8] = a31 * b13 + a32 * b23 + a33 * b33;
			return this;
		}

		multiplyScalar(s) {
			const te = this.elements;
			te[0] *= s;
			te[3] *= s;
			te[6] *= s;
			te[1] *= s;
			te[4] *= s;
			te[7] *= s;
			te[2] *= s;
			te[5] *= s;
			te[8] *= s;
			return this;
		}

		determinant() {
			const te = this.elements;
			const a = te[0],
						b = te[1],
						c = te[2],
						d = te[3],
						e = te[4],
						f = te[5],
						g = te[6],
						h = te[7],
						i = te[8];
			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
		}

		invert() {
			const te = this.elements,
						n11 = te[0],
						n21 = te[1],
						n31 = te[2],
						n12 = te[3],
						n22 = te[4],
						n32 = te[5],
						n13 = te[6],
						n23 = te[7],
						n33 = te[8],
						t11 = n33 * n22 - n32 * n23,
						t12 = n32 * n13 - n33 * n12,
						t13 = n23 * n12 - n22 * n13,
						det = n11 * t11 + n21 * t12 + n31 * t13;
			if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
			const detInv = 1 / det;
			te[0] = t11 * detInv;
			te[1] = (n31 * n23 - n33 * n21) * detInv;
			te[2] = (n32 * n21 - n31 * n22) * detInv;
			te[3] = t12 * detInv;
			te[4] = (n33 * n11 - n31 * n13) * detInv;
			te[5] = (n31 * n12 - n32 * n11) * detInv;
			te[6] = t13 * detInv;
			te[7] = (n21 * n13 - n23 * n11) * detInv;
			te[8] = (n22 * n11 - n21 * n12) * detInv;
			return this;
		}

		transpose() {
			let tmp;
			const m = this.elements;
			tmp = m[1];
			m[1] = m[3];
			m[3] = tmp;
			tmp = m[2];
			m[2] = m[6];
			m[6] = tmp;
			tmp = m[5];
			m[5] = m[7];
			m[7] = tmp;
			return this;
		}

		getNormalMatrix(matrix4) {
			return this.setFromMatrix4(matrix4).invert().transpose();
		}

		transposeIntoArray(r) {
			const m = this.elements;
			r[0] = m[0];
			r[1] = m[3];
			r[2] = m[6];
			r[3] = m[1];
			r[4] = m[4];
			r[5] = m[7];
			r[6] = m[2];
			r[7] = m[5];
			r[8] = m[8];
			return this;
		}

		setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
			const c = Math.cos(rotation);
			const s = Math.sin(rotation);
			this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
			return this;
		}

		scale(sx, sy) {
			const te = this.elements;
			te[0] *= sx;
			te[3] *= sx;
			te[6] *= sx;
			te[1] *= sy;
			te[4] *= sy;
			te[7] *= sy;
			return this;
		}

		rotate(theta) {
			const c = Math.cos(theta);
			const s = Math.sin(theta);
			const te = this.elements;
			const a11 = te[0],
						a12 = te[3],
						a13 = te[6];
			const a21 = te[1],
						a22 = te[4],
						a23 = te[7];
			te[0] = c * a11 + s * a21;
			te[3] = c * a12 + s * a22;
			te[6] = c * a13 + s * a23;
			te[1] = -s * a11 + c * a21;
			te[4] = -s * a12 + c * a22;
			te[7] = -s * a13 + c * a23;
			return this;
		}

		translate(tx, ty) {
			const te = this.elements;
			te[0] += tx * te[2];
			te[3] += tx * te[5];
			te[6] += tx * te[8];
			te[1] += ty * te[2];
			te[4] += ty * te[5];
			te[7] += ty * te[8];
			return this;
		}

		equals(matrix) {
			const te = this.elements;
			const me = matrix.elements;

			for (let i = 0; i < 9; i++) {
				if (te[i] !== me[i]) return false;
			}

			return true;
		}

		fromArray(array, offset = 0) {
			for (let i = 0; i < 9; i++) {
				this.elements[i] = array[i + offset];
			}

			return this;
		}

		toArray(array = [], offset = 0) {
			const te = this.elements;
			array[offset] = te[0];
			array[offset + 1] = te[1];
			array[offset + 2] = te[2];
			array[offset + 3] = te[3];
			array[offset + 4] = te[4];
			array[offset + 5] = te[5];
			array[offset + 6] = te[6];
			array[offset + 7] = te[7];
			array[offset + 8] = te[8];
			return array;
		}

		clone() {
			return new this.constructor().fromArray(this.elements);
		}

	}

	Matrix3.prototype.isMatrix3 = true;

	function arrayNeedsUint32(array) {
		// assumes larger values usually on last
		for (let i = array.length - 1; i >= 0; --i) {
			if (array[i] > 65535) return true;
		}

		return false;
	}

	const TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		Uint8ClampedArray: Uint8ClampedArray,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};

	function getTypedArray(type, buffer) {
		return new TYPED_ARRAYS[type](buffer);
	}

	function createElementNS(name) {
		return document.createElementNS('http://www.w3.org/1999/xhtml', name);
	}

	const _colorKeywords = {
		'aliceblue': 0xF0F8FF,
		'antiquewhite': 0xFAEBD7,
		'aqua': 0x00FFFF,
		'aquamarine': 0x7FFFD4,
		'azure': 0xF0FFFF,
		'beige': 0xF5F5DC,
		'bisque': 0xFFE4C4,
		'black': 0x000000,
		'blanchedalmond': 0xFFEBCD,
		'blue': 0x0000FF,
		'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A,
		'burlywood': 0xDEB887,
		'cadetblue': 0x5F9EA0,
		'chartreuse': 0x7FFF00,
		'chocolate': 0xD2691E,
		'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED,
		'cornsilk': 0xFFF8DC,
		'crimson': 0xDC143C,
		'cyan': 0x00FFFF,
		'darkblue': 0x00008B,
		'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B,
		'darkgray': 0xA9A9A9,
		'darkgreen': 0x006400,
		'darkgrey': 0xA9A9A9,
		'darkkhaki': 0xBDB76B,
		'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F,
		'darkorange': 0xFF8C00,
		'darkorchid': 0x9932CC,
		'darkred': 0x8B0000,
		'darksalmon': 0xE9967A,
		'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B,
		'darkslategray': 0x2F4F4F,
		'darkslategrey': 0x2F4F4F,
		'darkturquoise': 0x00CED1,
		'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493,
		'deepskyblue': 0x00BFFF,
		'dimgray': 0x696969,
		'dimgrey': 0x696969,
		'dodgerblue': 0x1E90FF,
		'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0,
		'forestgreen': 0x228B22,
		'fuchsia': 0xFF00FF,
		'gainsboro': 0xDCDCDC,
		'ghostwhite': 0xF8F8FF,
		'gold': 0xFFD700,
		'goldenrod': 0xDAA520,
		'gray': 0x808080,
		'green': 0x008000,
		'greenyellow': 0xADFF2F,
		'grey': 0x808080,
		'honeydew': 0xF0FFF0,
		'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C,
		'indigo': 0x4B0082,
		'ivory': 0xFFFFF0,
		'khaki': 0xF0E68C,
		'lavender': 0xE6E6FA,
		'lavenderblush': 0xFFF0F5,
		'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD,
		'lightblue': 0xADD8E6,
		'lightcoral': 0xF08080,
		'lightcyan': 0xE0FFFF,
		'lightgoldenrodyellow': 0xFAFAD2,
		'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90,
		'lightgrey': 0xD3D3D3,
		'lightpink': 0xFFB6C1,
		'lightsalmon': 0xFFA07A,
		'lightseagreen': 0x20B2AA,
		'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899,
		'lightslategrey': 0x778899,
		'lightsteelblue': 0xB0C4DE,
		'lightyellow': 0xFFFFE0,
		'lime': 0x00FF00,
		'limegreen': 0x32CD32,
		'linen': 0xFAF0E6,
		'magenta': 0xFF00FF,
		'maroon': 0x800000,
		'mediumaquamarine': 0x66CDAA,
		'mediumblue': 0x0000CD,
		'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB,
		'mediumseagreen': 0x3CB371,
		'mediumslateblue': 0x7B68EE,
		'mediumspringgreen': 0x00FA9A,
		'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585,
		'midnightblue': 0x191970,
		'mintcream': 0xF5FFFA,
		'mistyrose': 0xFFE4E1,
		'moccasin': 0xFFE4B5,
		'navajowhite': 0xFFDEAD,
		'navy': 0x000080,
		'oldlace': 0xFDF5E6,
		'olive': 0x808000,
		'olivedrab': 0x6B8E23,
		'orange': 0xFFA500,
		'orangered': 0xFF4500,
		'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA,
		'palegreen': 0x98FB98,
		'paleturquoise': 0xAFEEEE,
		'palevioletred': 0xDB7093,
		'papayawhip': 0xFFEFD5,
		'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F,
		'pink': 0xFFC0CB,
		'plum': 0xDDA0DD,
		'powderblue': 0xB0E0E6,
		'purple': 0x800080,
		'rebeccapurple': 0x663399,
		'red': 0xFF0000,
		'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1,
		'saddlebrown': 0x8B4513,
		'salmon': 0xFA8072,
		'sandybrown': 0xF4A460,
		'seagreen': 0x2E8B57,
		'seashell': 0xFFF5EE,
		'sienna': 0xA0522D,
		'silver': 0xC0C0C0,
		'skyblue': 0x87CEEB,
		'slateblue': 0x6A5ACD,
		'slategray': 0x708090,
		'slategrey': 0x708090,
		'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F,
		'steelblue': 0x4682B4,
		'tan': 0xD2B48C,
		'teal': 0x008080,
		'thistle': 0xD8BFD8,
		'tomato': 0xFF6347,
		'turquoise': 0x40E0D0,
		'violet': 0xEE82EE,
		'wheat': 0xF5DEB3,
		'white': 0xFFFFFF,
		'whitesmoke': 0xF5F5F5,
		'yellow': 0xFFFF00,
		'yellowgreen': 0x9ACD32
	};
	const _hslA = {
		h: 0,
		s: 0,
		l: 0
	};
	const _hslB = {
		h: 0,
		s: 0,
		l: 0
	};

	function hue2rgb(p, q, t) {
		if (t < 0) t += 1;
		if (t > 1) t -= 1;
		if (t < 1 / 6) return p + (q - p) * 6 * t;
		if (t < 1 / 2) return q;
		if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
		return p;
	}

	function SRGBToLinear(c) {
		return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
	}

	function LinearToSRGB(c) {
		return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
	}

	class Color {
		constructor(r, g, b) {
			if (g === undefined && b === undefined) {
				// r is THREE.Color, hex or string
				return this.set(r);
			}

			return this.setRGB(r, g, b);
		}

		set(value) {
			if (value && value.isColor) {
				this.copy(value);
			} else if (typeof value === 'number') {
				this.setHex(value);
			} else if (typeof value === 'string') {
				this.setStyle(value);
			}

			return this;
		}

		setScalar(scalar) {
			this.r = scalar;
			this.g = scalar;
			this.b = scalar;
			return this;
		}

		setHex(hex) {
			hex = Math.floor(hex);
			this.r = (hex >> 16 & 255) / 255;
			this.g = (hex >> 8 & 255) / 255;
			this.b = (hex & 255) / 255;
			return this;
		}

		setRGB(r, g, b) {
			this.r = r;
			this.g = g;
			this.b = b;
			return this;
		}

		setHSL(h, s, l) {
			// h,s,l ranges are in 0.0 - 1.0
			h = euclideanModulo(h, 1);
			s = clamp(s, 0, 1);
			l = clamp(l, 0, 1);

			if (s === 0) {
				this.r = this.g = this.b = l;
			} else {
				const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
				const q = 2 * l - p;
				this.r = hue2rgb(q, p, h + 1 / 3);
				this.g = hue2rgb(q, p, h);
				this.b = hue2rgb(q, p, h - 1 / 3);
			}

			return this;
		}

		setStyle(style) {
			function handleAlpha(string) {
				if (string === undefined) return;

				if (parseFloat(string) < 1) {
					console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
				}
			}

			let m;

			if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
				// rgb / hsl
				let color;
				const name = m[1];
				const components = m[2];

				switch (name) {
					case 'rgb':
					case 'rgba':
						if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min(255, parseInt(color[1], 10)) / 255;
							this.g = Math.min(255, parseInt(color[2], 10)) / 255;
							this.b = Math.min(255, parseInt(color[3], 10)) / 255;
							handleAlpha(color[4]);
							return this;
						}

						if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min(100, parseInt(color[1], 10)) / 100;
							this.g = Math.min(100, parseInt(color[2], 10)) / 100;
							this.b = Math.min(100, parseInt(color[3], 10)) / 100;
							handleAlpha(color[4]);
							return this;
						}

						break;

					case 'hsl':
					case 'hsla':
						if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							const h = parseFloat(color[1]) / 360;
							const s = parseInt(color[2], 10) / 100;
							const l = parseInt(color[3], 10) / 100;
							handleAlpha(color[4]);
							return this.setHSL(h, s, l);
						}

						break;
				}
			} else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
				// hex color
				const hex = m[1];
				const size = hex.length;

				if (size === 3) {
					// #ff0
					this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
					this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
					this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
					return this;
				} else if (size === 6) {
					// #ff0000
					this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
					this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
					this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
					return this;
				}
			}

			if (style && style.length > 0) {
				return this.setColorName(style);
			}

			return this;
		}

		setColorName(style) {
			// color keywords
			const hex = _colorKeywords[style.toLowerCase()];

			if (hex !== undefined) {
				// red
				this.setHex(hex);
			} else {
				// unknown color
				console.warn('THREE.Color: Unknown color ' + style);
			}

			return this;
		}

		clone() {
			return new this.constructor(this.r, this.g, this.b);
		}

		copy(color) {
			this.r = color.r;
			this.g = color.g;
			this.b = color.b;
			return this;
		}

		copySRGBToLinear(color) {
			this.r = SRGBToLinear(color.r);
			this.g = SRGBToLinear(color.g);
			this.b = SRGBToLinear(color.b);
			return this;
		}

		copyLinearToSRGB(color) {
			this.r = LinearToSRGB(color.r);
			this.g = LinearToSRGB(color.g);
			this.b = LinearToSRGB(color.b);
			return this;
		}

		convertSRGBToLinear() {
			this.copySRGBToLinear(this);
			return this;
		}

		convertLinearToSRGB() {
			this.copyLinearToSRGB(this);
			return this;
		}

		getHex() {
			return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
		}

		getHexString() {
			return ('000000' + this.getHex().toString(16)).slice(-6);
		}

		getHSL(target) {
			// h,s,l ranges are in 0.0 - 1.0
			const r = this.r,
						g = this.g,
						b = this.b;
			const max = Math.max(r, g, b);
			const min = Math.min(r, g, b);
			let hue, saturation;
			const lightness = (min + max) / 2.0;

			if (min === max) {
				hue = 0;
				saturation = 0;
			} else {
				const delta = max - min;
				saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

				switch (max) {
					case r:
						hue = (g - b) / delta + (g < b ? 6 : 0);
						break;

					case g:
						hue = (b - r) / delta + 2;
						break;

					case b:
						hue = (r - g) / delta + 4;
						break;
				}

				hue /= 6;
			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;
			return target;
		}

		getStyle() {
			return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';
		}

		offsetHSL(h, s, l) {
			this.getHSL(_hslA);
			_hslA.h += h;
			_hslA.s += s;
			_hslA.l += l;
			this.setHSL(_hslA.h, _hslA.s, _hslA.l);
			return this;
		}

		add(color) {
			this.r += color.r;
			this.g += color.g;
			this.b += color.b;
			return this;
		}

		addColors(color1, color2) {
			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;
			return this;
		}

		addScalar(s) {
			this.r += s;
			this.g += s;
			this.b += s;
			return this;
		}

		sub(color) {
			this.r = Math.max(0, this.r - color.r);
			this.g = Math.max(0, this.g - color.g);
			this.b = Math.max(0, this.b - color.b);
			return this;
		}

		multiply(color) {
			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;
			return this;
		}

		multiplyScalar(s) {
			this.r *= s;
			this.g *= s;
			this.b *= s;
			return this;
		}

		lerp(color, alpha) {
			this.r += (color.r - this.r) * alpha;
			this.g += (color.g - this.g) * alpha;
			this.b += (color.b - this.b) * alpha;
			return this;
		}

		lerpColors(color1, color2, alpha) {
			this.r = color1.r + (color2.r - color1.r) * alpha;
			this.g = color1.g + (color2.g - color1.g) * alpha;
			this.b = color1.b + (color2.b - color1.b) * alpha;
			return this;
		}

		lerpHSL(color, alpha) {
			this.getHSL(_hslA);
			color.getHSL(_hslB);
			const h = lerp(_hslA.h, _hslB.h, alpha);
			const s = lerp(_hslA.s, _hslB.s, alpha);
			const l = lerp(_hslA.l, _hslB.l, alpha);
			this.setHSL(h, s, l);
			return this;
		}

		equals(c) {
			return c.r === this.r && c.g === this.g && c.b === this.b;
		}

		fromArray(array, offset = 0) {
			this.r = array[offset];
			this.g = array[offset + 1];
			this.b = array[offset + 2];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.r;
			array[offset + 1] = this.g;
			array[offset + 2] = this.b;
			return array;
		}

		fromBufferAttribute(attribute, index) {
			this.r = attribute.getX(index);
			this.g = attribute.getY(index);
			this.b = attribute.getZ(index);

			if (attribute.normalized === true) {
				// assuming Uint8Array
				this.r /= 255;
				this.g /= 255;
				this.b /= 255;
			}

			return this;
		}

		toJSON() {
			return this.getHex();
		}

	}

	Color.NAMES = _colorKeywords;
	Color.prototype.isColor = true;
	Color.prototype.r = 1;
	Color.prototype.g = 1;
	Color.prototype.b = 1;

	let _canvas;

	class ImageUtils {
		static getDataURL(image) {
			if (/^data:/i.test(image.src)) {
				return image.src;
			}

			if (typeof HTMLCanvasElement == 'undefined') {
				return image.src;
			}

			let canvas;

			if (image instanceof HTMLCanvasElement) {
				canvas = image;
			} else {
				if (_canvas === undefined) _canvas = createElementNS('canvas');
				_canvas.width = image.width;
				_canvas.height = image.height;

				const context = _canvas.getContext('2d');

				if (image instanceof ImageData) {
					context.putImageData(image, 0, 0);
				} else {
					context.drawImage(image, 0, 0, image.width, image.height);
				}

				canvas = _canvas;
			}

			if (canvas.width > 2048 || canvas.height > 2048) {
				console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);
				return canvas.toDataURL('image/jpeg', 0.6);
			} else {
				return canvas.toDataURL('image/png');
			}
		}

		static sRGBToLinear(image) {
			if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
				const canvas = createElementNS('canvas');
				canvas.width = image.width;
				canvas.height = image.height;
				const context = canvas.getContext('2d');
				context.drawImage(image, 0, 0, image.width, image.height);
				const imageData = context.getImageData(0, 0, image.width, image.height);
				const data = imageData.data;

				for (let i = 0; i < data.length; i++) {
					data[i] = SRGBToLinear(data[i] / 255) * 255;
				}

				context.putImageData(imageData, 0, 0);
				return canvas;
			} else if (image.data) {
				const data = image.data.slice(0);

				for (let i = 0; i < data.length; i++) {
					if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
						data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
					} else {
						// assuming float
						data[i] = SRGBToLinear(data[i]);
					}
				}

				return {
					data: data,
					width: image.width,
					height: image.height
				};
			} else {
				console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');
				return image;
			}
		}

	}

	class Source {
		constructor(data = null) {
			this.uuid = generateUUID();
			this.data = data;
			this.version = 0;
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		toJSON(meta) {
			const isRootObject = meta === undefined || typeof meta === 'string';

			if (!isRootObject && meta.images[this.uuid] !== undefined) {
				return meta.images[this.uuid];
			}

			const output = {
				uuid: this.uuid,
				url: ''
			};
			const data = this.data;

			if (data !== null) {
				let url;

				if (Array.isArray(data)) {
					// cube texture
					url = [];

					for (let i = 0, l = data.length; i < l; i++) {
						if (data[i].isDataTexture) {
							url.push(serializeImage(data[i].image));
						} else {
							url.push(serializeImage(data[i]));
						}
					}
				} else {
					// texture
					url = serializeImage(data);
				}

				output.url = url;
			}

			if (!isRootObject) {
				meta.images[this.uuid] = output;
			}

			return output;
		}

	}

	function serializeImage(image) {
		if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
			// default images
			return ImageUtils.getDataURL(image);
		} else {
			if (image.data) {
				// images of DataTexture
				return {
					data: Array.prototype.slice.call(image.data),
					width: image.width,
					height: image.height,
					type: image.data.constructor.name
				};
			} else {
				console.warn('THREE.Texture: Unable to serialize Texture.');
				return {};
			}
		}
	}

	Source.prototype.isSource = true;

	let textureId = 0;

	class Texture extends EventDispatcher {
		constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
			super();
			Object.defineProperty(this, 'id', {
				value: textureId++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.source = new Source(image);
			this.mipmaps = [];
			this.mapping = mapping;
			this.wrapS = wrapS;
			this.wrapT = wrapT;
			this.magFilter = magFilter;
			this.minFilter = minFilter;
			this.anisotropy = anisotropy;
			this.format = format;
			this.internalFormat = null;
			this.type = type;
			this.offset = new Vector2(0, 0);
			this.repeat = new Vector2(1, 1);
			this.center = new Vector2(0, 0);
			this.rotation = 0;
			this.matrixAutoUpdate = true;
			this.matrix = new Matrix3();
			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.

			this.encoding = encoding;
			this.userData = {};
			this.version = 0;
			this.onUpdate = null;
			this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not

			this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
		}

		get image() {
			return this.source.data;
		}

		set image(value) {
			this.source.data = value;
		}

		updateMatrix() {
			this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.name = source.name;
			this.source = source.source;
			this.mipmaps = source.mipmaps.slice(0);
			this.mapping = source.mapping;
			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;
			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;
			this.anisotropy = source.anisotropy;
			this.format = source.format;
			this.internalFormat = source.internalFormat;
			this.type = source.type;
			this.offset.copy(source.offset);
			this.repeat.copy(source.repeat);
			this.center.copy(source.center);
			this.rotation = source.rotation;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy(source.matrix);
			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;
			this.userData = JSON.parse(JSON.stringify(source.userData));
			this.needsUpdate = true;
			return this;
		}

		toJSON(meta) {
			const isRootObject = meta === undefined || typeof meta === 'string';

			if (!isRootObject && meta.textures[this.uuid] !== undefined) {
				return meta.textures[this.uuid];
			}

			const output = {
				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},
				uuid: this.uuid,
				name: this.name,
				image: this.source.toJSON(meta).uuid,
				mapping: this.mapping,
				repeat: [this.repeat.x, this.repeat.y],
				offset: [this.offset.x, this.offset.y],
				center: [this.center.x, this.center.y],
				rotation: this.rotation,
				wrap: [this.wrapS, this.wrapT],
				format: this.format,
				type: this.type,
				encoding: this.encoding,
				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,
				flipY: this.flipY,
				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment
			};
			if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;

			if (!isRootObject) {
				meta.textures[this.uuid] = output;
			}

			return output;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

		transformUv(uv) {
			if (this.mapping !== UVMapping) return uv;
			uv.applyMatrix3(this.matrix);

			if (uv.x < 0 || uv.x > 1) {
				switch (this.wrapS) {
					case RepeatWrapping:
						uv.x = uv.x - Math.floor(uv.x);
						break;

					case ClampToEdgeWrapping:
						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:
						if (Math.abs(Math.floor(uv.x) % 2) === 1) {
							uv.x = Math.ceil(uv.x) - uv.x;
						} else {
							uv.x = uv.x - Math.floor(uv.x);
						}

						break;
				}
			}

			if (uv.y < 0 || uv.y > 1) {
				switch (this.wrapT) {
					case RepeatWrapping:
						uv.y = uv.y - Math.floor(uv.y);
						break;

					case ClampToEdgeWrapping:
						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:
						if (Math.abs(Math.floor(uv.y) % 2) === 1) {
							uv.y = Math.ceil(uv.y) - uv.y;
						} else {
							uv.y = uv.y - Math.floor(uv.y);
						}

						break;
				}
			}

			if (this.flipY) {
				uv.y = 1 - uv.y;
			}

			return uv;
		}

		set needsUpdate(value) {
			if (value === true) {
				this.version++;
				this.source.needsUpdate = true;
			}
		}

	}

	Texture.DEFAULT_IMAGE = null;
	Texture.DEFAULT_MAPPING = UVMapping;
	Texture.prototype.isTexture = true;

	class Vector4 {
		constructor(x = 0, y = 0, z = 0, w = 1) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
		}

		get width() {
			return this.z;
		}

		set width(value) {
			this.z = value;
		}

		get height() {
			return this.w;
		}

		set height(value) {
			this.w = value;
		}

		set(x, y, z, w) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return this;
		}

		setScalar(scalar) {
			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;
			return this;
		}

		setX(x) {
			this.x = x;
			return this;
		}

		setY(y) {
			this.y = y;
			return this;
		}

		setZ(z) {
			this.z = z;
			return this;
		}

		setW(w) {
			this.w = w;
			return this;
		}

		setComponent(index, value) {
			switch (index) {
				case 0:
					this.x = value;
					break;

				case 1:
					this.y = value;
					break;

				case 2:
					this.z = value;
					break;

				case 3:
					this.w = value;
					break;

				default:
					throw new Error('index is out of range: ' + index);
			}

			return this;
		}

		getComponent(index) {
			switch (index) {
				case 0:
					return this.x;

				case 1:
					return this.y;

				case 2:
					return this.z;

				case 3:
					return this.w;

				default:
					throw new Error('index is out of range: ' + index);
			}
		}

		clone() {
			return new this.constructor(this.x, this.y, this.z, this.w);
		}

		copy(v) {
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = v.w !== undefined ? v.w : 1;
			return this;
		}

		add(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);
			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;
			return this;
		}

		addScalar(s) {
			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;
			return this;
		}

		addVectors(a, b) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;
			return this;
		}

		addScaledVector(v, s) {
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;
			return this;
		}

		sub(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);
			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;
			return this;
		}

		subScalar(s) {
			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;
			return this;
		}

		subVectors(a, b) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;
			return this;
		}

		multiply(v) {
			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			this.w *= v.w;
			return this;
		}

		multiplyScalar(scalar) {
			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;
			return this;
		}

		applyMatrix4(m) {
			const x = this.x,
						y = this.y,
						z = this.z,
						w = this.w;
			const e = m.elements;
			this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
			this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
			this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
			this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
			return this;
		}

		divideScalar(scalar) {
			return this.multiplyScalar(1 / scalar);
		}

		setAxisAngleFromQuaternion(q) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
			// q is assumed to be normalized
			this.w = 2 * Math.acos(q.w);
			const s = Math.sqrt(1 - q.w * q.w);

			if (s < 0.0001) {
				this.x = 1;
				this.y = 0;
				this.z = 0;
			} else {
				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;
			}

			return this;
		}

		setAxisAngleFromRotationMatrix(m) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			let angle, x, y, z; // variables for result

			const epsilon = 0.01,
						// margin to allow for rounding errors
			epsilon2 = 0.1,
						// margin to distinguish between 0 and 180 degrees
			te = m.elements,
						m11 = te[0],
						m12 = te[4],
						m13 = te[8],
						m21 = te[1],
						m22 = te[5],
						m23 = te[9],
						m31 = te[2],
						m32 = te[6],
						m33 = te[10];

			if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms
				if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
					// this singularity is identity matrix so angle = 0
					this.set(1, 0, 0, 0);
					return this; // zero angle, arbitrary axis
				} // otherwise this singularity is angle = 180


				angle = Math.PI;
				const xx = (m11 + 1) / 2;
				const yy = (m22 + 1) / 2;
				const zz = (m33 + 1) / 2;
				const xy = (m12 + m21) / 4;
				const xz = (m13 + m31) / 4;
				const yz = (m23 + m32) / 4;

				if (xx > yy && xx > zz) {
					// m11 is the largest diagonal term
					if (xx < epsilon) {
						x = 0;
						y = 0.707106781;
						z = 0.707106781;
					} else {
						x = Math.sqrt(xx);
						y = xy / x;
						z = xz / x;
					}
				} else if (yy > zz) {
					// m22 is the largest diagonal term
					if (yy < epsilon) {
						x = 0.707106781;
						y = 0;
						z = 0.707106781;
					} else {
						y = Math.sqrt(yy);
						x = xy / y;
						z = yz / y;
					}
				} else {
					// m33 is the largest diagonal term so base result on this
					if (zz < epsilon) {
						x = 0.707106781;
						y = 0.707106781;
						z = 0;
					} else {
						z = Math.sqrt(zz);
						x = xz / z;
						y = yz / z;
					}
				}

				this.set(x, y, z, angle);
				return this; // return 180 deg rotation
			} // as we have reached here there are no singularities so we can handle normally


			let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize

			if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = (m32 - m23) / s;
			this.y = (m13 - m31) / s;
			this.z = (m21 - m12) / s;
			this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
			return this;
		}

		min(v) {
			this.x = Math.min(this.x, v.x);
			this.y = Math.min(this.y, v.y);
			this.z = Math.min(this.z, v.z);
			this.w = Math.min(this.w, v.w);
			return this;
		}

		max(v) {
			this.x = Math.max(this.x, v.x);
			this.y = Math.max(this.y, v.y);
			this.z = Math.max(this.z, v.z);
			this.w = Math.max(this.w, v.w);
			return this;
		}

		clamp(min, max) {
			// assumes min < max, componentwise
			this.x = Math.max(min.x, Math.min(max.x, this.x));
			this.y = Math.max(min.y, Math.min(max.y, this.y));
			this.z = Math.max(min.z, Math.min(max.z, this.z));
			this.w = Math.max(min.w, Math.min(max.w, this.w));
			return this;
		}

		clampScalar(minVal, maxVal) {
			this.x = Math.max(minVal, Math.min(maxVal, this.x));
			this.y = Math.max(minVal, Math.min(maxVal, this.y));
			this.z = Math.max(minVal, Math.min(maxVal, this.z));
			this.w = Math.max(minVal, Math.min(maxVal, this.w));
			return this;
		}

		clampLength(min, max) {
			const length = this.length();
			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
		}

		floor() {
			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			this.z = Math.floor(this.z);
			this.w = Math.floor(this.w);
			return this;
		}

		ceil() {
			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			this.z = Math.ceil(this.z);
			this.w = Math.ceil(this.w);
			return this;
		}

		round() {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			this.z = Math.round(this.z);
			this.w = Math.round(this.w);
			return this;
		}

		roundToZero() {
			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
			this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
			return this;
		}

		negate() {
			this.x = -this.x;
			this.y = -this.y;
			this.z = -this.z;
			this.w = -this.w;
			return this;
		}

		dot(v) {
			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
		}

		lengthSq() {
			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		}

		length() {
			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		}

		manhattanLength() {
			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
		}

		normalize() {
			return this.divideScalar(this.length() || 1);
		}

		setLength(length) {
			return this.normalize().multiplyScalar(length);
		}

		lerp(v, alpha) {
			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			this.z += (v.z - this.z) * alpha;
			this.w += (v.w - this.w) * alpha;
			return this;
		}

		lerpVectors(v1, v2, alpha) {
			this.x = v1.x + (v2.x - v1.x) * alpha;
			this.y = v1.y + (v2.y - v1.y) * alpha;
			this.z = v1.z + (v2.z - v1.z) * alpha;
			this.w = v1.w + (v2.w - v1.w) * alpha;
			return this;
		}

		equals(v) {
			return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
		}

		fromArray(array, offset = 0) {
			this.x = array[offset];
			this.y = array[offset + 1];
			this.z = array[offset + 2];
			this.w = array[offset + 3];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.x;
			array[offset + 1] = this.y;
			array[offset + 2] = this.z;
			array[offset + 3] = this.w;
			return array;
		}

		fromBufferAttribute(attribute, index, offset) {
			if (offset !== undefined) {
				console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');
			}

			this.x = attribute.getX(index);
			this.y = attribute.getY(index);
			this.z = attribute.getZ(index);
			this.w = attribute.getW(index);
			return this;
		}

		random() {
			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();
			this.w = Math.random();
			return this;
		}

		*[Symbol.iterator]() {
			yield this.x;
			yield this.y;
			yield this.z;
			yield this.w;
		}

	}

	Vector4.prototype.isVector4 = true;

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/

	class WebGLRenderTarget extends EventDispatcher {
		constructor(width, height, options = {}) {
			super();
			this.width = width;
			this.height = height;
			this.depth = 1;
			this.scissor = new Vector4(0, 0, width, height);
			this.scissorTest = false;
			this.viewport = new Vector4(0, 0, width, height);
			const image = {
				width: width,
				height: height,
				depth: 1
			};
			this.texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
			this.texture.isRenderTargetTexture = true;
			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
			this.samples = options.samples !== undefined ? options.samples : 0;
		}

		setSize(width, height, depth = 1) {
			if (this.width !== width || this.height !== height || this.depth !== depth) {
				this.width = width;
				this.height = height;
				this.depth = depth;
				this.texture.image.width = width;
				this.texture.image.height = height;
				this.texture.image.depth = depth;
				this.dispose();
			}

			this.viewport.set(0, 0, width, height);
			this.scissor.set(0, 0, width, height);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.width = source.width;
			this.height = source.height;
			this.depth = source.depth;
			this.viewport.copy(source.viewport);
			this.texture = source.texture.clone(); // ensure image object is not shared, see #20328

			this.texture.image = Object.assign({}, source.texture.image);
			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
			this.samples = source.samples;
			return this;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

	}

	WebGLRenderTarget.prototype.isWebGLRenderTarget = true;

	class DataArrayTexture extends Texture {
		constructor(data = null, width = 1, height = 1, depth = 1) {
			super(null);
			this.image = {
				data,
				width,
				height,
				depth
			};
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
			this.wrapR = ClampToEdgeWrapping;
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
		}

	}

	DataArrayTexture.prototype.isDataArrayTexture = true;

	class WebGLArrayRenderTarget extends WebGLRenderTarget {
		constructor(width, height, depth) {
			super(width, height);
			this.depth = depth;
			this.texture = new DataArrayTexture(null, width, height, depth);
			this.texture.isRenderTargetTexture = true;
		}

	}

	WebGLArrayRenderTarget.prototype.isWebGLArrayRenderTarget = true;

	class Data3DTexture extends Texture {
		constructor(data = null, width = 1, height = 1, depth = 1) {
			// We're going to add .setXXX() methods for setting properties later.
			// Users can still set in DataTexture3D directly.
			//
			//	const texture = new THREE.DataTexture3D( data, width, height, depth );
			// 	texture.anisotropy = 16;
			//
			// See #14839
			super(null);
			this.image = {
				data,
				width,
				height,
				depth
			};
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
			this.wrapR = ClampToEdgeWrapping;
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
		}

	}

	Data3DTexture.prototype.isData3DTexture = true;

	class WebGL3DRenderTarget extends WebGLRenderTarget {
		constructor(width, height, depth) {
			super(width, height);
			this.depth = depth;
			this.texture = new Data3DTexture(null, width, height, depth);
			this.texture.isRenderTargetTexture = true;
		}

	}

	WebGL3DRenderTarget.prototype.isWebGL3DRenderTarget = true;

	class WebGLMultipleRenderTargets extends WebGLRenderTarget {
		constructor(width, height, count, options = {}) {
			super(width, height, options);
			const texture = this.texture;
			this.texture = [];

			for (let i = 0; i < count; i++) {
				this.texture[i] = texture.clone();
				this.texture[i].isRenderTargetTexture = true;
			}
		}

		setSize(width, height, depth = 1) {
			if (this.width !== width || this.height !== height || this.depth !== depth) {
				this.width = width;
				this.height = height;
				this.depth = depth;

				for (let i = 0, il = this.texture.length; i < il; i++) {
					this.texture[i].image.width = width;
					this.texture[i].image.height = height;
					this.texture[i].image.depth = depth;
				}

				this.dispose();
			}

			this.viewport.set(0, 0, width, height);
			this.scissor.set(0, 0, width, height);
			return this;
		}

		copy(source) {
			this.dispose();
			this.width = source.width;
			this.height = source.height;
			this.depth = source.depth;
			this.viewport.set(0, 0, this.width, this.height);
			this.scissor.set(0, 0, this.width, this.height);
			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;
			this.texture.length = 0;

			for (let i = 0, il = source.texture.length; i < il; i++) {
				this.texture[i] = source.texture[i].clone();
			}

			return this;
		}

	}

	WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;

	class Quaternion {
		constructor(x = 0, y = 0, z = 0, w = 1) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;
		}

		static slerp(qa, qb, qm, t) {
			console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');
			return qm.slerpQuaternions(qa, qb, t);
		}

		static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
			// fuzz-free, array-based Quaternion SLERP operation
			let x0 = src0[srcOffset0 + 0],
					y0 = src0[srcOffset0 + 1],
					z0 = src0[srcOffset0 + 2],
					w0 = src0[srcOffset0 + 3];
			const x1 = src1[srcOffset1 + 0],
						y1 = src1[srcOffset1 + 1],
						z1 = src1[srcOffset1 + 2],
						w1 = src1[srcOffset1 + 3];

			if (t === 0) {
				dst[dstOffset + 0] = x0;
				dst[dstOffset + 1] = y0;
				dst[dstOffset + 2] = z0;
				dst[dstOffset + 3] = w0;
				return;
			}

			if (t === 1) {
				dst[dstOffset + 0] = x1;
				dst[dstOffset + 1] = y1;
				dst[dstOffset + 2] = z1;
				dst[dstOffset + 3] = w1;
				return;
			}

			if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
				let s = 1 - t;
				const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
							dir = cos >= 0 ? 1 : -1,
							sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:

				if (sqrSin > Number.EPSILON) {
					const sin = Math.sqrt(sqrSin),
								len = Math.atan2(sin, cos * dir);
					s = Math.sin(s * len) / sin;
					t = Math.sin(t * len) / sin;
				}

				const tDir = t * dir;
				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:

				if (s === 1 - t) {
					const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;
				}
			}

			dst[dstOffset] = x0;
			dst[dstOffset + 1] = y0;
			dst[dstOffset + 2] = z0;
			dst[dstOffset + 3] = w0;
		}

		static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
			const x0 = src0[srcOffset0];
			const y0 = src0[srcOffset0 + 1];
			const z0 = src0[srcOffset0 + 2];
			const w0 = src0[srcOffset0 + 3];
			const x1 = src1[srcOffset1];
			const y1 = src1[srcOffset1 + 1];
			const z1 = src1[srcOffset1 + 2];
			const w1 = src1[srcOffset1 + 3];
			dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
			dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
			dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
			dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
			return dst;
		}

		get x() {
			return this._x;
		}

		set x(value) {
			this._x = value;

			this._onChangeCallback();
		}

		get y() {
			return this._y;
		}

		set y(value) {
			this._y = value;

			this._onChangeCallback();
		}

		get z() {
			return this._z;
		}

		set z(value) {
			this._z = value;

			this._onChangeCallback();
		}

		get w() {
			return this._w;
		}

		set w(value) {
			this._w = value;

			this._onChangeCallback();
		}

		set(x, y, z, w) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;
		}

		clone() {
			return new this.constructor(this._x, this._y, this._z, this._w);
		}

		copy(quaternion) {
			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;
		}

		setFromEuler(euler, update) {
			if (!(euler && euler.isEuler)) {
				throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
			}

			const x = euler._x,
						y = euler._y,
						z = euler._z,
						order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			const cos = Math.cos;
			const sin = Math.sin;
			const c1 = cos(x / 2);
			const c2 = cos(y / 2);
			const c3 = cos(z / 2);
			const s1 = sin(x / 2);
			const s2 = sin(y / 2);
			const s3 = sin(z / 2);

			switch (order) {
				case 'XYZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'YXZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'ZXY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'ZYX':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'YZX':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'XZY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				default:
					console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
			}

			if (update !== false) this._onChangeCallback();
			return this;
		}

		setFromAxisAngle(axis, angle) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
			// assumes axis is normalized
			const halfAngle = angle / 2,
						s = Math.sin(halfAngle);
			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos(halfAngle);

			this._onChangeCallback();

			return this;
		}

		setFromRotationMatrix(m) {
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			const te = m.elements,
						m11 = te[0],
						m12 = te[4],
						m13 = te[8],
						m21 = te[1],
						m22 = te[5],
						m23 = te[9],
						m31 = te[2],
						m32 = te[6],
						m33 = te[10],
						trace = m11 + m22 + m33;

			if (trace > 0) {
				const s = 0.5 / Math.sqrt(trace + 1.0);
				this._w = 0.25 / s;
				this._x = (m32 - m23) * s;
				this._y = (m13 - m31) * s;
				this._z = (m21 - m12) * s;
			} else if (m11 > m22 && m11 > m33) {
				const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
				this._w = (m32 - m23) / s;
				this._x = 0.25 * s;
				this._y = (m12 + m21) / s;
				this._z = (m13 + m31) / s;
			} else if (m22 > m33) {
				const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
				this._w = (m13 - m31) / s;
				this._x = (m12 + m21) / s;
				this._y = 0.25 * s;
				this._z = (m23 + m32) / s;
			} else {
				const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
				this._w = (m21 - m12) / s;
				this._x = (m13 + m31) / s;
				this._y = (m23 + m32) / s;
				this._z = 0.25 * s;
			}

			this._onChangeCallback();

			return this;
		}

		setFromUnitVectors(vFrom, vTo) {
			// assumes direction vectors vFrom and vTo are normalized
			let r = vFrom.dot(vTo) + 1;

			if (r < Number.EPSILON) {
				// vFrom and vTo point in opposite directions
				r = 0;

				if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
					this._x = -vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;
				} else {
					this._x = 0;
					this._y = -vFrom.z;
					this._z = vFrom.y;
					this._w = r;
				}
			} else {
				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;
			}

			return this.normalize();
		}

		angleTo(q) {
			return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
		}

		rotateTowards(q, step) {
			const angle = this.angleTo(q);
			if (angle === 0) return this;
			const t = Math.min(1, step / angle);
			this.slerp(q, t);
			return this;
		}

		identity() {
			return this.set(0, 0, 0, 1);
		}

		invert() {
			// quaternion is assumed to have unit length
			return this.conjugate();
		}

		conjugate() {
			this._x *= -1;
			this._y *= -1;
			this._z *= -1;

			this._onChangeCallback();

			return this;
		}

		dot(v) {
			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
		}

		lengthSq() {
			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
		}

		length() {
			return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
		}

		normalize() {
			let l = this.length();

			if (l === 0) {
				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;
			} else {
				l = 1 / l;
				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;
			}

			this._onChangeCallback();

			return this;
		}

		multiply(q, p) {
			if (p !== undefined) {
				console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
				return this.multiplyQuaternions(q, p);
			}

			return this.multiplyQuaternions(this, q);
		}

		premultiply(q) {
			return this.multiplyQuaternions(q, this);
		}

		multiplyQuaternions(a, b) {
			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
			const qax = a._x,
						qay = a._y,
						qaz = a._z,
						qaw = a._w;
			const qbx = b._x,
						qby = b._y,
						qbz = b._z,
						qbw = b._w;
			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;
		}

		slerp(qb, t) {
			if (t === 0) return this;
			if (t === 1) return this.copy(qb);
			const x = this._x,
						y = this._y,
						z = this._z,
						w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if (cosHalfTheta < 0) {
				this._w = -qb._w;
				this._x = -qb._x;
				this._y = -qb._y;
				this._z = -qb._z;
				cosHalfTheta = -cosHalfTheta;
			} else {
				this.copy(qb);
			}

			if (cosHalfTheta >= 1.0) {
				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;
				return this;
			}

			const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if (sqrSinHalfTheta <= Number.EPSILON) {
				const s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;
				this.normalize();

				this._onChangeCallback();

				return this;
			}

			const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
			const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
			const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
						ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
			this._w = w * ratioA + this._w * ratioB;
			this._x = x * ratioA + this._x * ratioB;
			this._y = y * ratioA + this._y * ratioB;
			this._z = z * ratioA + this._z * ratioB;

			this._onChangeCallback();

			return this;
		}

		slerpQuaternions(qa, qb, t) {
			return this.copy(qa).slerp(qb, t);
		}

		random() {
			// Derived from http://planning.cs.uiuc.edu/node198.html
			// Note, this source uses w, x, y, z ordering,
			// so we swap the order below.
			const u1 = Math.random();
			const sqrt1u1 = Math.sqrt(1 - u1);
			const sqrtu1 = Math.sqrt(u1);
			const u2 = 2 * Math.PI * Math.random();
			const u3 = 2 * Math.PI * Math.random();
			return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
		}

		equals(quaternion) {
			return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
		}

		fromArray(array, offset = 0) {
			this._x = array[offset];
			this._y = array[offset + 1];
			this._z = array[offset + 2];
			this._w = array[offset + 3];

			this._onChangeCallback();

			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this._x;
			array[offset + 1] = this._y;
			array[offset + 2] = this._z;
			array[offset + 3] = this._w;
			return array;
		}

		fromBufferAttribute(attribute, index) {
			this._x = attribute.getX(index);
			this._y = attribute.getY(index);
			this._z = attribute.getZ(index);
			this._w = attribute.getW(index);
			return this;
		}

		_onChange(callback) {
			this._onChangeCallback = callback;
			return this;
		}

		_onChangeCallback() {}

	}

	Quaternion.prototype.isQuaternion = true;

	class Vector3 {
		constructor(x = 0, y = 0, z = 0) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		set(x, y, z) {
			if (z === undefined) z = this.z; // sprite.scale.set(x,y)

			this.x = x;
			this.y = y;
			this.z = z;
			return this;
		}

		setScalar(scalar) {
			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			return this;
		}

		setX(x) {
			this.x = x;
			return this;
		}

		setY(y) {
			this.y = y;
			return this;
		}

		setZ(z) {
			this.z = z;
			return this;
		}

		setComponent(index, value) {
			switch (index) {
				case 0:
					this.x = value;
					break;

				case 1:
					this.y = value;
					break;

				case 2:
					this.z = value;
					break;

				default:
					throw new Error('index is out of range: ' + index);
			}

			return this;
		}

		getComponent(index) {
			switch (index) {
				case 0:
					return this.x;

				case 1:
					return this.y;

				case 2:
					return this.z;

				default:
					throw new Error('index is out of range: ' + index);
			}
		}

		clone() {
			return new this.constructor(this.x, this.y, this.z);
		}

		copy(v) {
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			return this;
		}

		add(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
				return this.addVectors(v, w);
			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			return this;
		}

		addScalar(s) {
			this.x += s;
			this.y += s;
			this.z += s;
			return this;
		}

		addVectors(a, b) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			return this;
		}

		addScaledVector(v, s) {
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			return this;
		}

		sub(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
				return this.subVectors(v, w);
			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			return this;
		}

		subScalar(s) {
			this.x -= s;
			this.y -= s;
			this.z -= s;
			return this;
		}

		subVectors(a, b) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			return this;
		}

		multiply(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
				return this.multiplyVectors(v, w);
			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			return this;
		}

		multiplyScalar(scalar) {
			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			return this;
		}

		multiplyVectors(a, b) {
			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;
			return this;
		}

		applyEuler(euler) {
			if (!(euler && euler.isEuler)) {
				console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
			}

			return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
		}

		applyAxisAngle(axis, angle) {
			return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
		}

		applyMatrix3(m) {
			const x = this.x,
						y = this.y,
						z = this.z;
			const e = m.elements;
			this.x = e[0] * x + e[3] * y + e[6] * z;
			this.y = e[1] * x + e[4] * y + e[7] * z;
			this.z = e[2] * x + e[5] * y + e[8] * z;
			return this;
		}

		applyNormalMatrix(m) {
			return this.applyMatrix3(m).normalize();
		}

		applyMatrix4(m) {
			const x = this.x,
						y = this.y,
						z = this.z;
			const e = m.elements;
			const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
			this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
			this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
			this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
			return this;
		}

		applyQuaternion(q) {
			const x = this.x,
						y = this.y,
						z = this.z;
			const qx = q.x,
						qy = q.y,
						qz = q.z,
						qw = q.w; // calculate quat * vector

			const ix = qw * x + qy * z - qz * y;
			const iy = qw * y + qz * x - qx * z;
			const iz = qw * z + qx * y - qy * x;
			const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

			this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
			this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
			this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
			return this;
		}

		project(camera) {
			return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
		}

		unproject(camera) {
			return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
		}

		transformDirection(m) {
			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction
			const x = this.x,
						y = this.y,
						z = this.z;
			const e = m.elements;
			this.x = e[0] * x + e[4] * y + e[8] * z;
			this.y = e[1] * x + e[5] * y + e[9] * z;
			this.z = e[2] * x + e[6] * y + e[10] * z;
			return this.normalize();
		}

		divide(v) {
			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;
			return this;
		}

		divideScalar(scalar) {
			return this.multiplyScalar(1 / scalar);
		}

		min(v) {
			this.x = Math.min(this.x, v.x);
			this.y = Math.min(this.y, v.y);
			this.z = Math.min(this.z, v.z);
			return this;
		}

		max(v) {
			this.x = Math.max(this.x, v.x);
			this.y = Math.max(this.y, v.y);
			this.z = Math.max(this.z, v.z);
			return this;
		}

		clamp(min, max) {
			// assumes min < max, componentwise
			this.x = Math.max(min.x, Math.min(max.x, this.x));
			this.y = Math.max(min.y, Math.min(max.y, this.y));
			this.z = Math.max(min.z, Math.min(max.z, this.z));
			return this;
		}

		clampScalar(minVal, maxVal) {
			this.x = Math.max(minVal, Math.min(maxVal, this.x));
			this.y = Math.max(minVal, Math.min(maxVal, this.y));
			this.z = Math.max(minVal, Math.min(maxVal, this.z));
			return this;
		}

		clampLength(min, max) {
			const length = this.length();
			return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
		}

		floor() {
			this.x = Math.floor(this.x);
			this.y = Math.floor(this.y);
			this.z = Math.floor(this.z);
			return this;
		}

		ceil() {
			this.x = Math.ceil(this.x);
			this.y = Math.ceil(this.y);
			this.z = Math.ceil(this.z);
			return this;
		}

		round() {
			this.x = Math.round(this.x);
			this.y = Math.round(this.y);
			this.z = Math.round(this.z);
			return this;
		}

		roundToZero() {
			this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
			this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
			this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
			return this;
		}

		negate() {
			this.x = -this.x;
			this.y = -this.y;
			this.z = -this.z;
			return this;
		}

		dot(v) {
			return this.x * v.x + this.y * v.y + this.z * v.z;
		} // TODO lengthSquared?


		lengthSq() {
			return this.x * this.x + this.y * this.y + this.z * this.z;
		}

		length() {
			return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		}

		manhattanLength() {
			return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
		}

		normalize() {
			return this.divideScalar(this.length() || 1);
		}

		setLength(length) {
			return this.normalize().multiplyScalar(length);
		}

		lerp(v, alpha) {
			this.x += (v.x - this.x) * alpha;
			this.y += (v.y - this.y) * alpha;
			this.z += (v.z - this.z) * alpha;
			return this;
		}

		lerpVectors(v1, v2, alpha) {
			this.x = v1.x + (v2.x - v1.x) * alpha;
			this.y = v1.y + (v2.y - v1.y) * alpha;
			this.z = v1.z + (v2.z - v1.z) * alpha;
			return this;
		}

		cross(v, w) {
			if (w !== undefined) {
				console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
				return this.crossVectors(v, w);
			}

			return this.crossVectors(this, v);
		}

		crossVectors(a, b) {
			const ax = a.x,
						ay = a.y,
						az = a.z;
			const bx = b.x,
						by = b.y,
						bz = b.z;
			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;
			return this;
		}

		projectOnVector(v) {
			const denominator = v.lengthSq();
			if (denominator === 0) return this.set(0, 0, 0);
			const scalar = v.dot(this) / denominator;
			return this.copy(v).multiplyScalar(scalar);
		}

		projectOnPlane(planeNormal) {
			_vector$c.copy(this).projectOnVector(planeNormal);

			return this.sub(_vector$c);
		}

		reflect(normal) {
			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length
			return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
		}

		angleTo(v) {
			const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
			if (denominator === 0) return Math.PI / 2;
			const theta = this.dot(v) / denominator; // clamp, to handle numerical problems

			return Math.acos(clamp(theta, -1, 1));
		}

		distanceTo(v) {
			return Math.sqrt(this.distanceToSquared(v));
		}

		distanceToSquared(v) {
			const dx = this.x - v.x,
						dy = this.y - v.y,
						dz = this.z - v.z;
			return dx * dx + dy * dy + dz * dz;
		}

		manhattanDistanceTo(v) {
			return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
		}

		setFromSpherical(s) {
			return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
		}

		setFromSphericalCoords(radius, phi, theta) {
			const sinPhiRadius = Math.sin(phi) * radius;
			this.x = sinPhiRadius * Math.sin(theta);
			this.y = Math.cos(phi) * radius;
			this.z = sinPhiRadius * Math.cos(theta);
			return this;
		}

		setFromCylindrical(c) {
			return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
		}

		setFromCylindricalCoords(radius, theta, y) {
			this.x = radius * Math.sin(theta);
			this.y = y;
			this.z = radius * Math.cos(theta);
			return this;
		}

		setFromMatrixPosition(m) {
			const e = m.elements;
			this.x = e[12];
			this.y = e[13];
			this.z = e[14];
			return this;
		}

		setFromMatrixScale(m) {
			const sx = this.setFromMatrixColumn(m, 0).length();
			const sy = this.setFromMatrixColumn(m, 1).length();
			const sz = this.setFromMatrixColumn(m, 2).length();
			this.x = sx;
			this.y = sy;
			this.z = sz;
			return this;
		}

		setFromMatrixColumn(m, index) {
			return this.fromArray(m.elements, index * 4);
		}

		setFromMatrix3Column(m, index) {
			return this.fromArray(m.elements, index * 3);
		}

		setFromEuler(e) {
			this.x = e._x;
			this.y = e._y;
			this.z = e._z;
			return this;
		}

		equals(v) {
			return v.x === this.x && v.y === this.y && v.z === this.z;
		}

		fromArray(array, offset = 0) {
			this.x = array[offset];
			this.y = array[offset + 1];
			this.z = array[offset + 2];
			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this.x;
			array[offset + 1] = this.y;
			array[offset + 2] = this.z;
			return array;
		}

		fromBufferAttribute(attribute, index, offset) {
			if (offset !== undefined) {
				console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
			}

			this.x = attribute.getX(index);
			this.y = attribute.getY(index);
			this.z = attribute.getZ(index);
			return this;
		}

		random() {
			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();
			return this;
		}

		randomDirection() {
			// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
			const u = (Math.random() - 0.5) * 2;
			const t = Math.random() * Math.PI * 2;
			const f = Math.sqrt(1 - u ** 2);
			this.x = f * Math.cos(t);
			this.y = f * Math.sin(t);
			this.z = u;
			return this;
		}

		*[Symbol.iterator]() {
			yield this.x;
			yield this.y;
			yield this.z;
		}

	}

	Vector3.prototype.isVector3 = true;

	const _vector$c = /*@__PURE__*/new Vector3();

	const _quaternion$4 = /*@__PURE__*/new Quaternion();

	class Box3 {
		constructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
			this.min = min;
			this.max = max;
		}

		set(min, max) {
			this.min.copy(min);
			this.max.copy(max);
			return this;
		}

		setFromArray(array) {
			let minX = +Infinity;
			let minY = +Infinity;
			let minZ = +Infinity;
			let maxX = -Infinity;
			let maxY = -Infinity;
			let maxZ = -Infinity;

			for (let i = 0, l = array.length; i < l; i += 3) {
				const x = array[i];
				const y = array[i + 1];
				const z = array[i + 2];
				if (x < minX) minX = x;
				if (y < minY) minY = y;
				if (z < minZ) minZ = z;
				if (x > maxX) maxX = x;
				if (y > maxY) maxY = y;
				if (z > maxZ) maxZ = z;
			}

			this.min.set(minX, minY, minZ);
			this.max.set(maxX, maxY, maxZ);
			return this;
		}

		setFromBufferAttribute(attribute) {
			let minX = +Infinity;
			let minY = +Infinity;
			let minZ = +Infinity;
			let maxX = -Infinity;
			let maxY = -Infinity;
			let maxZ = -Infinity;

			for (let i = 0, l = attribute.count; i < l; i++) {
				const x = attribute.getX(i);
				const y = attribute.getY(i);
				const z = attribute.getZ(i);
				if (x < minX) minX = x;
				if (y < minY) minY = y;
				if (z < minZ) minZ = z;
				if (x > maxX) maxX = x;
				if (y > maxY) maxY = y;
				if (z > maxZ) maxZ = z;
			}

			this.min.set(minX, minY, minZ);
			this.max.set(maxX, maxY, maxZ);
			return this;
		}

		setFromPoints(points) {
			this.makeEmpty();

			for (let i = 0, il = points.length; i < il; i++) {
				this.expandByPoint(points[i]);
			}

			return this;
		}

		setFromCenterAndSize(center, size) {
			const halfSize = _vector$b.copy(size).multiplyScalar(0.5);

			this.min.copy(center).sub(halfSize);
			this.max.copy(center).add(halfSize);
			return this;
		}

		setFromObject(object, precise = false) {
			this.makeEmpty();
			return this.expandByObject(object, precise);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(box) {
			this.min.copy(box.min);
			this.max.copy(box.max);
			return this;
		}

		makeEmpty() {
			this.min.x = this.min.y = this.min.z = +Infinity;
			this.max.x = this.max.y = this.max.z = -Infinity;
			return this;
		}

		isEmpty() {
			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
			return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
		}

		getCenter(target) {
			return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
		}

		getSize(target) {
			return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
		}

		expandByPoint(point) {
			this.min.min(point);
			this.max.max(point);
			return this;
		}

		expandByVector(vector) {
			this.min.sub(vector);
			this.max.add(vector);
			return this;
		}

		expandByScalar(scalar) {
			this.min.addScalar(-scalar);
			this.max.addScalar(scalar);
			return this;
		}

		expandByObject(object, precise = false) {
			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms
			object.updateWorldMatrix(false, false);
			const geometry = object.geometry;

			if (geometry !== undefined) {
				if (precise && geometry.attributes != undefined && geometry.attributes.position !== undefined) {
					const position = geometry.attributes.position;

					for (let i = 0, l = position.count; i < l; i++) {
						_vector$b.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);

						this.expandByPoint(_vector$b);
					}
				} else {
					if (geometry.boundingBox === null) {
						geometry.computeBoundingBox();
					}

					_box$3.copy(geometry.boundingBox);

					_box$3.applyMatrix4(object.matrixWorld);

					this.union(_box$3);
				}
			}

			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				this.expandByObject(children[i], precise);
			}

			return this;
		}

		containsPoint(point) {
			return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
		}

		containsBox(box) {
			return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
		}

		getParameter(point, target) {
			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.
			return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
		}

		intersectsBox(box) {
			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
		}

		intersectsSphere(sphere) {
			// Find the point on the AABB closest to the sphere center.
			this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.

			return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
		}

		intersectsPlane(plane) {
			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.
			let min, max;

			if (plane.normal.x > 0) {
				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;
			} else {
				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;
			}

			if (plane.normal.y > 0) {
				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;
			} else {
				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;
			}

			if (plane.normal.z > 0) {
				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;
			} else {
				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;
			}

			return min <= -plane.constant && max >= -plane.constant;
		}

		intersectsTriangle(triangle) {
			if (this.isEmpty()) {
				return false;
			} // compute box center and extents


			this.getCenter(_center);

			_extents.subVectors(this.max, _center); // translate triangle to aabb origin


			_v0$2.subVectors(triangle.a, _center);

			_v1$7.subVectors(triangle.b, _center);

			_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle


			_f0.subVectors(_v1$7, _v0$2);

			_f1.subVectors(_v2$3, _v1$7);

			_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)


			let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];

			if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
				return false;
			} // test 3 face normals from the aabb


			axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];

			if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
				return false;
			} // finally testing the face normal of the triangle
			// use already existing triangle edge vectors here


			_triangleNormal.crossVectors(_f0, _f1);

			axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
			return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);
		}

		clampPoint(point, target) {
			return target.copy(point).clamp(this.min, this.max);
		}

		distanceToPoint(point) {
			const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);

			return clampedPoint.sub(point).length();
		}

		getBoundingSphere(target) {
			this.getCenter(target.center);
			target.radius = this.getSize(_vector$b).length() * 0.5;
			return target;
		}

		intersect(box) {
			this.min.max(box.min);
			this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.

			if (this.isEmpty()) this.makeEmpty();
			return this;
		}

		union(box) {
			this.min.min(box.min);
			this.max.max(box.max);
			return this;
		}

		applyMatrix4(matrix) {
			// transform of empty box is an empty box.
			if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below

			_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000


			_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001


			_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010


			_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011


			_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100


			_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101


			_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110


			_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111


			this.setFromPoints(_points);
			return this;
		}

		translate(offset) {
			this.min.add(offset);
			this.max.add(offset);
			return this;
		}

		equals(box) {
			return box.min.equals(this.min) && box.max.equals(this.max);
		}

	}

	Box3.prototype.isBox3 = true;
	const _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];

	const _vector$b = /*@__PURE__*/new Vector3();

	const _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices


	const _v0$2 = /*@__PURE__*/new Vector3();

	const _v1$7 = /*@__PURE__*/new Vector3();

	const _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors


	const _f0 = /*@__PURE__*/new Vector3();

	const _f1 = /*@__PURE__*/new Vector3();

	const _f2 = /*@__PURE__*/new Vector3();

	const _center = /*@__PURE__*/new Vector3();

	const _extents = /*@__PURE__*/new Vector3();

	const _triangleNormal = /*@__PURE__*/new Vector3();

	const _testAxis = /*@__PURE__*/new Vector3();

	function satForAxes(axes, v0, v1, v2, extents) {
		for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
			_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis


			const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis

			const p0 = v0.dot(_testAxis);
			const p1 = v1.dot(_testAxis);
			const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r

			if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
				// points of the projected triangle are outside the projected half-length of the aabb
				// the axis is seperating and we can exit
				return false;
			}
		}

		return true;
	}

	const _box$2 = /*@__PURE__*/new Box3();

	const _v1$6 = /*@__PURE__*/new Vector3();

	const _toFarthestPoint = /*@__PURE__*/new Vector3();

	const _toPoint = /*@__PURE__*/new Vector3();

	class Sphere {
		constructor(center = new Vector3(), radius = -1) {
			this.center = center;
			this.radius = radius;
		}

		set(center, radius) {
			this.center.copy(center);
			this.radius = radius;
			return this;
		}

		setFromPoints(points, optionalCenter) {
			const center = this.center;

			if (optionalCenter !== undefined) {
				center.copy(optionalCenter);
			} else {
				_box$2.setFromPoints(points).getCenter(center);
			}

			let maxRadiusSq = 0;

			for (let i = 0, il = points.length; i < il; i++) {
				maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
			}

			this.radius = Math.sqrt(maxRadiusSq);
			return this;
		}

		copy(sphere) {
			this.center.copy(sphere.center);
			this.radius = sphere.radius;
			return this;
		}

		isEmpty() {
			return this.radius < 0;
		}

		makeEmpty() {
			this.center.set(0, 0, 0);
			this.radius = -1;
			return this;
		}

		containsPoint(point) {
			return point.distanceToSquared(this.center) <= this.radius * this.radius;
		}

		distanceToPoint(point) {
			return point.distanceTo(this.center) - this.radius;
		}

		intersectsSphere(sphere) {
			const radiusSum = this.radius + sphere.radius;
			return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
		}

		intersectsBox(box) {
			return box.intersectsSphere(this);
		}

		intersectsPlane(plane) {
			return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
		}

		clampPoint(point, target) {
			const deltaLengthSq = this.center.distanceToSquared(point);
			target.copy(point);

			if (deltaLengthSq > this.radius * this.radius) {
				target.sub(this.center).normalize();
				target.multiplyScalar(this.radius).add(this.center);
			}

			return target;
		}

		getBoundingBox(target) {
			if (this.isEmpty()) {
				// Empty sphere produces empty bounding box
				target.makeEmpty();
				return target;
			}

			target.set(this.center, this.center);
			target.expandByScalar(this.radius);
			return target;
		}

		applyMatrix4(matrix) {
			this.center.applyMatrix4(matrix);
			this.radius = this.radius * matrix.getMaxScaleOnAxis();
			return this;
		}

		translate(offset) {
			this.center.add(offset);
			return this;
		}

		expandByPoint(point) {
			// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
			_toPoint.subVectors(point, this.center);

			const lengthSq = _toPoint.lengthSq();

			if (lengthSq > this.radius * this.radius) {
				const length = Math.sqrt(lengthSq);
				const missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,
				// and the other half to position. This gives a tighter enclosure, instead of if
				// the whole missing distance were just added to radius.

				this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));
				this.radius += missingRadiusHalf;
			}

			return this;
		}

		union(sphere) {
			// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
			// To enclose another sphere into this sphere, we only need to enclose two points:
			// 1) Enclose the farthest point on the other sphere into this sphere.
			// 2) Enclose the opposite point of the farthest point into this sphere.
			if (this.center.equals(sphere.center) === true) {
				_toFarthestPoint.set(0, 0, 1).multiplyScalar(sphere.radius);
			} else {
				_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);
			}

			this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));
			this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));
			return this;
		}

		equals(sphere) {
			return sphere.center.equals(this.center) && sphere.radius === this.radius;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	const _vector$a = /*@__PURE__*/new Vector3();

	const _segCenter = /*@__PURE__*/new Vector3();

	const _segDir = /*@__PURE__*/new Vector3();

	const _diff = /*@__PURE__*/new Vector3();

	const _edge1 = /*@__PURE__*/new Vector3();

	const _edge2 = /*@__PURE__*/new Vector3();

	const _normal$1 = /*@__PURE__*/new Vector3();

	class Ray {
		constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
			this.origin = origin;
			this.direction = direction;
		}

		set(origin, direction) {
			this.origin.copy(origin);
			this.direction.copy(direction);
			return this;
		}

		copy(ray) {
			this.origin.copy(ray.origin);
			this.direction.copy(ray.direction);
			return this;
		}

		at(t, target) {
			return target.copy(this.direction).multiplyScalar(t).add(this.origin);
		}

		lookAt(v) {
			this.direction.copy(v).sub(this.origin).normalize();
			return this;
		}

		recast(t) {
			this.origin.copy(this.at(t, _vector$a));
			return this;
		}

		closestPointToPoint(point, target) {
			target.subVectors(point, this.origin);
			const directionDistance = target.dot(this.direction);

			if (directionDistance < 0) {
				return target.copy(this.origin);
			}

			return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
		}

		distanceToPoint(point) {
			return Math.sqrt(this.distanceSqToPoint(point));
		}

		distanceSqToPoint(point) {
			const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray


			if (directionDistance < 0) {
				return this.origin.distanceToSquared(point);
			}

			_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

			return _vector$a.distanceToSquared(point);
		}

		distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment
			_segCenter.copy(v0).add(v1).multiplyScalar(0.5);

			_segDir.copy(v1).sub(v0).normalize();

			_diff.copy(this.origin).sub(_segCenter);

			const segExtent = v0.distanceTo(v1) * 0.5;
			const a01 = -this.direction.dot(_segDir);

			const b0 = _diff.dot(this.direction);

			const b1 = -_diff.dot(_segDir);

			const c = _diff.lengthSq();

			const det = Math.abs(1 - a01 * a01);
			let s0, s1, sqrDist, extDet;

			if (det > 0) {
				// The ray and segment are not parallel.
				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if (s0 >= 0) {
					if (s1 >= -extDet) {
						if (s1 <= extDet) {
							// region 0
							// Minimum at interior points of ray and segment.
							const invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
						} else {
							// region 1
							s1 = segExtent;
							s0 = Math.max(0, -(a01 * s1 + b0));
							sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
						}
					} else {
						// region 5
						s1 = -segExtent;
						s0 = Math.max(0, -(a01 * s1 + b0));
						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
					}
				} else {
					if (s1 <= -extDet) {
						// region 4
						s0 = Math.max(0, -(-a01 * segExtent + b0));
						s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
					} else if (s1 <= extDet) {
						// region 3
						s0 = 0;
						s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
						sqrDist = s1 * (s1 + 2 * b1) + c;
					} else {
						// region 2
						s0 = Math.max(0, -(a01 * segExtent + b0));
						s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
						sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
					}
				}
			} else {
				// Ray and segment are parallel.
				s1 = a01 > 0 ? -segExtent : segExtent;
				s0 = Math.max(0, -(a01 * s1 + b0));
				sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
			}

			if (optionalPointOnRay) {
				optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
			}

			if (optionalPointOnSegment) {
				optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
			}

			return sqrDist;
		}

		intersectSphere(sphere, target) {
			_vector$a.subVectors(sphere.center, this.origin);

			const tca = _vector$a.dot(this.direction);

			const d2 = _vector$a.dot(_vector$a) - tca * tca;
			const radius2 = sphere.radius * sphere.radius;
			if (d2 > radius2) return null;
			const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere

			const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere

			const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null

			if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.

			if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0

			return this.at(t0, target);
		}

		intersectsSphere(sphere) {
			return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
		}

		distanceToPlane(plane) {
			const denominator = plane.normal.dot(this.direction);

			if (denominator === 0) {
				// line is coplanar, return origin
				if (plane.distanceToPoint(this.origin) === 0) {
					return 0;
				} // Null is preferable to undefined since undefined means.... it is undefined


				return null;
			}

			const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane

			return t >= 0 ? t : null;
		}

		intersectPlane(plane, target) {
			const t = this.distanceToPlane(plane);

			if (t === null) {
				return null;
			}

			return this.at(t, target);
		}

		intersectsPlane(plane) {
			// check if the ray lies on the plane first
			const distToPoint = plane.distanceToPoint(this.origin);

			if (distToPoint === 0) {
				return true;
			}

			const denominator = plane.normal.dot(this.direction);

			if (denominator * distToPoint < 0) {
				return true;
			} // ray origin is behind the plane (and is pointing behind it)


			return false;
		}

		intersectBox(box, target) {
			let tmin, tmax, tymin, tymax, tzmin, tzmax;
			const invdirx = 1 / this.direction.x,
						invdiry = 1 / this.direction.y,
						invdirz = 1 / this.direction.z;
			const origin = this.origin;

			if (invdirx >= 0) {
				tmin = (box.min.x - origin.x) * invdirx;
				tmax = (box.max.x - origin.x) * invdirx;
			} else {
				tmin = (box.max.x - origin.x) * invdirx;
				tmax = (box.min.x - origin.x) * invdirx;
			}

			if (invdiry >= 0) {
				tymin = (box.min.y - origin.y) * invdiry;
				tymax = (box.max.y - origin.y) * invdiry;
			} else {
				tymin = (box.max.y - origin.y) * invdiry;
				tymax = (box.min.y - origin.y) * invdiry;
			}

			if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if (tymin > tmin || tmin !== tmin) tmin = tymin;
			if (tymax < tmax || tmax !== tmax) tmax = tymax;

			if (invdirz >= 0) {
				tzmin = (box.min.z - origin.z) * invdirz;
				tzmax = (box.max.z - origin.z) * invdirz;
			} else {
				tzmin = (box.max.z - origin.z) * invdirz;
				tzmax = (box.min.z - origin.z) * invdirz;
			}

			if (tmin > tzmax || tzmin > tmax) return null;
			if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
			if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)

			if (tmax < 0) return null;
			return this.at(tmin >= 0 ? tmin : tmax, target);
		}

		intersectsBox(box) {
			return this.intersectBox(box, _vector$a) !== null;
		}

		intersectTriangle(a, b, c, backfaceCulling, target) {
			// Compute the offset origin, edges, and normal.
			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
			_edge1.subVectors(b, a);

			_edge2.subVectors(c, a);

			_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//	 |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//	 |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//	 |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)


			let DdN = this.direction.dot(_normal$1);
			let sign;

			if (DdN > 0) {
				if (backfaceCulling) return null;
				sign = 1;
			} else if (DdN < 0) {
				sign = -1;
				DdN = -DdN;
			} else {
				return null;
			}

			_diff.subVectors(this.origin, a);

			const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection

			if (DdQxE2 < 0) {
				return null;
			}

			const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection

			if (DdE1xQ < 0) {
				return null;
			} // b1+b2 > 1, no intersection


			if (DdQxE2 + DdE1xQ > DdN) {
				return null;
			} // Line intersects triangle, check if ray does.


			const QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection


			if (QdN < 0) {
				return null;
			} // Ray intersects triangle.


			return this.at(QdN / DdN, target);
		}

		applyMatrix4(matrix4) {
			this.origin.applyMatrix4(matrix4);
			this.direction.transformDirection(matrix4);
			return this;
		}

		equals(ray) {
			return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	class Matrix4 {
		constructor() {
			this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

			if (arguments.length > 0) {
				console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
			}
		}

		set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
			const te = this.elements;
			te[0] = n11;
			te[4] = n12;
			te[8] = n13;
			te[12] = n14;
			te[1] = n21;
			te[5] = n22;
			te[9] = n23;
			te[13] = n24;
			te[2] = n31;
			te[6] = n32;
			te[10] = n33;
			te[14] = n34;
			te[3] = n41;
			te[7] = n42;
			te[11] = n43;
			te[15] = n44;
			return this;
		}

		identity() {
			this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
			return this;
		}

		clone() {
			return new Matrix4().fromArray(this.elements);
		}

		copy(m) {
			const te = this.elements;
			const me = m.elements;
			te[0] = me[0];
			te[1] = me[1];
			te[2] = me[2];
			te[3] = me[3];
			te[4] = me[4];
			te[5] = me[5];
			te[6] = me[6];
			te[7] = me[7];
			te[8] = me[8];
			te[9] = me[9];
			te[10] = me[10];
			te[11] = me[11];
			te[12] = me[12];
			te[13] = me[13];
			te[14] = me[14];
			te[15] = me[15];
			return this;
		}

		copyPosition(m) {
			const te = this.elements,
						me = m.elements;
			te[12] = me[12];
			te[13] = me[13];
			te[14] = me[14];
			return this;
		}

		setFromMatrix3(m) {
			const me = m.elements;
			this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
			return this;
		}

		extractBasis(xAxis, yAxis, zAxis) {
			xAxis.setFromMatrixColumn(this, 0);
			yAxis.setFromMatrixColumn(this, 1);
			zAxis.setFromMatrixColumn(this, 2);
			return this;
		}

		makeBasis(xAxis, yAxis, zAxis) {
			this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
			return this;
		}

		extractRotation(m) {
			// this method does not support reflection matrices
			const te = this.elements;
			const me = m.elements;

			const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();

			const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();

			const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();

			te[0] = me[0] * scaleX;
			te[1] = me[1] * scaleX;
			te[2] = me[2] * scaleX;
			te[3] = 0;
			te[4] = me[4] * scaleY;
			te[5] = me[5] * scaleY;
			te[6] = me[6] * scaleY;
			te[7] = 0;
			te[8] = me[8] * scaleZ;
			te[9] = me[9] * scaleZ;
			te[10] = me[10] * scaleZ;
			te[11] = 0;
			te[12] = 0;
			te[13] = 0;
			te[14] = 0;
			te[15] = 1;
			return this;
		}

		makeRotationFromEuler(euler) {
			if (!(euler && euler.isEuler)) {
				console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
			}

			const te = this.elements;
			const x = euler.x,
						y = euler.y,
						z = euler.z;
			const a = Math.cos(x),
						b = Math.sin(x);
			const c = Math.cos(y),
						d = Math.sin(y);
			const e = Math.cos(z),
						f = Math.sin(z);

			if (euler.order === 'XYZ') {
				const ae = a * e,
							af = a * f,
							be = b * e,
							bf = b * f;
				te[0] = c * e;
				te[4] = -c * f;
				te[8] = d;
				te[1] = af + be * d;
				te[5] = ae - bf * d;
				te[9] = -b * c;
				te[2] = bf - ae * d;
				te[6] = be + af * d;
				te[10] = a * c;
			} else if (euler.order === 'YXZ') {
				const ce = c * e,
							cf = c * f,
							de = d * e,
							df = d * f;
				te[0] = ce + df * b;
				te[4] = de * b - cf;
				te[8] = a * d;
				te[1] = a * f;
				te[5] = a * e;
				te[9] = -b;
				te[2] = cf * b - de;
				te[6] = df + ce * b;
				te[10] = a * c;
			} else if (euler.order === 'ZXY') {
				const ce = c * e,
							cf = c * f,
							de = d * e,
							df = d * f;
				te[0] = ce - df * b;
				te[4] = -a * f;
				te[8] = de + cf * b;
				te[1] = cf + de * b;
				te[5] = a * e;
				te[9] = df - ce * b;
				te[2] = -a * d;
				te[6] = b;
				te[10] = a * c;
			} else if (euler.order === 'ZYX') {
				const ae = a * e,
							af = a * f,
							be = b * e,
							bf = b * f;
				te[0] = c * e;
				te[4] = be * d - af;
				te[8] = ae * d + bf;
				te[1] = c * f;
				te[5] = bf * d + ae;
				te[9] = af * d - be;
				te[2] = -d;
				te[6] = b * c;
				te[10] = a * c;
			} else if (euler.order === 'YZX') {
				const ac = a * c,
							ad = a * d,
							bc = b * c,
							bd = b * d;
				te[0] = c * e;
				te[4] = bd - ac * f;
				te[8] = bc * f + ad;
				te[1] = f;
				te[5] = a * e;
				te[9] = -b * e;
				te[2] = -d * e;
				te[6] = ad * f + bc;
				te[10] = ac - bd * f;
			} else if (euler.order === 'XZY') {
				const ac = a * c,
							ad = a * d,
							bc = b * c,
							bd = b * d;
				te[0] = c * e;
				te[4] = -f;
				te[8] = d * e;
				te[1] = ac * f + bd;
				te[5] = a * e;
				te[9] = ad * f - bc;
				te[2] = bc * f - ad;
				te[6] = b * e;
				te[10] = bd * f + ac;
			} // bottom row


			te[3] = 0;
			te[7] = 0;
			te[11] = 0; // last column

			te[12] = 0;
			te[13] = 0;
			te[14] = 0;
			te[15] = 1;
			return this;
		}

		makeRotationFromQuaternion(q) {
			return this.compose(_zero, q, _one);
		}

		lookAt(eye, target, up) {
			const te = this.elements;

			_z.subVectors(eye, target);

			if (_z.lengthSq() === 0) {
				// eye and target are in the same position
				_z.z = 1;
			}

			_z.normalize();

			_x.crossVectors(up, _z);

			if (_x.lengthSq() === 0) {
				// up and z are parallel
				if (Math.abs(up.z) === 1) {
					_z.x += 0.0001;
				} else {
					_z.z += 0.0001;
				}

				_z.normalize();

				_x.crossVectors(up, _z);
			}

			_x.normalize();

			_y.crossVectors(_z, _x);

			te[0] = _x.x;
			te[4] = _y.x;
			te[8] = _z.x;
			te[1] = _x.y;
			te[5] = _y.y;
			te[9] = _z.y;
			te[2] = _x.z;
			te[6] = _y.z;
			te[10] = _z.z;
			return this;
		}

		multiply(m, n) {
			if (n !== undefined) {
				console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
				return this.multiplyMatrices(m, n);
			}

			return this.multiplyMatrices(this, m);
		}

		premultiply(m) {
			return this.multiplyMatrices(m, this);
		}

		multiplyMatrices(a, b) {
			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;
			const a11 = ae[0],
						a12 = ae[4],
						a13 = ae[8],
						a14 = ae[12];
			const a21 = ae[1],
						a22 = ae[5],
						a23 = ae[9],
						a24 = ae[13];
			const a31 = ae[2],
						a32 = ae[6],
						a33 = ae[10],
						a34 = ae[14];
			const a41 = ae[3],
						a42 = ae[7],
						a43 = ae[11],
						a44 = ae[15];
			const b11 = be[0],
						b12 = be[4],
						b13 = be[8],
						b14 = be[12];
			const b21 = be[1],
						b22 = be[5],
						b23 = be[9],
						b24 = be[13];
			const b31 = be[2],
						b32 = be[6],
						b33 = be[10],
						b34 = be[14];
			const b41 = be[3],
						b42 = be[7],
						b43 = be[11],
						b44 = be[15];
			te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
			te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
			te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
			te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
			return this;
		}

		multiplyScalar(s) {
			const te = this.elements;
			te[0] *= s;
			te[4] *= s;
			te[8] *= s;
			te[12] *= s;
			te[1] *= s;
			te[5] *= s;
			te[9] *= s;
			te[13] *= s;
			te[2] *= s;
			te[6] *= s;
			te[10] *= s;
			te[14] *= s;
			te[3] *= s;
			te[7] *= s;
			te[11] *= s;
			te[15] *= s;
			return this;
		}

		determinant() {
			const te = this.elements;
			const n11 = te[0],
						n12 = te[4],
						n13 = te[8],
						n14 = te[12];
			const n21 = te[1],
						n22 = te[5],
						n23 = te[9],
						n24 = te[13];
			const n31 = te[2],
						n32 = te[6],
						n33 = te[10],
						n34 = te[14];
			const n41 = te[3],
						n42 = te[7],
						n43 = te[11],
						n44 = te[15]; //TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
		}

		transpose() {
			const te = this.elements;
			let tmp;
			tmp = te[1];
			te[1] = te[4];
			te[4] = tmp;
			tmp = te[2];
			te[2] = te[8];
			te[8] = tmp;
			tmp = te[6];
			te[6] = te[9];
			te[9] = tmp;
			tmp = te[3];
			te[3] = te[12];
			te[12] = tmp;
			tmp = te[7];
			te[7] = te[13];
			te[13] = tmp;
			tmp = te[11];
			te[11] = te[14];
			te[14] = tmp;
			return this;
		}

		setPosition(x, y, z) {
			const te = this.elements;

			if (x.isVector3) {
				te[12] = x.x;
				te[13] = x.y;
				te[14] = x.z;
			} else {
				te[12] = x;
				te[13] = y;
				te[14] = z;
			}

			return this;
		}

		invert() {
			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			const te = this.elements,
						n11 = te[0],
						n21 = te[1],
						n31 = te[2],
						n41 = te[3],
						n12 = te[4],
						n22 = te[5],
						n32 = te[6],
						n42 = te[7],
						n13 = te[8],
						n23 = te[9],
						n33 = te[10],
						n43 = te[11],
						n14 = te[12],
						n24 = te[13],
						n34 = te[14],
						n44 = te[15],
						t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
						t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
						t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
						t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
			if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			const detInv = 1 / det;
			te[0] = t11 * detInv;
			te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
			te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
			te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
			te[4] = t12 * detInv;
			te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
			te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
			te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
			te[8] = t13 * detInv;
			te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
			te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
			te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
			te[12] = t14 * detInv;
			te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
			te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
			te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
			return this;
		}

		scale(v) {
			const te = this.elements;
			const x = v.x,
						y = v.y,
						z = v.z;
			te[0] *= x;
			te[4] *= y;
			te[8] *= z;
			te[1] *= x;
			te[5] *= y;
			te[9] *= z;
			te[2] *= x;
			te[6] *= y;
			te[10] *= z;
			te[3] *= x;
			te[7] *= y;
			te[11] *= z;
			return this;
		}

		getMaxScaleOnAxis() {
			const te = this.elements;
			const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
			const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
			const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
			return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
		}

		makeTranslation(x, y, z) {
			this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
			return this;
		}

		makeRotationX(theta) {
			const c = Math.cos(theta),
						s = Math.sin(theta);
			this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
			return this;
		}

		makeRotationY(theta) {
			const c = Math.cos(theta),
						s = Math.sin(theta);
			this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
			return this;
		}

		makeRotationZ(theta) {
			const c = Math.cos(theta),
						s = Math.sin(theta);
			this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
			return this;
		}

		makeRotationAxis(axis, angle) {
			// Based on http://www.gamedev.net/reference/articles/article1199.asp
			const c = Math.cos(angle);
			const s = Math.sin(angle);
			const t = 1 - c;
			const x = axis.x,
						y = axis.y,
						z = axis.z;
			const tx = t * x,
						ty = t * y;
			this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
			return this;
		}

		makeScale(x, y, z) {
			this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
			return this;
		}

		makeShear(xy, xz, yx, yz, zx, zy) {
			this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
			return this;
		}

		compose(position, quaternion, scale) {
			const te = this.elements;
			const x = quaternion._x,
						y = quaternion._y,
						z = quaternion._z,
						w = quaternion._w;
			const x2 = x + x,
						y2 = y + y,
						z2 = z + z;
			const xx = x * x2,
						xy = x * y2,
						xz = x * z2;
			const yy = y * y2,
						yz = y * z2,
						zz = z * z2;
			const wx = w * x2,
						wy = w * y2,
						wz = w * z2;
			const sx = scale.x,
						sy = scale.y,
						sz = scale.z;
			te[0] = (1 - (yy + zz)) * sx;
			te[1] = (xy + wz) * sx;
			te[2] = (xz - wy) * sx;
			te[3] = 0;
			te[4] = (xy - wz) * sy;
			te[5] = (1 - (xx + zz)) * sy;
			te[6] = (yz + wx) * sy;
			te[7] = 0;
			te[8] = (xz + wy) * sz;
			te[9] = (yz - wx) * sz;
			te[10] = (1 - (xx + yy)) * sz;
			te[11] = 0;
			te[12] = position.x;
			te[13] = position.y;
			te[14] = position.z;
			te[15] = 1;
			return this;
		}

		decompose(position, quaternion, scale) {
			const te = this.elements;

			let sx = _v1$5.set(te[0], te[1], te[2]).length();

			const sy = _v1$5.set(te[4], te[5], te[6]).length();

			const sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale


			const det = this.determinant();
			if (det < 0) sx = -sx;
			position.x = te[12];
			position.y = te[13];
			position.z = te[14]; // scale the rotation part

			_m1$2.copy(this);

			const invSX = 1 / sx;
			const invSY = 1 / sy;
			const invSZ = 1 / sz;
			_m1$2.elements[0] *= invSX;
			_m1$2.elements[1] *= invSX;
			_m1$2.elements[2] *= invSX;
			_m1$2.elements[4] *= invSY;
			_m1$2.elements[5] *= invSY;
			_m1$2.elements[6] *= invSY;
			_m1$2.elements[8] *= invSZ;
			_m1$2.elements[9] *= invSZ;
			_m1$2.elements[10] *= invSZ;
			quaternion.setFromRotationMatrix(_m1$2);
			scale.x = sx;
			scale.y = sy;
			scale.z = sz;
			return this;
		}

		makePerspective(left, right, top, bottom, near, far) {
			if (far === undefined) {
				console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
			}

			const te = this.elements;
			const x = 2 * near / (right - left);
			const y = 2 * near / (top - bottom);
			const a = (right + left) / (right - left);
			const b = (top + bottom) / (top - bottom);
			const c = -(far + near) / (far - near);
			const d = -2 * far * near / (far - near);
			te[0] = x;
			te[4] = 0;
			te[8] = a;
			te[12] = 0;
			te[1] = 0;
			te[5] = y;
			te[9] = b;
			te[13] = 0;
			te[2] = 0;
			te[6] = 0;
			te[10] = c;
			te[14] = d;
			te[3] = 0;
			te[7] = 0;
			te[11] = -1;
			te[15] = 0;
			return this;
		}

		makeOrthographic(left, right, top, bottom, near, far) {
			const te = this.elements;
			const w = 1.0 / (right - left);
			const h = 1.0 / (top - bottom);
			const p = 1.0 / (far - near);
			const x = (right + left) * w;
			const y = (top + bottom) * h;
			const z = (far + near) * p;
			te[0] = 2 * w;
			te[4] = 0;
			te[8] = 0;
			te[12] = -x;
			te[1] = 0;
			te[5] = 2 * h;
			te[9] = 0;
			te[13] = -y;
			te[2] = 0;
			te[6] = 0;
			te[10] = -2 * p;
			te[14] = -z;
			te[3] = 0;
			te[7] = 0;
			te[11] = 0;
			te[15] = 1;
			return this;
		}

		equals(matrix) {
			const te = this.elements;
			const me = matrix.elements;

			for (let i = 0; i < 16; i++) {
				if (te[i] !== me[i]) return false;
			}

			return true;
		}

		fromArray(array, offset = 0) {
			for (let i = 0; i < 16; i++) {
				this.elements[i] = array[i + offset];
			}

			return this;
		}

		toArray(array = [], offset = 0) {
			const te = this.elements;
			array[offset] = te[0];
			array[offset + 1] = te[1];
			array[offset + 2] = te[2];
			array[offset + 3] = te[3];
			array[offset + 4] = te[4];
			array[offset + 5] = te[5];
			array[offset + 6] = te[6];
			array[offset + 7] = te[7];
			array[offset + 8] = te[8];
			array[offset + 9] = te[9];
			array[offset + 10] = te[10];
			array[offset + 11] = te[11];
			array[offset + 12] = te[12];
			array[offset + 13] = te[13];
			array[offset + 14] = te[14];
			array[offset + 15] = te[15];
			return array;
		}

	}

	Matrix4.prototype.isMatrix4 = true;

	const _v1$5 = /*@__PURE__*/new Vector3();

	const _m1$2 = /*@__PURE__*/new Matrix4();

	const _zero = /*@__PURE__*/new Vector3(0, 0, 0);

	const _one = /*@__PURE__*/new Vector3(1, 1, 1);

	const _x = /*@__PURE__*/new Vector3();

	const _y = /*@__PURE__*/new Vector3();

	const _z = /*@__PURE__*/new Vector3();

	const _matrix$1 = /*@__PURE__*/new Matrix4();

	const _quaternion$3 = /*@__PURE__*/new Quaternion();

	class Euler {
		constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;
		}

		get x() {
			return this._x;
		}

		set x(value) {
			this._x = value;

			this._onChangeCallback();
		}

		get y() {
			return this._y;
		}

		set y(value) {
			this._y = value;

			this._onChangeCallback();
		}

		get z() {
			return this._z;
		}

		set z(value) {
			this._z = value;

			this._onChangeCallback();
		}

		get order() {
			return this._order;
		}

		set order(value) {
			this._order = value;

			this._onChangeCallback();
		}

		set(x, y, z, order = this._order) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;

			this._onChangeCallback();

			return this;
		}

		clone() {
			return new this.constructor(this._x, this._y, this._z, this._order);
		}

		copy(euler) {
			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;
		}

		setFromRotationMatrix(m, order = this._order, update = true) {
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			const te = m.elements;
			const m11 = te[0],
						m12 = te[4],
						m13 = te[8];
			const m21 = te[1],
						m22 = te[5],
						m23 = te[9];
			const m31 = te[2],
						m32 = te[6],
						m33 = te[10];

			switch (order) {
				case 'XYZ':
					this._y = Math.asin(clamp(m13, -1, 1));

					if (Math.abs(m13) < 0.9999999) {
						this._x = Math.atan2(-m23, m33);
						this._z = Math.atan2(-m12, m11);
					} else {
						this._x = Math.atan2(m32, m22);
						this._z = 0;
					}

					break;

				case 'YXZ':
					this._x = Math.asin(-clamp(m23, -1, 1));

					if (Math.abs(m23) < 0.9999999) {
						this._y = Math.atan2(m13, m33);
						this._z = Math.atan2(m21, m22);
					} else {
						this._y = Math.atan2(-m31, m11);
						this._z = 0;
					}

					break;

				case 'ZXY':
					this._x = Math.asin(clamp(m32, -1, 1));

					if (Math.abs(m32) < 0.9999999) {
						this._y = Math.atan2(-m31, m33);
						this._z = Math.atan2(-m12, m22);
					} else {
						this._y = 0;
						this._z = Math.atan2(m21, m11);
					}

					break;

				case 'ZYX':
					this._y = Math.asin(-clamp(m31, -1, 1));

					if (Math.abs(m31) < 0.9999999) {
						this._x = Math.atan2(m32, m33);
						this._z = Math.atan2(m21, m11);
					} else {
						this._x = 0;
						this._z = Math.atan2(-m12, m22);
					}

					break;

				case 'YZX':
					this._z = Math.asin(clamp(m21, -1, 1));

					if (Math.abs(m21) < 0.9999999) {
						this._x = Math.atan2(-m23, m22);
						this._y = Math.atan2(-m31, m11);
					} else {
						this._x = 0;
						this._y = Math.atan2(m13, m33);
					}

					break;

				case 'XZY':
					this._z = Math.asin(-clamp(m12, -1, 1));

					if (Math.abs(m12) < 0.9999999) {
						this._x = Math.atan2(m32, m22);
						this._y = Math.atan2(m13, m11);
					} else {
						this._x = Math.atan2(-m23, m33);
						this._y = 0;
					}

					break;

				default:
					console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
			}

			this._order = order;
			if (update === true) this._onChangeCallback();
			return this;
		}

		setFromQuaternion(q, order, update) {
			_matrix$1.makeRotationFromQuaternion(q);

			return this.setFromRotationMatrix(_matrix$1, order, update);
		}

		setFromVector3(v, order = this._order) {
			return this.set(v.x, v.y, v.z, order);
		}

		reorder(newOrder) {
			// WARNING: this discards revolution information -bhouston
			_quaternion$3.setFromEuler(this);

			return this.setFromQuaternion(_quaternion$3, newOrder);
		}

		equals(euler) {
			return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
		}

		fromArray(array) {
			this._x = array[0];
			this._y = array[1];
			this._z = array[2];
			if (array[3] !== undefined) this._order = array[3];

			this._onChangeCallback();

			return this;
		}

		toArray(array = [], offset = 0) {
			array[offset] = this._x;
			array[offset + 1] = this._y;
			array[offset + 2] = this._z;
			array[offset + 3] = this._order;
			return array;
		}

		_onChange(callback) {
			this._onChangeCallback = callback;
			return this;
		}

		_onChangeCallback() {}

	}

	Euler.prototype.isEuler = true;
	Euler.DefaultOrder = 'XYZ';
	Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];

	class Layers {
		constructor() {
			this.mask = 1 | 0;
		}

		set(channel) {
			this.mask = (1 << channel | 0) >>> 0;
		}

		enable(channel) {
			this.mask |= 1 << channel | 0;
		}

		enableAll() {
			this.mask = 0xffffffff | 0;
		}

		toggle(channel) {
			this.mask ^= 1 << channel | 0;
		}

		disable(channel) {
			this.mask &= ~(1 << channel | 0);
		}

		disableAll() {
			this.mask = 0;
		}

		test(layers) {
			return (this.mask & layers.mask) !== 0;
		}

		isEnabled(channel) {
			return (this.mask & (1 << channel | 0)) !== 0;
		}

	}

	let _object3DId = 0;

	const _v1$4 = /*@__PURE__*/new Vector3();

	const _q1 = /*@__PURE__*/new Quaternion();

	const _m1$1 = /*@__PURE__*/new Matrix4();

	const _target = /*@__PURE__*/new Vector3();

	const _position$3 = /*@__PURE__*/new Vector3();

	const _scale$2 = /*@__PURE__*/new Vector3();

	const _quaternion$2 = /*@__PURE__*/new Quaternion();

	const _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);

	const _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);

	const _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);

	const _addedEvent = {
		type: 'added'
	};
	const _removedEvent = {
		type: 'removed'
	};

	class Object3D extends EventDispatcher {
		constructor() {
			super();
			Object.defineProperty(this, 'id', {
				value: _object3DId++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.type = 'Object3D';
			this.parent = null;
			this.children = [];
			this.up = Object3D.DefaultUp.clone();
			const position = new Vector3();
			const rotation = new Euler();
			const quaternion = new Quaternion();
			const scale = new Vector3(1, 1, 1);

			function onRotationChange() {
				quaternion.setFromEuler(rotation, false);
			}

			function onQuaternionChange() {
				rotation.setFromQuaternion(quaternion, undefined, false);
			}

			rotation._onChange(onRotationChange);

			quaternion._onChange(onQuaternionChange);

			Object.defineProperties(this, {
				position: {
					configurable: true,
					enumerable: true,
					value: position
				},
				rotation: {
					configurable: true,
					enumerable: true,
					value: rotation
				},
				quaternion: {
					configurable: true,
					enumerable: true,
					value: quaternion
				},
				scale: {
					configurable: true,
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			});
			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();
			this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;
			this.layers = new Layers();
			this.visible = true;
			this.castShadow = false;
			this.receiveShadow = false;
			this.frustumCulled = true;
			this.renderOrder = 0;
			this.animations = [];
			this.userData = {};
		}

		onBeforeRender() {}

		onAfterRender() {}

		applyMatrix4(matrix) {
			if (this.matrixAutoUpdate) this.updateMatrix();
			this.matrix.premultiply(matrix);
			this.matrix.decompose(this.position, this.quaternion, this.scale);
		}

		applyQuaternion(q) {
			this.quaternion.premultiply(q);
			return this;
		}

		setRotationFromAxisAngle(axis, angle) {
			// assumes axis is normalized
			this.quaternion.setFromAxisAngle(axis, angle);
		}

		setRotationFromEuler(euler) {
			this.quaternion.setFromEuler(euler, true);
		}

		setRotationFromMatrix(m) {
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
			this.quaternion.setFromRotationMatrix(m);
		}

		setRotationFromQuaternion(q) {
			// assumes q is normalized
			this.quaternion.copy(q);
		}

		rotateOnAxis(axis, angle) {
			// rotate object on axis in object space
			// axis is assumed to be normalized
			_q1.setFromAxisAngle(axis, angle);

			this.quaternion.multiply(_q1);
			return this;
		}

		rotateOnWorldAxis(axis, angle) {
			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent
			_q1.setFromAxisAngle(axis, angle);

			this.quaternion.premultiply(_q1);
			return this;
		}

		rotateX(angle) {
			return this.rotateOnAxis(_xAxis, angle);
		}

		rotateY(angle) {
			return this.rotateOnAxis(_yAxis, angle);
		}

		rotateZ(angle) {
			return this.rotateOnAxis(_zAxis, angle);
		}

		translateOnAxis(axis, distance) {
			// translate object by distance along axis in object space
			// axis is assumed to be normalized
			_v1$4.copy(axis).applyQuaternion(this.quaternion);

			this.position.add(_v1$4.multiplyScalar(distance));
			return this;
		}

		translateX(distance) {
			return this.translateOnAxis(_xAxis, distance);
		}

		translateY(distance) {
			return this.translateOnAxis(_yAxis, distance);
		}

		translateZ(distance) {
			return this.translateOnAxis(_zAxis, distance);
		}

		localToWorld(vector) {
			return vector.applyMatrix4(this.matrixWorld);
		}

		worldToLocal(vector) {
			return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
		}

		lookAt(x, y, z) {
			// This method does not support objects having non-uniformly-scaled parent(s)
			if (x.isVector3) {
				_target.copy(x);
			} else {
				_target.set(x, y, z);
			}

			const parent = this.parent;
			this.updateWorldMatrix(true, false);

			_position$3.setFromMatrixPosition(this.matrixWorld);

			if (this.isCamera || this.isLight) {
				_m1$1.lookAt(_position$3, _target, this.up);
			} else {
				_m1$1.lookAt(_target, _position$3, this.up);
			}

			this.quaternion.setFromRotationMatrix(_m1$1);

			if (parent) {
				_m1$1.extractRotation(parent.matrixWorld);

				_q1.setFromRotationMatrix(_m1$1);

				this.quaternion.premultiply(_q1.invert());
			}
		}

		add(object) {
			if (arguments.length > 1) {
				for (let i = 0; i < arguments.length; i++) {
					this.add(arguments[i]);
				}

				return this;
			}

			if (object === this) {
				console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
				return this;
			}

			if (object && object.isObject3D) {
				if (object.parent !== null) {
					object.parent.remove(object);
				}

				object.parent = this;
				this.children.push(object);
				object.dispatchEvent(_addedEvent);
			} else {
				console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);
			}

			return this;
		}

		remove(object) {
			if (arguments.length > 1) {
				for (let i = 0; i < arguments.length; i++) {
					this.remove(arguments[i]);
				}

				return this;
			}

			const index = this.children.indexOf(object);

			if (index !== -1) {
				object.parent = null;
				this.children.splice(index, 1);
				object.dispatchEvent(_removedEvent);
			}

			return this;
		}

		removeFromParent() {
			const parent = this.parent;

			if (parent !== null) {
				parent.remove(this);
			}

			return this;
		}

		clear() {
			for (let i = 0; i < this.children.length; i++) {
				const object = this.children[i];
				object.parent = null;
				object.dispatchEvent(_removedEvent);
			}

			this.children.length = 0;
			return this;
		}

		attach(object) {
			// adds object as a child of this, while maintaining the object's world transform
			// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
			this.updateWorldMatrix(true, false);

			_m1$1.copy(this.matrixWorld).invert();

			if (object.parent !== null) {
				object.parent.updateWorldMatrix(true, false);

				_m1$1.multiply(object.parent.matrixWorld);
			}

			object.applyMatrix4(_m1$1);
			this.add(object);
			object.updateWorldMatrix(false, true);
			return this;
		}

		getObjectById(id) {
			return this.getObjectByProperty('id', id);
		}

		getObjectByName(name) {
			return this.getObjectByProperty('name', name);
		}

		getObjectByProperty(name, value) {
			if (this[name] === value) return this;

			for (let i = 0, l = this.children.length; i < l; i++) {
				const child = this.children[i];
				const object = child.getObjectByProperty(name, value);

				if (object !== undefined) {
					return object;
				}
			}

			return undefined;
		}

		getWorldPosition(target) {
			this.updateWorldMatrix(true, false);
			return target.setFromMatrixPosition(this.matrixWorld);
		}

		getWorldQuaternion(target) {
			this.updateWorldMatrix(true, false);
			this.matrixWorld.decompose(_position$3, target, _scale$2);
			return target;
		}

		getWorldScale(target) {
			this.updateWorldMatrix(true, false);
			this.matrixWorld.decompose(_position$3, _quaternion$2, target);
			return target;
		}

		getWorldDirection(target) {
			this.updateWorldMatrix(true, false);
			const e = this.matrixWorld.elements;
			return target.set(e[8], e[9], e[10]).normalize();
		}

		raycast() {}

		traverse(callback) {
			callback(this);
			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {
				children[i].traverse(callback);
			}
		}

		traverseVisible(callback) {
			if (this.visible === false) return;
			callback(this);
			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {
				children[i].traverseVisible(callback);
			}
		}

		traverseAncestors(callback) {
			const parent = this.parent;

			if (parent !== null) {
				callback(parent);
				parent.traverseAncestors(callback);
			}
		}

		updateMatrix() {
			this.matrix.compose(this.position, this.quaternion, this.scale);
			this.matrixWorldNeedsUpdate = true;
		}

		updateMatrixWorld(force) {
			if (this.matrixAutoUpdate) this.updateMatrix();

			if (this.matrixWorldNeedsUpdate || force) {
				if (this.parent === null) {
					this.matrixWorld.copy(this.matrix);
				} else {
					this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
				}

				this.matrixWorldNeedsUpdate = false;
				force = true;
			} // update children


			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {
				children[i].updateMatrixWorld(force);
			}
		}

		updateWorldMatrix(updateParents, updateChildren) {
			const parent = this.parent;

			if (updateParents === true && parent !== null) {
				parent.updateWorldMatrix(true, false);
			}

			if (this.matrixAutoUpdate) this.updateMatrix();

			if (this.parent === null) {
				this.matrixWorld.copy(this.matrix);
			} else {
				this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
			} // update children


			if (updateChildren === true) {
				const children = this.children;

				for (let i = 0, l = children.length; i < l; i++) {
					children[i].updateWorldMatrix(false, true);
				}
			}
		}

		toJSON(meta) {
			// meta is a string when called from JSON.stringify
			const isRootObject = meta === undefined || typeof meta === 'string';
			const output = {}; // meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.

			if (isRootObject) {
				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {},
					skeletons: {},
					animations: {},
					nodes: {}
				};
				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};
			} // standard Object3D serialization


			const object = {};
			object.uuid = this.uuid;
			object.type = this.type;
			if (this.name !== '') object.name = this.name;
			if (this.castShadow === true) object.castShadow = true;
			if (this.receiveShadow === true) object.receiveShadow = true;
			if (this.visible === false) object.visible = false;
			if (this.frustumCulled === false) object.frustumCulled = false;
			if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
			if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();
			if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties

			if (this.isInstancedMesh) {
				object.type = 'InstancedMesh';
				object.count = this.count;
				object.instanceMatrix = this.instanceMatrix.toJSON();
				if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
			} //


			function serialize(library, element) {
				if (library[element.uuid] === undefined) {
					library[element.uuid] = element.toJSON(meta);
				}

				return element.uuid;
			}

			if (this.isScene) {
				if (this.background) {
					if (this.background.isColor) {
						object.background = this.background.toJSON();
					} else if (this.background.isTexture) {
						object.background = this.background.toJSON(meta).uuid;
					}
				}

				if (this.environment && this.environment.isTexture) {
					object.environment = this.environment.toJSON(meta).uuid;
				}
			} else if (this.isMesh || this.isLine || this.isPoints) {
				object.geometry = serialize(meta.geometries, this.geometry);
				const parameters = this.geometry.parameters;

				if (parameters !== undefined && parameters.shapes !== undefined) {
					const shapes = parameters.shapes;

					if (Array.isArray(shapes)) {
						for (let i = 0, l = shapes.length; i < l; i++) {
							const shape = shapes[i];
							serialize(meta.shapes, shape);
						}
					} else {
						serialize(meta.shapes, shapes);
					}
				}
			}

			if (this.isSkinnedMesh) {
				object.bindMode = this.bindMode;
				object.bindMatrix = this.bindMatrix.toArray();

				if (this.skeleton !== undefined) {
					serialize(meta.skeletons, this.skeleton);
					object.skeleton = this.skeleton.uuid;
				}
			}

			if (this.material !== undefined) {
				if (Array.isArray(this.material)) {
					const uuids = [];

					for (let i = 0, l = this.material.length; i < l; i++) {
						uuids.push(serialize(meta.materials, this.material[i]));
					}

					object.material = uuids;
				} else {
					object.material = serialize(meta.materials, this.material);
				}
			} //


			if (this.children.length > 0) {
				object.children = [];

				for (let i = 0; i < this.children.length; i++) {
					object.children.push(this.children[i].toJSON(meta).object);
				}
			} //


			if (this.animations.length > 0) {
				object.animations = [];

				for (let i = 0; i < this.animations.length; i++) {
					const animation = this.animations[i];
					object.animations.push(serialize(meta.animations, animation));
				}
			}

			if (isRootObject) {
				const geometries = extractFromCache(meta.geometries);
				const materials = extractFromCache(meta.materials);
				const textures = extractFromCache(meta.textures);
				const images = extractFromCache(meta.images);
				const shapes = extractFromCache(meta.shapes);
				const skeletons = extractFromCache(meta.skeletons);
				const animations = extractFromCache(meta.animations);
				const nodes = extractFromCache(meta.nodes);
				if (geometries.length > 0) output.geometries = geometries;
				if (materials.length > 0) output.materials = materials;
				if (textures.length > 0) output.textures = textures;
				if (images.length > 0) output.images = images;
				if (shapes.length > 0) output.shapes = shapes;
				if (skeletons.length > 0) output.skeletons = skeletons;
				if (animations.length > 0) output.animations = animations;
				if (nodes.length > 0) output.nodes = nodes;
			}

			output.object = object;
			return output; // extract data from the cache hash
			// remove metadata on each item
			// and return as array

			function extractFromCache(cache) {
				const values = [];

				for (const key in cache) {
					const data = cache[key];
					delete data.metadata;
					values.push(data);
				}

				return values;
			}
		}

		clone(recursive) {
			return new this.constructor().copy(this, recursive);
		}

		copy(source, recursive = true) {
			this.name = source.name;
			this.up.copy(source.up);
			this.position.copy(source.position);
			this.rotation.order = source.rotation.order;
			this.quaternion.copy(source.quaternion);
			this.scale.copy(source.scale);
			this.matrix.copy(source.matrix);
			this.matrixWorld.copy(source.matrixWorld);
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
			this.layers.mask = source.layers.mask;
			this.visible = source.visible;
			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;
			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;
			this.userData = JSON.parse(JSON.stringify(source.userData));

			if (recursive === true) {
				for (let i = 0; i < source.children.length; i++) {
					const child = source.children[i];
					this.add(child.clone());
				}
			}

			return this;
		}

	}

	Object3D.DefaultUp = new Vector3(0, 1, 0);
	Object3D.DefaultMatrixAutoUpdate = true;
	Object3D.prototype.isObject3D = true;

	const _v0$1 = /*@__PURE__*/new Vector3();

	const _v1$3 = /*@__PURE__*/new Vector3();

	const _v2$2 = /*@__PURE__*/new Vector3();

	const _v3$1 = /*@__PURE__*/new Vector3();

	const _vab = /*@__PURE__*/new Vector3();

	const _vac = /*@__PURE__*/new Vector3();

	const _vbc = /*@__PURE__*/new Vector3();

	const _vap = /*@__PURE__*/new Vector3();

	const _vbp = /*@__PURE__*/new Vector3();

	const _vcp = /*@__PURE__*/new Vector3();

	class Triangle {
		constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
			this.a = a;
			this.b = b;
			this.c = c;
		}

		static getNormal(a, b, c, target) {
			target.subVectors(c, b);

			_v0$1.subVectors(a, b);

			target.cross(_v0$1);
			const targetLengthSq = target.lengthSq();

			if (targetLengthSq > 0) {
				return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
			}

			return target.set(0, 0, 0);
		} // static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html


		static getBarycoord(point, a, b, c, target) {
			_v0$1.subVectors(c, a);

			_v1$3.subVectors(b, a);

			_v2$2.subVectors(point, a);

			const dot00 = _v0$1.dot(_v0$1);

			const dot01 = _v0$1.dot(_v1$3);

			const dot02 = _v0$1.dot(_v2$2);

			const dot11 = _v1$3.dot(_v1$3);

			const dot12 = _v1$3.dot(_v2$2);

			const denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle

			if (denom === 0) {
				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return target.set(-2, -1, -1);
			}

			const invDenom = 1 / denom;
			const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
			const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1

			return target.set(1 - u - v, v, u);
		}

		static containsPoint(point, a, b, c) {
			this.getBarycoord(point, a, b, c, _v3$1);
			return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
		}

		static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
			this.getBarycoord(point, p1, p2, p3, _v3$1);
			target.set(0, 0);
			target.addScaledVector(uv1, _v3$1.x);
			target.addScaledVector(uv2, _v3$1.y);
			target.addScaledVector(uv3, _v3$1.z);
			return target;
		}

		static isFrontFacing(a, b, c, direction) {
			_v0$1.subVectors(c, b);

			_v1$3.subVectors(a, b); // strictly front facing


			return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
		}

		set(a, b, c) {
			this.a.copy(a);
			this.b.copy(b);
			this.c.copy(c);
			return this;
		}

		setFromPointsAndIndices(points, i0, i1, i2) {
			this.a.copy(points[i0]);
			this.b.copy(points[i1]);
			this.c.copy(points[i2]);
			return this;
		}

		setFromAttributeAndIndices(attribute, i0, i1, i2) {
			this.a.fromBufferAttribute(attribute, i0);
			this.b.fromBufferAttribute(attribute, i1);
			this.c.fromBufferAttribute(attribute, i2);
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(triangle) {
			this.a.copy(triangle.a);
			this.b.copy(triangle.b);
			this.c.copy(triangle.c);
			return this;
		}

		getArea() {
			_v0$1.subVectors(this.c, this.b);

			_v1$3.subVectors(this.a, this.b);

			return _v0$1.cross(_v1$3).length() * 0.5;
		}

		getMidpoint(target) {
			return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
		}

		getNormal(target) {
			return Triangle.getNormal(this.a, this.b, this.c, target);
		}

		getPlane(target) {
			return target.setFromCoplanarPoints(this.a, this.b, this.c);
		}

		getBarycoord(point, target) {
			return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
		}

		getUV(point, uv1, uv2, uv3, target) {
			return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
		}

		containsPoint(point) {
			return Triangle.containsPoint(point, this.a, this.b, this.c);
		}

		isFrontFacing(direction) {
			return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
		}

		intersectsBox(box) {
			return box.intersectsTriangle(this);
		}

		closestPointToPoint(p, target) {
			const a = this.a,
						b = this.b,
						c = this.c;
			let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			_vab.subVectors(b, a);

			_vac.subVectors(c, a);

			_vap.subVectors(p, a);

			const d1 = _vab.dot(_vap);

			const d2 = _vac.dot(_vap);

			if (d1 <= 0 && d2 <= 0) {
				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy(a);
			}

			_vbp.subVectors(p, b);

			const d3 = _vab.dot(_vbp);

			const d4 = _vac.dot(_vbp);

			if (d3 >= 0 && d4 <= d3) {
				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy(b);
			}

			const vc = d1 * d4 - d3 * d2;

			if (vc <= 0 && d1 >= 0 && d3 <= 0) {
				v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)

				return target.copy(a).addScaledVector(_vab, v);
			}

			_vcp.subVectors(p, c);

			const d5 = _vab.dot(_vcp);

			const d6 = _vac.dot(_vcp);

			if (d6 >= 0 && d5 <= d6) {
				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy(c);
			}

			const vb = d5 * d2 - d1 * d6;

			if (vb <= 0 && d2 >= 0 && d6 <= 0) {
				w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)

				return target.copy(a).addScaledVector(_vac, w);
			}

			const va = d3 * d6 - d5 * d4;

			if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
				_vbc.subVectors(c, b);

				w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)

				return target.copy(b).addScaledVector(_vbc, w); // edge region of BC
			} // face region


			const denom = 1 / (va + vb + vc); // u = va * denom

			v = vb * denom;
			w = vc * denom;
			return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
		}

		equals(triangle) {
			return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
		}

	}

	let materialId = 0;

	class Material extends EventDispatcher {
		constructor() {
			super();
			Object.defineProperty(this, 'id', {
				value: materialId++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.type = 'Material';
			this.fog = true;
			this.blending = NormalBlending;
			this.side = FrontSide;
			this.vertexColors = false;
			this.opacity = 1;
			this.transparent = false;
			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;
			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;
			this.stencilWriteMask = 0xff;
			this.stencilFunc = AlwaysStencilFunc;
			this.stencilRef = 0;
			this.stencilFuncMask = 0xff;
			this.stencilFail = KeepStencilOp;
			this.stencilZFail = KeepStencilOp;
			this.stencilZPass = KeepStencilOp;
			this.stencilWrite = false;
			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;
			this.shadowSide = null;
			this.colorWrite = true;
			this.precision = null; // override the renderer's default precision for this material

			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;
			this.dithering = false;
			this.alphaToCoverage = false;
			this.premultipliedAlpha = false;
			this.visible = true;
			this.toneMapped = true;
			this.userData = {};
			this.version = 0;
			this._alphaTest = 0;
		}

		get alphaTest() {
			return this._alphaTest;
		}

		set alphaTest(value) {
			if (this._alphaTest > 0 !== value > 0) {
				this.version++;
			}

			this._alphaTest = value;
		}

		onBuild() {}

		onBeforeRender() {}

		onBeforeCompile() {}

		customProgramCacheKey() {
			return this.onBeforeCompile.toString();
		}

		setValues(values) {
			if (values === undefined) return;

			for (const key in values) {
				const newValue = values[key];

				if (newValue === undefined) {
					console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
					continue;
				} // for backward compatability if shading is set in the constructor


				if (key === 'shading') {
					console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
					this.flatShading = newValue === FlatShading ? true : false;
					continue;
				}

				const currentValue = this[key];

				if (currentValue === undefined) {
					console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
					continue;
				}

				if (currentValue && currentValue.isColor) {
					currentValue.set(newValue);
				} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {
					currentValue.copy(newValue);
				} else {
					this[key] = newValue;
				}
			}
		}

		toJSON(meta) {
			const isRootObject = meta === undefined || typeof meta === 'string';

			if (isRootObject) {
				meta = {
					textures: {},
					images: {}
				};
			}

			const data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			}; // standard Material serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if (this.name !== '') data.name = this.name;
			if (this.color && this.color.isColor) data.color = this.color.getHex();
			if (this.roughness !== undefined) data.roughness = this.roughness;
			if (this.metalness !== undefined) data.metalness = this.metalness;
			if (this.sheen !== undefined) data.sheen = this.sheen;
			if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
			if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;
			if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
			if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
			if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
			if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;
			if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
			if (this.shininess !== undefined) data.shininess = this.shininess;
			if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
			if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;

			if (this.clearcoatMap && this.clearcoatMap.isTexture) {
				data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
			}

			if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
				data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
			}

			if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
			}

			if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
			if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
			if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;

			if (this.lightMap && this.lightMap.isTexture) {
				data.lightMap = this.lightMap.toJSON(meta).uuid;
				data.lightMapIntensity = this.lightMapIntensity;
			}

			if (this.aoMap && this.aoMap.isTexture) {
				data.aoMap = this.aoMap.toJSON(meta).uuid;
				data.aoMapIntensity = this.aoMapIntensity;
			}

			if (this.bumpMap && this.bumpMap.isTexture) {
				data.bumpMap = this.bumpMap.toJSON(meta).uuid;
				data.bumpScale = this.bumpScale;
			}

			if (this.normalMap && this.normalMap.isTexture) {
				data.normalMap = this.normalMap.toJSON(meta).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();
			}

			if (this.displacementMap && this.displacementMap.isTexture) {
				data.displacementMap = this.displacementMap.toJSON(meta).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;
			}

			if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
			if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
			if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
			if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
			if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
			if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;

			if (this.envMap && this.envMap.isTexture) {
				data.envMap = this.envMap.toJSON(meta).uuid;
				if (this.combine !== undefined) data.combine = this.combine;
			}

			if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
			if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
			if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;

			if (this.gradientMap && this.gradientMap.isTexture) {
				data.gradientMap = this.gradientMap.toJSON(meta).uuid;
			}

			if (this.transmission !== undefined) data.transmission = this.transmission;
			if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
			if (this.thickness !== undefined) data.thickness = this.thickness;
			if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
			if (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;
			if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();
			if (this.size !== undefined) data.size = this.size;
			if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
			if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
			if (this.blending !== NormalBlending) data.blending = this.blending;
			if (this.side !== FrontSide) data.side = this.side;
			if (this.vertexColors) data.vertexColors = true;
			if (this.opacity < 1) data.opacity = this.opacity;
			if (this.transparent === true) data.transparent = this.transparent;
			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;
			data.colorWrite = this.colorWrite;
			data.stencilWrite = this.stencilWrite;
			data.stencilWriteMask = this.stencilWriteMask;
			data.stencilFunc = this.stencilFunc;
			data.stencilRef = this.stencilRef;
			data.stencilFuncMask = this.stencilFuncMask;
			data.stencilFail = this.stencilFail;
			data.stencilZFail = this.stencilZFail;
			data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)

			if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;
			if (this.polygonOffset === true) data.polygonOffset = true;
			if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
			if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
			if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;
			if (this.dashSize !== undefined) data.dashSize = this.dashSize;
			if (this.gapSize !== undefined) data.gapSize = this.gapSize;
			if (this.scale !== undefined) data.scale = this.scale;
			if (this.dithering === true) data.dithering = true;
			if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
			if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
			if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
			if (this.wireframe === true) data.wireframe = this.wireframe;
			if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
			if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;
			if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;
			if (this.flatShading === true) data.flatShading = this.flatShading;
			if (this.visible === false) data.visible = false;
			if (this.toneMapped === false) data.toneMapped = false;
			if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON

			function extractFromCache(cache) {
				const values = [];

				for (const key in cache) {
					const data = cache[key];
					delete data.metadata;
					values.push(data);
				}

				return values;
			}

			if (isRootObject) {
				const textures = extractFromCache(meta.textures);
				const images = extractFromCache(meta.images);
				if (textures.length > 0) data.textures = textures;
				if (images.length > 0) data.images = images;
			}

			return data;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.name = source.name;
			this.fog = source.fog;
			this.blending = source.blending;
			this.side = source.side;
			this.vertexColors = source.vertexColors;
			this.opacity = source.opacity;
			this.transparent = source.transparent;
			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;
			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;
			this.stencilWriteMask = source.stencilWriteMask;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilFuncMask = source.stencilFuncMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.stencilWrite = source.stencilWrite;
			const srcPlanes = source.clippingPlanes;
			let dstPlanes = null;

			if (srcPlanes !== null) {
				const n = srcPlanes.length;
				dstPlanes = new Array(n);

				for (let i = 0; i !== n; ++i) {
					dstPlanes[i] = srcPlanes[i].clone();
				}
			}

			this.clippingPlanes = dstPlanes;
			this.clipIntersection = source.clipIntersection;
			this.clipShadows = source.clipShadows;
			this.shadowSide = source.shadowSide;
			this.colorWrite = source.colorWrite;
			this.precision = source.precision;
			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;
			this.dithering = source.dithering;
			this.alphaTest = source.alphaTest;
			this.alphaToCoverage = source.alphaToCoverage;
			this.premultipliedAlpha = source.premultipliedAlpha;
			this.visible = source.visible;
			this.toneMapped = source.toneMapped;
			this.userData = JSON.parse(JSON.stringify(source.userData));
			return this;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

	}

	Material.prototype.isMaterial = true;

	Material.fromType = function
		/*type*/
	() {
		// TODO: Behavior added in Materials.js
		return null;
	};

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	specularMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	combine: THREE.Multiply,
	 *	reflectivity: <float>,
	 *	refractionRatio: <float>,
	 *
	 *	depthTest: <bool>,
	 *	depthWrite: <bool>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 * }
	 */

	class MeshBasicMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshBasicMaterial';
			this.color = new Color(0xffffff); // emissive

			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.specularMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.specularMap = source.specularMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			return this;
		}

	}

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	const _vector$9 = /*@__PURE__*/new Vector3();

	const _vector2$1 = /*@__PURE__*/new Vector2();

	class BufferAttribute {
		constructor(array, itemSize, normalized) {
			if (Array.isArray(array)) {
				throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
			}

			this.name = '';
			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized === true;
			this.usage = StaticDrawUsage;
			this.updateRange = {
				offset: 0,
				count: -1
			};
			this.version = 0;
		}

		onUploadCallback() {}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		setUsage(value) {
			this.usage = value;
			return this;
		}

		copy(source) {
			this.name = source.name;
			this.array = new source.array.constructor(source.array);
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;
			this.usage = source.usage;
			return this;
		}

		copyAt(index1, attribute, index2) {
			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for (let i = 0, l = this.itemSize; i < l; i++) {
				this.array[index1 + i] = attribute.array[index2 + i];
			}

			return this;
		}

		copyArray(array) {
			this.array.set(array);
			return this;
		}

		copyColorsArray(colors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = colors.length; i < l; i++) {
				let color = colors[i];

				if (color === undefined) {
					console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
					color = new Color();
				}

				array[offset++] = color.r;
				array[offset++] = color.g;
				array[offset++] = color.b;
			}

			return this;
		}

		copyVector2sArray(vectors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = vectors.length; i < l; i++) {
				let vector = vectors[i];

				if (vector === undefined) {
					console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
					vector = new Vector2();
				}

				array[offset++] = vector.x;
				array[offset++] = vector.y;
			}

			return this;
		}

		copyVector3sArray(vectors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = vectors.length; i < l; i++) {
				let vector = vectors[i];

				if (vector === undefined) {
					console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
					vector = new Vector3();
				}

				array[offset++] = vector.x;
				array[offset++] = vector.y;
				array[offset++] = vector.z;
			}

			return this;
		}

		copyVector4sArray(vectors) {
			const array = this.array;
			let offset = 0;

			for (let i = 0, l = vectors.length; i < l; i++) {
				let vector = vectors[i];

				if (vector === undefined) {
					console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
					vector = new Vector4();
				}

				array[offset++] = vector.x;
				array[offset++] = vector.y;
				array[offset++] = vector.z;
				array[offset++] = vector.w;
			}

			return this;
		}

		applyMatrix3(m) {
			if (this.itemSize === 2) {
				for (let i = 0, l = this.count; i < l; i++) {
					_vector2$1.fromBufferAttribute(this, i);

					_vector2$1.applyMatrix3(m);

					this.setXY(i, _vector2$1.x, _vector2$1.y);
				}
			} else if (this.itemSize === 3) {
				for (let i = 0, l = this.count; i < l; i++) {
					_vector$9.fromBufferAttribute(this, i);

					_vector$9.applyMatrix3(m);

					this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
				}
			}

			return this;
		}

		applyMatrix4(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$9.x = this.getX(i);
				_vector$9.y = this.getY(i);
				_vector$9.z = this.getZ(i);

				_vector$9.applyMatrix4(m);

				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
			}

			return this;
		}

		applyNormalMatrix(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$9.x = this.getX(i);
				_vector$9.y = this.getY(i);
				_vector$9.z = this.getZ(i);

				_vector$9.applyNormalMatrix(m);

				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
			}

			return this;
		}

		transformDirection(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$9.x = this.getX(i);
				_vector$9.y = this.getY(i);
				_vector$9.z = this.getZ(i);

				_vector$9.transformDirection(m);

				this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
			}

			return this;
		}

		set(value, offset = 0) {
			this.array.set(value, offset);
			return this;
		}

		getX(index) {
			return this.array[index * this.itemSize];
		}

		setX(index, x) {
			this.array[index * this.itemSize] = x;
			return this;
		}

		getY(index) {
			return this.array[index * this.itemSize + 1];
		}

		setY(index, y) {
			this.array[index * this.itemSize + 1] = y;
			return this;
		}

		getZ(index) {
			return this.array[index * this.itemSize + 2];
		}

		setZ(index, z) {
			this.array[index * this.itemSize + 2] = z;
			return this;
		}

		getW(index) {
			return this.array[index * this.itemSize + 3];
		}

		setW(index, w) {
			this.array[index * this.itemSize + 3] = w;
			return this;
		}

		setXY(index, x, y) {
			index *= this.itemSize;
			this.array[index + 0] = x;
			this.array[index + 1] = y;
			return this;
		}

		setXYZ(index, x, y, z) {
			index *= this.itemSize;
			this.array[index + 0] = x;
			this.array[index + 1] = y;
			this.array[index + 2] = z;
			return this;
		}

		setXYZW(index, x, y, z, w) {
			index *= this.itemSize;
			this.array[index + 0] = x;
			this.array[index + 1] = y;
			this.array[index + 2] = z;
			this.array[index + 3] = w;
			return this;
		}

		onUpload(callback) {
			this.onUploadCallback = callback;
			return this;
		}

		clone() {
			return new this.constructor(this.array, this.itemSize).copy(this);
		}

		toJSON() {
			const data = {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.prototype.slice.call(this.array),
				normalized: this.normalized
			};
			if (this.name !== '') data.name = this.name;
			if (this.usage !== StaticDrawUsage) data.usage = this.usage;
			if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
			return data;
		}

	}

	BufferAttribute.prototype.isBufferAttribute = true; //

	class Int8BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Int8Array(array), itemSize, normalized);
		}

	}

	class Uint8BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint8Array(array), itemSize, normalized);
		}

	}

	class Uint8ClampedBufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint8ClampedArray(array), itemSize, normalized);
		}

	}

	class Int16BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Int16Array(array), itemSize, normalized);
		}

	}

	class Uint16BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint16Array(array), itemSize, normalized);
		}

	}

	class Int32BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Int32Array(array), itemSize, normalized);
		}

	}

	class Uint32BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint32Array(array), itemSize, normalized);
		}

	}

	class Float16BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Uint16Array(array), itemSize, normalized);
		}

	}

	Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;

	class Float32BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Float32Array(array), itemSize, normalized);
		}

	}

	class Float64BufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized) {
			super(new Float64Array(array), itemSize, normalized);
		}

	} //

	let _id$1 = 0;

	const _m1 = /*@__PURE__*/new Matrix4();

	const _obj = /*@__PURE__*/new Object3D();

	const _offset = /*@__PURE__*/new Vector3();

	const _box$1 = /*@__PURE__*/new Box3();

	const _boxMorphTargets = /*@__PURE__*/new Box3();

	const _vector$8 = /*@__PURE__*/new Vector3();

	class BufferGeometry extends EventDispatcher {
		constructor() {
			super();
			Object.defineProperty(this, 'id', {
				value: _id$1++
			});
			this.uuid = generateUUID();
			this.name = '';
			this.type = 'BufferGeometry';
			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.morphTargetsRelative = false;
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;
			this.drawRange = {
				start: 0,
				count: Infinity
			};
			this.userData = {};
		}

		getIndex() {
			return this.index;
		}

		setIndex(index) {
			if (Array.isArray(index)) {
				this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
			} else {
				this.index = index;
			}

			return this;
		}

		getAttribute(name) {
			return this.attributes[name];
		}

		setAttribute(name, attribute) {
			this.attributes[name] = attribute;
			return this;
		}

		deleteAttribute(name) {
			delete this.attributes[name];
			return this;
		}

		hasAttribute(name) {
			return this.attributes[name] !== undefined;
		}

		addGroup(start, count, materialIndex = 0) {
			this.groups.push({
				start: start,
				count: count,
				materialIndex: materialIndex
			});
		}

		clearGroups() {
			this.groups = [];
		}

		setDrawRange(start, count) {
			this.drawRange.start = start;
			this.drawRange.count = count;
		}

		applyMatrix4(matrix) {
			const position = this.attributes.position;

			if (position !== undefined) {
				position.applyMatrix4(matrix);
				position.needsUpdate = true;
			}

			const normal = this.attributes.normal;

			if (normal !== undefined) {
				const normalMatrix = new Matrix3().getNormalMatrix(matrix);
				normal.applyNormalMatrix(normalMatrix);
				normal.needsUpdate = true;
			}

			const tangent = this.attributes.tangent;

			if (tangent !== undefined) {
				tangent.transformDirection(matrix);
				tangent.needsUpdate = true;
			}

			if (this.boundingBox !== null) {
				this.computeBoundingBox();
			}

			if (this.boundingSphere !== null) {
				this.computeBoundingSphere();
			}

			return this;
		}

		applyQuaternion(q) {
			_m1.makeRotationFromQuaternion(q);

			this.applyMatrix4(_m1);
			return this;
		}

		rotateX(angle) {
			// rotate geometry around world x-axis
			_m1.makeRotationX(angle);

			this.applyMatrix4(_m1);
			return this;
		}

		rotateY(angle) {
			// rotate geometry around world y-axis
			_m1.makeRotationY(angle);

			this.applyMatrix4(_m1);
			return this;
		}

		rotateZ(angle) {
			// rotate geometry around world z-axis
			_m1.makeRotationZ(angle);

			this.applyMatrix4(_m1);
			return this;
		}

		translate(x, y, z) {
			// translate geometry
			_m1.makeTranslation(x, y, z);

			this.applyMatrix4(_m1);
			return this;
		}

		scale(x, y, z) {
			// scale geometry
			_m1.makeScale(x, y, z);

			this.applyMatrix4(_m1);
			return this;
		}

		lookAt(vector) {
			_obj.lookAt(vector);

			_obj.updateMatrix();

			this.applyMatrix4(_obj.matrix);
			return this;
		}

		center() {
			this.computeBoundingBox();
			this.boundingBox.getCenter(_offset).negate();
			this.translate(_offset.x, _offset.y, _offset.z);
			return this;
		}

		setFromPoints(points) {
			const position = [];

			for (let i = 0, l = points.length; i < l; i++) {
				const point = points[i];
				position.push(point.x, point.y, point.z || 0);
			}

			this.setAttribute('position', new Float32BufferAttribute(position, 3));
			return this;
		}

		computeBoundingBox() {
			if (this.boundingBox === null) {
				this.boundingBox = new Box3();
			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if (position && position.isGLBufferAttribute) {
				console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
				this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));
				return;
			}

			if (position !== undefined) {
				this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present

				if (morphAttributesPosition) {
					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
						const morphAttribute = morphAttributesPosition[i];

						_box$1.setFromBufferAttribute(morphAttribute);

						if (this.morphTargetsRelative) {
							_vector$8.addVectors(this.boundingBox.min, _box$1.min);

							this.boundingBox.expandByPoint(_vector$8);

							_vector$8.addVectors(this.boundingBox.max, _box$1.max);

							this.boundingBox.expandByPoint(_vector$8);
						} else {
							this.boundingBox.expandByPoint(_box$1.min);
							this.boundingBox.expandByPoint(_box$1.max);
						}
					}
				}
			} else {
				this.boundingBox.makeEmpty();
			}

			if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
				console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
			}
		}

		computeBoundingSphere() {
			if (this.boundingSphere === null) {
				this.boundingSphere = new Sphere();
			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if (position && position.isGLBufferAttribute) {
				console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
				this.boundingSphere.set(new Vector3(), Infinity);
				return;
			}

			if (position) {
				// first, find the center of the bounding sphere
				const center = this.boundingSphere.center;

				_box$1.setFromBufferAttribute(position); // process morph attributes if present


				if (morphAttributesPosition) {
					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
						const morphAttribute = morphAttributesPosition[i];

						_boxMorphTargets.setFromBufferAttribute(morphAttribute);

						if (this.morphTargetsRelative) {
							_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);

							_box$1.expandByPoint(_vector$8);

							_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);

							_box$1.expandByPoint(_vector$8);
						} else {
							_box$1.expandByPoint(_boxMorphTargets.min);

							_box$1.expandByPoint(_boxMorphTargets.max);
						}
					}
				}

				_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case


				let maxRadiusSq = 0;

				for (let i = 0, il = position.count; i < il; i++) {
					_vector$8.fromBufferAttribute(position, i);

					maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
				} // process morph attributes if present


				if (morphAttributesPosition) {
					for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
						const morphAttribute = morphAttributesPosition[i];
						const morphTargetsRelative = this.morphTargetsRelative;

						for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
							_vector$8.fromBufferAttribute(morphAttribute, j);

							if (morphTargetsRelative) {
								_offset.fromBufferAttribute(position, j);

								_vector$8.add(_offset);
							}

							maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
						}
					}
				}

				this.boundingSphere.radius = Math.sqrt(maxRadiusSq);

				if (isNaN(this.boundingSphere.radius)) {
					console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
				}
			}
		}

		computeTangents() {
			const index = this.index;
			const attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html
			// (per vertex tangents)

			if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
				console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
				return;
			}

			const indices = index.array;
			const positions = attributes.position.array;
			const normals = attributes.normal.array;
			const uvs = attributes.uv.array;
			const nVertices = positions.length / 3;

			if (this.hasAttribute('tangent') === false) {
				this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));
			}

			const tangents = this.getAttribute('tangent').array;
			const tan1 = [],
						tan2 = [];

			for (let i = 0; i < nVertices; i++) {
				tan1[i] = new Vector3();
				tan2[i] = new Vector3();
			}

			const vA = new Vector3(),
						vB = new Vector3(),
						vC = new Vector3(),
						uvA = new Vector2(),
						uvB = new Vector2(),
						uvC = new Vector2(),
						sdir = new Vector3(),
						tdir = new Vector3();

			function handleTriangle(a, b, c) {
				vA.fromArray(positions, a * 3);
				vB.fromArray(positions, b * 3);
				vC.fromArray(positions, c * 3);
				uvA.fromArray(uvs, a * 2);
				uvB.fromArray(uvs, b * 2);
				uvC.fromArray(uvs, c * 2);
				vB.sub(vA);
				vC.sub(vA);
				uvB.sub(uvA);
				uvC.sub(uvA);
				const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices

				if (!isFinite(r)) return;
				sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
				tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
				tan1[a].add(sdir);
				tan1[b].add(sdir);
				tan1[c].add(sdir);
				tan2[a].add(tdir);
				tan2[b].add(tdir);
				tan2[c].add(tdir);
			}

			let groups = this.groups;

			if (groups.length === 0) {
				groups = [{
					start: 0,
					count: indices.length
				}];
			}

			for (let i = 0, il = groups.length; i < il; ++i) {
				const group = groups[i];
				const start = group.start;
				const count = group.count;

				for (let j = start, jl = start + count; j < jl; j += 3) {
					handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
				}
			}

			const tmp = new Vector3(),
						tmp2 = new Vector3();
			const n = new Vector3(),
						n2 = new Vector3();

			function handleVertex(v) {
				n.fromArray(normals, v * 3);
				n2.copy(n);
				const t = tan1[v]; // Gram-Schmidt orthogonalize

				tmp.copy(t);
				tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness

				tmp2.crossVectors(n2, t);
				const test = tmp2.dot(tan2[v]);
				const w = test < 0.0 ? -1.0 : 1.0;
				tangents[v * 4] = tmp.x;
				tangents[v * 4 + 1] = tmp.y;
				tangents[v * 4 + 2] = tmp.z;
				tangents[v * 4 + 3] = w;
			}

			for (let i = 0, il = groups.length; i < il; ++i) {
				const group = groups[i];
				const start = group.start;
				const count = group.count;

				for (let j = start, jl = start + count; j < jl; j += 3) {
					handleVertex(indices[j + 0]);
					handleVertex(indices[j + 1]);
					handleVertex(indices[j + 2]);
				}
			}
		}

		computeVertexNormals() {
			const index = this.index;
			const positionAttribute = this.getAttribute('position');

			if (positionAttribute !== undefined) {
				let normalAttribute = this.getAttribute('normal');

				if (normalAttribute === undefined) {
					normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
					this.setAttribute('normal', normalAttribute);
				} else {
					// reset existing normals to zero
					for (let i = 0, il = normalAttribute.count; i < il; i++) {
						normalAttribute.setXYZ(i, 0, 0, 0);
					}
				}

				const pA = new Vector3(),
							pB = new Vector3(),
							pC = new Vector3();
				const nA = new Vector3(),
							nB = new Vector3(),
							nC = new Vector3();
				const cb = new Vector3(),
							ab = new Vector3(); // indexed elements

				if (index) {
					for (let i = 0, il = index.count; i < il; i += 3) {
						const vA = index.getX(i + 0);
						const vB = index.getX(i + 1);
						const vC = index.getX(i + 2);
						pA.fromBufferAttribute(positionAttribute, vA);
						pB.fromBufferAttribute(positionAttribute, vB);
						pC.fromBufferAttribute(positionAttribute, vC);
						cb.subVectors(pC, pB);
						ab.subVectors(pA, pB);
						cb.cross(ab);
						nA.fromBufferAttribute(normalAttribute, vA);
						nB.fromBufferAttribute(normalAttribute, vB);
						nC.fromBufferAttribute(normalAttribute, vC);
						nA.add(cb);
						nB.add(cb);
						nC.add(cb);
						normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
						normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
						normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
					}
				} else {
					// non-indexed elements (unconnected triangle soup)
					for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
						pA.fromBufferAttribute(positionAttribute, i + 0);
						pB.fromBufferAttribute(positionAttribute, i + 1);
						pC.fromBufferAttribute(positionAttribute, i + 2);
						cb.subVectors(pC, pB);
						ab.subVectors(pA, pB);
						cb.cross(ab);
						normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
						normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
						normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
					}
				}

				this.normalizeNormals();
				normalAttribute.needsUpdate = true;
			}
		}

		merge(geometry, offset) {
			if (!(geometry && geometry.isBufferGeometry)) {
				console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
				return;
			}

			if (offset === undefined) {
				offset = 0;
				console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');
			}

			const attributes = this.attributes;

			for (const key in attributes) {
				if (geometry.attributes[key] === undefined) continue;
				const attribute1 = attributes[key];
				const attributeArray1 = attribute1.array;
				const attribute2 = geometry.attributes[key];
				const attributeArray2 = attribute2.array;
				const attributeOffset = attribute2.itemSize * offset;
				const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);

				for (let i = 0, j = attributeOffset; i < length; i++, j++) {
					attributeArray1[j] = attributeArray2[i];
				}
			}

			return this;
		}

		normalizeNormals() {
			const normals = this.attributes.normal;

			for (let i = 0, il = normals.count; i < il; i++) {
				_vector$8.fromBufferAttribute(normals, i);

				_vector$8.normalize();

				normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
			}
		}

		toNonIndexed() {
			function convertBufferAttribute(attribute, indices) {
				const array = attribute.array;
				const itemSize = attribute.itemSize;
				const normalized = attribute.normalized;
				const array2 = new array.constructor(indices.length * itemSize);
				let index = 0,
						index2 = 0;

				for (let i = 0, l = indices.length; i < l; i++) {
					if (attribute.isInterleavedBufferAttribute) {
						index = indices[i] * attribute.data.stride + attribute.offset;
					} else {
						index = indices[i] * itemSize;
					}

					for (let j = 0; j < itemSize; j++) {
						array2[index2++] = array[index++];
					}
				}

				return new BufferAttribute(array2, itemSize, normalized);
			} //


			if (this.index === null) {
				console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
				return this;
			}

			const geometry2 = new BufferGeometry();
			const indices = this.index.array;
			const attributes = this.attributes; // attributes

			for (const name in attributes) {
				const attribute = attributes[name];
				const newAttribute = convertBufferAttribute(attribute, indices);
				geometry2.setAttribute(name, newAttribute);
			} // morph attributes


			const morphAttributes = this.morphAttributes;

			for (const name in morphAttributes) {
				const morphArray = [];
				const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

				for (let i = 0, il = morphAttribute.length; i < il; i++) {
					const attribute = morphAttribute[i];
					const newAttribute = convertBufferAttribute(attribute, indices);
					morphArray.push(newAttribute);
				}

				geometry2.morphAttributes[name] = morphArray;
			}

			geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups

			const groups = this.groups;

			for (let i = 0, l = groups.length; i < l; i++) {
				const group = groups[i];
				geometry2.addGroup(group.start, group.count, group.materialIndex);
			}

			return geometry2;
		}

		toJSON() {
			const data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			}; // standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if (this.name !== '') data.name = this.name;
			if (Object.keys(this.userData).length > 0) data.userData = this.userData;

			if (this.parameters !== undefined) {
				const parameters = this.parameters;

				for (const key in parameters) {
					if (parameters[key] !== undefined) data[key] = parameters[key];
				}

				return data;
			} // for simplicity the code assumes attributes are not shared across geometries, see #15811


			data.data = {
				attributes: {}
			};
			const index = this.index;

			if (index !== null) {
				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call(index.array)
				};
			}

			const attributes = this.attributes;

			for (const key in attributes) {
				const attribute = attributes[key];
				data.data.attributes[key] = attribute.toJSON(data.data);
			}

			const morphAttributes = {};
			let hasMorphAttributes = false;

			for (const key in this.morphAttributes) {
				const attributeArray = this.morphAttributes[key];
				const array = [];

				for (let i = 0, il = attributeArray.length; i < il; i++) {
					const attribute = attributeArray[i];
					array.push(attribute.toJSON(data.data));
				}

				if (array.length > 0) {
					morphAttributes[key] = array;
					hasMorphAttributes = true;
				}
			}

			if (hasMorphAttributes) {
				data.data.morphAttributes = morphAttributes;
				data.data.morphTargetsRelative = this.morphTargetsRelative;
			}

			const groups = this.groups;

			if (groups.length > 0) {
				data.data.groups = JSON.parse(JSON.stringify(groups));
			}

			const boundingSphere = this.boundingSphere;

			if (boundingSphere !== null) {
				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};
			}

			return data;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			// reset
			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null; // used for storing cloned, shared data

			const data = {}; // name

			this.name = source.name; // index

			const index = source.index;

			if (index !== null) {
				this.setIndex(index.clone(data));
			} // attributes


			const attributes = source.attributes;

			for (const name in attributes) {
				const attribute = attributes[name];
				this.setAttribute(name, attribute.clone(data));
			} // morph attributes


			const morphAttributes = source.morphAttributes;

			for (const name in morphAttributes) {
				const array = [];
				const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

				for (let i = 0, l = morphAttribute.length; i < l; i++) {
					array.push(morphAttribute[i].clone(data));
				}

				this.morphAttributes[name] = array;
			}

			this.morphTargetsRelative = source.morphTargetsRelative; // groups

			const groups = source.groups;

			for (let i = 0, l = groups.length; i < l; i++) {
				const group = groups[i];
				this.addGroup(group.start, group.count, group.materialIndex);
			} // bounding box


			const boundingBox = source.boundingBox;

			if (boundingBox !== null) {
				this.boundingBox = boundingBox.clone();
			} // bounding sphere


			const boundingSphere = source.boundingSphere;

			if (boundingSphere !== null) {
				this.boundingSphere = boundingSphere.clone();
			} // draw range


			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count; // user data

			this.userData = source.userData; // geometry generator parameters

			if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);
			return this;
		}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

	}

	BufferGeometry.prototype.isBufferGeometry = true;

	const _inverseMatrix$2 = /*@__PURE__*/new Matrix4();

	const _ray$2 = /*@__PURE__*/new Ray();

	const _sphere$3 = /*@__PURE__*/new Sphere();

	const _vA$1 = /*@__PURE__*/new Vector3();

	const _vB$1 = /*@__PURE__*/new Vector3();

	const _vC$1 = /*@__PURE__*/new Vector3();

	const _tempA = /*@__PURE__*/new Vector3();

	const _tempB = /*@__PURE__*/new Vector3();

	const _tempC = /*@__PURE__*/new Vector3();

	const _morphA = /*@__PURE__*/new Vector3();

	const _morphB = /*@__PURE__*/new Vector3();

	const _morphC = /*@__PURE__*/new Vector3();

	const _uvA$1 = /*@__PURE__*/new Vector2();

	const _uvB$1 = /*@__PURE__*/new Vector2();

	const _uvC$1 = /*@__PURE__*/new Vector2();

	const _intersectionPoint = /*@__PURE__*/new Vector3();

	const _intersectionPointWorld = /*@__PURE__*/new Vector3();

	class Mesh extends Object3D {
		constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
			super();
			this.type = 'Mesh';
			this.geometry = geometry;
			this.material = material;
			this.updateMorphTargets();
		}

		copy(source) {
			super.copy(source);

			if (source.morphTargetInfluences !== undefined) {
				this.morphTargetInfluences = source.morphTargetInfluences.slice();
			}

			if (source.morphTargetDictionary !== undefined) {
				this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
			}

			this.material = source.material;
			this.geometry = source.geometry;
			return this;
		}

		updateMorphTargets() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				const morphAttributes = geometry.morphAttributes;
				const keys = Object.keys(morphAttributes);

				if (keys.length > 0) {
					const morphAttribute = morphAttributes[keys[0]];

					if (morphAttribute !== undefined) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
							const name = morphAttribute[m].name || String(m);
							this.morphTargetInfluences.push(0);
							this.morphTargetDictionary[name] = m;
						}
					}
				}
			} else {
				const morphTargets = geometry.morphTargets;

				if (morphTargets !== undefined && morphTargets.length > 0) {
					console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
				}
			}
		}

		raycast(raycaster, intersects) {
			const geometry = this.geometry;
			const material = this.material;
			const matrixWorld = this.matrixWorld;
			if (material === undefined) return; // Checking boundingSphere distance to ray

			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere$3.copy(geometry.boundingSphere);

			_sphere$3.applyMatrix4(matrixWorld);

			if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //

			_inverseMatrix$2.copy(matrixWorld).invert();

			_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing


			if (geometry.boundingBox !== null) {
				if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;
			}

			let intersection;

			if (geometry.isBufferGeometry) {
				const index = geometry.index;
				const position = geometry.attributes.position;
				const morphPosition = geometry.morphAttributes.position;
				const morphTargetsRelative = geometry.morphTargetsRelative;
				const uv = geometry.attributes.uv;
				const uv2 = geometry.attributes.uv2;
				const groups = geometry.groups;
				const drawRange = geometry.drawRange;

				if (index !== null) {
					// indexed buffer geometry
					if (Array.isArray(material)) {
						for (let i = 0, il = groups.length; i < il; i++) {
							const group = groups[i];
							const groupMaterial = material[group.materialIndex];
							const start = Math.max(group.start, drawRange.start);
							const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));

							for (let j = start, jl = end; j < jl; j += 3) {
								const a = index.getX(j);
								const b = index.getX(j + 1);
								const c = index.getX(j + 2);
								intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

								if (intersection) {
									intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics

									intersection.face.materialIndex = group.materialIndex;
									intersects.push(intersection);
								}
							}
						}
					} else {
						const start = Math.max(0, drawRange.start);
						const end = Math.min(index.count, drawRange.start + drawRange.count);

						for (let i = start, il = end; i < il; i += 3) {
							const a = index.getX(i);
							const b = index.getX(i + 1);
							const c = index.getX(i + 2);
							intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

							if (intersection) {
								intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics

								intersects.push(intersection);
							}
						}
					}
				} else if (position !== undefined) {
					// non-indexed buffer geometry
					if (Array.isArray(material)) {
						for (let i = 0, il = groups.length; i < il; i++) {
							const group = groups[i];
							const groupMaterial = material[group.materialIndex];
							const start = Math.max(group.start, drawRange.start);
							const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));

							for (let j = start, jl = end; j < jl; j += 3) {
								const a = j;
								const b = j + 1;
								const c = j + 2;
								intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

								if (intersection) {
									intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics

									intersection.face.materialIndex = group.materialIndex;
									intersects.push(intersection);
								}
							}
						}
					} else {
						const start = Math.max(0, drawRange.start);
						const end = Math.min(position.count, drawRange.start + drawRange.count);

						for (let i = start, il = end; i < il; i += 3) {
							const a = i;
							const b = i + 1;
							const c = i + 2;
							intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

							if (intersection) {
								intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics

								intersects.push(intersection);
							}
						}
					}
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}
		}

	}

	Mesh.prototype.isMesh = true;

	function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
		let intersect;

		if (material.side === BackSide) {
			intersect = ray.intersectTriangle(pC, pB, pA, true, point);
		} else {
			intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
		}

		if (intersect === null) return null;

		_intersectionPointWorld.copy(point);

		_intersectionPointWorld.applyMatrix4(object.matrixWorld);

		const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
		if (distance < raycaster.near || distance > raycaster.far) return null;
		return {
			distance: distance,
			point: _intersectionPointWorld.clone(),
			object: object
		};
	}

	function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
		_vA$1.fromBufferAttribute(position, a);

		_vB$1.fromBufferAttribute(position, b);

		_vC$1.fromBufferAttribute(position, c);

		const morphInfluences = object.morphTargetInfluences;

		if (morphPosition && morphInfluences) {
			_morphA.set(0, 0, 0);

			_morphB.set(0, 0, 0);

			_morphC.set(0, 0, 0);

			for (let i = 0, il = morphPosition.length; i < il; i++) {
				const influence = morphInfluences[i];
				const morphAttribute = morphPosition[i];
				if (influence === 0) continue;

				_tempA.fromBufferAttribute(morphAttribute, a);

				_tempB.fromBufferAttribute(morphAttribute, b);

				_tempC.fromBufferAttribute(morphAttribute, c);

				if (morphTargetsRelative) {
					_morphA.addScaledVector(_tempA, influence);

					_morphB.addScaledVector(_tempB, influence);

					_morphC.addScaledVector(_tempC, influence);
				} else {
					_morphA.addScaledVector(_tempA.sub(_vA$1), influence);

					_morphB.addScaledVector(_tempB.sub(_vB$1), influence);

					_morphC.addScaledVector(_tempC.sub(_vC$1), influence);
				}
			}

			_vA$1.add(_morphA);

			_vB$1.add(_morphB);

			_vC$1.add(_morphC);
		}

		if (object.isSkinnedMesh) {
			object.boneTransform(a, _vA$1);
			object.boneTransform(b, _vB$1);
			object.boneTransform(c, _vC$1);
		}

		const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);

		if (intersection) {
			if (uv) {
				_uvA$1.fromBufferAttribute(uv, a);

				_uvB$1.fromBufferAttribute(uv, b);

				_uvC$1.fromBufferAttribute(uv, c);

				intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
			}

			if (uv2) {
				_uvA$1.fromBufferAttribute(uv2, a);

				_uvB$1.fromBufferAttribute(uv2, b);

				_uvC$1.fromBufferAttribute(uv2, c);

				intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
			}

			const face = {
				a: a,
				b: b,
				c: c,
				normal: new Vector3(),
				materialIndex: 0
			};
			Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
			intersection.face = face;
		}

		return intersection;
	}

	class BoxGeometry extends BufferGeometry {
		constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
			super();
			this.type = 'BoxGeometry';
			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};
			const scope = this; // segments

			widthSegments = Math.floor(widthSegments);
			heightSegments = Math.floor(heightSegments);
			depthSegments = Math.floor(depthSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			let numberOfVertices = 0;
			let groupStart = 0; // build each side of the box geometry

			buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px

			buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx

			buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py

			buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny

			buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz

			buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
			// build geometry

			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

			function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
				const segmentWidth = width / gridX;
				const segmentHeight = height / gridY;
				const widthHalf = width / 2;
				const heightHalf = height / 2;
				const depthHalf = depth / 2;
				const gridX1 = gridX + 1;
				const gridY1 = gridY + 1;
				let vertexCounter = 0;
				let groupCount = 0;
				const vector = new Vector3(); // generate vertices, normals and uvs

				for (let iy = 0; iy < gridY1; iy++) {
					const y = iy * segmentHeight - heightHalf;

					for (let ix = 0; ix < gridX1; ix++) {
						const x = ix * segmentWidth - widthHalf; // set values to correct vector component

						vector[u] = x * udir;
						vector[v] = y * vdir;
						vector[w] = depthHalf; // now apply vector to vertex buffer

						vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component

						vector[u] = 0;
						vector[v] = 0;
						vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer

						normals.push(vector.x, vector.y, vector.z); // uvs

						uvs.push(ix / gridX);
						uvs.push(1 - iy / gridY); // counters

						vertexCounter += 1;
					}
				} // indices
				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment


				for (let iy = 0; iy < gridY; iy++) {
					for (let ix = 0; ix < gridX; ix++) {
						const a = numberOfVertices + ix + gridX1 * iy;
						const b = numberOfVertices + ix + gridX1 * (iy + 1);
						const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
						const d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces

						indices.push(a, b, d);
						indices.push(b, c, d); // increase counter

						groupCount += 6;
					}
				} // add a group to the geometry. this will ensure multi material support


				scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups

				groupStart += groupCount; // update total number of vertices

				numberOfVertices += vertexCounter;
			}
		}

		static fromJSON(data) {
			return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
		}

	}

	/**
	 * Uniform Utilities
	 */
	function cloneUniforms(src) {
		const dst = {};

		for (const u in src) {
			dst[u] = {};

			for (const p in src[u]) {
				const property = src[u][p];

				if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
					dst[u][p] = property.clone();
				} else if (Array.isArray(property)) {
					dst[u][p] = property.slice();
				} else {
					dst[u][p] = property;
				}
			}
		}

		return dst;
	}
	function mergeUniforms(uniforms) {
		const merged = {};

		for (let u = 0; u < uniforms.length; u++) {
			const tmp = cloneUniforms(uniforms[u]);

			for (const p in tmp) {
				merged[p] = tmp[p];
			}
		}

		return merged;
	} // Legacy

	const UniformsUtils = {
		clone: cloneUniforms,
		merge: mergeUniforms
	};

	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

	/**
	 * parameters = {
	 *	defines: { "label" : "value" },
	 *	uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *	fragmentShader: <string>,
	 *	vertexShader: <string>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	lights: <bool>
	 * }
	 */

	class ShaderMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'ShaderMaterial';
			this.defines = {};
			this.uniforms = {};
			this.vertexShader = default_vertex;
			this.fragmentShader = default_fragment;
			this.linewidth = 1;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.fog = false; // set to use scene fog

			this.lights = false; // set to use scene lights

			this.clipping = false; // set to use user-defined clipping planes

			this.extensions = {
				derivatives: false,
				// set to use derivatives
				fragDepth: false,
				// set to use fragment depth values
				drawBuffers: false,
				// set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD

			}; // When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.

			this.defaultAttributeValues = {
				'color': [1, 1, 1],
				'uv': [0, 0],
				'uv2': [0, 0]
			};
			this.index0AttributeName = undefined;
			this.uniformsNeedUpdate = false;
			this.glslVersion = null;

			if (parameters !== undefined) {
				if (parameters.attributes !== undefined) {
					console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');
				}

				this.setValues(parameters);
			}
		}

		copy(source) {
			super.copy(source);
			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;
			this.uniforms = cloneUniforms(source.uniforms);
			this.defines = Object.assign({}, source.defines);
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.lights = source.lights;
			this.clipping = source.clipping;
			this.extensions = Object.assign({}, source.extensions);
			this.glslVersion = source.glslVersion;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.glslVersion = this.glslVersion;
			data.uniforms = {};

			for (const name in this.uniforms) {
				const uniform = this.uniforms[name];
				const value = uniform.value;

				if (value && value.isTexture) {
					data.uniforms[name] = {
						type: 't',
						value: value.toJSON(meta).uuid
					};
				} else if (value && value.isColor) {
					data.uniforms[name] = {
						type: 'c',
						value: value.getHex()
					};
				} else if (value && value.isVector2) {
					data.uniforms[name] = {
						type: 'v2',
						value: value.toArray()
					};
				} else if (value && value.isVector3) {
					data.uniforms[name] = {
						type: 'v3',
						value: value.toArray()
					};
				} else if (value && value.isVector4) {
					data.uniforms[name] = {
						type: 'v4',
						value: value.toArray()
					};
				} else if (value && value.isMatrix3) {
					data.uniforms[name] = {
						type: 'm3',
						value: value.toArray()
					};
				} else if (value && value.isMatrix4) {
					data.uniforms[name] = {
						type: 'm4',
						value: value.toArray()
					};
				} else {
					data.uniforms[name] = {
						value: value
					}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
				}
			}

			if (Object.keys(this.defines).length > 0) data.defines = this.defines;
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;
			const extensions = {};

			for (const key in this.extensions) {
				if (this.extensions[key] === true) extensions[key] = true;
			}

			if (Object.keys(extensions).length > 0) data.extensions = extensions;
			return data;
		}

	}

	ShaderMaterial.prototype.isShaderMaterial = true;

	class Camera extends Object3D {
		constructor() {
			super();
			this.type = 'Camera';
			this.matrixWorldInverse = new Matrix4();
			this.projectionMatrix = new Matrix4();
			this.projectionMatrixInverse = new Matrix4();
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			this.matrixWorldInverse.copy(source.matrixWorldInverse);
			this.projectionMatrix.copy(source.projectionMatrix);
			this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
			return this;
		}

		getWorldDirection(target) {
			this.updateWorldMatrix(true, false);
			const e = this.matrixWorld.elements;
			return target.set(-e[8], -e[9], -e[10]).normalize();
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);
			this.matrixWorldInverse.copy(this.matrixWorld).invert();
		}

		updateWorldMatrix(updateParents, updateChildren) {
			super.updateWorldMatrix(updateParents, updateChildren);
			this.matrixWorldInverse.copy(this.matrixWorld).invert();
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	Camera.prototype.isCamera = true;

	class PerspectiveCamera extends Camera {
		constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {
			super();
			this.type = 'PerspectiveCamera';
			this.fov = fov;
			this.zoom = 1;
			this.near = near;
			this.far = far;
			this.focus = 10;
			this.aspect = aspect;
			this.view = null;
			this.filmGauge = 35; // width of the film (default in millimeters)

			this.filmOffset = 0; // horizontal film offset (same unit as gauge)

			this.updateProjectionMatrix();
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			this.fov = source.fov;
			this.zoom = source.zoom;
			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;
			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign({}, source.view);
			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;
			return this;
		}
		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */


		setFocalLength(focalLength) {
			/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
			const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
			this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
			this.updateProjectionMatrix();
		}
		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */


		getFocalLength() {
			const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
			return 0.5 * this.getFilmHeight() / vExtentSlope;
		}

		getEffectiveFOV() {
			return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
		}

		getFilmWidth() {
			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min(this.aspect, 1);
		}

		getFilmHeight() {
			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max(this.aspect, 1);
		}
		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *	 +---+---+---+
		 *	 | A | B | C |
		 *	 +---+---+---+
		 *	 | D | E | F |
		 *	 +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *	 const w = 1920;
		 *	 const h = 1080;
		 *	 const fullWidth = w * 3;
		 *	 const fullHeight = h * 2;
		 *
		 *	 --A--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *	 --B--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *	 --C--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *	 --D--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *	 --E--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *	 --F--
		 *	 camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *	 Note there is no reason monitors have to be the same size or in a grid.
		 */


		setViewOffset(fullWidth, fullHeight, x, y, width, height) {
			this.aspect = fullWidth / fullHeight;

			if (this.view === null) {
				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};
			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;
			this.updateProjectionMatrix();
		}

		clearViewOffset() {
			if (this.view !== null) {
				this.view.enabled = false;
			}

			this.updateProjectionMatrix();
		}

		updateProjectionMatrix() {
			const near = this.near;
			let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
			let height = 2 * top;
			let width = this.aspect * height;
			let left = -0.5 * width;
			const view = this.view;

			if (this.view !== null && this.view.enabled) {
				const fullWidth = view.fullWidth,
							fullHeight = view.fullHeight;
				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;
			}

			const skew = this.filmOffset;
			if (skew !== 0) left += near * skew / this.getFilmWidth();
			this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.fov = this.fov;
			data.object.zoom = this.zoom;
			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;
			data.object.aspect = this.aspect;
			if (this.view !== null) data.object.view = Object.assign({}, this.view);
			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;
			return data;
		}

	}

	PerspectiveCamera.prototype.isPerspectiveCamera = true;

	const fov = 90,
				aspect = 1;

	class CubeCamera extends Object3D {
		constructor(near, far, renderTarget) {
			super();
			this.type = 'CubeCamera';

			if (renderTarget.isWebGLCubeRenderTarget !== true) {
				console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
				return;
			}

			this.renderTarget = renderTarget;
			const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
			cameraPX.layers = this.layers;
			cameraPX.up.set(0, -1, 0);
			cameraPX.lookAt(new Vector3(1, 0, 0));
			this.add(cameraPX);
			const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
			cameraNX.layers = this.layers;
			cameraNX.up.set(0, -1, 0);
			cameraNX.lookAt(new Vector3(-1, 0, 0));
			this.add(cameraNX);
			const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
			cameraPY.layers = this.layers;
			cameraPY.up.set(0, 0, 1);
			cameraPY.lookAt(new Vector3(0, 1, 0));
			this.add(cameraPY);
			const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
			cameraNY.layers = this.layers;
			cameraNY.up.set(0, 0, -1);
			cameraNY.lookAt(new Vector3(0, -1, 0));
			this.add(cameraNY);
			const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
			cameraPZ.layers = this.layers;
			cameraPZ.up.set(0, -1, 0);
			cameraPZ.lookAt(new Vector3(0, 0, 1));
			this.add(cameraPZ);
			const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
			cameraNZ.layers = this.layers;
			cameraNZ.up.set(0, -1, 0);
			cameraNZ.lookAt(new Vector3(0, 0, -1));
			this.add(cameraNZ);
		}

		update(renderer, scene) {
			if (this.parent === null) this.updateMatrixWorld();
			const renderTarget = this.renderTarget;
			const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
			const currentXrEnabled = renderer.xr.enabled;
			const currentRenderTarget = renderer.getRenderTarget();
			renderer.xr.enabled = false;
			const generateMipmaps = renderTarget.texture.generateMipmaps;
			renderTarget.texture.generateMipmaps = false;
			renderer.setRenderTarget(renderTarget, 0);
			renderer.render(scene, cameraPX);
			renderer.setRenderTarget(renderTarget, 1);
			renderer.render(scene, cameraNX);
			renderer.setRenderTarget(renderTarget, 2);
			renderer.render(scene, cameraPY);
			renderer.setRenderTarget(renderTarget, 3);
			renderer.render(scene, cameraNY);
			renderer.setRenderTarget(renderTarget, 4);
			renderer.render(scene, cameraPZ);
			renderTarget.texture.generateMipmaps = generateMipmaps;
			renderer.setRenderTarget(renderTarget, 5);
			renderer.render(scene, cameraNZ);
			renderer.setRenderTarget(currentRenderTarget);
			renderer.xr.enabled = currentXrEnabled;
			renderTarget.texture.needsPMREMUpdate = true;
		}

	}

	class CubeTexture extends Texture {
		constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
			super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
			this.flipY = false;
		}

		get images() {
			return this.image;
		}

		set images(value) {
			this.image = value;
		}

	}

	CubeTexture.prototype.isCubeTexture = true;

	class WebGLCubeRenderTarget extends WebGLRenderTarget {
		constructor(size, options = {}) {
			super(size, size, options);
			const image = {
				width: size,
				height: size,
				depth: 1
			};
			const images = [image, image, image, image, image, image];
			this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding); // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
			// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
			// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
			// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
			// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
			// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

			this.texture.isRenderTargetTexture = true;
			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
		}

		fromEquirectangularTexture(renderer, texture) {
			this.texture.type = texture.type;
			this.texture.format = RGBAFormat; // see #18859

			this.texture.encoding = texture.encoding;
			this.texture.generateMipmaps = texture.generateMipmaps;
			this.texture.minFilter = texture.minFilter;
			this.texture.magFilter = texture.magFilter;
			const shader = {
				uniforms: {
					tEquirect: {
						value: null
					}
				},
				vertexShader:
				/* glsl */
				`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
				fragmentShader:
				/* glsl */
				`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
			};
			const geometry = new BoxGeometry(5, 5, 5);
			const material = new ShaderMaterial({
				name: 'CubemapFromEquirect',
				uniforms: cloneUniforms(shader.uniforms),
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader,
				side: BackSide,
				blending: NoBlending
			});
			material.uniforms.tEquirect.value = texture;
			const mesh = new Mesh(geometry, material);
			const currentMinFilter = texture.minFilter; // Avoid blurred poles

			if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
			const camera = new CubeCamera(1, 10, this);
			camera.update(renderer, mesh);
			texture.minFilter = currentMinFilter;
			mesh.geometry.dispose();
			mesh.material.dispose();
			return this;
		}

		clear(renderer, color, depth, stencil) {
			const currentRenderTarget = renderer.getRenderTarget();

			for (let i = 0; i < 6; i++) {
				renderer.setRenderTarget(this, i);
				renderer.clear(color, depth, stencil);
			}

			renderer.setRenderTarget(currentRenderTarget);
		}

	}

	WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

	const _vector1 = /*@__PURE__*/new Vector3();

	const _vector2 = /*@__PURE__*/new Vector3();

	const _normalMatrix = /*@__PURE__*/new Matrix3();

	class Plane {
		constructor(normal = new Vector3(1, 0, 0), constant = 0) {
			// normal is assumed to be normalized
			this.normal = normal;
			this.constant = constant;
		}

		set(normal, constant) {
			this.normal.copy(normal);
			this.constant = constant;
			return this;
		}

		setComponents(x, y, z, w) {
			this.normal.set(x, y, z);
			this.constant = w;
			return this;
		}

		setFromNormalAndCoplanarPoint(normal, point) {
			this.normal.copy(normal);
			this.constant = -point.dot(this.normal);
			return this;
		}

		setFromCoplanarPoints(a, b, c) {
			const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?


			this.setFromNormalAndCoplanarPoint(normal, a);
			return this;
		}

		copy(plane) {
			this.normal.copy(plane.normal);
			this.constant = plane.constant;
			return this;
		}

		normalize() {
			// Note: will lead to a divide by zero if the plane is invalid.
			const inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar(inverseNormalLength);
			this.constant *= inverseNormalLength;
			return this;
		}

		negate() {
			this.constant *= -1;
			this.normal.negate();
			return this;
		}

		distanceToPoint(point) {
			return this.normal.dot(point) + this.constant;
		}

		distanceToSphere(sphere) {
			return this.distanceToPoint(sphere.center) - sphere.radius;
		}

		projectPoint(point, target) {
			return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
		}

		intersectLine(line, target) {
			const direction = line.delta(_vector1);
			const denominator = this.normal.dot(direction);

			if (denominator === 0) {
				// line is coplanar, return origin
				if (this.distanceToPoint(line.start) === 0) {
					return target.copy(line.start);
				} // Unsure if this is the correct method to handle this case.


				return null;
			}

			const t = -(line.start.dot(this.normal) + this.constant) / denominator;

			if (t < 0 || t > 1) {
				return null;
			}

			return target.copy(direction).multiplyScalar(t).add(line.start);
		}

		intersectsLine(line) {
			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
			const startSign = this.distanceToPoint(line.start);
			const endSign = this.distanceToPoint(line.end);
			return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
		}

		intersectsBox(box) {
			return box.intersectsPlane(this);
		}

		intersectsSphere(sphere) {
			return sphere.intersectsPlane(this);
		}

		coplanarPoint(target) {
			return target.copy(this.normal).multiplyScalar(-this.constant);
		}

		applyMatrix4(matrix, optionalNormalMatrix) {
			const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);

			const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
			const normal = this.normal.applyMatrix3(normalMatrix).normalize();
			this.constant = -referencePoint.dot(normal);
			return this;
		}

		translate(offset) {
			this.constant -= offset.dot(this.normal);
			return this;
		}

		equals(plane) {
			return plane.normal.equals(this.normal) && plane.constant === this.constant;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	Plane.prototype.isPlane = true;

	const _sphere$2 = /*@__PURE__*/new Sphere();

	const _vector$7 = /*@__PURE__*/new Vector3();

	class Frustum {
		constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
			this.planes = [p0, p1, p2, p3, p4, p5];
		}

		set(p0, p1, p2, p3, p4, p5) {
			const planes = this.planes;
			planes[0].copy(p0);
			planes[1].copy(p1);
			planes[2].copy(p2);
			planes[3].copy(p3);
			planes[4].copy(p4);
			planes[5].copy(p5);
			return this;
		}

		copy(frustum) {
			const planes = this.planes;

			for (let i = 0; i < 6; i++) {
				planes[i].copy(frustum.planes[i]);
			}

			return this;
		}

		setFromProjectionMatrix(m) {
			const planes = this.planes;
			const me = m.elements;
			const me0 = me[0],
						me1 = me[1],
						me2 = me[2],
						me3 = me[3];
			const me4 = me[4],
						me5 = me[5],
						me6 = me[6],
						me7 = me[7];
			const me8 = me[8],
						me9 = me[9],
						me10 = me[10],
						me11 = me[11];
			const me12 = me[12],
						me13 = me[13],
						me14 = me[14],
						me15 = me[15];
			planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
			planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
			planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
			planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
			planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
			planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
			return this;
		}

		intersectsObject(object) {
			const geometry = object.geometry;
			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);

			return this.intersectsSphere(_sphere$2);
		}

		intersectsSprite(sprite) {
			_sphere$2.center.set(0, 0, 0);

			_sphere$2.radius = 0.7071067811865476;

			_sphere$2.applyMatrix4(sprite.matrixWorld);

			return this.intersectsSphere(_sphere$2);
		}

		intersectsSphere(sphere) {
			const planes = this.planes;
			const center = sphere.center;
			const negRadius = -sphere.radius;

			for (let i = 0; i < 6; i++) {
				const distance = planes[i].distanceToPoint(center);

				if (distance < negRadius) {
					return false;
				}
			}

			return true;
		}

		intersectsBox(box) {
			const planes = this.planes;

			for (let i = 0; i < 6; i++) {
				const plane = planes[i]; // corner at max distance

				_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				if (plane.distanceToPoint(_vector$7) < 0) {
					return false;
				}
			}

			return true;
		}

		containsPoint(point) {
			const planes = this.planes;

			for (let i = 0; i < 6; i++) {
				if (planes[i].distanceToPoint(point) < 0) {
					return false;
				}
			}

			return true;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	function WebGLAnimation() {
		let context = null;
		let isAnimating = false;
		let animationLoop = null;
		let requestId = null;

		function onAnimationFrame(time, frame) {
			animationLoop(time, frame);
			requestId = context.requestAnimationFrame(onAnimationFrame);
		}

		return {
			start: function () {
				if (isAnimating === true) return;
				if (animationLoop === null) return;
				requestId = context.requestAnimationFrame(onAnimationFrame);
				isAnimating = true;
			},
			stop: function () {
				context.cancelAnimationFrame(requestId);
				isAnimating = false;
			},
			setAnimationLoop: function (callback) {
				animationLoop = callback;
			},
			setContext: function (value) {
				context = value;
			}
		};
	}

	function WebGLAttributes(gl, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;
		const buffers = new WeakMap();

		function createBuffer(attribute, bufferType) {
			const array = attribute.array;
			const usage = attribute.usage;
			const buffer = gl.createBuffer();
			gl.bindBuffer(bufferType, buffer);
			gl.bufferData(bufferType, array, usage);
			attribute.onUploadCallback();
			let type;

			if (array instanceof Float32Array) {
				type = gl.FLOAT;
			} else if (array instanceof Uint16Array) {
				if (attribute.isFloat16BufferAttribute) {
					if (isWebGL2) {
						type = gl.HALF_FLOAT;
					} else {
						throw new Error('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');
					}
				} else {
					type = gl.UNSIGNED_SHORT;
				}
			} else if (array instanceof Int16Array) {
				type = gl.SHORT;
			} else if (array instanceof Uint32Array) {
				type = gl.UNSIGNED_INT;
			} else if (array instanceof Int32Array) {
				type = gl.INT;
			} else if (array instanceof Int8Array) {
				type = gl.BYTE;
			} else if (array instanceof Uint8Array) {
				type = gl.UNSIGNED_BYTE;
			} else if (array instanceof Uint8ClampedArray) {
				type = gl.UNSIGNED_BYTE;
			} else {
				throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + array);
			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};
		}

		function updateBuffer(buffer, attribute, bufferType) {
			const array = attribute.array;
			const updateRange = attribute.updateRange;
			gl.bindBuffer(bufferType, buffer);

			if (updateRange.count === -1) {
				// Not using update ranges
				gl.bufferSubData(bufferType, 0, array);
			} else {
				if (isWebGL2) {
					gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
				} else {
					gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
				}

				updateRange.count = -1; // reset range
			}
		} //


		function get(attribute) {
			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
			return buffers.get(attribute);
		}

		function remove(attribute) {
			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
			const data = buffers.get(attribute);

			if (data) {
				gl.deleteBuffer(data.buffer);
				buffers.delete(attribute);
			}
		}

		function update(attribute, bufferType) {
			if (attribute.isGLBufferAttribute) {
				const cached = buffers.get(attribute);

				if (!cached || cached.version < attribute.version) {
					buffers.set(attribute, {
						buffer: attribute.buffer,
						type: attribute.type,
						bytesPerElement: attribute.elementSize,
						version: attribute.version
					});
				}

				return;
			}

			if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
			const data = buffers.get(attribute);

			if (data === undefined) {
				buffers.set(attribute, createBuffer(attribute, bufferType));
			} else if (data.version < attribute.version) {
				updateBuffer(data.buffer, attribute, bufferType);
				data.version = attribute.version;
			}
		}

		return {
			get: get,
			remove: remove,
			update: update
		};
	}

	class PlaneGeometry extends BufferGeometry {
		constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
			super();
			this.type = 'PlaneGeometry';
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
			const width_half = width / 2;
			const height_half = height / 2;
			const gridX = Math.floor(widthSegments);
			const gridY = Math.floor(heightSegments);
			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;
			const segment_width = width / gridX;
			const segment_height = height / gridY; //

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];

			for (let iy = 0; iy < gridY1; iy++) {
				const y = iy * segment_height - height_half;

				for (let ix = 0; ix < gridX1; ix++) {
					const x = ix * segment_width - width_half;
					vertices.push(x, -y, 0);
					normals.push(0, 0, 1);
					uvs.push(ix / gridX);
					uvs.push(1 - iy / gridY);
				}
			}

			for (let iy = 0; iy < gridY; iy++) {
				for (let ix = 0; ix < gridX; ix++) {
					const a = ix + gridX1 * iy;
					const b = ix + gridX1 * (iy + 1);
					const c = ix + 1 + gridX1 * (iy + 1);
					const d = ix + 1 + gridX1 * iy;
					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			}

			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

		static fromJSON(data) {
			return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
		}

	}

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";

	var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "vec3 transformed = vec3( position );";

	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

	var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

	var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

	var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

	var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

	var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

	var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

	var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

	var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

	var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

	var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

	var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";

	var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

	var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(		0, 1,		0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

	var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

	var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]\n\t\t#endif\n\t}\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tfloat texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

	var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

	var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

	var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

	var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

	var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";

	var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

	var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";

	var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

	var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

	var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

	var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

	var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t	texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t	f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t	texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t	f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

	var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(	1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,	1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,	1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

	var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";

	var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";

	var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

	var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

	const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
	const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
	const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
	const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

	const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
	const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

	const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
	const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
	const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
	const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

	const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";
	const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
	const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	const ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		alphatest_pars_fragment: alphatest_pars_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_common_pars_fragment: envmap_common_pars_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars_begin: lights_pars_begin,
		lights_toon_fragment: lights_toon_fragment,
		lights_toon_pars_fragment: lights_toon_pars_fragment,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphcolor_vertex: morphcolor_vertex,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normal_pars_fragment: normal_pars_fragment,
		normal_pars_vertex: normal_pars_vertex,
		normal_vertex: normal_vertex,
		normalmap_pars_fragment: normalmap_pars_fragment,
		clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
		clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
		clearcoat_pars_fragment: clearcoat_pars_fragment,
		output_fragment: output_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		transmission_fragment: transmission_fragment,
		transmission_pars_fragment: transmission_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,
		background_vert: vertex$g,
		background_frag: fragment$g,
		cube_vert: vertex$f,
		cube_frag: fragment$f,
		depth_vert: vertex$e,
		depth_frag: fragment$e,
		distanceRGBA_vert: vertex$d,
		distanceRGBA_frag: fragment$d,
		equirect_vert: vertex$c,
		equirect_frag: fragment$c,
		linedashed_vert: vertex$b,
		linedashed_frag: fragment$b,
		meshbasic_vert: vertex$a,
		meshbasic_frag: fragment$a,
		meshlambert_vert: vertex$9,
		meshlambert_frag: fragment$9,
		meshmatcap_vert: vertex$8,
		meshmatcap_frag: fragment$8,
		meshnormal_vert: vertex$7,
		meshnormal_frag: fragment$7,
		meshphong_vert: vertex$6,
		meshphong_frag: fragment$6,
		meshphysical_vert: vertex$5,
		meshphysical_frag: fragment$5,
		meshtoon_vert: vertex$4,
		meshtoon_frag: fragment$4,
		points_vert: vertex$3,
		points_frag: fragment$3,
		shadow_vert: vertex$2,
		shadow_frag: fragment$2,
		sprite_vert: vertex$1,
		sprite_frag: fragment$1
	};

	/**
	 * Uniforms library for shared webgl shaders
	 */

	const UniformsLib = {
		common: {
			diffuse: {
				value: new Color(0xffffff)
			},
			opacity: {
				value: 1.0
			},
			map: {
				value: null
			},
			uvTransform: {
				value: new Matrix3()
			},
			uv2Transform: {
				value: new Matrix3()
			},
			alphaMap: {
				value: null
			},
			alphaTest: {
				value: 0
			}
		},
		specularmap: {
			specularMap: {
				value: null
			}
		},
		envmap: {
			envMap: {
				value: null
			},
			flipEnvMap: {
				value: -1
			},
			reflectivity: {
				value: 1.0
			},
			// basic, lambert, phong
			ior: {
				value: 1.5
			},
			// standard, physical
			refractionRatio: {
				value: 0.98
			}
		},
		aomap: {
			aoMap: {
				value: null
			},
			aoMapIntensity: {
				value: 1
			}
		},
		lightmap: {
			lightMap: {
				value: null
			},
			lightMapIntensity: {
				value: 1
			}
		},
		emissivemap: {
			emissiveMap: {
				value: null
			}
		},
		bumpmap: {
			bumpMap: {
				value: null
			},
			bumpScale: {
				value: 1
			}
		},
		normalmap: {
			normalMap: {
				value: null
			},
			normalScale: {
				value: new Vector2(1, 1)
			}
		},
		displacementmap: {
			displacementMap: {
				value: null
			},
			displacementScale: {
				value: 1
			},
			displacementBias: {
				value: 0
			}
		},
		roughnessmap: {
			roughnessMap: {
				value: null
			}
		},
		metalnessmap: {
			metalnessMap: {
				value: null
			}
		},
		gradientmap: {
			gradientMap: {
				value: null
			}
		},
		fog: {
			fogDensity: {
				value: 0.00025
			},
			fogNear: {
				value: 1
			},
			fogFar: {
				value: 2000
			},
			fogColor: {
				value: new Color(0xffffff)
			}
		},
		lights: {
			ambientLightColor: {
				value: []
			},
			lightProbe: {
				value: []
			},
			directionalLights: {
				value: [],
				properties: {
					direction: {},
					color: {}
				}
			},
			directionalLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				}
			},
			directionalShadowMap: {
				value: []
			},
			directionalShadowMatrix: {
				value: []
			},
			spotLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {}
				}
			},
			spotLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				}
			},
			spotShadowMap: {
				value: []
			},
			spotShadowMatrix: {
				value: []
			},
			pointLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					decay: {},
					distance: {}
				}
			},
			pointLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {},
					shadowCameraNear: {},
					shadowCameraFar: {}
				}
			},
			pointShadowMap: {
				value: []
			},
			pointShadowMatrix: {
				value: []
			},
			hemisphereLights: {
				value: [],
				properties: {
					direction: {},
					skyColor: {},
					groundColor: {}
				}
			},
			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					width: {},
					height: {}
				}
			},
			ltc_1: {
				value: null
			},
			ltc_2: {
				value: null
			}
		},
		points: {
			diffuse: {
				value: new Color(0xffffff)
			},
			opacity: {
				value: 1.0
			},
			size: {
				value: 1.0
			},
			scale: {
				value: 1.0
			},
			map: {
				value: null
			},
			alphaMap: {
				value: null
			},
			alphaTest: {
				value: 0
			},
			uvTransform: {
				value: new Matrix3()
			}
		},
		sprite: {
			diffuse: {
				value: new Color(0xffffff)
			},
			opacity: {
				value: 1.0
			},
			center: {
				value: new Vector2(0.5, 0.5)
			},
			rotation: {
				value: 0.0
			},
			map: {
				value: null
			},
			alphaMap: {
				value: null
			},
			alphaTest: {
				value: 0
			},
			uvTransform: {
				value: new Matrix3()
			}
		}
	};

	const ShaderLib = {
		basic: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),
			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag
		},
		lambert: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				}
			}]),
			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag
		},
		phong: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				},
				specular: {
					value: new Color(0x111111)
				},
				shininess: {
					value: 30
				}
			}]),
			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag
		},
		standard: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				},
				roughness: {
					value: 1.0
				},
				metalness: {
					value: 0.0
				},
				envMapIntensity: {
					value: 1
				} // temporary

			}]),
			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag
		},
		toon: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {
				emissive: {
					value: new Color(0x000000)
				}
			}]),
			vertexShader: ShaderChunk.meshtoon_vert,
			fragmentShader: ShaderChunk.meshtoon_frag
		},
		matcap: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {
				matcap: {
					value: null
				}
			}]),
			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag
		},
		points: {
			uniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),
			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag
		},
		dashed: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {
				scale: {
					value: 1
				},
				dashSize: {
					value: 1
				},
				totalSize: {
					value: 2
				}
			}]),
			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag
		},
		depth: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),
			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag
		},
		normal: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {
				opacity: {
					value: 1.0
				}
			}]),
			vertexShader: ShaderChunk.meshnormal_vert,
			fragmentShader: ShaderChunk.meshnormal_frag
		},
		sprite: {
			uniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),
			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag
		},
		background: {
			uniforms: {
				uvTransform: {
					value: new Matrix3()
				},
				t2D: {
					value: null
				}
			},
			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag
		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */
		cube: {
			uniforms: mergeUniforms([UniformsLib.envmap, {
				opacity: {
					value: 1.0
				}
			}]),
			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag
		},
		equirect: {
			uniforms: {
				tEquirect: {
					value: null
				}
			},
			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag
		},
		distanceRGBA: {
			uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {
				referencePosition: {
					value: new Vector3()
				},
				nearDistance: {
					value: 1
				},
				farDistance: {
					value: 1000
				}
			}]),
			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag
		},
		shadow: {
			uniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {
				color: {
					value: new Color(0x00000)
				},
				opacity: {
					value: 1.0
				}
			}]),
			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag
		}
	};
	ShaderLib.physical = {
		uniforms: mergeUniforms([ShaderLib.standard.uniforms, {
			clearcoat: {
				value: 0
			},
			clearcoatMap: {
				value: null
			},
			clearcoatRoughness: {
				value: 0
			},
			clearcoatRoughnessMap: {
				value: null
			},
			clearcoatNormalScale: {
				value: new Vector2(1, 1)
			},
			clearcoatNormalMap: {
				value: null
			},
			sheen: {
				value: 0
			},
			sheenColor: {
				value: new Color(0x000000)
			},
			sheenColorMap: {
				value: null
			},
			sheenRoughness: {
				value: 1
			},
			sheenRoughnessMap: {
				value: null
			},
			transmission: {
				value: 0
			},
			transmissionMap: {
				value: null
			},
			transmissionSamplerSize: {
				value: new Vector2()
			},
			transmissionSamplerMap: {
				value: null
			},
			thickness: {
				value: 0
			},
			thicknessMap: {
				value: null
			},
			attenuationDistance: {
				value: 0
			},
			attenuationColor: {
				value: new Color(0x000000)
			},
			specularIntensity: {
				value: 1
			},
			specularIntensityMap: {
				value: null
			},
			specularColor: {
				value: new Color(1, 1, 1)
			},
			specularColorMap: {
				value: null
			}
		}]),
		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag
	};

	function WebGLBackground(renderer, cubemaps, state, objects, alpha, premultipliedAlpha) {
		const clearColor = new Color(0x000000);
		let clearAlpha = alpha === true ? 0 : 1;
		let planeMesh;
		let boxMesh;
		let currentBackground = null;
		let currentBackgroundVersion = 0;
		let currentTonemapping = null;

		function render(renderList, scene) {
			let forceClear = false;
			let background = scene.isScene === true ? scene.background : null;

			if (background && background.isTexture) {
				background = cubemaps.get(background);
			} // Ignore background in AR
			// TODO: Reconsider this.


			const xr = renderer.xr;
			const session = xr.getSession && xr.getSession();

			if (session && session.environmentBlendMode === 'additive') {
				background = null;
			}

			if (background === null) {
				setClear(clearColor, clearAlpha);
			} else if (background && background.isColor) {
				setClear(background, 1);
				forceClear = true;
			}

			if (renderer.autoClear || forceClear) {
				renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
			}

			if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
				if (boxMesh === undefined) {
					boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
						name: 'BackgroundCubeMaterial',
						uniforms: cloneUniforms(ShaderLib.cube.uniforms),
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					}));
					boxMesh.geometry.deleteAttribute('normal');
					boxMesh.geometry.deleteAttribute('uv');

					boxMesh.onBeforeRender = function (renderer, scene, camera) {
						this.matrixWorld.copyPosition(camera.matrixWorld);
					}; // enable code injection for non-built-in material


					Object.defineProperty(boxMesh.material, 'envMap', {
						get: function () {
							return this.uniforms.envMap.value;
						}
					});
					objects.update(boxMesh);
				}

				boxMesh.material.uniforms.envMap.value = background;
				boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;

				if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
					boxMesh.material.needsUpdate = true;
					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;
				} // push to the pre-sorted opaque render list


				renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
			} else if (background && background.isTexture) {
				if (planeMesh === undefined) {
					planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
						name: 'BackgroundMaterial',
						uniforms: cloneUniforms(ShaderLib.background.uniforms),
						vertexShader: ShaderLib.background.vertexShader,
						fragmentShader: ShaderLib.background.fragmentShader,
						side: FrontSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					}));
					planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material

					Object.defineProperty(planeMesh.material, 'map', {
						get: function () {
							return this.uniforms.t2D.value;
						}
					});
					objects.update(planeMesh);
				}

				planeMesh.material.uniforms.t2D.value = background;

				if (background.matrixAutoUpdate === true) {
					background.updateMatrix();
				}

				planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);

				if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
					planeMesh.material.needsUpdate = true;
					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;
				} // push to the pre-sorted opaque render list


				renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
			}
		}

		function setClear(color, alpha) {
			state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
		}

		return {
			getClearColor: function () {
				return clearColor;
			},
			setClearColor: function (color, alpha = 1) {
				clearColor.set(color);
				clearAlpha = alpha;
				setClear(clearColor, clearAlpha);
			},
			getClearAlpha: function () {
				return clearAlpha;
			},
			setClearAlpha: function (alpha) {
				clearAlpha = alpha;
				setClear(clearColor, clearAlpha);
			},
			render: render
		};
	}

	function WebGLBindingStates(gl, extensions, attributes, capabilities) {
		const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
		const extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');
		const vaoAvailable = capabilities.isWebGL2 || extension !== null;
		const bindingStates = {};
		const defaultState = createBindingState(null);
		let currentState = defaultState;

		function setup(object, material, program, geometry, index) {
			let updateBuffers = false;

			if (vaoAvailable) {
				const state = getBindingState(geometry, program, material);

				if (currentState !== state) {
					currentState = state;
					bindVertexArrayObject(currentState.object);
				}

				updateBuffers = needsUpdate(geometry, index);
				if (updateBuffers) saveCache(geometry, index);
			} else {
				const wireframe = material.wireframe === true;

				if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
					currentState.geometry = geometry.id;
					currentState.program = program.id;
					currentState.wireframe = wireframe;
					updateBuffers = true;
				}
			}

			if (object.isInstancedMesh === true) {
				updateBuffers = true;
			}

			if (index !== null) {
				attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
			}

			if (updateBuffers) {
				setupVertexAttributes(object, material, program, geometry);

				if (index !== null) {
					gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
				}
			}
		}

		function createVertexArrayObject() {
			if (capabilities.isWebGL2) return gl.createVertexArray();
			return extension.createVertexArrayOES();
		}

		function bindVertexArrayObject(vao) {
			if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
			return extension.bindVertexArrayOES(vao);
		}

		function deleteVertexArrayObject(vao) {
			if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
			return extension.deleteVertexArrayOES(vao);
		}

		function getBindingState(geometry, program, material) {
			const wireframe = material.wireframe === true;
			let programMap = bindingStates[geometry.id];

			if (programMap === undefined) {
				programMap = {};
				bindingStates[geometry.id] = programMap;
			}

			let stateMap = programMap[program.id];

			if (stateMap === undefined) {
				stateMap = {};
				programMap[program.id] = stateMap;
			}

			let state = stateMap[wireframe];

			if (state === undefined) {
				state = createBindingState(createVertexArrayObject());
				stateMap[wireframe] = state;
			}

			return state;
		}

		function createBindingState(vao) {
			const newAttributes = [];
			const enabledAttributes = [];
			const attributeDivisors = [];

			for (let i = 0; i < maxVertexAttributes; i++) {
				newAttributes[i] = 0;
				enabledAttributes[i] = 0;
				attributeDivisors[i] = 0;
			}

			return {
				// for backward compatibility on non-VAO support browser
				geometry: null,
				program: null,
				wireframe: false,
				newAttributes: newAttributes,
				enabledAttributes: enabledAttributes,
				attributeDivisors: attributeDivisors,
				object: vao,
				attributes: {},
				index: null
			};
		}

		function needsUpdate(geometry, index) {
			const cachedAttributes = currentState.attributes;
			const geometryAttributes = geometry.attributes;
			let attributesNum = 0;

			for (const key in geometryAttributes) {
				const cachedAttribute = cachedAttributes[key];
				const geometryAttribute = geometryAttributes[key];
				if (cachedAttribute === undefined) return true;
				if (cachedAttribute.attribute !== geometryAttribute) return true;
				if (cachedAttribute.data !== geometryAttribute.data) return true;
				attributesNum++;
			}

			if (currentState.attributesNum !== attributesNum) return true;
			if (currentState.index !== index) return true;
			return false;
		}

		function saveCache(geometry, index) {
			const cache = {};
			const attributes = geometry.attributes;
			let attributesNum = 0;

			for (const key in attributes) {
				const attribute = attributes[key];
				const data = {};
				data.attribute = attribute;

				if (attribute.data) {
					data.data = attribute.data;
				}

				cache[key] = data;
				attributesNum++;
			}

			currentState.attributes = cache;
			currentState.attributesNum = attributesNum;
			currentState.index = index;
		}

		function initAttributes() {
			const newAttributes = currentState.newAttributes;

			for (let i = 0, il = newAttributes.length; i < il; i++) {
				newAttributes[i] = 0;
			}
		}

		function enableAttribute(attribute) {
			enableAttributeAndDivisor(attribute, 0);
		}

		function enableAttributeAndDivisor(attribute, meshPerAttribute) {
			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;
			const attributeDivisors = currentState.attributeDivisors;
			newAttributes[attribute] = 1;

			if (enabledAttributes[attribute] === 0) {
				gl.enableVertexAttribArray(attribute);
				enabledAttributes[attribute] = 1;
			}

			if (attributeDivisors[attribute] !== meshPerAttribute) {
				const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
				extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
				attributeDivisors[attribute] = meshPerAttribute;
			}
		}

		function disableUnusedAttributes() {
			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;

			for (let i = 0, il = enabledAttributes.length; i < il; i++) {
				if (enabledAttributes[i] !== newAttributes[i]) {
					gl.disableVertexAttribArray(i);
					enabledAttributes[i] = 0;
				}
			}
		}

		function vertexAttribPointer(index, size, type, normalized, stride, offset) {
			if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {
				gl.vertexAttribIPointer(index, size, type, stride, offset);
			} else {
				gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
			}
		}

		function setupVertexAttributes(object, material, program, geometry) {
			if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
				if (extensions.get('ANGLE_instanced_arrays') === null) return;
			}

			initAttributes();
			const geometryAttributes = geometry.attributes;
			const programAttributes = program.getAttributes();
			const materialDefaultAttributeValues = material.defaultAttributeValues;

			for (const name in programAttributes) {
				const programAttribute = programAttributes[name];

				if (programAttribute.location >= 0) {
					let geometryAttribute = geometryAttributes[name];

					if (geometryAttribute === undefined) {
						if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
						if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
					}

					if (geometryAttribute !== undefined) {
						const normalized = geometryAttribute.normalized;
						const size = geometryAttribute.itemSize;
						const attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore

						if (attribute === undefined) continue;
						const buffer = attribute.buffer;
						const type = attribute.type;
						const bytesPerElement = attribute.bytesPerElement;

						if (geometryAttribute.isInterleavedBufferAttribute) {
							const data = geometryAttribute.data;
							const stride = data.stride;
							const offset = geometryAttribute.offset;

							if (data.isInstancedInterleavedBuffer) {
								for (let i = 0; i < programAttribute.locationSize; i++) {
									enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
								}

								if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
									geometry._maxInstanceCount = data.meshPerAttribute * data.count;
								}
							} else {
								for (let i = 0; i < programAttribute.locationSize; i++) {
									enableAttribute(programAttribute.location + i);
								}
							}

							gl.bindBuffer(gl.ARRAY_BUFFER, buffer);

							for (let i = 0; i < programAttribute.locationSize; i++) {
								vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement);
							}
						} else {
							if (geometryAttribute.isInstancedBufferAttribute) {
								for (let i = 0; i < programAttribute.locationSize; i++) {
									enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
								}

								if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
									geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
								}
							} else {
								for (let i = 0; i < programAttribute.locationSize; i++) {
									enableAttribute(programAttribute.location + i);
								}
							}

							gl.bindBuffer(gl.ARRAY_BUFFER, buffer);

							for (let i = 0; i < programAttribute.locationSize; i++) {
								vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement);
							}
						}
					} else if (materialDefaultAttributeValues !== undefined) {
						const value = materialDefaultAttributeValues[name];

						if (value !== undefined) {
							switch (value.length) {
								case 2:
									gl.vertexAttrib2fv(programAttribute.location, value);
									break;

								case 3:
									gl.vertexAttrib3fv(programAttribute.location, value);
									break;

								case 4:
									gl.vertexAttrib4fv(programAttribute.location, value);
									break;

								default:
									gl.vertexAttrib1fv(programAttribute.location, value);
							}
						}
					}
				}
			}

			disableUnusedAttributes();
		}

		function dispose() {
			reset();

			for (const geometryId in bindingStates) {
				const programMap = bindingStates[geometryId];

				for (const programId in programMap) {
					const stateMap = programMap[programId];

					for (const wireframe in stateMap) {
						deleteVertexArrayObject(stateMap[wireframe].object);
						delete stateMap[wireframe];
					}

					delete programMap[programId];
				}

				delete bindingStates[geometryId];
			}
		}

		function releaseStatesOfGeometry(geometry) {
			if (bindingStates[geometry.id] === undefined) return;
			const programMap = bindingStates[geometry.id];

			for (const programId in programMap) {
				const stateMap = programMap[programId];

				for (const wireframe in stateMap) {
					deleteVertexArrayObject(stateMap[wireframe].object);
					delete stateMap[wireframe];
				}

				delete programMap[programId];
			}

			delete bindingStates[geometry.id];
		}

		function releaseStatesOfProgram(program) {
			for (const geometryId in bindingStates) {
				const programMap = bindingStates[geometryId];
				if (programMap[program.id] === undefined) continue;
				const stateMap = programMap[program.id];

				for (const wireframe in stateMap) {
					deleteVertexArrayObject(stateMap[wireframe].object);
					delete stateMap[wireframe];
				}

				delete programMap[program.id];
			}
		}

		function reset() {
			resetDefaultState();
			if (currentState === defaultState) return;
			currentState = defaultState;
			bindVertexArrayObject(currentState.object);
		} // for backward-compatilibity


		function resetDefaultState() {
			defaultState.geometry = null;
			defaultState.program = null;
			defaultState.wireframe = false;
		}

		return {
			setup: setup,
			reset: reset,
			resetDefaultState: resetDefaultState,
			dispose: dispose,
			releaseStatesOfGeometry: releaseStatesOfGeometry,
			releaseStatesOfProgram: releaseStatesOfProgram,
			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			disableUnusedAttributes: disableUnusedAttributes
		};
	}

	function WebGLBufferRenderer(gl, extensions, info, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;
		let mode;

		function setMode(value) {
			mode = value;
		}

		function render(start, count) {
			gl.drawArrays(mode, start, count);
			info.update(count, mode, 1);
		}

		function renderInstances(start, count, primcount) {
			if (primcount === 0) return;
			let extension, methodName;

			if (isWebGL2) {
				extension = gl;
				methodName = 'drawArraysInstanced';
			} else {
				extension = extensions.get('ANGLE_instanced_arrays');
				methodName = 'drawArraysInstancedANGLE';

				if (extension === null) {
					console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
					return;
				}
			}

			extension[methodName](mode, start, count, primcount);
			info.update(count, mode, primcount);
		} //


		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;
	}

	function WebGLCapabilities(gl, extensions, parameters) {
		let maxAnisotropy;

		function getMaxAnisotropy() {
			if (maxAnisotropy !== undefined) return maxAnisotropy;

			if (extensions.has('EXT_texture_filter_anisotropic') === true) {
				const extension = extensions.get('EXT_texture_filter_anisotropic');
				maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
			} else {
				maxAnisotropy = 0;
			}

			return maxAnisotropy;
		}

		function getMaxPrecision(precision) {
			if (precision === 'highp') {
				if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
					return 'highp';
				}

				precision = 'mediump';
			}

			if (precision === 'mediump') {
				if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
					return 'mediump';
				}
			}

			return 'lowp';
		}

		const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
		let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		const maxPrecision = getMaxPrecision(precision);

		if (maxPrecision !== precision) {
			console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
			precision = maxPrecision;
		}

		const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');
		const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
		const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
		const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
		const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
		const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
		const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
		const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
		const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
		const vertexTextures = maxVertexTextures > 0;
		const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');
		const floatVertexTextures = vertexTextures && floatFragmentTextures;
		const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
		return {
			isWebGL2: isWebGL2,
			drawBuffers: drawBuffers,
			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,
			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,
			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,
			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,
			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,
			maxSamples: maxSamples
		};
	}

	function WebGLClipping(properties) {
		const scope = this;
		let globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false;
		const plane = new Plane(),
					viewNormalMatrix = new Matrix3(),
					uniform = {
			value: null,
			needsUpdate: false
		};
		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function (planes, enableLocalClipping, camera) {
			const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 || localClippingEnabled;
			localClippingEnabled = enableLocalClipping;
			globalState = projectPlanes(planes, camera, 0);
			numGlobalPlanes = planes.length;
			return enabled;
		};

		this.beginShadows = function () {
			renderingShadows = true;
			projectPlanes(null);
		};

		this.endShadows = function () {
			renderingShadows = false;
			resetGlobalState();
		};

		this.setState = function (material, camera, useCache) {
			const planes = material.clippingPlanes,
						clipIntersection = material.clipIntersection,
						clipShadows = material.clipShadows;
			const materialProperties = properties.get(material);

			if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
				// there's no local clipping
				if (renderingShadows) {
					// there's no global clipping
					projectPlanes(null);
				} else {
					resetGlobalState();
				}
			} else {
				const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
							lGlobal = nGlobal * 4;
				let dstArray = materialProperties.clippingState || null;
				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes(planes, camera, lGlobal, useCache);

				for (let i = 0; i !== lGlobal; ++i) {
					dstArray[i] = globalState[i];
				}

				materialProperties.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;
			}
		};

		function resetGlobalState() {
			if (uniform.value !== globalState) {
				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;
			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;
		}

		function projectPlanes(planes, camera, dstOffset, skipTransform) {
			const nPlanes = planes !== null ? planes.length : 0;
			let dstArray = null;

			if (nPlanes !== 0) {
				dstArray = uniform.value;

				if (skipTransform !== true || dstArray === null) {
					const flatSize = dstOffset + nPlanes * 4,
								viewMatrix = camera.matrixWorldInverse;
					viewNormalMatrix.getNormalMatrix(viewMatrix);

					if (dstArray === null || dstArray.length < flatSize) {
						dstArray = new Float32Array(flatSize);
					}

					for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
						plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
						plane.normal.toArray(dstArray, i4);
						dstArray[i4 + 3] = plane.constant;
					}
				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;
			}

			scope.numPlanes = nPlanes;
			scope.numIntersection = 0;
			return dstArray;
		}
	}

	function WebGLCubeMaps(renderer) {
		let cubemaps = new WeakMap();

		function mapTextureMapping(texture, mapping) {
			if (mapping === EquirectangularReflectionMapping) {
				texture.mapping = CubeReflectionMapping;
			} else if (mapping === EquirectangularRefractionMapping) {
				texture.mapping = CubeRefractionMapping;
			}

			return texture;
		}

		function get(texture) {
			if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
				const mapping = texture.mapping;

				if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
					if (cubemaps.has(texture)) {
						const cubemap = cubemaps.get(texture).texture;
						return mapTextureMapping(cubemap, texture.mapping);
					} else {
						const image = texture.image;

						if (image && image.height > 0) {
							const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
							renderTarget.fromEquirectangularTexture(renderer, texture);
							cubemaps.set(texture, renderTarget);
							texture.addEventListener('dispose', onTextureDispose);
							return mapTextureMapping(renderTarget.texture, texture.mapping);
						} else {
							// image not yet ready. try the conversion next frame
							return null;
						}
					}
				}
			}

			return texture;
		}

		function onTextureDispose(event) {
			const texture = event.target;
			texture.removeEventListener('dispose', onTextureDispose);
			const cubemap = cubemaps.get(texture);

			if (cubemap !== undefined) {
				cubemaps.delete(texture);
				cubemap.dispose();
			}
		}

		function dispose() {
			cubemaps = new WeakMap();
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	class OrthographicCamera extends Camera {
		constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {
			super();
			this.type = 'OrthographicCamera';
			this.zoom = 1;
			this.view = null;
			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;
			this.near = near;
			this.far = far;
			this.updateProjectionMatrix();
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;
			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign({}, source.view);
			return this;
		}

		setViewOffset(fullWidth, fullHeight, x, y, width, height) {
			if (this.view === null) {
				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};
			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;
			this.updateProjectionMatrix();
		}

		clearViewOffset() {
			if (this.view !== null) {
				this.view.enabled = false;
			}

			this.updateProjectionMatrix();
		}

		updateProjectionMatrix() {
			const dx = (this.right - this.left) / (2 * this.zoom);
			const dy = (this.top - this.bottom) / (2 * this.zoom);
			const cx = (this.right + this.left) / 2;
			const cy = (this.top + this.bottom) / 2;
			let left = cx - dx;
			let right = cx + dx;
			let top = cy + dy;
			let bottom = cy - dy;

			if (this.view !== null && this.view.enabled) {
				const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
				const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
				left += scaleW * this.view.offsetX;
				right = left + scaleW * this.view.width;
				top -= scaleH * this.view.offsetY;
				bottom = top - scaleH * this.view.height;
			}

			this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;
			if (this.view !== null) data.object.view = Object.assign({}, this.view);
			return data;
		}

	}

	OrthographicCamera.prototype.isOrthographicCamera = true;

	const LOD_MIN = 4; // The standard deviations (radians) associated with the extra mips. These are
	// chosen to approximate a Trowbridge-Reitz distribution function times the
	// geometric shadowing function. These sigma values squared must match the
	// variance #defines in cube_uv_reflection_fragment.glsl.js.

	const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582]; // The maximum length of the blur for loop. Smaller sigmas will use fewer
	// samples and exit early, but not recompile the shader.

	const MAX_SAMPLES = 20;

	const _flatCamera = /*@__PURE__*/new OrthographicCamera();

	const _clearColor = /*@__PURE__*/new Color();

	let _oldTarget = null; // Golden Ratio

	const PHI = (1 + Math.sqrt(5)) / 2;
	const INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the
	// same axis), used as axis directions evenly spread on a sphere.

	const _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];
	/**
	 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
	 * (PMREM) from a cubeMap environment texture. This allows different levels of
	 * blur to be quickly accessed based on material roughness. It is packed into a
	 * special CubeUV format that allows us to perform custom interpolation so that
	 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
	 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
	 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
	 * higher roughness levels. In this way we maintain resolution to smoothly
	 * interpolate diffuse lighting while limiting sampling computation.
	 *
	 * Paper: Fast, Accurate Image-Based Lighting
	 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
	*/

	class PMREMGenerator {
		constructor(renderer) {
			this._renderer = renderer;
			this._pingPongRenderTarget = null;
			this._lodMax = 0;
			this._cubeSize = 0;
			this._lodPlanes = [];
			this._sizeLods = [];
			this._sigmas = [];
			this._blurMaterial = null;
			this._cubemapMaterial = null;
			this._equirectMaterial = null;

			this._compileMaterial(this._blurMaterial);
		}
		/**
		 * Generates a PMREM from a supplied Scene, which can be faster than using an
		 * image if networking bandwidth is low. Optional sigma specifies a blur radius
		 * in radians to be applied to the scene before PMREM generation. Optional near
		 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
		 * is placed at the origin).
		 */


		fromScene(scene, sigma = 0, near = 0.1, far = 100) {
			_oldTarget = this._renderer.getRenderTarget();

			this._setSize(256);

			const cubeUVRenderTarget = this._allocateTargets();

			cubeUVRenderTarget.depthBuffer = true;

			this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);

			if (sigma > 0) {
				this._blur(cubeUVRenderTarget, 0, 0, sigma);
			}

			this._applyPMREM(cubeUVRenderTarget);

			this._cleanup(cubeUVRenderTarget);

			return cubeUVRenderTarget;
		}
		/**
		 * Generates a PMREM from an equirectangular texture, which can be either LDR
		 * or HDR. The ideal input image size is 1k (1024 x 512),
		 * as this matches best with the 256 x 256 cubemap output.
		 */


		fromEquirectangular(equirectangular, renderTarget = null) {
			return this._fromTexture(equirectangular, renderTarget);
		}
		/**
		 * Generates a PMREM from an cubemap texture, which can be either LDR
		 * or HDR. The ideal input cube size is 256 x 256,
		 * as this matches best with the 256 x 256 cubemap output.
		 */


		fromCubemap(cubemap, renderTarget = null) {
			return this._fromTexture(cubemap, renderTarget);
		}
		/**
		 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */


		compileCubemapShader() {
			if (this._cubemapMaterial === null) {
				this._cubemapMaterial = _getCubemapMaterial();

				this._compileMaterial(this._cubemapMaterial);
			}
		}
		/**
		 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */


		compileEquirectangularShader() {
			if (this._equirectMaterial === null) {
				this._equirectMaterial = _getEquirectMaterial();

				this._compileMaterial(this._equirectMaterial);
			}
		}
		/**
		 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
		 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
		 * one of them will cause any others to also become unusable.
		 */


		dispose() {
			this._dispose();

			if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
			if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
		} // private interface


		_setSize(cubeSize) {
			this._lodMax = Math.floor(Math.log2(cubeSize));
			this._cubeSize = Math.pow(2, this._lodMax);
		}

		_dispose() {
			this._blurMaterial.dispose();

			if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();

			for (let i = 0; i < this._lodPlanes.length; i++) {
				this._lodPlanes[i].dispose();
			}
		}

		_cleanup(outputTarget) {
			this._renderer.setRenderTarget(_oldTarget);

			outputTarget.scissorTest = false;

			_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
		}

		_fromTexture(texture, renderTarget) {
			if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
				this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
			} else {
				// Equirectangular
				this._setSize(texture.image.width / 4);
			}

			_oldTarget = this._renderer.getRenderTarget();

			const cubeUVRenderTarget = renderTarget || this._allocateTargets();

			this._textureToCubeUV(texture, cubeUVRenderTarget);

			this._applyPMREM(cubeUVRenderTarget);

			this._cleanup(cubeUVRenderTarget);

			return cubeUVRenderTarget;
		}

		_allocateTargets() {
			const width = 3 * Math.max(this._cubeSize, 16 * 7);
			const height = 4 * this._cubeSize - 32;
			const params = {
				magFilter: LinearFilter,
				minFilter: LinearFilter,
				generateMipmaps: false,
				type: HalfFloatType,
				format: RGBAFormat,
				encoding: LinearEncoding,
				depthBuffer: false
			};

			const cubeUVRenderTarget = _createRenderTarget(width, height, params);

			if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width) {
				if (this._pingPongRenderTarget !== null) {
					this._dispose();
				}

				this._pingPongRenderTarget = _createRenderTarget(width, height, params);
				const {
					_lodMax
				} = this;
				({
					sizeLods: this._sizeLods,
					lodPlanes: this._lodPlanes,
					sigmas: this._sigmas
				} = _createPlanes(_lodMax));
				this._blurMaterial = _getBlurShader(_lodMax, width, height);
			}

			return cubeUVRenderTarget;
		}

		_compileMaterial(material) {
			const tmpMesh = new Mesh(this._lodPlanes[0], material);

			this._renderer.compile(tmpMesh, _flatCamera);
		}

		_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
			const fov = 90;
			const aspect = 1;
			const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);
			const upSign = [1, -1, 1, 1, 1, 1];
			const forwardSign = [1, 1, 1, -1, -1, -1];
			const renderer = this._renderer;
			const originalAutoClear = renderer.autoClear;
			const toneMapping = renderer.toneMapping;
			renderer.getClearColor(_clearColor);
			renderer.toneMapping = NoToneMapping;
			renderer.autoClear = false;
			const backgroundMaterial = new MeshBasicMaterial({
				name: 'PMREM.Background',
				side: BackSide,
				depthWrite: false,
				depthTest: false
			});
			const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
			let useSolidColor = false;
			const background = scene.background;

			if (background) {
				if (background.isColor) {
					backgroundMaterial.color.copy(background);
					scene.background = null;
					useSolidColor = true;
				}
			} else {
				backgroundMaterial.color.copy(_clearColor);
				useSolidColor = true;
			}

			for (let i = 0; i < 6; i++) {
				const col = i % 3;

				if (col === 0) {
					cubeCamera.up.set(0, upSign[i], 0);
					cubeCamera.lookAt(forwardSign[i], 0, 0);
				} else if (col === 1) {
					cubeCamera.up.set(0, 0, upSign[i]);
					cubeCamera.lookAt(0, forwardSign[i], 0);
				} else {
					cubeCamera.up.set(0, upSign[i], 0);
					cubeCamera.lookAt(0, 0, forwardSign[i]);
				}

				const size = this._cubeSize;

				_setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);

				renderer.setRenderTarget(cubeUVRenderTarget);

				if (useSolidColor) {
					renderer.render(backgroundBox, cubeCamera);
				}

				renderer.render(scene, cubeCamera);
			}

			backgroundBox.geometry.dispose();
			backgroundBox.material.dispose();
			renderer.toneMapping = toneMapping;
			renderer.autoClear = originalAutoClear;
			scene.background = background;
		}

		_textureToCubeUV(texture, cubeUVRenderTarget) {
			const renderer = this._renderer;
			const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;

			if (isCubeTexture) {
				if (this._cubemapMaterial === null) {
					this._cubemapMaterial = _getCubemapMaterial();
				}

				this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
			} else {
				if (this._equirectMaterial === null) {
					this._equirectMaterial = _getEquirectMaterial();
				}
			}

			const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
			const mesh = new Mesh(this._lodPlanes[0], material);
			const uniforms = material.uniforms;
			uniforms['envMap'].value = texture;
			const size = this._cubeSize;

			_setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);

			renderer.setRenderTarget(cubeUVRenderTarget);
			renderer.render(mesh, _flatCamera);
		}

		_applyPMREM(cubeUVRenderTarget) {
			const renderer = this._renderer;
			const autoClear = renderer.autoClear;
			renderer.autoClear = false;

			for (let i = 1; i < this._lodPlanes.length; i++) {
				const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
				const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];

				this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
			}

			renderer.autoClear = autoClear;
		}
		/**
		 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
		 * vertically and horizontally, but this breaks down on a cube. Here we apply
		 * the blur latitudinally (around the poles), and then longitudinally (towards
		 * the poles) to approximate the orthogonally-separable blur. It is least
		 * accurate at the poles, but still does a decent job.
		 */


		_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
			const pingPongRenderTarget = this._pingPongRenderTarget;

			this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);

			this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
		}

		_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
			const renderer = this._renderer;
			const blurMaterial = this._blurMaterial;

			if (direction !== 'latitudinal' && direction !== 'longitudinal') {
				console.error('blur direction must be either latitudinal or longitudinal!');
			} // Number of standard deviations at which to cut off the discrete approximation.


			const STANDARD_DEVIATIONS = 3;
			const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
			const blurUniforms = blurMaterial.uniforms;
			const pixels = this._sizeLods[lodIn] - 1;
			const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
			const sigmaPixels = sigmaRadians / radiansPerPixel;
			const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;

			if (samples > MAX_SAMPLES) {
				console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
			}

			const weights = [];
			let sum = 0;

			for (let i = 0; i < MAX_SAMPLES; ++i) {
				const x = i / sigmaPixels;
				const weight = Math.exp(-x * x / 2);
				weights.push(weight);

				if (i === 0) {
					sum += weight;
				} else if (i < samples) {
					sum += 2 * weight;
				}
			}

			for (let i = 0; i < weights.length; i++) {
				weights[i] = weights[i] / sum;
			}

			blurUniforms['envMap'].value = targetIn.texture;
			blurUniforms['samples'].value = samples;
			blurUniforms['weights'].value = weights;
			blurUniforms['latitudinal'].value = direction === 'latitudinal';

			if (poleAxis) {
				blurUniforms['poleAxis'].value = poleAxis;
			}

			const {
				_lodMax
			} = this;
			blurUniforms['dTheta'].value = radiansPerPixel;
			blurUniforms['mipInt'].value = _lodMax - lodIn;
			const outputSize = this._sizeLods[lodOut];
			const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
			const y = 4 * (this._cubeSize - outputSize);

			_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);

			renderer.setRenderTarget(targetOut);
			renderer.render(blurMesh, _flatCamera);
		}

	}

	function _createPlanes(lodMax) {
		const lodPlanes = [];
		const sizeLods = [];
		const sigmas = [];
		let lod = lodMax;
		const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

		for (let i = 0; i < totalLods; i++) {
			const sizeLod = Math.pow(2, lod);
			sizeLods.push(sizeLod);
			let sigma = 1.0 / sizeLod;

			if (i > lodMax - LOD_MIN) {
				sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
			} else if (i === 0) {
				sigma = 0;
			}

			sigmas.push(sigma);
			const texelSize = 1.0 / (sizeLod - 1);
			const min = -texelSize / 2;
			const max = 1 + texelSize / 2;
			const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
			const cubeFaces = 6;
			const vertices = 6;
			const positionSize = 3;
			const uvSize = 2;
			const faceIndexSize = 1;
			const position = new Float32Array(positionSize * vertices * cubeFaces);
			const uv = new Float32Array(uvSize * vertices * cubeFaces);
			const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);

			for (let face = 0; face < cubeFaces; face++) {
				const x = face % 3 * 2 / 3 - 1;
				const y = face > 2 ? 0 : -1;
				const coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];
				position.set(coordinates, positionSize * vertices * face);
				uv.set(uv1, uvSize * vertices * face);
				const fill = [face, face, face, face, face, face];
				faceIndex.set(fill, faceIndexSize * vertices * face);
			}

			const planes = new BufferGeometry();
			planes.setAttribute('position', new BufferAttribute(position, positionSize));
			planes.setAttribute('uv', new BufferAttribute(uv, uvSize));
			planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));
			lodPlanes.push(planes);

			if (lod > LOD_MIN) {
				lod--;
			}
		}

		return {
			lodPlanes,
			sizeLods,
			sigmas
		};
	}

	function _createRenderTarget(width, height, params) {
		const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
		cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
		cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
		cubeUVRenderTarget.scissorTest = true;
		return cubeUVRenderTarget;
	}

	function _setViewport(target, x, y, width, height) {
		target.viewport.set(x, y, width, height);
		target.scissor.set(x, y, width, height);
	}

	function _getBlurShader(lodMax, width, height) {
		const weights = new Float32Array(MAX_SAMPLES);
		const poleAxis = new Vector3(0, 1, 0);
		const shaderMaterial = new ShaderMaterial({
			name: 'SphericalGaussianBlur',
			defines: {
				'n': MAX_SAMPLES,
				'CUBEUV_TEXEL_WIDTH': 1.0 / width,
				'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
				'CUBEUV_MAX_MIP': `${lodMax}.0`
			},
			uniforms: {
				'envMap': {
					value: null
				},
				'samples': {
					value: 1
				},
				'weights': {
					value: weights
				},
				'latitudinal': {
					value: false
				},
				'dTheta': {
					value: 0
				},
				'mipInt': {
					value: 0
				},
				'poleAxis': {
					value: poleAxis
				}
			},
			vertexShader: _getCommonVertexShader(),
			fragmentShader:
			/* glsl */
			`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
			blending: NoBlending,
			depthTest: false,
			depthWrite: false
		});
		return shaderMaterial;
	}

	function _getEquirectMaterial() {
		return new ShaderMaterial({
			name: 'EquirectangularToCubeUV',
			uniforms: {
				'envMap': {
					value: null
				}
			},
			vertexShader: _getCommonVertexShader(),
			fragmentShader:
			/* glsl */
			`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
			blending: NoBlending,
			depthTest: false,
			depthWrite: false
		});
	}

	function _getCubemapMaterial() {
		return new ShaderMaterial({
			name: 'CubemapToCubeUV',
			uniforms: {
				'envMap': {
					value: null
				},
				'flipEnvMap': {
					value: -1
				}
			},
			vertexShader: _getCommonVertexShader(),
			fragmentShader:
			/* glsl */
			`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
			blending: NoBlending,
			depthTest: false,
			depthWrite: false
		});
	}

	function _getCommonVertexShader() {
		return (
			/* glsl */
			`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
		);
	}

	function WebGLCubeUVMaps(renderer) {
		let cubeUVmaps = new WeakMap();
		let pmremGenerator = null;

		function get(texture) {
			if (texture && texture.isTexture) {
				const mapping = texture.mapping;
				const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
				const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping; // equirect/cube map to cubeUV conversion

				if (isEquirectMap || isCubeMap) {
					if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
						texture.needsPMREMUpdate = false;
						let renderTarget = cubeUVmaps.get(texture);
						if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
						renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
						cubeUVmaps.set(texture, renderTarget);
						return renderTarget.texture;
					} else {
						if (cubeUVmaps.has(texture)) {
							return cubeUVmaps.get(texture).texture;
						} else {
							const image = texture.image;

							if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
								if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
								const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
								cubeUVmaps.set(texture, renderTarget);
								texture.addEventListener('dispose', onTextureDispose);
								return renderTarget.texture;
							} else {
								// image not yet ready. try the conversion next frame
								return null;
							}
						}
					}
				}
			}

			return texture;
		}

		function isCubeTextureComplete(image) {
			let count = 0;
			const length = 6;

			for (let i = 0; i < length; i++) {
				if (image[i] !== undefined) count++;
			}

			return count === length;
		}

		function onTextureDispose(event) {
			const texture = event.target;
			texture.removeEventListener('dispose', onTextureDispose);
			const cubemapUV = cubeUVmaps.get(texture);

			if (cubemapUV !== undefined) {
				cubeUVmaps.delete(texture);
				cubemapUV.dispose();
			}
		}

		function dispose() {
			cubeUVmaps = new WeakMap();

			if (pmremGenerator !== null) {
				pmremGenerator.dispose();
				pmremGenerator = null;
			}
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	function WebGLExtensions(gl) {
		const extensions = {};

		function getExtension(name) {
			if (extensions[name] !== undefined) {
				return extensions[name];
			}

			let extension;

			switch (name) {
				case 'WEBGL_depth_texture':
					extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
					break;

				default:
					extension = gl.getExtension(name);
			}

			extensions[name] = extension;
			return extension;
		}

		return {
			has: function (name) {
				return getExtension(name) !== null;
			},
			init: function (capabilities) {
				if (capabilities.isWebGL2) {
					getExtension('EXT_color_buffer_float');
				} else {
					getExtension('WEBGL_depth_texture');
					getExtension('OES_texture_float');
					getExtension('OES_texture_half_float');
					getExtension('OES_texture_half_float_linear');
					getExtension('OES_standard_derivatives');
					getExtension('OES_element_index_uint');
					getExtension('OES_vertex_array_object');
					getExtension('ANGLE_instanced_arrays');
				}

				getExtension('OES_texture_float_linear');
				getExtension('EXT_color_buffer_half_float');
				getExtension('WEBGL_multisampled_render_to_texture');
			},
			get: function (name) {
				const extension = getExtension(name);

				if (extension === null) {
					console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
				}

				return extension;
			}
		};
	}

	function WebGLGeometries(gl, attributes, info, bindingStates) {
		const geometries = {};
		const wireframeAttributes = new WeakMap();

		function onGeometryDispose(event) {
			const geometry = event.target;

			if (geometry.index !== null) {
				attributes.remove(geometry.index);
			}

			for (const name in geometry.attributes) {
				attributes.remove(geometry.attributes[name]);
			}

			geometry.removeEventListener('dispose', onGeometryDispose);
			delete geometries[geometry.id];
			const attribute = wireframeAttributes.get(geometry);

			if (attribute) {
				attributes.remove(attribute);
				wireframeAttributes.delete(geometry);
			}

			bindingStates.releaseStatesOfGeometry(geometry);

			if (geometry.isInstancedBufferGeometry === true) {
				delete geometry._maxInstanceCount;
			} //


			info.memory.geometries--;
		}

		function get(object, geometry) {
			if (geometries[geometry.id] === true) return geometry;
			geometry.addEventListener('dispose', onGeometryDispose);
			geometries[geometry.id] = true;
			info.memory.geometries++;
			return geometry;
		}

		function update(geometry) {
			const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.

			for (const name in geometryAttributes) {
				attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
			} // morph targets


			const morphAttributes = geometry.morphAttributes;

			for (const name in morphAttributes) {
				const array = morphAttributes[name];

				for (let i = 0, l = array.length; i < l; i++) {
					attributes.update(array[i], gl.ARRAY_BUFFER);
				}
			}
		}

		function updateWireframeAttribute(geometry) {
			const indices = [];
			const geometryIndex = geometry.index;
			const geometryPosition = geometry.attributes.position;
			let version = 0;

			if (geometryIndex !== null) {
				const array = geometryIndex.array;
				version = geometryIndex.version;

				for (let i = 0, l = array.length; i < l; i += 3) {
					const a = array[i + 0];
					const b = array[i + 1];
					const c = array[i + 2];
					indices.push(a, b, b, c, c, a);
				}
			} else {
				const array = geometryPosition.array;
				version = geometryPosition.version;

				for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
					const a = i + 0;
					const b = i + 1;
					const c = i + 2;
					indices.push(a, b, b, c, c, a);
				}
			}

			const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
			attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates
			//

			const previousAttribute = wireframeAttributes.get(geometry);
			if (previousAttribute) attributes.remove(previousAttribute); //

			wireframeAttributes.set(geometry, attribute);
		}

		function getWireframeAttribute(geometry) {
			const currentAttribute = wireframeAttributes.get(geometry);

			if (currentAttribute) {
				const geometryIndex = geometry.index;

				if (geometryIndex !== null) {
					// if the attribute is obsolete, create a new one
					if (currentAttribute.version < geometryIndex.version) {
						updateWireframeAttribute(geometry);
					}
				}
			} else {
				updateWireframeAttribute(geometry);
			}

			return wireframeAttributes.get(geometry);
		}

		return {
			get: get,
			update: update,
			getWireframeAttribute: getWireframeAttribute
		};
	}

	function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;
		let mode;

		function setMode(value) {
			mode = value;
		}

		let type, bytesPerElement;

		function setIndex(value) {
			type = value.type;
			bytesPerElement = value.bytesPerElement;
		}

		function render(start, count) {
			gl.drawElements(mode, count, type, start * bytesPerElement);
			info.update(count, mode, 1);
		}

		function renderInstances(start, count, primcount) {
			if (primcount === 0) return;
			let extension, methodName;

			if (isWebGL2) {
				extension = gl;
				methodName = 'drawElementsInstanced';
			} else {
				extension = extensions.get('ANGLE_instanced_arrays');
				methodName = 'drawElementsInstancedANGLE';

				if (extension === null) {
					console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
					return;
				}
			}

			extension[methodName](mode, count, type, start * bytesPerElement, primcount);
			info.update(count, mode, primcount);
		} //


		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;
	}

	function WebGLInfo(gl) {
		const memory = {
			geometries: 0,
			textures: 0
		};
		const render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update(count, mode, instanceCount) {
			render.calls++;

			switch (mode) {
				case gl.TRIANGLES:
					render.triangles += instanceCount * (count / 3);
					break;

				case gl.LINES:
					render.lines += instanceCount * (count / 2);
					break;

				case gl.LINE_STRIP:
					render.lines += instanceCount * (count - 1);
					break;

				case gl.LINE_LOOP:
					render.lines += instanceCount * count;
					break;

				case gl.POINTS:
					render.points += instanceCount * count;
					break;

				default:
					console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
					break;
			}
		}

		function reset() {
			render.frame++;
			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;
		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};
	}

	function numericalSort(a, b) {
		return a[0] - b[0];
	}

	function absNumericalSort(a, b) {
		return Math.abs(b[1]) - Math.abs(a[1]);
	}

	function denormalize(morph, attribute) {
		let denominator = 1;
		const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;
		if (array instanceof Int8Array) denominator = 127;else if (array instanceof Int16Array) denominator = 32767;else if (array instanceof Int32Array) denominator = 2147483647;else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);
		morph.divideScalar(denominator);
	}

	function WebGLMorphtargets(gl, capabilities, textures) {
		const influencesList = {};
		const morphInfluences = new Float32Array(8);
		const morphTextures = new WeakMap();
		const morph = new Vector4();
		const workInfluences = [];

		for (let i = 0; i < 8; i++) {
			workInfluences[i] = [i, 0];
		}

		function update(object, geometry, material, program) {
			const objectInfluences = object.morphTargetInfluences;

			if (capabilities.isWebGL2 === true) {
				// instead of using attributes, the WebGL 2 code path encodes morph targets
				// into an array of data textures. Each layer represents a single morph target.
				const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
				const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
				let entry = morphTextures.get(geometry);

				if (entry === undefined || entry.count !== morphTargetsCount) {
					if (entry !== undefined) entry.texture.dispose();
					const hasMorphPosition = geometry.morphAttributes.position !== undefined;
					const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
					const hasMorphColors = geometry.morphAttributes.color !== undefined;
					const morphTargets = geometry.morphAttributes.position || [];
					const morphNormals = geometry.morphAttributes.normal || [];
					const morphColors = geometry.morphAttributes.color || [];
					let vertexDataCount = 0;
					if (hasMorphPosition === true) vertexDataCount = 1;
					if (hasMorphNormals === true) vertexDataCount = 2;
					if (hasMorphColors === true) vertexDataCount = 3;
					let width = geometry.attributes.position.count * vertexDataCount;
					let height = 1;

					if (width > capabilities.maxTextureSize) {
						height = Math.ceil(width / capabilities.maxTextureSize);
						width = capabilities.maxTextureSize;
					}

					const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
					const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
					texture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)

					texture.type = FloatType;
					texture.needsUpdate = true; // fill buffer

					const vertexDataStride = vertexDataCount * 4;

					for (let i = 0; i < morphTargetsCount; i++) {
						const morphTarget = morphTargets[i];
						const morphNormal = morphNormals[i];
						const morphColor = morphColors[i];
						const offset = width * height * 4 * i;

						for (let j = 0; j < morphTarget.count; j++) {
							const stride = j * vertexDataStride;

							if (hasMorphPosition === true) {
								morph.fromBufferAttribute(morphTarget, j);
								if (morphTarget.normalized === true) denormalize(morph, morphTarget);
								buffer[offset + stride + 0] = morph.x;
								buffer[offset + stride + 1] = morph.y;
								buffer[offset + stride + 2] = morph.z;
								buffer[offset + stride + 3] = 0;
							}

							if (hasMorphNormals === true) {
								morph.fromBufferAttribute(morphNormal, j);
								if (morphNormal.normalized === true) denormalize(morph, morphNormal);
								buffer[offset + stride + 4] = morph.x;
								buffer[offset + stride + 5] = morph.y;
								buffer[offset + stride + 6] = morph.z;
								buffer[offset + stride + 7] = 0;
							}

							if (hasMorphColors === true) {
								morph.fromBufferAttribute(morphColor, j);
								if (morphColor.normalized === true) denormalize(morph, morphNormal);
								buffer[offset + stride + 8] = morph.x;
								buffer[offset + stride + 9] = morph.y;
								buffer[offset + stride + 10] = morph.z;
								buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
							}
						}
					}

					entry = {
						count: morphTargetsCount,
						texture: texture,
						size: new Vector2(width, height)
					};
					morphTextures.set(geometry, entry);

					function disposeTexture() {
						texture.dispose();
						morphTextures.delete(geometry);
						geometry.removeEventListener('dispose', disposeTexture);
					}

					geometry.addEventListener('dispose', disposeTexture);
				} //


				let morphInfluencesSum = 0;

				for (let i = 0; i < objectInfluences.length; i++) {
					morphInfluencesSum += objectInfluences[i];
				}

				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
				program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
				program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);
				program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);
				program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);
			} else {
				// When object doesn't have morph target influences defined, we treat it as a 0-length array
				// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
				const length = objectInfluences === undefined ? 0 : objectInfluences.length;
				let influences = influencesList[geometry.id];

				if (influences === undefined || influences.length !== length) {
					// initialise list
					influences = [];

					for (let i = 0; i < length; i++) {
						influences[i] = [i, 0];
					}

					influencesList[geometry.id] = influences;
				} // Collect influences


				for (let i = 0; i < length; i++) {
					const influence = influences[i];
					influence[0] = i;
					influence[1] = objectInfluences[i];
				}

				influences.sort(absNumericalSort);

				for (let i = 0; i < 8; i++) {
					if (i < length && influences[i][1]) {
						workInfluences[i][0] = influences[i][0];
						workInfluences[i][1] = influences[i][1];
					} else {
						workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
						workInfluences[i][1] = 0;
					}
				}

				workInfluences.sort(numericalSort);
				const morphTargets = geometry.morphAttributes.position;
				const morphNormals = geometry.morphAttributes.normal;
				let morphInfluencesSum = 0;

				for (let i = 0; i < 8; i++) {
					const influence = workInfluences[i];
					const index = influence[0];
					const value = influence[1];

					if (index !== Number.MAX_SAFE_INTEGER && value) {
						if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {
							geometry.setAttribute('morphTarget' + i, morphTargets[index]);
						}

						if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {
							geometry.setAttribute('morphNormal' + i, morphNormals[index]);
						}

						morphInfluences[i] = value;
						morphInfluencesSum += value;
					} else {
						if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {
							geometry.deleteAttribute('morphTarget' + i);
						}

						if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {
							geometry.deleteAttribute('morphNormal' + i);
						}

						morphInfluences[i] = 0;
					}
				} // GLSL shader uses formula baseinfluence * base + sum(target * influence)
				// This allows us to switch between absolute morphs and relative morphs without changing shader code
				// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)


				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
				program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
				program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
			}
		}

		return {
			update: update
		};
	}

	function WebGLObjects(gl, geometries, attributes, info) {
		let updateMap = new WeakMap();

		function update(object) {
			const frame = info.render.frame;
			const geometry = object.geometry;
			const buffergeometry = geometries.get(object, geometry); // Update once per frame

			if (updateMap.get(buffergeometry) !== frame) {
				geometries.update(buffergeometry);
				updateMap.set(buffergeometry, frame);
			}

			if (object.isInstancedMesh) {
				if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {
					object.addEventListener('dispose', onInstancedMeshDispose);
				}

				attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);

				if (object.instanceColor !== null) {
					attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
				}
			}

			return buffergeometry;
		}

		function dispose() {
			updateMap = new WeakMap();
		}

		function onInstancedMeshDispose(event) {
			const instancedMesh = event.target;
			instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
			attributes.remove(instancedMesh.instanceMatrix);
			if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
		}

		return {
			update: update,
			dispose: dispose
		};
	}

	/**
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *		the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with	name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */
	const emptyTexture = new Texture();
	const emptyArrayTexture = new DataArrayTexture();
	const empty3dTexture = new Data3DTexture();
	const emptyCubeTexture = new CubeTexture(); // --- Utilities ---
	// Array Caches (provide typed arrays for temporary by size)

	const arrayCacheF32 = [];
	const arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms

	const mat4array = new Float32Array(16);
	const mat3array = new Float32Array(9);
	const mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices

	function flatten(array, nBlocks, blockSize) {
		const firstElem = array[0];
		if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		const n = nBlocks * blockSize;
		let r = arrayCacheF32[n];

		if (r === undefined) {
			r = new Float32Array(n);
			arrayCacheF32[n] = r;
		}

		if (nBlocks !== 0) {
			firstElem.toArray(r, 0);

			for (let i = 1, offset = 0; i !== nBlocks; ++i) {
				offset += blockSize;
				array[i].toArray(r, offset);
			}
		}

		return r;
	}

	function arraysEqual(a, b) {
		if (a.length !== b.length) return false;

		for (let i = 0, l = a.length; i < l; i++) {
			if (a[i] !== b[i]) return false;
		}

		return true;
	}

	function copyArray(a, b) {
		for (let i = 0, l = b.length; i < l; i++) {
			a[i] = b[i];
		}
	} // Texture unit allocation


	function allocTexUnits(textures, n) {
		let r = arrayCacheI32[n];

		if (r === undefined) {
			r = new Int32Array(n);
			arrayCacheI32[n] = r;
		}

		for (let i = 0; i !== n; ++i) {
			r[i] = textures.allocateTextureUnit();
		}

		return r;
	} // --- Setters ---
	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.
	// Single scalar


	function setValueV1f(gl, v) {
		const cache = this.cache;
		if (cache[0] === v) return;
		gl.uniform1f(this.addr, v);
		cache[0] = v;
	} // Single float vector (from flat array or THREE.VectorN)


	function setValueV2f(gl, v) {
		const cache = this.cache;

		if (v.x !== undefined) {
			if (cache[0] !== v.x || cache[1] !== v.y) {
				gl.uniform2f(this.addr, v.x, v.y);
				cache[0] = v.x;
				cache[1] = v.y;
			}
		} else {
			if (arraysEqual(cache, v)) return;
			gl.uniform2fv(this.addr, v);
			copyArray(cache, v);
		}
	}

	function setValueV3f(gl, v) {
		const cache = this.cache;

		if (v.x !== undefined) {
			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
				gl.uniform3f(this.addr, v.x, v.y, v.z);
				cache[0] = v.x;
				cache[1] = v.y;
				cache[2] = v.z;
			}
		} else if (v.r !== undefined) {
			if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
				gl.uniform3f(this.addr, v.r, v.g, v.b);
				cache[0] = v.r;
				cache[1] = v.g;
				cache[2] = v.b;
			}
		} else {
			if (arraysEqual(cache, v)) return;
			gl.uniform3fv(this.addr, v);
			copyArray(cache, v);
		}
	}

	function setValueV4f(gl, v) {
		const cache = this.cache;

		if (v.x !== undefined) {
			if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
				gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
				cache[0] = v.x;
				cache[1] = v.y;
				cache[2] = v.z;
				cache[3] = v.w;
			}
		} else {
			if (arraysEqual(cache, v)) return;
			gl.uniform4fv(this.addr, v);
			copyArray(cache, v);
		}
	} // Single matrix (from flat array or THREE.MatrixN)


	function setValueM2(gl, v) {
		const cache = this.cache;
		const elements = v.elements;

		if (elements === undefined) {
			if (arraysEqual(cache, v)) return;
			gl.uniformMatrix2fv(this.addr, false, v);
			copyArray(cache, v);
		} else {
			if (arraysEqual(cache, elements)) return;
			mat2array.set(elements);
			gl.uniformMatrix2fv(this.addr, false, mat2array);
			copyArray(cache, elements);
		}
	}

	function setValueM3(gl, v) {
		const cache = this.cache;
		const elements = v.elements;

		if (elements === undefined) {
			if (arraysEqual(cache, v)) return;
			gl.uniformMatrix3fv(this.addr, false, v);
			copyArray(cache, v);
		} else {
			if (arraysEqual(cache, elements)) return;
			mat3array.set(elements);
			gl.uniformMatrix3fv(this.addr, false, mat3array);
			copyArray(cache, elements);
		}
	}

	function setValueM4(gl, v) {
		const cache = this.cache;
		const elements = v.elements;

		if (elements === undefined) {
			if (arraysEqual(cache, v)) return;
			gl.uniformMatrix4fv(this.addr, false, v);
			copyArray(cache, v);
		} else {
			if (arraysEqual(cache, elements)) return;
			mat4array.set(elements);
			gl.uniformMatrix4fv(this.addr, false, mat4array);
			copyArray(cache, elements);
		}
	} // Single integer / boolean


	function setValueV1i(gl, v) {
		const cache = this.cache;
		if (cache[0] === v) return;
		gl.uniform1i(this.addr, v);
		cache[0] = v;
	} // Single integer / boolean vector (from flat array)


	function setValueV2i(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform2iv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV3i(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform3iv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV4i(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform4iv(this.addr, v);
		copyArray(cache, v);
	} // Single unsigned integer


	function setValueV1ui(gl, v) {
		const cache = this.cache;
		if (cache[0] === v) return;
		gl.uniform1ui(this.addr, v);
		cache[0] = v;
	} // Single unsigned integer vector (from flat array)


	function setValueV2ui(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform2uiv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV3ui(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform3uiv(this.addr, v);
		copyArray(cache, v);
	}

	function setValueV4ui(gl, v) {
		const cache = this.cache;
		if (arraysEqual(cache, v)) return;
		gl.uniform4uiv(this.addr, v);
		copyArray(cache, v);
	} // Single texture (2D / Cube)


	function setValueT1(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.setTexture2D(v || emptyTexture, unit);
	}

	function setValueT3D1(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.setTexture3D(v || empty3dTexture, unit);
	}

	function setValueT6(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.setTextureCube(v || emptyCubeTexture, unit);
	}

	function setValueT2DArray1(gl, v, textures) {
		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if (cache[0] !== unit) {
			gl.uniform1i(this.addr, unit);
			cache[0] = unit;
		}

		textures.setTexture2DArray(v || emptyArrayTexture, unit);
	} // Helper to pick the right setter for the singular case


	function getSingularSetter(type) {
		switch (type) {
			case 0x1406:
				return setValueV1f;
			// FLOAT

			case 0x8b50:
				return setValueV2f;
			// _VEC2

			case 0x8b51:
				return setValueV3f;
			// _VEC3

			case 0x8b52:
				return setValueV4f;
			// _VEC4

			case 0x8b5a:
				return setValueM2;
			// _MAT2

			case 0x8b5b:
				return setValueM3;
			// _MAT3

			case 0x8b5c:
				return setValueM4;
			// _MAT4

			case 0x1404:
			case 0x8b56:
				return setValueV1i;
			// INT, BOOL

			case 0x8b53:
			case 0x8b57:
				return setValueV2i;
			// _VEC2

			case 0x8b54:
			case 0x8b58:
				return setValueV3i;
			// _VEC3

			case 0x8b55:
			case 0x8b59:
				return setValueV4i;
			// _VEC4

			case 0x1405:
				return setValueV1ui;
			// UINT

			case 0x8dc6:
				return setValueV2ui;
			// _VEC2

			case 0x8dc7:
				return setValueV3ui;
			// _VEC3

			case 0x8dc8:
				return setValueV4ui;
			// _VEC4

			case 0x8b5e: // SAMPLER_2D

			case 0x8d66: // SAMPLER_EXTERNAL_OES

			case 0x8dca: // INT_SAMPLER_2D

			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D

			case 0x8b62:
				// SAMPLER_2D_SHADOW
				return setValueT1;

			case 0x8b5f: // SAMPLER_3D

			case 0x8dcb: // INT_SAMPLER_3D

			case 0x8dd3:
				// UNSIGNED_INT_SAMPLER_3D
				return setValueT3D1;

			case 0x8b60: // SAMPLER_CUBE

			case 0x8dcc: // INT_SAMPLER_CUBE

			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE

			case 0x8dc5:
				// SAMPLER_CUBE_SHADOW
				return setValueT6;

			case 0x8dc1: // SAMPLER_2D_ARRAY

			case 0x8dcf: // INT_SAMPLER_2D_ARRAY

			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY

			case 0x8dc4:
				// SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArray1;
		}
	} // Array of scalars


	function setValueV1fArray(gl, v) {
		gl.uniform1fv(this.addr, v);
	} // Array of vectors (from flat array or array of THREE.VectorN)


	function setValueV2fArray(gl, v) {
		const data = flatten(v, this.size, 2);
		gl.uniform2fv(this.addr, data);
	}

	function setValueV3fArray(gl, v) {
		const data = flatten(v, this.size, 3);
		gl.uniform3fv(this.addr, data);
	}

	function setValueV4fArray(gl, v) {
		const data = flatten(v, this.size, 4);
		gl.uniform4fv(this.addr, data);
	} // Array of matrices (from flat array or array of THREE.MatrixN)


	function setValueM2Array(gl, v) {
		const data = flatten(v, this.size, 4);
		gl.uniformMatrix2fv(this.addr, false, data);
	}

	function setValueM3Array(gl, v) {
		const data = flatten(v, this.size, 9);
		gl.uniformMatrix3fv(this.addr, false, data);
	}

	function setValueM4Array(gl, v) {
		const data = flatten(v, this.size, 16);
		gl.uniformMatrix4fv(this.addr, false, data);
	} // Array of integer / boolean


	function setValueV1iArray(gl, v) {
		gl.uniform1iv(this.addr, v);
	} // Array of integer / boolean vectors (from flat array)


	function setValueV2iArray(gl, v) {
		gl.uniform2iv(this.addr, v);
	}

	function setValueV3iArray(gl, v) {
		gl.uniform3iv(this.addr, v);
	}

	function setValueV4iArray(gl, v) {
		gl.uniform4iv(this.addr, v);
	} // Array of unsigned integer


	function setValueV1uiArray(gl, v) {
		gl.uniform1uiv(this.addr, v);
	} // Array of unsigned integer vectors (from flat array)


	function setValueV2uiArray(gl, v) {
		gl.uniform2uiv(this.addr, v);
	}

	function setValueV3uiArray(gl, v) {
		gl.uniform3uiv(this.addr, v);
	}

	function setValueV4uiArray(gl, v) {
		gl.uniform4uiv(this.addr, v);
	} // Array of textures (2D / 3D / Cube / 2DArray)


	function setValueT1Array(gl, v, textures) {
		const n = v.length;
		const units = allocTexUnits(textures, n);
		gl.uniform1iv(this.addr, units);

		for (let i = 0; i !== n; ++i) {
			textures.setTexture2D(v[i] || emptyTexture, units[i]);
		}
	}

	function setValueT3DArray(gl, v, textures) {
		const n = v.length;
		const units = allocTexUnits(textures, n);
		gl.uniform1iv(this.addr, units);

		for (let i = 0; i !== n; ++i) {
			textures.setTexture3D(v[i] || empty3dTexture, units[i]);
		}
	}

	function setValueT6Array(gl, v, textures) {
		const n = v.length;
		const units = allocTexUnits(textures, n);
		gl.uniform1iv(this.addr, units);

		for (let i = 0; i !== n; ++i) {
			textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
		}
	}

	function setValueT2DArrayArray(gl, v, textures) {
		const n = v.length;
		const units = allocTexUnits(textures, n);
		gl.uniform1iv(this.addr, units);

		for (let i = 0; i !== n; ++i) {
			textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
		}
	} // Helper to pick the right setter for a pure (bottom-level) array


	function getPureArraySetter(type) {
		switch (type) {
			case 0x1406:
				return setValueV1fArray;
			// FLOAT

			case 0x8b50:
				return setValueV2fArray;
			// _VEC2

			case 0x8b51:
				return setValueV3fArray;
			// _VEC3

			case 0x8b52:
				return setValueV4fArray;
			// _VEC4

			case 0x8b5a:
				return setValueM2Array;
			// _MAT2

			case 0x8b5b:
				return setValueM3Array;
			// _MAT3

			case 0x8b5c:
				return setValueM4Array;
			// _MAT4

			case 0x1404:
			case 0x8b56:
				return setValueV1iArray;
			// INT, BOOL

			case 0x8b53:
			case 0x8b57:
				return setValueV2iArray;
			// _VEC2

			case 0x8b54:
			case 0x8b58:
				return setValueV3iArray;
			// _VEC3

			case 0x8b55:
			case 0x8b59:
				return setValueV4iArray;
			// _VEC4

			case 0x1405:
				return setValueV1uiArray;
			// UINT

			case 0x8dc6:
				return setValueV2uiArray;
			// _VEC2

			case 0x8dc7:
				return setValueV3uiArray;
			// _VEC3

			case 0x8dc8:
				return setValueV4uiArray;
			// _VEC4

			case 0x8b5e: // SAMPLER_2D

			case 0x8d66: // SAMPLER_EXTERNAL_OES

			case 0x8dca: // INT_SAMPLER_2D

			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D

			case 0x8b62:
				// SAMPLER_2D_SHADOW
				return setValueT1Array;

			case 0x8b5f: // SAMPLER_3D

			case 0x8dcb: // INT_SAMPLER_3D

			case 0x8dd3:
				// UNSIGNED_INT_SAMPLER_3D
				return setValueT3DArray;

			case 0x8b60: // SAMPLER_CUBE

			case 0x8dcc: // INT_SAMPLER_CUBE

			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE

			case 0x8dc5:
				// SAMPLER_CUBE_SHADOW
				return setValueT6Array;

			case 0x8dc1: // SAMPLER_2D_ARRAY

			case 0x8dcf: // INT_SAMPLER_2D_ARRAY

			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY

			case 0x8dc4:
				// SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArrayArray;
		}
	} // --- Uniform Classes ---


	function SingleUniform(id, activeInfo, addr) {
		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
	}

	function PureArrayUniform(id, activeInfo, addr) {
		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
	}

	PureArrayUniform.prototype.updateCache = function (data) {
		const cache = this.cache;

		if (data instanceof Float32Array && cache.length !== data.length) {
			this.cache = new Float32Array(data.length);
		}

		copyArray(cache, data);
	};

	function StructuredUniform(id) {
		this.id = id;
		this.seq = [];
		this.map = {};
	}

	StructuredUniform.prototype.setValue = function (gl, value, textures) {
		const seq = this.seq;

		for (let i = 0, n = seq.length; i !== n; ++i) {
			const u = seq[i];
			u.setValue(gl, value[u.id], textures);
		}
	}; // --- Top-level ---
	// Parser - builds up the property tree from the path strings


	const RePathPart = /(\w+)(\])?(\[|\.)?/g; // extracts
	// 	- the identifier (member name or array index)
	//	- followed by an optional right bracket (found when array index)
	//	- followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform(container, uniformObject) {
		container.seq.push(uniformObject);
		container.map[uniformObject.id] = uniformObject;
	}

	function parseUniform(activeInfo, addr, container) {
		const path = activeInfo.name,
					pathLength = path.length; // reset RegExp object, because of the early exit of a previous run

		RePathPart.lastIndex = 0;

		while (true) {
			const match = RePathPart.exec(path),
						matchEnd = RePathPart.lastIndex;
			let id = match[1];
			const idIsIndex = match[2] === ']',
						subscript = match[3];
			if (idIsIndex) id = id | 0; // convert to integer

			if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
				// bare name or "pure" bottom-level array "[0]" suffix
				addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
				break;
			} else {
				// step into inner node / create it in case it doesn't exist
				const map = container.map;
				let next = map[id];

				if (next === undefined) {
					next = new StructuredUniform(id);
					addUniform(container, next);
				}

				container = next;
			}
		}
	} // Root Container


	function WebGLUniforms(gl, program) {
		this.seq = [];
		this.map = {};
		const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

		for (let i = 0; i < n; ++i) {
			const info = gl.getActiveUniform(program, i),
						addr = gl.getUniformLocation(program, info.name);
			parseUniform(info, addr, this);
		}
	}

	WebGLUniforms.prototype.setValue = function (gl, name, value, textures) {
		const u = this.map[name];
		if (u !== undefined) u.setValue(gl, value, textures);
	};

	WebGLUniforms.prototype.setOptional = function (gl, object, name) {
		const v = object[name];
		if (v !== undefined) this.setValue(gl, name, v);
	}; // Static interface


	WebGLUniforms.upload = function (gl, seq, values, textures) {
		for (let i = 0, n = seq.length; i !== n; ++i) {
			const u = seq[i],
						v = values[u.id];

			if (v.needsUpdate !== false) {
				// note: always updating when .needsUpdate is undefined
				u.setValue(gl, v.value, textures);
			}
		}
	};

	WebGLUniforms.seqWithValue = function (seq, values) {
		const r = [];

		for (let i = 0, n = seq.length; i !== n; ++i) {
			const u = seq[i];
			if (u.id in values) r.push(u);
		}

		return r;
	};

	function WebGLShader(gl, type, string) {
		const shader = gl.createShader(type);
		gl.shaderSource(shader, string);
		gl.compileShader(shader);
		return shader;
	}

	let programIdCount = 0;

	function addLineNumbers(string) {
		const lines = string.split('\n');

		for (let i = 0; i < lines.length; i++) {
			lines[i] = i + 1 + ': ' + lines[i];
		}

		return lines.join('\n');
	}

	function getEncodingComponents(encoding) {
		switch (encoding) {
			case LinearEncoding:
				return ['Linear', '( value )'];

			case sRGBEncoding:
				return ['sRGB', '( value )'];

			default:
				console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
				return ['Linear', '( value )'];
		}
	}

	function getShaderErrors(gl, shader, type) {
		const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
		const errors = gl.getShaderInfoLog(shader).trim();
		if (status && errors === '') return ''; // --enable-privileged-webgl-extension
		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return type.toUpperCase() + '\n\n' + errors + '\n\n' + addLineNumbers(gl.getShaderSource(shader));
	}

	function getTexelEncodingFunction(functionName, encoding) {
		const components = getEncodingComponents(encoding);
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
	}

	function getToneMappingFunction(functionName, toneMapping) {
		let toneMappingName;

		switch (toneMapping) {
			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;

			case CustomToneMapping:
				toneMappingName = 'Custom';
				break;

			default:
				console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
				toneMappingName = 'Linear';
		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
	}

	function generateExtensions(parameters) {
		const chunks = [parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];
		return chunks.filter(filterEmptyLine).join('\n');
	}

	function generateDefines(defines) {
		const chunks = [];

		for (const name in defines) {
			const value = defines[name];
			if (value === false) continue;
			chunks.push('#define ' + name + ' ' + value);
		}

		return chunks.join('\n');
	}

	function fetchAttributeLocations(gl, program) {
		const attributes = {};
		const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

		for (let i = 0; i < n; i++) {
			const info = gl.getActiveAttrib(program, i);
			const name = info.name;
			let locationSize = 1;
			if (info.type === gl.FLOAT_MAT2) locationSize = 2;
			if (info.type === gl.FLOAT_MAT3) locationSize = 3;
			if (info.type === gl.FLOAT_MAT4) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[name] = {
				type: info.type,
				location: gl.getAttribLocation(program, name),
				locationSize: locationSize
			};
		}

		return attributes;
	}

	function filterEmptyLine(string) {
		return string !== '';
	}

	function replaceLightNums(string, parameters) {
		return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
	}

	function replaceClippingPlaneNums(string, parameters) {
		return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
	} // Resolve Includes


	const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

	function resolveIncludes(string) {
		return string.replace(includePattern, includeReplacer);
	}

	function includeReplacer(match, include) {
		const string = ShaderChunk[include];

		if (string === undefined) {
			throw new Error('Can not resolve #include <' + include + '>');
		}

		return resolveIncludes(string);
	} // Unroll Loops


	const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
	const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

	function unrollLoops(string) {
		return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
	}

	function deprecatedLoopReplacer(match, start, end, snippet) {
		console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');
		return loopReplacer(match, start, end, snippet);
	}

	function loopReplacer(match, start, end, snippet) {
		let string = '';

		for (let i = parseInt(start); i < parseInt(end); i++) {
			string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);
		}

		return string;
	} //


	function generatePrecision(parameters) {
		let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

		if (parameters.precision === 'highp') {
			precisionstring += '\n#define HIGH_PRECISION';
		} else if (parameters.precision === 'mediump') {
			precisionstring += '\n#define MEDIUM_PRECISION';
		} else if (parameters.precision === 'lowp') {
			precisionstring += '\n#define LOW_PRECISION';
		}

		return precisionstring;
	}

	function generateShadowMapTypeDefine(parameters) {
		let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if (parameters.shadowMapType === PCFShadowMap) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
		} else if (parameters.shadowMapType === PCFSoftShadowMap) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
		} else if (parameters.shadowMapType === VSMShadowMap) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
		}

		return shadowMapTypeDefine;
	}

	function generateEnvMapTypeDefine(parameters) {
		let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

		if (parameters.envMap) {
			switch (parameters.envMapMode) {
				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;
			}
		}

		return envMapTypeDefine;
	}

	function generateEnvMapModeDefine(parameters) {
		let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

		if (parameters.envMap) {
			switch (parameters.envMapMode) {
				case CubeRefractionMapping:
				case CubeUVRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;
			}
		}

		return envMapModeDefine;
	}

	function generateEnvMapBlendingDefine(parameters) {
		let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

		if (parameters.envMap) {
			switch (parameters.combine) {
				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;
			}
		}

		return envMapBlendingDefine;
	}

	function generateCubeUVSize(parameters) {
		const imageHeight = parameters.envMapCubeUVHeight;
		if (imageHeight === null) return null;
		const maxMip = Math.log2(imageHeight / 32 + 1) + 3;
		const texelHeight = 1.0 / imageHeight;
		const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
		return {
			texelWidth,
			texelHeight,
			maxMip
		};
	}

	function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
		// TODO Send this event to Three.js DevTools
		// console.log( 'WebGLProgram', cacheKey );
		const gl = renderer.getContext();
		const defines = parameters.defines;
		let vertexShader = parameters.vertexShader;
		let fragmentShader = parameters.fragmentShader;
		const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
		const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
		const envMapModeDefine = generateEnvMapModeDefine(parameters);
		const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
		const envMapCubeUVSize = generateCubeUVSize(parameters);
		const customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);
		const customDefines = generateDefines(defines);
		const program = gl.createProgram();
		let prefixVertex, prefixFragment;
		let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

		if (parameters.isRawShaderMaterial) {
			prefixVertex = [customDefines].filter(filterEmptyLine).join('\n');

			if (prefixVertex.length > 0) {
				prefixVertex += '\n';
			}

			prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\n');

			if (prefixFragment.length > 0) {
				prefixFragment += '\n';
			}
		} else {
			prefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphColors && parameters.isWebGL2 ? '#define USE_MORPHCOLORS' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '	attribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '	attribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '	attribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '	attribute vec4 color;', '#elif defined( USE_COLOR )', '	attribute vec3 color;', '#endif', '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )', '	attribute vec3 morphTarget0;', '	attribute vec3 morphTarget1;', '	attribute vec3 morphTarget2;', '	attribute vec3 morphTarget3;', '	#ifdef USE_MORPHNORMALS', '		attribute vec3 morphNormal0;', '		attribute vec3 morphNormal1;', '		attribute vec3 morphNormal2;', '		attribute vec3 morphNormal3;', '	#else', '		attribute vec3 morphTarget4;', '		attribute vec3 morphTarget5;', '		attribute vec3 morphTarget6;', '		attribute vec3 morphTarget7;', '	#endif', '#endif', '#ifdef USE_SKINNING', '	attribute vec4 skinIndex;', '	attribute vec4 skinWeight;', '#endif', '\n'].filter(filterEmptyLine).join('\n');
			prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
			parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below
			getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\n'].filter(filterEmptyLine).join('\n');
		}

		vertexShader = resolveIncludes(vertexShader);
		vertexShader = replaceLightNums(vertexShader, parameters);
		vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
		fragmentShader = resolveIncludes(fragmentShader);
		fragmentShader = replaceLightNums(fragmentShader, parameters);
		fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
		vertexShader = unrollLoops(vertexShader);
		fragmentShader = unrollLoops(fragmentShader);

		if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
			// GLSL 3.0 conversion for built-in materials and ShaderMaterial
			versionString = '#version 300 es\n';
			prefixVertex = ['precision mediump sampler2DArray;', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\n') + '\n' + prefixVertex;
			prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\n') + '\n' + prefixFragment;
		}

		const vertexGlsl = versionString + prefixVertex + vertexShader;
		const fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
		const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
		gl.attachShader(program, glVertexShader);
		gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.

		if (parameters.index0AttributeName !== undefined) {
			gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
		} else if (parameters.morphTargets === true) {
			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation(program, 0, 'position');
		}

		gl.linkProgram(program); // check for link errors

		if (renderer.debug.checkShaderErrors) {
			const programLog = gl.getProgramInfoLog(program).trim();
			const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
			const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
			let runnable = true;
			let haveDiagnostics = true;

			if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
				runnable = false;
				const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');
				const fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');
				console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + '\n\n' + 'Program Info Log: ' + programLog + '\n' + vertexErrors + '\n' + fragmentErrors);
			} else if (programLog !== '') {
				console.warn('THREE.WebGLProgram: Program Info Log:', programLog);
			} else if (vertexLog === '' || fragmentLog === '') {
				haveDiagnostics = false;
			}

			if (haveDiagnostics) {
				this.diagnostics = {
					runnable: runnable,
					programLog: programLog,
					vertexShader: {
						log: vertexLog,
						prefix: prefixVertex
					},
					fragmentShader: {
						log: fragmentLog,
						prefix: prefixFragment
					}
				};
			}
		} // Clean up
		// Crashes in iOS9 and iOS10. #18402
		// gl.detachShader( program, glVertexShader );
		// gl.detachShader( program, glFragmentShader );


		gl.deleteShader(glVertexShader);
		gl.deleteShader(glFragmentShader); // set up caching for uniform locations

		let cachedUniforms;

		this.getUniforms = function () {
			if (cachedUniforms === undefined) {
				cachedUniforms = new WebGLUniforms(gl, program);
			}

			return cachedUniforms;
		}; // set up caching for attribute locations


		let cachedAttributes;

		this.getAttributes = function () {
			if (cachedAttributes === undefined) {
				cachedAttributes = fetchAttributeLocations(gl, program);
			}

			return cachedAttributes;
		}; // free resource


		this.destroy = function () {
			bindingStates.releaseStatesOfProgram(this);
			gl.deleteProgram(program);
			this.program = undefined;
		}; //


		this.name = parameters.shaderName;
		this.id = programIdCount++;
		this.cacheKey = cacheKey;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;
		return this;
	}

	let _id = 0;

	class WebGLShaderCache {
		constructor() {
			this.shaderCache = new Map();
			this.materialCache = new Map();
		}

		update(material) {
			const vertexShader = material.vertexShader;
			const fragmentShader = material.fragmentShader;

			const vertexShaderStage = this._getShaderStage(vertexShader);

			const fragmentShaderStage = this._getShaderStage(fragmentShader);

			const materialShaders = this._getShaderCacheForMaterial(material);

			if (materialShaders.has(vertexShaderStage) === false) {
				materialShaders.add(vertexShaderStage);
				vertexShaderStage.usedTimes++;
			}

			if (materialShaders.has(fragmentShaderStage) === false) {
				materialShaders.add(fragmentShaderStage);
				fragmentShaderStage.usedTimes++;
			}

			return this;
		}

		remove(material) {
			const materialShaders = this.materialCache.get(material);

			for (const shaderStage of materialShaders) {
				shaderStage.usedTimes--;
				if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage);
			}

			this.materialCache.delete(material);
			return this;
		}

		getVertexShaderID(material) {
			return this._getShaderStage(material.vertexShader).id;
		}

		getFragmentShaderID(material) {
			return this._getShaderStage(material.fragmentShader).id;
		}

		dispose() {
			this.shaderCache.clear();
			this.materialCache.clear();
		}

		_getShaderCacheForMaterial(material) {
			const cache = this.materialCache;

			if (cache.has(material) === false) {
				cache.set(material, new Set());
			}

			return cache.get(material);
		}

		_getShaderStage(code) {
			const cache = this.shaderCache;

			if (cache.has(code) === false) {
				const stage = new WebGLShaderStage();
				cache.set(code, stage);
			}

			return cache.get(code);
		}

	}

	class WebGLShaderStage {
		constructor() {
			this.id = _id++;
			this.usedTimes = 0;
		}

	}

	function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
		const _programLayers = new Layers();

		const _customShaders = new WebGLShaderCache();

		const programs = [];
		const isWebGL2 = capabilities.isWebGL2;
		const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
		const floatVertexTextures = capabilities.floatVertexTextures;
		const maxVertexUniforms = capabilities.maxVertexUniforms;
		const vertexTextures = capabilities.vertexTextures;
		let precision = capabilities.precision;
		const shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'toon',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};

		function getMaxBones(object) {
			const skeleton = object.skeleton;
			const bones = skeleton.bones;

			if (floatVertexTextures) {
				return 1024;
			} else {
				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//	- leave some extra space for other uniforms
				//	- limit here is ANGLE's 254 max uniform vectors
				//		(up to 54 should be safe)
				const nVertexUniforms = maxVertexUniforms;
				const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
				const maxBones = Math.min(nVertexMatrices, bones.length);

				if (maxBones < bones.length) {
					console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');
					return 0;
				}

				return maxBones;
			}
		}

		function getParameters(material, lights, shadows, scene, object) {
			const fog = scene.fog;
			const geometry = object.geometry;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;
			const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
			const envMapCubeUVHeight = !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping) ? envMap.image.height : null;
			const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;

			if (material.precision !== null) {
				precision = capabilities.getMaxPrecision(material.precision);

				if (precision !== material.precision) {
					console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
				}
			} //


			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
			let morphTextureStride = 0;
			if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
			if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
			if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3; //

			let vertexShader, fragmentShader;
			let customVertexShaderID, customFragmentShaderID;

			if (shaderID) {
				const shader = ShaderLib[shaderID];
				vertexShader = shader.vertexShader;
				fragmentShader = shader.fragmentShader;
			} else {
				vertexShader = material.vertexShader;
				fragmentShader = material.fragmentShader;

				_customShaders.update(material);

				customVertexShaderID = _customShaders.getVertexShaderID(material);
				customFragmentShaderID = _customShaders.getFragmentShaderID(material);
			}

			const currentRenderTarget = renderer.getRenderTarget();
			const useAlphaTest = material.alphaTest > 0;
			const useClearcoat = material.clearcoat > 0;
			const parameters = {
				isWebGL2: isWebGL2,
				shaderID: shaderID,
				shaderName: material.type,
				vertexShader: vertexShader,
				fragmentShader: fragmentShader,
				defines: material.defines,
				customVertexShaderID: customVertexShaderID,
				customFragmentShaderID: customFragmentShaderID,
				isRawShaderMaterial: material.isRawShaderMaterial === true,
				glslVersion: material.glslVersion,
				precision: precision,
				instancing: object.isInstancedMesh === true,
				instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
				supportsVertexTextures: vertexTextures,
				outputEncoding: currentRenderTarget === null ? renderer.outputEncoding : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding,
				map: !!material.map,
				matcap: !!material.matcap,
				envMap: !!envMap,
				envMapMode: envMap && envMap.mapping,
				envMapCubeUVHeight: envMapCubeUVHeight,
				lightMap: !!material.lightMap,
				aoMap: !!material.aoMap,
				emissiveMap: !!material.emissiveMap,
				bumpMap: !!material.bumpMap,
				normalMap: !!material.normalMap,
				objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
				tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
				decodeVideoTexture: !!material.map && material.map.isVideoTexture === true && material.map.encoding === sRGBEncoding,
				clearcoat: useClearcoat,
				clearcoatMap: useClearcoat && !!material.clearcoatMap,
				clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
				clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,
				displacementMap: !!material.displacementMap,
				roughnessMap: !!material.roughnessMap,
				metalnessMap: !!material.metalnessMap,
				specularMap: !!material.specularMap,
				specularIntensityMap: !!material.specularIntensityMap,
				specularColorMap: !!material.specularColorMap,
				opaque: material.transparent === false && material.blending === NormalBlending,
				alphaMap: !!material.alphaMap,
				alphaTest: useAlphaTest,
				gradientMap: !!material.gradientMap,
				sheen: material.sheen > 0,
				sheenColorMap: !!material.sheenColorMap,
				sheenRoughnessMap: !!material.sheenRoughnessMap,
				transmission: material.transmission > 0,
				transmissionMap: !!material.transmissionMap,
				thicknessMap: !!material.thicknessMap,
				combine: material.combine,
				vertexTangents: !!material.normalMap && !!geometry.attributes.tangent,
				vertexColors: material.vertexColors,
				vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
				vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,
				uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,
				fog: !!fog,
				useFog: material.fog,
				fogExp2: fog && fog.isFogExp2,
				flatShading: !!material.flatShading,
				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: logarithmicDepthBuffer,
				skinning: object.isSkinnedMesh === true && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: floatVertexTextures,
				morphTargets: geometry.morphAttributes.position !== undefined,
				morphNormals: geometry.morphAttributes.normal !== undefined,
				morphColors: geometry.morphAttributes.color !== undefined,
				morphTargetsCount: morphTargetsCount,
				morphTextureStride: morphTextureStride,
				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,
				numDirLightShadows: lights.directionalShadowMap.length,
				numPointLightShadows: lights.pointShadowMap.length,
				numSpotLightShadows: lights.spotShadowMap.length,
				numClippingPlanes: clipping.numPlanes,
				numClipIntersection: clipping.numIntersection,
				dithering: material.dithering,
				shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,
				toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,
				premultipliedAlpha: material.premultipliedAlpha,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,
				depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,
				index0AttributeName: material.index0AttributeName,
				extensionDerivatives: material.extensions && material.extensions.derivatives,
				extensionFragDepth: material.extensions && material.extensions.fragDepth,
				extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
				extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
				rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
				rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
				rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),
				customProgramCacheKey: material.customProgramCacheKey()
			};
			return parameters;
		}

		function getProgramCacheKey(parameters) {
			const array = [];

			if (parameters.shaderID) {
				array.push(parameters.shaderID);
			} else {
				array.push(parameters.customVertexShaderID);
				array.push(parameters.customFragmentShaderID);
			}

			if (parameters.defines !== undefined) {
				for (const name in parameters.defines) {
					array.push(name);
					array.push(parameters.defines[name]);
				}
			}

			if (parameters.isRawShaderMaterial === false) {
				getProgramCacheKeyParameters(array, parameters);
				getProgramCacheKeyBooleans(array, parameters);
				array.push(renderer.outputEncoding);
			}

			array.push(parameters.customProgramCacheKey);
			return array.join();
		}

		function getProgramCacheKeyParameters(array, parameters) {
			array.push(parameters.precision);
			array.push(parameters.outputEncoding);
			array.push(parameters.envMapMode);
			array.push(parameters.envMapCubeUVHeight);
			array.push(parameters.combine);
			array.push(parameters.vertexUvs);
			array.push(parameters.fogExp2);
			array.push(parameters.sizeAttenuation);
			array.push(parameters.maxBones);
			array.push(parameters.morphTargetsCount);
			array.push(parameters.morphAttributeCount);
			array.push(parameters.numDirLights);
			array.push(parameters.numPointLights);
			array.push(parameters.numSpotLights);
			array.push(parameters.numHemiLights);
			array.push(parameters.numRectAreaLights);
			array.push(parameters.numDirLightShadows);
			array.push(parameters.numPointLightShadows);
			array.push(parameters.numSpotLightShadows);
			array.push(parameters.shadowMapType);
			array.push(parameters.toneMapping);
			array.push(parameters.numClippingPlanes);
			array.push(parameters.numClipIntersection);
		}

		function getProgramCacheKeyBooleans(array, parameters) {
			_programLayers.disableAll();

			if (parameters.isWebGL2) _programLayers.enable(0);
			if (parameters.supportsVertexTextures) _programLayers.enable(1);
			if (parameters.instancing) _programLayers.enable(2);
			if (parameters.instancingColor) _programLayers.enable(3);
			if (parameters.map) _programLayers.enable(4);
			if (parameters.matcap) _programLayers.enable(5);
			if (parameters.envMap) _programLayers.enable(6);
			if (parameters.lightMap) _programLayers.enable(7);
			if (parameters.aoMap) _programLayers.enable(8);
			if (parameters.emissiveMap) _programLayers.enable(9);
			if (parameters.bumpMap) _programLayers.enable(10);
			if (parameters.normalMap) _programLayers.enable(11);
			if (parameters.objectSpaceNormalMap) _programLayers.enable(12);
			if (parameters.tangentSpaceNormalMap) _programLayers.enable(13);
			if (parameters.clearcoat) _programLayers.enable(14);
			if (parameters.clearcoatMap) _programLayers.enable(15);
			if (parameters.clearcoatRoughnessMap) _programLayers.enable(16);
			if (parameters.clearcoatNormalMap) _programLayers.enable(17);
			if (parameters.displacementMap) _programLayers.enable(18);
			if (parameters.specularMap) _programLayers.enable(19);
			if (parameters.roughnessMap) _programLayers.enable(20);
			if (parameters.metalnessMap) _programLayers.enable(21);
			if (parameters.gradientMap) _programLayers.enable(22);
			if (parameters.alphaMap) _programLayers.enable(23);
			if (parameters.alphaTest) _programLayers.enable(24);
			if (parameters.vertexColors) _programLayers.enable(25);
			if (parameters.vertexAlphas) _programLayers.enable(26);
			if (parameters.vertexUvs) _programLayers.enable(27);
			if (parameters.vertexTangents) _programLayers.enable(28);
			if (parameters.uvsVertexOnly) _programLayers.enable(29);
			if (parameters.fog) _programLayers.enable(30);
			array.push(_programLayers.mask);

			_programLayers.disableAll();

			if (parameters.useFog) _programLayers.enable(0);
			if (parameters.flatShading) _programLayers.enable(1);
			if (parameters.logarithmicDepthBuffer) _programLayers.enable(2);
			if (parameters.skinning) _programLayers.enable(3);
			if (parameters.useVertexTexture) _programLayers.enable(4);
			if (parameters.morphTargets) _programLayers.enable(5);
			if (parameters.morphNormals) _programLayers.enable(6);
			if (parameters.morphColors) _programLayers.enable(7);
			if (parameters.premultipliedAlpha) _programLayers.enable(8);
			if (parameters.shadowMapEnabled) _programLayers.enable(9);
			if (parameters.physicallyCorrectLights) _programLayers.enable(10);
			if (parameters.doubleSided) _programLayers.enable(11);
			if (parameters.flipSided) _programLayers.enable(12);
			if (parameters.depthPacking) _programLayers.enable(13);
			if (parameters.dithering) _programLayers.enable(14);
			if (parameters.specularIntensityMap) _programLayers.enable(15);
			if (parameters.specularColorMap) _programLayers.enable(16);
			if (parameters.transmission) _programLayers.enable(17);
			if (parameters.transmissionMap) _programLayers.enable(18);
			if (parameters.thicknessMap) _programLayers.enable(19);
			if (parameters.sheen) _programLayers.enable(20);
			if (parameters.sheenColorMap) _programLayers.enable(21);
			if (parameters.sheenRoughnessMap) _programLayers.enable(22);
			if (parameters.decodeVideoTexture) _programLayers.enable(23);
			if (parameters.opaque) _programLayers.enable(24);
			array.push(_programLayers.mask);
		}

		function getUniforms(material) {
			const shaderID = shaderIDs[material.type];
			let uniforms;

			if (shaderID) {
				const shader = ShaderLib[shaderID];
				uniforms = UniformsUtils.clone(shader.uniforms);
			} else {
				uniforms = material.uniforms;
			}

			return uniforms;
		}

		function acquireProgram(parameters, cacheKey) {
			let program; // Check if code has been already compiled

			for (let p = 0, pl = programs.length; p < pl; p++) {
				const preexistingProgram = programs[p];

				if (preexistingProgram.cacheKey === cacheKey) {
					program = preexistingProgram;
					++program.usedTimes;
					break;
				}
			}

			if (program === undefined) {
				program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
				programs.push(program);
			}

			return program;
		}

		function releaseProgram(program) {
			if (--program.usedTimes === 0) {
				// Remove from unordered set
				const i = programs.indexOf(program);
				programs[i] = programs[programs.length - 1];
				programs.pop(); // Free WebGL resources

				program.destroy();
			}
		}

		function releaseShaderCache(material) {
			_customShaders.remove(material);
		}

		function dispose() {
			_customShaders.dispose();
		}

		return {
			getParameters: getParameters,
			getProgramCacheKey: getProgramCacheKey,
			getUniforms: getUniforms,
			acquireProgram: acquireProgram,
			releaseProgram: releaseProgram,
			releaseShaderCache: releaseShaderCache,
			// Exposed for resource monitoring & error feedback via renderer.info:
			programs: programs,
			dispose: dispose
		};
	}

	function WebGLProperties() {
		let properties = new WeakMap();

		function get(object) {
			let map = properties.get(object);

			if (map === undefined) {
				map = {};
				properties.set(object, map);
			}

			return map;
		}

		function remove(object) {
			properties.delete(object);
		}

		function update(object, key, value) {
			properties.get(object)[key] = value;
		}

		function dispose() {
			properties = new WeakMap();
		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};
	}

	function painterSortStable(a, b) {
		if (a.groupOrder !== b.groupOrder) {
			return a.groupOrder - b.groupOrder;
		} else if (a.renderOrder !== b.renderOrder) {
			return a.renderOrder - b.renderOrder;
		} else if (a.material.id !== b.material.id) {
			return a.material.id - b.material.id;
		} else if (a.z !== b.z) {
			return a.z - b.z;
		} else {
			return a.id - b.id;
		}
	}

	function reversePainterSortStable(a, b) {
		if (a.groupOrder !== b.groupOrder) {
			return a.groupOrder - b.groupOrder;
		} else if (a.renderOrder !== b.renderOrder) {
			return a.renderOrder - b.renderOrder;
		} else if (a.z !== b.z) {
			return b.z - a.z;
		} else {
			return a.id - b.id;
		}
	}

	function WebGLRenderList() {
		const renderItems = [];
		let renderItemsIndex = 0;
		const opaque = [];
		const transmissive = [];
		const transparent = [];

		function init() {
			renderItemsIndex = 0;
			opaque.length = 0;
			transmissive.length = 0;
			transparent.length = 0;
		}

		function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
			let renderItem = renderItems[renderItemsIndex];

			if (renderItem === undefined) {
				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};
				renderItems[renderItemsIndex] = renderItem;
			} else {
				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;
			}

			renderItemsIndex++;
			return renderItem;
		}

		function push(object, geometry, material, groupOrder, z, group) {
			const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);

			if (material.transmission > 0.0) {
				transmissive.push(renderItem);
			} else if (material.transparent === true) {
				transparent.push(renderItem);
			} else {
				opaque.push(renderItem);
			}
		}

		function unshift(object, geometry, material, groupOrder, z, group) {
			const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);

			if (material.transmission > 0.0) {
				transmissive.unshift(renderItem);
			} else if (material.transparent === true) {
				transparent.unshift(renderItem);
			} else {
				opaque.unshift(renderItem);
			}
		}

		function sort(customOpaqueSort, customTransparentSort) {
			if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
			if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
			if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
		}

		function finish() {
			// Clear references from inactive renderItems in the list
			for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
				const renderItem = renderItems[i];
				if (renderItem.id === null) break;
				renderItem.id = null;
				renderItem.object = null;
				renderItem.geometry = null;
				renderItem.material = null;
				renderItem.group = null;
			}
		}

		return {
			opaque: opaque,
			transmissive: transmissive,
			transparent: transparent,
			init: init,
			push: push,
			unshift: unshift,
			finish: finish,
			sort: sort
		};
	}

	function WebGLRenderLists() {
		let lists = new WeakMap();

		function get(scene, renderCallDepth) {
			let list;

			if (lists.has(scene) === false) {
				list = new WebGLRenderList();
				lists.set(scene, [list]);
			} else {
				if (renderCallDepth >= lists.get(scene).length) {
					list = new WebGLRenderList();
					lists.get(scene).push(list);
				} else {
					list = lists.get(scene)[renderCallDepth];
				}
			}

			return list;
		}

		function dispose() {
			lists = new WeakMap();
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	function UniformsCache() {
		const lights = {};
		return {
			get: function (light) {
				if (lights[light.id] !== undefined) {
					return lights[light.id];
				}

				let uniforms;

				switch (light.type) {
					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
						};
						break;
				}

				lights[light.id] = uniforms;
				return uniforms;
			}
		};
	}

	function ShadowUniformsCache() {
		const lights = {};
		return {
			get: function (light) {
				if (lights[light.id] !== undefined) {
					return lights[light.id];
				}

				let uniforms;

				switch (light.type) {
					case 'DirectionalLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;
					// TODO (abelnation): set RectAreaLight shadow uniforms
				}

				lights[light.id] = uniforms;
				return uniforms;
			}
		};
	}

	let nextVersion = 0;

	function shadowCastingLightsFirst(lightA, lightB) {
		return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
	}

	function WebGLLights(extensions, capabilities) {
		const cache = new UniformsCache();
		const shadowCache = ShadowUniformsCache();
		const state = {
			version: 0,
			hash: {
				directionalLength: -1,
				pointLength: -1,
				spotLength: -1,
				rectAreaLength: -1,
				hemiLength: -1,
				numDirectionalShadows: -1,
				numPointShadows: -1,
				numSpotShadows: -1
			},
			ambient: [0, 0, 0],
			probe: [],
			directional: [],
			directionalShadow: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadow: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			rectAreaLTC1: null,
			rectAreaLTC2: null,
			point: [],
			pointShadow: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: []
		};

		for (let i = 0; i < 9; i++) state.probe.push(new Vector3());

		const vector3 = new Vector3();
		const matrix4 = new Matrix4();
		const matrix42 = new Matrix4();

		function setup(lights, physicallyCorrectLights) {
			let r = 0,
					g = 0,
					b = 0;

			for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);

			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;
			let numDirectionalShadows = 0;
			let numPointShadows = 0;
			let numSpotShadows = 0;
			lights.sort(shadowCastingLightsFirst); // artist-friendly light intensity scaling factor

			const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;

			for (let i = 0, l = lights.length; i < l; i++) {
				const light = lights[i];
				const color = light.color;
				const intensity = light.intensity;
				const distance = light.distance;
				const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;

				if (light.isAmbientLight) {
					r += color.r * intensity * scaleFactor;
					g += color.g * intensity * scaleFactor;
					b += color.b * intensity * scaleFactor;
				} else if (light.isLightProbe) {
					for (let j = 0; j < 9; j++) {
						state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
					}
				} else if (light.isDirectionalLight) {
					const uniforms = cache.get(light);
					uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);

					if (light.castShadow) {
						const shadow = light.shadow;
						const shadowUniforms = shadowCache.get(light);
						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						state.directionalShadow[directionalLength] = shadowUniforms;
						state.directionalShadowMap[directionalLength] = shadowMap;
						state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
						numDirectionalShadows++;
					}

					state.directional[directionalLength] = uniforms;
					directionalLength++;
				} else if (light.isSpotLight) {
					const uniforms = cache.get(light);
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
					uniforms.distance = distance;
					uniforms.coneCos = Math.cos(light.angle);
					uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
					uniforms.decay = light.decay;

					if (light.castShadow) {
						const shadow = light.shadow;
						const shadowUniforms = shadowCache.get(light);
						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						state.spotShadow[spotLength] = shadowUniforms;
						state.spotShadowMap[spotLength] = shadowMap;
						state.spotShadowMatrix[spotLength] = light.shadow.matrix;
						numSpotShadows++;
					}

					state.spot[spotLength] = uniforms;
					spotLength++;
				} else if (light.isRectAreaLight) {
					const uniforms = cache.get(light); // (a) intensity is the total visible light emitted
					//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
					// (b) intensity is the brightness of the light

					uniforms.color.copy(color).multiplyScalar(intensity);
					uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
					uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
					state.rectArea[rectAreaLength] = uniforms;
					rectAreaLength++;
				} else if (light.isPointLight) {
					const uniforms = cache.get(light);
					uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;

					if (light.castShadow) {
						const shadow = light.shadow;
						const shadowUniforms = shadowCache.get(light);
						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						shadowUniforms.shadowCameraNear = shadow.camera.near;
						shadowUniforms.shadowCameraFar = shadow.camera.far;
						state.pointShadow[pointLength] = shadowUniforms;
						state.pointShadowMap[pointLength] = shadowMap;
						state.pointShadowMatrix[pointLength] = light.shadow.matrix;
						numPointShadows++;
					}

					state.point[pointLength] = uniforms;
					pointLength++;
				} else if (light.isHemisphereLight) {
					const uniforms = cache.get(light);
					uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
					uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
					state.hemi[hemiLength] = uniforms;
					hemiLength++;
				}
			}

			if (rectAreaLength > 0) {
				if (capabilities.isWebGL2) {
					// WebGL 2
					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
				} else {
					// WebGL 1
					if (extensions.has('OES_texture_float_linear') === true) {
						state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
						state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
					} else if (extensions.has('OES_texture_half_float_linear') === true) {
						state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
						state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
					} else {
						console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');
					}
				}
			}

			state.ambient[0] = r;
			state.ambient[1] = g;
			state.ambient[2] = b;
			const hash = state.hash;

			if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;
				state.directionalShadow.length = numDirectionalShadows;
				state.directionalShadowMap.length = numDirectionalShadows;
				state.pointShadow.length = numPointShadows;
				state.pointShadowMap.length = numPointShadows;
				state.spotShadow.length = numSpotShadows;
				state.spotShadowMap.length = numSpotShadows;
				state.directionalShadowMatrix.length = numDirectionalShadows;
				state.pointShadowMatrix.length = numPointShadows;
				state.spotShadowMatrix.length = numSpotShadows;
				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;
				hash.numDirectionalShadows = numDirectionalShadows;
				hash.numPointShadows = numPointShadows;
				hash.numSpotShadows = numSpotShadows;
				state.version = nextVersion++;
			}
		}

		function setupView(lights, camera) {
			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;
			const viewMatrix = camera.matrixWorldInverse;

			for (let i = 0, l = lights.length; i < l; i++) {
				const light = lights[i];

				if (light.isDirectionalLight) {
					const uniforms = state.directional[directionalLength];
					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
					vector3.setFromMatrixPosition(light.target.matrixWorld);
					uniforms.direction.sub(vector3);
					uniforms.direction.transformDirection(viewMatrix);
					directionalLength++;
				} else if (light.isSpotLight) {
					const uniforms = state.spot[spotLength];
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.position.applyMatrix4(viewMatrix);
					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
					vector3.setFromMatrixPosition(light.target.matrixWorld);
					uniforms.direction.sub(vector3);
					uniforms.direction.transformDirection(viewMatrix);
					spotLength++;
				} else if (light.isRectAreaLight) {
					const uniforms = state.rectArea[rectAreaLength];
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors

					matrix42.identity();
					matrix4.copy(light.matrixWorld);
					matrix4.premultiply(viewMatrix);
					matrix42.extractRotation(matrix4);
					uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
					uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
					uniforms.halfWidth.applyMatrix4(matrix42);
					uniforms.halfHeight.applyMatrix4(matrix42);
					rectAreaLength++;
				} else if (light.isPointLight) {
					const uniforms = state.point[pointLength];
					uniforms.position.setFromMatrixPosition(light.matrixWorld);
					uniforms.position.applyMatrix4(viewMatrix);
					pointLength++;
				} else if (light.isHemisphereLight) {
					const uniforms = state.hemi[hemiLength];
					uniforms.direction.setFromMatrixPosition(light.matrixWorld);
					uniforms.direction.transformDirection(viewMatrix);
					uniforms.direction.normalize();
					hemiLength++;
				}
			}
		}

		return {
			setup: setup,
			setupView: setupView,
			state: state
		};
	}

	function WebGLRenderState(extensions, capabilities) {
		const lights = new WebGLLights(extensions, capabilities);
		const lightsArray = [];
		const shadowsArray = [];

		function init() {
			lightsArray.length = 0;
			shadowsArray.length = 0;
		}

		function pushLight(light) {
			lightsArray.push(light);
		}

		function pushShadow(shadowLight) {
			shadowsArray.push(shadowLight);
		}

		function setupLights(physicallyCorrectLights) {
			lights.setup(lightsArray, physicallyCorrectLights);
		}

		function setupLightsView(camera) {
			lights.setupView(lightsArray, camera);
		}

		const state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,
			lights: lights
		};
		return {
			init: init,
			state: state,
			setupLights: setupLights,
			setupLightsView: setupLightsView,
			pushLight: pushLight,
			pushShadow: pushShadow
		};
	}

	function WebGLRenderStates(extensions, capabilities) {
		let renderStates = new WeakMap();

		function get(scene, renderCallDepth = 0) {
			let renderState;

			if (renderStates.has(scene) === false) {
				renderState = new WebGLRenderState(extensions, capabilities);
				renderStates.set(scene, [renderState]);
			} else {
				if (renderCallDepth >= renderStates.get(scene).length) {
					renderState = new WebGLRenderState(extensions, capabilities);
					renderStates.get(scene).push(renderState);
				} else {
					renderState = renderStates.get(scene)[renderCallDepth];
				}
			}

			return renderState;
		}

		function dispose() {
			renderStates = new WeakMap();
		}

		return {
			get: get,
			dispose: dispose
		};
	}

	/**
	 * parameters = {
	 *
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>
	 * }
	 */

	class MeshDepthMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshDepthMaterial';
			this.depthPacking = BasicDepthPacking;
			this.map = null;
			this.alphaMap = null;
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.fog = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.depthPacking = source.depthPacking;
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			return this;
		}

	}

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	/**
	 * parameters = {
	 *
	 *	referencePosition: <float>,
	 *	nearDistance: <float>,
	 *	farDistance: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>
	 *
	 * }
	 */

	class MeshDistanceMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshDistanceMaterial';
			this.referencePosition = new Vector3();
			this.nearDistance = 1;
			this.farDistance = 1000;
			this.map = null;
			this.alphaMap = null;
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.fog = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.referencePosition.copy(source.referencePosition);
			this.nearDistance = source.nearDistance;
			this.farDistance = source.farDistance;
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			return this;
		}

	}

	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

	const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
	const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

	function WebGLShadowMap(_renderer, _objects, _capabilities) {
		let _frustum = new Frustum();

		const _shadowMapSize = new Vector2(),
					_viewportSize = new Vector2(),
					_viewport = new Vector4(),
					_depthMaterial = new MeshDepthMaterial({
			depthPacking: RGBADepthPacking
		}),
					_distanceMaterial = new MeshDistanceMaterial(),
					_materialCache = {},
					_maxTextureSize = _capabilities.maxTextureSize;

		const shadowSide = {
			0: BackSide,
			1: FrontSide,
			2: DoubleSide
		};
		const shadowMaterialVertical = new ShaderMaterial({
			defines: {
				VSM_SAMPLES: 8
			},
			uniforms: {
				shadow_pass: {
					value: null
				},
				resolution: {
					value: new Vector2()
				},
				radius: {
					value: 4.0
				}
			},
			vertexShader: vertex,
			fragmentShader: fragment
		});
		const shadowMaterialHorizontal = shadowMaterialVertical.clone();
		shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
		const fullScreenTri = new BufferGeometry();
		fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
		const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
		const scope = this;
		this.enabled = false;
		this.autoUpdate = true;
		this.needsUpdate = false;
		this.type = PCFShadowMap;

		this.render = function (lights, scene, camera) {
			if (scope.enabled === false) return;
			if (scope.autoUpdate === false && scope.needsUpdate === false) return;
			if (lights.length === 0) return;

			const currentRenderTarget = _renderer.getRenderTarget();

			const activeCubeFace = _renderer.getActiveCubeFace();

			const activeMipmapLevel = _renderer.getActiveMipmapLevel();

			const _state = _renderer.state; // Set GL state for depth map.

			_state.setBlending(NoBlending);

			_state.buffers.color.setClear(1, 1, 1, 1);

			_state.buffers.depth.setTest(true);

			_state.setScissorTest(false); // render depth map


			for (let i = 0, il = lights.length; i < il; i++) {
				const light = lights[i];
				const shadow = light.shadow;

				if (shadow === undefined) {
					console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
					continue;
				}

				if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;

				_shadowMapSize.copy(shadow.mapSize);

				const shadowFrameExtents = shadow.getFrameExtents();

				_shadowMapSize.multiply(shadowFrameExtents);

				_viewportSize.copy(shadow.mapSize);

				if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
					if (_shadowMapSize.x > _maxTextureSize) {
						_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
						shadow.mapSize.x = _viewportSize.x;
					}

					if (_shadowMapSize.y > _maxTextureSize) {
						_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
						shadow.mapSize.y = _viewportSize.y;
					}
				}

				if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
					const pars = {
						minFilter: LinearFilter,
						magFilter: LinearFilter,
						format: RGBAFormat
					};
					shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
					shadow.map.texture.name = light.name + '.shadowMap';
					shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
					shadow.camera.updateProjectionMatrix();
				}

				if (shadow.map === null) {
					const pars = {
						minFilter: NearestFilter,
						magFilter: NearestFilter,
						format: RGBAFormat
					};
					shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
					shadow.map.texture.name = light.name + '.shadowMap';
					shadow.camera.updateProjectionMatrix();
				}

				_renderer.setRenderTarget(shadow.map);

				_renderer.clear();

				const viewportCount = shadow.getViewportCount();

				for (let vp = 0; vp < viewportCount; vp++) {
					const viewport = shadow.getViewport(vp);

					_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);

					_state.viewport(_viewport);

					shadow.updateMatrices(light, vp);
					_frustum = shadow.getFrustum();
					renderObject(scene, camera, shadow.camera, light, this.type);
				} // do blur pass for VSM


				if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
					VSMPass(shadow, camera);
				}

				shadow.needsUpdate = false;
			}

			scope.needsUpdate = false;

			_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
		};

		function VSMPass(shadow, camera) {
			const geometry = _objects.update(fullScreenMesh);

			if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
				shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
				shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
				shadowMaterialVertical.needsUpdate = true;
				shadowMaterialHorizontal.needsUpdate = true;
			} // vertical pass


			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialVertical.uniforms.radius.value = shadow.radius;

			_renderer.setRenderTarget(shadow.mapPass);

			_renderer.clear();

			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass


			shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
			shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;

			_renderer.setRenderTarget(shadow.map);

			_renderer.clear();

			_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
		}

		function getDepthMaterial(object, material, light, shadowCameraNear, shadowCameraFar, type) {
			let result = null;
			const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;

			if (customMaterial !== undefined) {
				result = customMaterial;
			} else {
				result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
			}

			if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {
				// in this case we need a unique material instance reflecting the
				// appropriate state
				const keyA = result.uuid,
							keyB = material.uuid;
				let materialsForVariant = _materialCache[keyA];

				if (materialsForVariant === undefined) {
					materialsForVariant = {};
					_materialCache[keyA] = materialsForVariant;
				}

				let cachedMaterial = materialsForVariant[keyB];

				if (cachedMaterial === undefined) {
					cachedMaterial = result.clone();
					materialsForVariant[keyB] = cachedMaterial;
				}

				result = cachedMaterial;
			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			if (type === VSMShadowMap) {
				result.side = material.shadowSide !== null ? material.shadowSide : material.side;
			} else {
				result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
			}

			result.alphaMap = material.alphaMap;
			result.alphaTest = material.alphaTest;
			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;
			result.displacementMap = material.displacementMap;
			result.displacementScale = material.displacementScale;
			result.displacementBias = material.displacementBias;
			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
				result.referencePosition.setFromMatrixPosition(light.matrixWorld);
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;
			}

			return result;
		}

		function renderObject(object, camera, shadowCamera, light, type) {
			if (object.visible === false) return;
			const visible = object.layers.test(camera.layers);

			if (visible && (object.isMesh || object.isLine || object.isPoints)) {
				if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
					object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);

					const geometry = _objects.update(object);

					const material = object.material;

					if (Array.isArray(material)) {
						const groups = geometry.groups;

						for (let k = 0, kl = groups.length; k < kl; k++) {
							const group = groups[k];
							const groupMaterial = material[group.materialIndex];

							if (groupMaterial && groupMaterial.visible) {
								const depthMaterial = getDepthMaterial(object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);

								_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
							}
						}
					} else if (material.visible) {
						const depthMaterial = getDepthMaterial(object, material, light, shadowCamera.near, shadowCamera.far, type);

						_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
					}
				}
			}

			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				renderObject(children[i], camera, shadowCamera, light, type);
			}
		}
	}

	function WebGLState(gl, extensions, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;

		function ColorBuffer() {
			let locked = false;
			const color = new Vector4();
			let currentColorMask = null;
			const currentColorClear = new Vector4(0, 0, 0, 0);
			return {
				setMask: function (colorMask) {
					if (currentColorMask !== colorMask && !locked) {
						gl.colorMask(colorMask, colorMask, colorMask, colorMask);
						currentColorMask = colorMask;
					}
				},
				setLocked: function (lock) {
					locked = lock;
				},
				setClear: function (r, g, b, a, premultipliedAlpha) {
					if (premultipliedAlpha === true) {
						r *= a;
						g *= a;
						b *= a;
					}

					color.set(r, g, b, a);

					if (currentColorClear.equals(color) === false) {
						gl.clearColor(r, g, b, a);
						currentColorClear.copy(color);
					}
				},
				reset: function () {
					locked = false;
					currentColorMask = null;
					currentColorClear.set(-1, 0, 0, 0); // set to invalid state
				}
			};
		}

		function DepthBuffer() {
			let locked = false;
			let currentDepthMask = null;
			let currentDepthFunc = null;
			let currentDepthClear = null;
			return {
				setTest: function (depthTest) {
					if (depthTest) {
						enable(gl.DEPTH_TEST);
					} else {
						disable(gl.DEPTH_TEST);
					}
				},
				setMask: function (depthMask) {
					if (currentDepthMask !== depthMask && !locked) {
						gl.depthMask(depthMask);
						currentDepthMask = depthMask;
					}
				},
				setFunc: function (depthFunc) {
					if (currentDepthFunc !== depthFunc) {
						if (depthFunc) {
							switch (depthFunc) {
								case NeverDepth:
									gl.depthFunc(gl.NEVER);
									break;

								case AlwaysDepth:
									gl.depthFunc(gl.ALWAYS);
									break;

								case LessDepth:
									gl.depthFunc(gl.LESS);
									break;

								case LessEqualDepth:
									gl.depthFunc(gl.LEQUAL);
									break;

								case EqualDepth:
									gl.depthFunc(gl.EQUAL);
									break;

								case GreaterEqualDepth:
									gl.depthFunc(gl.GEQUAL);
									break;

								case GreaterDepth:
									gl.depthFunc(gl.GREATER);
									break;

								case NotEqualDepth:
									gl.depthFunc(gl.NOTEQUAL);
									break;

								default:
									gl.depthFunc(gl.LEQUAL);
							}
						} else {
							gl.depthFunc(gl.LEQUAL);
						}

						currentDepthFunc = depthFunc;
					}
				},
				setLocked: function (lock) {
					locked = lock;
				},
				setClear: function (depth) {
					if (currentDepthClear !== depth) {
						gl.clearDepth(depth);
						currentDepthClear = depth;
					}
				},
				reset: function () {
					locked = false;
					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;
				}
			};
		}

		function StencilBuffer() {
			let locked = false;
			let currentStencilMask = null;
			let currentStencilFunc = null;
			let currentStencilRef = null;
			let currentStencilFuncMask = null;
			let currentStencilFail = null;
			let currentStencilZFail = null;
			let currentStencilZPass = null;
			let currentStencilClear = null;
			return {
				setTest: function (stencilTest) {
					if (!locked) {
						if (stencilTest) {
							enable(gl.STENCIL_TEST);
						} else {
							disable(gl.STENCIL_TEST);
						}
					}
				},
				setMask: function (stencilMask) {
					if (currentStencilMask !== stencilMask && !locked) {
						gl.stencilMask(stencilMask);
						currentStencilMask = stencilMask;
					}
				},
				setFunc: function (stencilFunc, stencilRef, stencilMask) {
					if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
						gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;
					}
				},
				setOp: function (stencilFail, stencilZFail, stencilZPass) {
					if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
						gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;
					}
				},
				setLocked: function (lock) {
					locked = lock;
				},
				setClear: function (stencil) {
					if (currentStencilClear !== stencil) {
						gl.clearStencil(stencil);
						currentStencilClear = stencil;
					}
				},
				reset: function () {
					locked = false;
					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;
				}
			};
		} //


		const colorBuffer = new ColorBuffer();
		const depthBuffer = new DepthBuffer();
		const stencilBuffer = new StencilBuffer();
		let enabledCapabilities = {};
		let currentBoundFramebuffers = {};
		let currentDrawbuffers = new WeakMap();
		let defaultDrawbuffers = [];
		let currentProgram = null;
		let currentBlendingEnabled = false;
		let currentBlending = null;
		let currentBlendEquation = null;
		let currentBlendSrc = null;
		let currentBlendDst = null;
		let currentBlendEquationAlpha = null;
		let currentBlendSrcAlpha = null;
		let currentBlendDstAlpha = null;
		let currentPremultipledAlpha = false;
		let currentFlipSided = null;
		let currentCullFace = null;
		let currentLineWidth = null;
		let currentPolygonOffsetFactor = null;
		let currentPolygonOffsetUnits = null;
		const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
		let lineWidthAvailable = false;
		let version = 0;
		const glVersion = gl.getParameter(gl.VERSION);

		if (glVersion.indexOf('WebGL') !== -1) {
			version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
			lineWidthAvailable = version >= 1.0;
		} else if (glVersion.indexOf('OpenGL ES') !== -1) {
			version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
			lineWidthAvailable = version >= 2.0;
		}

		let currentTextureSlot = null;
		let currentBoundTextures = {};
		const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
		const viewportParam = gl.getParameter(gl.VIEWPORT);
		const currentScissor = new Vector4().fromArray(scissorParam);
		const currentViewport = new Vector4().fromArray(viewportParam);

		function createTexture(type, target, count) {
			const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.

			const texture = gl.createTexture();
			gl.bindTexture(type, texture);
			gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
			gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

			for (let i = 0; i < count; i++) {
				gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
			}

			return texture;
		}

		const emptyTextures = {};
		emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
		emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init

		colorBuffer.setClear(0, 0, 0, 1);
		depthBuffer.setClear(1);
		stencilBuffer.setClear(0);
		enable(gl.DEPTH_TEST);
		depthBuffer.setFunc(LessEqualDepth);
		setFlipSided(false);
		setCullFace(CullFaceBack);
		enable(gl.CULL_FACE);
		setBlending(NoBlending); //

		function enable(id) {
			if (enabledCapabilities[id] !== true) {
				gl.enable(id);
				enabledCapabilities[id] = true;
			}
		}

		function disable(id) {
			if (enabledCapabilities[id] !== false) {
				gl.disable(id);
				enabledCapabilities[id] = false;
			}
		}

		function bindFramebuffer(target, framebuffer) {
			if (currentBoundFramebuffers[target] !== framebuffer) {
				gl.bindFramebuffer(target, framebuffer);
				currentBoundFramebuffers[target] = framebuffer;

				if (isWebGL2) {
					// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER
					if (target === gl.DRAW_FRAMEBUFFER) {
						currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
					}

					if (target === gl.FRAMEBUFFER) {
						currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
					}
				}

				return true;
			}

			return false;
		}

		function drawBuffers(renderTarget, framebuffer) {
			let drawBuffers = defaultDrawbuffers;
			let needsUpdate = false;

			if (renderTarget) {
				drawBuffers = currentDrawbuffers.get(framebuffer);

				if (drawBuffers === undefined) {
					drawBuffers = [];
					currentDrawbuffers.set(framebuffer, drawBuffers);
				}

				if (renderTarget.isWebGLMultipleRenderTargets) {
					const textures = renderTarget.texture;

					if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
						for (let i = 0, il = textures.length; i < il; i++) {
							drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;
						}

						drawBuffers.length = textures.length;
						needsUpdate = true;
					}
				} else {
					if (drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
						drawBuffers[0] = gl.COLOR_ATTACHMENT0;
						needsUpdate = true;
					}
				}
			} else {
				if (drawBuffers[0] !== gl.BACK) {
					drawBuffers[0] = gl.BACK;
					needsUpdate = true;
				}
			}

			if (needsUpdate) {
				if (capabilities.isWebGL2) {
					gl.drawBuffers(drawBuffers);
				} else {
					extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(drawBuffers);
				}
			}
		}

		function useProgram(program) {
			if (currentProgram !== program) {
				gl.useProgram(program);
				currentProgram = program;
				return true;
			}

			return false;
		}

		const equationToGL = {
			[AddEquation]: gl.FUNC_ADD,
			[SubtractEquation]: gl.FUNC_SUBTRACT,
			[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
		};

		if (isWebGL2) {
			equationToGL[MinEquation] = gl.MIN;
			equationToGL[MaxEquation] = gl.MAX;
		} else {
			const extension = extensions.get('EXT_blend_minmax');

			if (extension !== null) {
				equationToGL[MinEquation] = extension.MIN_EXT;
				equationToGL[MaxEquation] = extension.MAX_EXT;
			}
		}

		const factorToGL = {
			[ZeroFactor]: gl.ZERO,
			[OneFactor]: gl.ONE,
			[SrcColorFactor]: gl.SRC_COLOR,
			[SrcAlphaFactor]: gl.SRC_ALPHA,
			[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
			[DstColorFactor]: gl.DST_COLOR,
			[DstAlphaFactor]: gl.DST_ALPHA,
			[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
			[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
			[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
			[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
		};

		function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
			if (blending === NoBlending) {
				if (currentBlendingEnabled === true) {
					disable(gl.BLEND);
					currentBlendingEnabled = false;
				}

				return;
			}

			if (currentBlendingEnabled === false) {
				enable(gl.BLEND);
				currentBlendingEnabled = true;
			}

			if (blending !== CustomBlending) {
				if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
					if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
						gl.blendEquation(gl.FUNC_ADD);
						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;
					}

					if (premultipliedAlpha) {
						switch (blending) {
							case NormalBlending:
								gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
								break;

							case AdditiveBlending:
								gl.blendFunc(gl.ONE, gl.ONE);
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
								break;

							case MultiplyBlending:
								gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
								break;

							default:
								console.error('THREE.WebGLState: Invalid blending: ', blending);
								break;
						}
					} else {
						switch (blending) {
							case NormalBlending:
								gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
								break;

							case AdditiveBlending:
								gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
								break;

							case MultiplyBlending:
								gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
								break;

							default:
								console.error('THREE.WebGLState: Invalid blending: ', blending);
								break;
						}
					}

					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;
					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;
				}

				return;
			} // custom blending


			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
				gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;
			}

			if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
				gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;
			}

			currentBlending = blending;
			currentPremultipledAlpha = null;
		}

		function setMaterial(material, frontFaceCW) {
			material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
			let flipSided = material.side === BackSide;
			if (frontFaceCW) flipSided = !flipSided;
			setFlipSided(flipSided);
			material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
			depthBuffer.setFunc(material.depthFunc);
			depthBuffer.setTest(material.depthTest);
			depthBuffer.setMask(material.depthWrite);
			colorBuffer.setMask(material.colorWrite);
			const stencilWrite = material.stencilWrite;
			stencilBuffer.setTest(stencilWrite);

			if (stencilWrite) {
				stencilBuffer.setMask(material.stencilWriteMask);
				stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
				stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
			}

			setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
			material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
		} //


		function setFlipSided(flipSided) {
			if (currentFlipSided !== flipSided) {
				if (flipSided) {
					gl.frontFace(gl.CW);
				} else {
					gl.frontFace(gl.CCW);
				}

				currentFlipSided = flipSided;
			}
		}

		function setCullFace(cullFace) {
			if (cullFace !== CullFaceNone) {
				enable(gl.CULL_FACE);

				if (cullFace !== currentCullFace) {
					if (cullFace === CullFaceBack) {
						gl.cullFace(gl.BACK);
					} else if (cullFace === CullFaceFront) {
						gl.cullFace(gl.FRONT);
					} else {
						gl.cullFace(gl.FRONT_AND_BACK);
					}
				}
			} else {
				disable(gl.CULL_FACE);
			}

			currentCullFace = cullFace;
		}

		function setLineWidth(width) {
			if (width !== currentLineWidth) {
				if (lineWidthAvailable) gl.lineWidth(width);
				currentLineWidth = width;
			}
		}

		function setPolygonOffset(polygonOffset, factor, units) {
			if (polygonOffset) {
				enable(gl.POLYGON_OFFSET_FILL);

				if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
					gl.polygonOffset(factor, units);
					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;
				}
			} else {
				disable(gl.POLYGON_OFFSET_FILL);
			}
		}

		function setScissorTest(scissorTest) {
			if (scissorTest) {
				enable(gl.SCISSOR_TEST);
			} else {
				disable(gl.SCISSOR_TEST);
			}
		} // texture


		function activeTexture(webglSlot) {
			if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if (currentTextureSlot !== webglSlot) {
				gl.activeTexture(webglSlot);
				currentTextureSlot = webglSlot;
			}
		}

		function bindTexture(webglType, webglTexture) {
			if (currentTextureSlot === null) {
				activeTexture();
			}

			let boundTexture = currentBoundTextures[currentTextureSlot];

			if (boundTexture === undefined) {
				boundTexture = {
					type: undefined,
					texture: undefined
				};
				currentBoundTextures[currentTextureSlot] = boundTexture;
			}

			if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
				gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;
			}
		}

		function unbindTexture() {
			const boundTexture = currentBoundTextures[currentTextureSlot];

			if (boundTexture !== undefined && boundTexture.type !== undefined) {
				gl.bindTexture(boundTexture.type, null);
				boundTexture.type = undefined;
				boundTexture.texture = undefined;
			}
		}

		function compressedTexImage2D() {
			try {
				gl.compressedTexImage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texSubImage2D() {
			try {
				gl.texSubImage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texSubImage3D() {
			try {
				gl.texSubImage3D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function compressedTexSubImage2D() {
			try {
				gl.compressedTexSubImage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texStorage2D() {
			try {
				gl.texStorage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texStorage3D() {
			try {
				gl.texStorage3D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texImage2D() {
			try {
				gl.texImage2D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		}

		function texImage3D() {
			try {
				gl.texImage3D.apply(gl, arguments);
			} catch (error) {
				console.error('THREE.WebGLState:', error);
			}
		} //


		function scissor(scissor) {
			if (currentScissor.equals(scissor) === false) {
				gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
				currentScissor.copy(scissor);
			}
		}

		function viewport(viewport) {
			if (currentViewport.equals(viewport) === false) {
				gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
				currentViewport.copy(viewport);
			}
		} //


		function reset() {
			// reset state
			gl.disable(gl.BLEND);
			gl.disable(gl.CULL_FACE);
			gl.disable(gl.DEPTH_TEST);
			gl.disable(gl.POLYGON_OFFSET_FILL);
			gl.disable(gl.SCISSOR_TEST);
			gl.disable(gl.STENCIL_TEST);
			gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
			gl.blendEquation(gl.FUNC_ADD);
			gl.blendFunc(gl.ONE, gl.ZERO);
			gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
			gl.colorMask(true, true, true, true);
			gl.clearColor(0, 0, 0, 0);
			gl.depthMask(true);
			gl.depthFunc(gl.LESS);
			gl.clearDepth(1);
			gl.stencilMask(0xffffffff);
			gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);
			gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
			gl.clearStencil(0);
			gl.cullFace(gl.BACK);
			gl.frontFace(gl.CCW);
			gl.polygonOffset(0, 0);
			gl.activeTexture(gl.TEXTURE0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);

			if (isWebGL2 === true) {
				gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
				gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
			}

			gl.useProgram(null);
			gl.lineWidth(1);
			gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
			gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals

			enabledCapabilities = {};
			currentTextureSlot = null;
			currentBoundTextures = {};
			currentBoundFramebuffers = {};
			currentDrawbuffers = new WeakMap();
			defaultDrawbuffers = [];
			currentProgram = null;
			currentBlendingEnabled = false;
			currentBlending = null;
			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;
			currentPremultipledAlpha = false;
			currentFlipSided = null;
			currentCullFace = null;
			currentLineWidth = null;
			currentPolygonOffsetFactor = null;
			currentPolygonOffsetUnits = null;
			currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
			currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();
		}

		return {
			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},
			enable: enable,
			disable: disable,
			bindFramebuffer: bindFramebuffer,
			drawBuffers: drawBuffers,
			useProgram: useProgram,
			setBlending: setBlending,
			setMaterial: setMaterial,
			setFlipSided: setFlipSided,
			setCullFace: setCullFace,
			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,
			setScissorTest: setScissorTest,
			activeTexture: activeTexture,
			bindTexture: bindTexture,
			unbindTexture: unbindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,
			texStorage2D: texStorage2D,
			texStorage3D: texStorage3D,
			texSubImage2D: texSubImage2D,
			texSubImage3D: texSubImage3D,
			compressedTexSubImage2D: compressedTexSubImage2D,
			scissor: scissor,
			viewport: viewport,
			reset: reset
		};
	}

	function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
		const isWebGL2 = capabilities.isWebGL2;
		const maxTextures = capabilities.maxTextures;
		const maxCubemapSize = capabilities.maxCubemapSize;
		const maxTextureSize = capabilities.maxTextureSize;
		const maxSamples = capabilities.maxSamples;
		const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;

		const _videoTextures = new WeakMap();

		let _canvas;

		const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
		// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
		// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).


		let useOffscreenCanvas = false;

		try {
			useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;
		} catch (err) {// Ignore any errors
		}

		function createCanvas(width, height) {
			// Use OffscreenCanvas when available. Specially needed in web workers
			return useOffscreenCanvas ? new OffscreenCanvas(width, height) : createElementNS('canvas');
		}

		function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
			let scale = 1; // handle case if texture exceeds max size

			if (image.width > maxSize || image.height > maxSize) {
				scale = maxSize / Math.max(image.width, image.height);
			} // only perform resize if necessary


			if (scale < 1 || needsPowerOfTwo === true) {
				// only perform resize for certain image types
				if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
					const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
					const width = floor(scale * image.width);
					const height = floor(scale * image.height);
					if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas

					const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
					canvas.width = width;
					canvas.height = height;
					const context = canvas.getContext('2d');
					context.drawImage(image, 0, 0, width, height);
					console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');
					return canvas;
				} else {
					if ('data' in image) {
						console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
					}

					return image;
				}
			}

			return image;
		}

		function isPowerOfTwo$1(image) {
			return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
		}

		function textureNeedsPowerOfTwo(texture) {
			if (isWebGL2) return false;
			return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
		}

		function textureNeedsGenerateMipmaps(texture, supportsMips) {
			return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
		}

		function generateMipmap(target) {
			_gl.generateMipmap(target);
		}

		function getInternalFormat(internalFormatName, glFormat, glType, encoding, isVideoTexture = false) {
			if (isWebGL2 === false) return glFormat;

			if (internalFormatName !== null) {
				if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
				console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
			}

			let internalFormat = glFormat;

			if (glFormat === _gl.RED) {
				if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
			}

			if (glFormat === _gl.RG) {
				if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
				if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
			}

			if (glFormat === _gl.RGBA) {
				if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
				if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
				if (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === sRGBEncoding && isVideoTexture === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
				if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
				if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
			}

			if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
				extensions.get('EXT_color_buffer_float');
			}

			return internalFormat;
		}

		function getMipLevels(texture, image, supportsMips) {
			if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
				return Math.log2(Math.max(image.width, image.height)) + 1;
			} else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {
				// user-defined mipmaps
				return texture.mipmaps.length;
			} else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
				return image.mipmaps.length;
			} else {
				// texture without mipmaps (only base level)
				return 1;
			}
		} // Fallback filters for non-power-of-2 textures


		function filterFallback(f) {
			if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
				return _gl.NEAREST;
			}

			return _gl.LINEAR;
		} //


		function onTextureDispose(event) {
			const texture = event.target;
			texture.removeEventListener('dispose', onTextureDispose);
			deallocateTexture(texture);

			if (texture.isVideoTexture) {
				_videoTextures.delete(texture);
			}
		}

		function onRenderTargetDispose(event) {
			const renderTarget = event.target;
			renderTarget.removeEventListener('dispose', onRenderTargetDispose);
			deallocateRenderTarget(renderTarget);
		} //


		function deallocateTexture(texture) {
			const textureProperties = properties.get(texture);
			if (textureProperties.__webglInit === undefined) return; // check if it's necessary to remove the WebGLTexture object

			const source = texture.source;

			const webglTextures = _sources.get(source);

			if (webglTextures) {
				const webglTexture = webglTextures[textureProperties.__cacheKey];
				webglTexture.usedTimes--; // the WebGLTexture object is not used anymore, remove it

				if (webglTexture.usedTimes === 0) {
					deleteTexture(texture);
				} // remove the weak map entry if no WebGLTexture uses the source anymore


				if (Object.keys(webglTextures).length === 0) {
					_sources.delete(source);
				}
			}

			properties.remove(texture);
		}

		function deleteTexture(texture) {
			const textureProperties = properties.get(texture);

			_gl.deleteTexture(textureProperties.__webglTexture);

			const source = texture.source;

			const webglTextures = _sources.get(source);

			delete webglTextures[textureProperties.__cacheKey];
			info.memory.textures--;
		}

		function deallocateRenderTarget(renderTarget) {
			const texture = renderTarget.texture;
			const renderTargetProperties = properties.get(renderTarget);
			const textureProperties = properties.get(texture);

			if (textureProperties.__webglTexture !== undefined) {
				_gl.deleteTexture(textureProperties.__webglTexture);

				info.memory.textures--;
			}

			if (renderTarget.depthTexture) {
				renderTarget.depthTexture.dispose();
			}

			if (renderTarget.isWebGLCubeRenderTarget) {
				for (let i = 0; i < 6; i++) {
					_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);

					if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
				}
			} else {
				_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);

				if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
				if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
				if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
				if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
			}

			if (renderTarget.isWebGLMultipleRenderTargets) {
				for (let i = 0, il = texture.length; i < il; i++) {
					const attachmentProperties = properties.get(texture[i]);

					if (attachmentProperties.__webglTexture) {
						_gl.deleteTexture(attachmentProperties.__webglTexture);

						info.memory.textures--;
					}

					properties.remove(texture[i]);
				}
			}

			properties.remove(texture);
			properties.remove(renderTarget);
		} //


		let textureUnits = 0;

		function resetTextureUnits() {
			textureUnits = 0;
		}

		function allocateTextureUnit() {
			const textureUnit = textureUnits;

			if (textureUnit >= maxTextures) {
				console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
			}

			textureUnits += 1;
			return textureUnit;
		}

		function getTextureCacheKey(texture) {
			const array = [];
			array.push(texture.wrapS);
			array.push(texture.wrapT);
			array.push(texture.magFilter);
			array.push(texture.minFilter);
			array.push(texture.anisotropy);
			array.push(texture.internalFormat);
			array.push(texture.format);
			array.push(texture.type);
			array.push(texture.generateMipmaps);
			array.push(texture.premultiplyAlpha);
			array.push(texture.flipY);
			array.push(texture.unpackAlignment);
			array.push(texture.encoding);
			return array.join();
		} //


		function setTexture2D(texture, slot) {
			const textureProperties = properties.get(texture);
			if (texture.isVideoTexture) updateVideoTexture(texture);

			if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
				const image = texture.image;

				if (image === null) {
					console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');
				} else if (image.complete === false) {
					console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
				} else {
					uploadTexture(textureProperties, texture, slot);
					return;
				}
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);
		}

		function setTexture2DArray(texture, slot) {
			const textureProperties = properties.get(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				uploadTexture(textureProperties, texture, slot);
				return;
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);
		}

		function setTexture3D(texture, slot) {
			const textureProperties = properties.get(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				uploadTexture(textureProperties, texture, slot);
				return;
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);
		}

		function setTextureCube(texture, slot) {
			const textureProperties = properties.get(texture);

			if (texture.version > 0 && textureProperties.__version !== texture.version) {
				uploadCubeTexture(textureProperties, texture, slot);
				return;
			}

			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
		}

		const wrappingToGL = {
			[RepeatWrapping]: _gl.REPEAT,
			[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
			[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
		};
		const filterToGL = {
			[NearestFilter]: _gl.NEAREST,
			[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
			[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
			[LinearFilter]: _gl.LINEAR,
			[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
			[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
		};

		function setTextureParameters(textureType, texture, supportsMips) {
			if (supportsMips) {
				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);

				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);

				if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
					_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
				}

				_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);

				_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
			} else {
				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);

				_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);

				if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
					_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
				}

				if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
					console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
				}

				_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));

				_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));

				if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
					console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
				}
			}

			if (extensions.has('EXT_texture_filter_anisotropic') === true) {
				const extension = extensions.get('EXT_texture_filter_anisotropic');
				if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2

				if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only

				if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
					_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));

					properties.get(texture).__currentAnisotropy = texture.anisotropy;
				}
			}
		}

		function initTexture(textureProperties, texture) {
			let forceUpload = false;

			if (textureProperties.__webglInit === undefined) {
				textureProperties.__webglInit = true;
				texture.addEventListener('dispose', onTextureDispose);
			} // create Source <-> WebGLTextures mapping if necessary


			const source = texture.source;

			let webglTextures = _sources.get(source);

			if (webglTextures === undefined) {
				webglTextures = {};

				_sources.set(source, webglTextures);
			} // check if there is already a WebGLTexture object for the given texture parameters


			const textureCacheKey = getTextureCacheKey(texture);

			if (textureCacheKey !== textureProperties.__cacheKey) {
				// if not, create a new instance of WebGLTexture
				if (webglTextures[textureCacheKey] === undefined) {
					// create new entry
					webglTextures[textureCacheKey] = {
						texture: _gl.createTexture(),
						usedTimes: 0
					};
					info.memory.textures++; // when a new instance of WebGLTexture was created, a texture upload is required
					// even if the image contents are identical

					forceUpload = true;
				}

				webglTextures[textureCacheKey].usedTimes++; // every time the texture cache key changes, it's necessary to check if an instance of
				// WebGLTexture can be deleted in order to avoid a memory leak.

				const webglTexture = webglTextures[textureProperties.__cacheKey];

				if (webglTexture !== undefined) {
					webglTextures[textureProperties.__cacheKey].usedTimes--;

					if (webglTexture.usedTimes === 0) {
						deleteTexture(texture);
					}
				} // store references to cache key and WebGLTexture object


				textureProperties.__cacheKey = textureCacheKey;
				textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
			}

			return forceUpload;
		}

		function uploadTexture(textureProperties, texture, slot) {
			let textureType = _gl.TEXTURE_2D;
			if (texture.isDataArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
			if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;
			const forceUpload = initTexture(textureProperties, texture);
			const source = texture.source;
			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(textureType, textureProperties.__webglTexture);

			if (source.version !== source.__currentVersion || forceUpload === true) {
				_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);

				_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);

				_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);

				_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);

				const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
				let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
				image = verifyColorSpace(texture, image);
				const supportsMips = isPowerOfTwo$1(image) || isWebGL2,
							glFormat = utils.convert(texture.format, texture.encoding);
				let glType = utils.convert(texture.type),
						glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
				setTextureParameters(textureType, texture, supportsMips);
				let mipmap;
				const mipmaps = texture.mipmaps;
				const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
				const allocateMemory = textureProperties.__version === undefined;
				const levels = getMipLevels(texture, image, supportsMips);

				if (texture.isDepthTexture) {
					// populate depth texture with dummy data
					glInternalFormat = _gl.DEPTH_COMPONENT;

					if (isWebGL2) {
						if (texture.type === FloatType) {
							glInternalFormat = _gl.DEPTH_COMPONENT32F;
						} else if (texture.type === UnsignedIntType) {
							glInternalFormat = _gl.DEPTH_COMPONENT24;
						} else if (texture.type === UnsignedInt248Type) {
							glInternalFormat = _gl.DEPTH24_STENCIL8;
						} else {
							glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D
						}
					} else {
						if (texture.type === FloatType) {
							console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
						}
					} // validation checks for WebGL 1


					if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
							console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');
							texture.type = UnsignedShortType;
							glType = utils.convert(texture.type);
						}
					}

					if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
						// Depth stencil textures need the DEPTH_STENCIL internal format
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)

						if (texture.type !== UnsignedInt248Type) {
							console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
							texture.type = UnsignedInt248Type;
							glType = utils.convert(texture.type);
						}
					} //


					if (useTexStorage && allocateMemory) {
						state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
					} else {
						state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
					}
				} else if (texture.isDataTexture) {
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
					if (mipmaps.length > 0 && supportsMips) {
						if (useTexStorage && allocateMemory) {
							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
						}

						for (let i = 0, il = mipmaps.length; i < il; i++) {
							mipmap = mipmaps[i];

							if (useTexStorage) {
								state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
							} else {
								state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
							}
						}

						texture.generateMipmaps = false;
					} else {
						if (useTexStorage) {
							if (allocateMemory) {
								state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
							}

							state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
						} else {
							state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
						}
					}
				} else if (texture.isCompressedTexture) {
					if (useTexStorage && allocateMemory) {
						state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
					}

					for (let i = 0, il = mipmaps.length; i < il; i++) {
						mipmap = mipmaps[i];

						if (texture.format !== RGBAFormat) {
							if (glFormat !== null) {
								if (useTexStorage) {
									state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
								} else {
									state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
								}
							} else {
								console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');
							}
						} else {
							if (useTexStorage) {
								state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
							} else {
								state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
							}
						}
					}
				} else if (texture.isDataArrayTexture) {
					if (useTexStorage) {
						if (allocateMemory) {
							state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
						}

						state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
					} else {
						state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
					}
				} else if (texture.isData3DTexture) {
					if (useTexStorage) {
						if (allocateMemory) {
							state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
						}

						state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
					} else {
						state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
					}
				} else if (texture.isFramebufferTexture) {
					if (useTexStorage && allocateMemory) {
						state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
					} else {
						state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
					}
				} else {
					// regular Texture (image, video, canvas)
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
					if (mipmaps.length > 0 && supportsMips) {
						if (useTexStorage && allocateMemory) {
							state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
						}

						for (let i = 0, il = mipmaps.length; i < il; i++) {
							mipmap = mipmaps[i];

							if (useTexStorage) {
								state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
							} else {
								state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
							}
						}

						texture.generateMipmaps = false;
					} else {
						if (useTexStorage) {
							if (allocateMemory) {
								state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
							}

							state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
						} else {
							state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
						}
					}
				}

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					generateMipmap(textureType);
				}

				source.__currentVersion = source.version;
				if (texture.onUpdate) texture.onUpdate(texture);
			}

			textureProperties.__version = texture.version;
		}

		function uploadCubeTexture(textureProperties, texture, slot) {
			if (texture.image.length !== 6) return;
			const forceUpload = initTexture(textureProperties, texture);
			const source = texture.source;
			state.activeTexture(_gl.TEXTURE0 + slot);
			state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);

			if (source.version !== source.__currentVersion || forceUpload === true) {
				_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);

				_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);

				_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);

				_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);

				const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
				const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
				const cubeImage = [];

				for (let i = 0; i < 6; i++) {
					if (!isCompressed && !isDataTexture) {
						cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
					} else {
						cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
					}

					cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
				}

				const image = cubeImage[0],
							supportsMips = isPowerOfTwo$1(image) || isWebGL2,
							glFormat = utils.convert(texture.format, texture.encoding),
							glType = utils.convert(texture.type),
							glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
				const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
				const allocateMemory = textureProperties.__version === undefined;
				let levels = getMipLevels(texture, image, supportsMips);
				setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
				let mipmaps;

				if (isCompressed) {
					if (useTexStorage && allocateMemory) {
						state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
					}

					for (let i = 0; i < 6; i++) {
						mipmaps = cubeImage[i].mipmaps;

						for (let j = 0; j < mipmaps.length; j++) {
							const mipmap = mipmaps[j];

							if (texture.format !== RGBAFormat) {
								if (glFormat !== null) {
									if (useTexStorage) {
										state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
									} else {
										state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
									}
								} else {
									console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');
								}
							} else {
								if (useTexStorage) {
									state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
								} else {
									state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
								}
							}
						}
					}
				} else {
					mipmaps = texture.mipmaps;

					if (useTexStorage && allocateMemory) {
						// TODO: Uniformly handle mipmap definitions
						// Normal textures and compressed cube textures define base level + mips with their mipmap array
						// Uncompressed cube textures use their mipmap array only for mips (no base level)
						if (mipmaps.length > 0) levels++;
						state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
					}

					for (let i = 0; i < 6; i++) {
						if (isDataTexture) {
							if (useTexStorage) {
								state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
							} else {
								state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
							}

							for (let j = 0; j < mipmaps.length; j++) {
								const mipmap = mipmaps[j];
								const mipmapImage = mipmap.image[i].image;

								if (useTexStorage) {
									state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
								} else {
									state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
								}
							}
						} else {
							if (useTexStorage) {
								state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
							} else {
								state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
							}

							for (let j = 0; j < mipmaps.length; j++) {
								const mipmap = mipmaps[j];

								if (useTexStorage) {
									state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
								} else {
									state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
								}
							}
						}
					}
				}

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					// We assume images for cube map have the same size.
					generateMipmap(_gl.TEXTURE_CUBE_MAP);
				}

				source.__currentVersion = source.version;
				if (texture.onUpdate) texture.onUpdate(texture);
			}

			textureProperties.__version = texture.version;
		} // Render targets
		// Setup storage for target texture and bind it to correct framebuffer


		function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
			const glFormat = utils.convert(texture.format, texture.encoding);
			const glType = utils.convert(texture.type);
			const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
			const renderTargetProperties = properties.get(renderTarget);

			if (!renderTargetProperties.__hasExternalTextures) {
				if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
					state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
				} else {
					state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
				}
			}

			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

			if (useMultisampledRTT(renderTarget)) {
				multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
			} else {
				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
			}

			state.bindFramebuffer(_gl.FRAMEBUFFER, null);
		} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer


		function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
			_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);

			if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
				let glInternalFormat = _gl.DEPTH_COMPONENT16;

				if (isMultisample || useMultisampledRTT(renderTarget)) {
					const depthTexture = renderTarget.depthTexture;

					if (depthTexture && depthTexture.isDepthTexture) {
						if (depthTexture.type === FloatType) {
							glInternalFormat = _gl.DEPTH_COMPONENT32F;
						} else if (depthTexture.type === UnsignedIntType) {
							glInternalFormat = _gl.DEPTH_COMPONENT24;
						}
					}

					const samples = getRenderTargetSamples(renderTarget);

					if (useMultisampledRTT(renderTarget)) {
						multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
					} else {
						_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
					}
				} else {
					_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
				}

				_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
			} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
				const samples = getRenderTargetSamples(renderTarget);

				if (isMultisample && useMultisampledRTT(renderTarget) === false) {
					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
				} else if (useMultisampledRTT(renderTarget)) {
					multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
				} else {
					_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
				}

				_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
			} else {
				// Use the first texture for MRT so far
				const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;
				const glFormat = utils.convert(texture.format, texture.encoding);
				const glType = utils.convert(texture.type);
				const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
				const samples = getRenderTargetSamples(renderTarget);

				if (isMultisample && useMultisampledRTT(renderTarget) === false) {
					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
				} else if (useMultisampledRTT(renderTarget)) {
					multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
				} else {
					_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
				}
			}

			_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
		} // Setup resources for a Depth Texture for a FBO (needs an extension)


		function setupDepthTexture(framebuffer, renderTarget) {
			const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
			if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
			state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

			if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
			} // upload an empty depth texture with framebuffer size


			if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}

			setTexture2D(renderTarget.depthTexture, 0);

			const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;

			const samples = getRenderTargetSamples(renderTarget);

			if (renderTarget.depthTexture.format === DepthFormat) {
				if (useMultisampledRTT(renderTarget)) {
					multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
				} else {
					_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
				}
			} else if (renderTarget.depthTexture.format === DepthStencilFormat) {
				if (useMultisampledRTT(renderTarget)) {
					multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
				} else {
					_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
				}
			} else {
				throw new Error('Unknown depthTexture format');
			}
		} // Setup GL resources for a non-texture depth buffer


		function setupDepthRenderbuffer(renderTarget) {
			const renderTargetProperties = properties.get(renderTarget);
			const isCube = renderTarget.isWebGLCubeRenderTarget === true;

			if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
				if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
				setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
			} else {
				if (isCube) {
					renderTargetProperties.__webglDepthbuffer = [];

					for (let i = 0; i < 6; i++) {
						state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
						renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
						setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
					}
				} else {
					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
				}
			}

			state.bindFramebuffer(_gl.FRAMEBUFFER, null);
		} // rebind framebuffer with external textures


		function rebindTextures(renderTarget, colorTexture, depthTexture) {
			const renderTargetProperties = properties.get(renderTarget);

			if (colorTexture !== undefined) {
				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);
			}

			if (depthTexture !== undefined) {
				setupDepthRenderbuffer(renderTarget);
			}
		} // Set up GL resources for the render target


		function setupRenderTarget(renderTarget) {
			const texture = renderTarget.texture;
			const renderTargetProperties = properties.get(renderTarget);
			const textureProperties = properties.get(texture);
			renderTarget.addEventListener('dispose', onRenderTargetDispose);

			if (renderTarget.isWebGLMultipleRenderTargets !== true) {
				if (textureProperties.__webglTexture === undefined) {
					textureProperties.__webglTexture = _gl.createTexture();
				}

				textureProperties.__version = texture.version;
				info.memory.textures++;
			}

			const isCube = renderTarget.isWebGLCubeRenderTarget === true;
			const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Setup framebuffer

			if (isCube) {
				renderTargetProperties.__webglFramebuffer = [];

				for (let i = 0; i < 6; i++) {
					renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
				}
			} else {
				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				if (isMultipleRenderTargets) {
					if (capabilities.drawBuffers) {
						const textures = renderTarget.texture;

						for (let i = 0, il = textures.length; i < il; i++) {
							const attachmentProperties = properties.get(textures[i]);

							if (attachmentProperties.__webglTexture === undefined) {
								attachmentProperties.__webglTexture = _gl.createTexture();
								info.memory.textures++;
							}
						}
					} else {
						console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');
					}
				} else if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

					_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);

					const glFormat = utils.convert(texture.format, texture.encoding);
					const glType = utils.convert(texture.type);
					const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
					const samples = getRenderTargetSamples(renderTarget);

					_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);

					state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);

					_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);

					_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);

					if (renderTarget.depthBuffer) {
						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
					}

					state.bindFramebuffer(_gl.FRAMEBUFFER, null);
				}
			} // Setup color buffer


			if (isCube) {
				state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
				setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);

				for (let i = 0; i < 6; i++) {
					setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
				}

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					generateMipmap(_gl.TEXTURE_CUBE_MAP);
				}

				state.unbindTexture();
			} else if (isMultipleRenderTargets) {
				const textures = renderTarget.texture;

				for (let i = 0, il = textures.length; i < il; i++) {
					const attachment = textures[i];
					const attachmentProperties = properties.get(attachment);
					state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
					setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
					setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);

					if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
						generateMipmap(_gl.TEXTURE_2D);
					}
				}

				state.unbindTexture();
			} else {
				let glTextureType = _gl.TEXTURE_2D;

				if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
					if (isWebGL2) {
						glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
					} else {
						console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');
					}
				}

				state.bindTexture(glTextureType, textureProperties.__webglTexture);
				setTextureParameters(glTextureType, texture, supportsMips);
				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					generateMipmap(glTextureType);
				}

				state.unbindTexture();
			} // Setup depth and stencil buffers


			if (renderTarget.depthBuffer) {
				setupDepthRenderbuffer(renderTarget);
			}
		}

		function updateRenderTargetMipmap(renderTarget) {
			const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];

			for (let i = 0, il = textures.length; i < il; i++) {
				const texture = textures[i];

				if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
					const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;

					const webglTexture = properties.get(texture).__webglTexture;

					state.bindTexture(target, webglTexture);
					generateMipmap(target);
					state.unbindTexture();
				}
			}
		}

		function updateMultisampleRenderTarget(renderTarget) {
			if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
				const width = renderTarget.width;
				const height = renderTarget.height;
				let mask = _gl.COLOR_BUFFER_BIT;
				const invalidationArray = [_gl.COLOR_ATTACHMENT0];
				const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;

				if (renderTarget.depthBuffer) {
					invalidationArray.push(depthStyle);
				}

				const renderTargetProperties = properties.get(renderTarget);
				const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;

				if (ignoreDepthValues === false) {
					if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
					if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
				}

				state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
				state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);

				if (ignoreDepthValues === true) {
					_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);

					_gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
				}

				_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);

				_gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);

				state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
				state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
			}
		}

		function getRenderTargetSamples(renderTarget) {
			return Math.min(maxSamples, renderTarget.samples);
		}

		function useMultisampledRTT(renderTarget) {
			const renderTargetProperties = properties.get(renderTarget);
			return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;
		}

		function updateVideoTexture(texture) {
			const frame = info.render.frame; // Check the last frame we updated the VideoTexture

			if (_videoTextures.get(texture) !== frame) {
				_videoTextures.set(texture, frame);

				texture.update();
			}
		}

		function verifyColorSpace(texture, image) {
			const encoding = texture.encoding;
			const format = texture.format;
			const type = texture.type;
			if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;

			if (encoding !== LinearEncoding) {
				// sRGB
				if (encoding === sRGBEncoding) {
					if (isWebGL2 === false) {
						// in WebGL 1, try to use EXT_sRGB extension and unsized formats
						if (extensions.has('EXT_sRGB') === true && format === RGBAFormat) {
							texture.format = _SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension

							texture.minFilter = LinearFilter;
							texture.generateMipmaps = false;
						} else {
							// slow fallback (CPU decode)
							image = ImageUtils.sRGBToLinear(image);
						}
					} else {
						// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
						if (format !== RGBAFormat || type !== UnsignedByteType) {
							console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');
						}
					}
				} else {
					console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);
				}
			}

			return image;
		} //


		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;
		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.rebindTextures = rebindTextures;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
		this.setupDepthRenderbuffer = setupDepthRenderbuffer;
		this.setupFrameBufferTexture = setupFrameBufferTexture;
		this.useMultisampledRTT = useMultisampledRTT;
	}

	function WebGLUtils(gl, extensions, capabilities) {
		const isWebGL2 = capabilities.isWebGL2;

		function convert(p, encoding = null) {
			let extension;
			if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
			if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
			if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
			if (p === ByteType) return gl.BYTE;
			if (p === ShortType) return gl.SHORT;
			if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;
			if (p === IntType) return gl.INT;
			if (p === UnsignedIntType) return gl.UNSIGNED_INT;
			if (p === FloatType) return gl.FLOAT;

			if (p === HalfFloatType) {
				if (isWebGL2) return gl.HALF_FLOAT;
				extension = extensions.get('OES_texture_half_float');

				if (extension !== null) {
					return extension.HALF_FLOAT_OES;
				} else {
					return null;
				}
			}

			if (p === AlphaFormat) return gl.ALPHA;
			if (p === RGBAFormat) return gl.RGBA;
			if (p === LuminanceFormat) return gl.LUMINANCE;
			if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
			if (p === DepthFormat) return gl.DEPTH_COMPONENT;
			if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
			if (p === RedFormat) return gl.RED;

			if (p === RGBFormat) {
				console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');
				return gl.RGBA;
			} // WebGL 1 sRGB fallback


			if (p === _SRGBAFormat) {
				extension = extensions.get('EXT_sRGB');

				if (extension !== null) {
					return extension.SRGB_ALPHA_EXT;
				} else {
					return null;
				}
			} // WebGL2 formats.


			if (p === RedIntegerFormat) return gl.RED_INTEGER;
			if (p === RGFormat) return gl.RG;
			if (p === RGIntegerFormat) return gl.RG_INTEGER;
			if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER; // S3TC

			if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
				if (encoding === sRGBEncoding) {
					extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');

					if (extension !== null) {
						if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
						if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
						if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
						if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
					} else {
						return null;
					}
				} else {
					extension = extensions.get('WEBGL_compressed_texture_s3tc');

					if (extension !== null) {
						if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
						if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
						if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
						if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
					} else {
						return null;
					}
				}
			} // PVRTC


			if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
				extension = extensions.get('WEBGL_compressed_texture_pvrtc');

				if (extension !== null) {
					if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
				} else {
					return null;
				}
			} // ETC1


			if (p === RGB_ETC1_Format) {
				extension = extensions.get('WEBGL_compressed_texture_etc1');

				if (extension !== null) {
					return extension.COMPRESSED_RGB_ETC1_WEBGL;
				} else {
					return null;
				}
			} // ETC2


			if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
				extension = extensions.get('WEBGL_compressed_texture_etc');

				if (extension !== null) {
					if (p === RGB_ETC2_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
					if (p === RGBA_ETC2_EAC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
				} else {
					return null;
				}
			} // ASTC


			if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
				extension = extensions.get('WEBGL_compressed_texture_astc');

				if (extension !== null) {
					if (p === RGBA_ASTC_4x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
					if (p === RGBA_ASTC_5x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
					if (p === RGBA_ASTC_5x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
					if (p === RGBA_ASTC_6x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
					if (p === RGBA_ASTC_6x6_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
					if (p === RGBA_ASTC_8x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
					if (p === RGBA_ASTC_8x6_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
					if (p === RGBA_ASTC_8x8_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
					if (p === RGBA_ASTC_10x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
					if (p === RGBA_ASTC_10x6_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
					if (p === RGBA_ASTC_10x8_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
					if (p === RGBA_ASTC_10x10_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
					if (p === RGBA_ASTC_12x10_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
					if (p === RGBA_ASTC_12x12_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
				} else {
					return null;
				}
			} // BPTC


			if (p === RGBA_BPTC_Format) {
				extension = extensions.get('EXT_texture_compression_bptc');

				if (extension !== null) {
					if (p === RGBA_BPTC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
				} else {
					return null;
				}
			} //


			if (p === UnsignedInt248Type) {
				if (isWebGL2) return gl.UNSIGNED_INT_24_8;
				extension = extensions.get('WEBGL_depth_texture');

				if (extension !== null) {
					return extension.UNSIGNED_INT_24_8_WEBGL;
				} else {
					return null;
				}
			}
		}

		return {
			convert: convert
		};
	}

	class ArrayCamera extends PerspectiveCamera {
		constructor(array = []) {
			super();
			this.cameras = array;
		}

	}

	ArrayCamera.prototype.isArrayCamera = true;

	class Group extends Object3D {
		constructor() {
			super();
			this.type = 'Group';
		}

	}

	Group.prototype.isGroup = true;

	const _moveEvent = {
		type: 'move'
	};

	class WebXRController {
		constructor() {
			this._targetRay = null;
			this._grip = null;
			this._hand = null;
		}

		getHandSpace() {
			if (this._hand === null) {
				this._hand = new Group();
				this._hand.matrixAutoUpdate = false;
				this._hand.visible = false;
				this._hand.joints = {};
				this._hand.inputState = {
					pinching: false
				};
			}

			return this._hand;
		}

		getTargetRaySpace() {
			if (this._targetRay === null) {
				this._targetRay = new Group();
				this._targetRay.matrixAutoUpdate = false;
				this._targetRay.visible = false;
				this._targetRay.hasLinearVelocity = false;
				this._targetRay.linearVelocity = new Vector3();
				this._targetRay.hasAngularVelocity = false;
				this._targetRay.angularVelocity = new Vector3();
			}

			return this._targetRay;
		}

		getGripSpace() {
			if (this._grip === null) {
				this._grip = new Group();
				this._grip.matrixAutoUpdate = false;
				this._grip.visible = false;
				this._grip.hasLinearVelocity = false;
				this._grip.linearVelocity = new Vector3();
				this._grip.hasAngularVelocity = false;
				this._grip.angularVelocity = new Vector3();
			}

			return this._grip;
		}

		dispatchEvent(event) {
			if (this._targetRay !== null) {
				this._targetRay.dispatchEvent(event);
			}

			if (this._grip !== null) {
				this._grip.dispatchEvent(event);
			}

			if (this._hand !== null) {
				this._hand.dispatchEvent(event);
			}

			return this;
		}

		disconnect(inputSource) {
			this.dispatchEvent({
				type: 'disconnected',
				data: inputSource
			});

			if (this._targetRay !== null) {
				this._targetRay.visible = false;
			}

			if (this._grip !== null) {
				this._grip.visible = false;
			}

			if (this._hand !== null) {
				this._hand.visible = false;
			}

			return this;
		}

		update(inputSource, frame, referenceSpace) {
			let inputPose = null;
			let gripPose = null;
			let handPose = null;
			const targetRay = this._targetRay;
			const grip = this._grip;
			const hand = this._hand;

			if (inputSource && frame.session.visibilityState !== 'visible-blurred') {
				if (targetRay !== null) {
					inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);

					if (inputPose !== null) {
						targetRay.matrix.fromArray(inputPose.transform.matrix);
						targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);

						if (inputPose.linearVelocity) {
							targetRay.hasLinearVelocity = true;
							targetRay.linearVelocity.copy(inputPose.linearVelocity);
						} else {
							targetRay.hasLinearVelocity = false;
						}

						if (inputPose.angularVelocity) {
							targetRay.hasAngularVelocity = true;
							targetRay.angularVelocity.copy(inputPose.angularVelocity);
						} else {
							targetRay.hasAngularVelocity = false;
						}

						this.dispatchEvent(_moveEvent);
					}
				}

				if (hand && inputSource.hand) {
					handPose = true;

					for (const inputjoint of inputSource.hand.values()) {
						// Update the joints groups with the XRJoint poses
						const jointPose = frame.getJointPose(inputjoint, referenceSpace);

						if (hand.joints[inputjoint.jointName] === undefined) {
							// The transform of this joint will be updated with the joint pose on each frame
							const joint = new Group();
							joint.matrixAutoUpdate = false;
							joint.visible = false;
							hand.joints[inputjoint.jointName] = joint; // ??

							hand.add(joint);
						}

						const joint = hand.joints[inputjoint.jointName];

						if (jointPose !== null) {
							joint.matrix.fromArray(jointPose.transform.matrix);
							joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
							joint.jointRadius = jointPose.radius;
						}

						joint.visible = jointPose !== null;
					} // Custom events
					// Check pinchz


					const indexTip = hand.joints['index-finger-tip'];
					const thumbTip = hand.joints['thumb-tip'];
					const distance = indexTip.position.distanceTo(thumbTip.position);
					const distanceToPinch = 0.02;
					const threshold = 0.005;

					if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
						hand.inputState.pinching = false;
						this.dispatchEvent({
							type: 'pinchend',
							handedness: inputSource.handedness,
							target: this
						});
					} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
						hand.inputState.pinching = true;
						this.dispatchEvent({
							type: 'pinchstart',
							handedness: inputSource.handedness,
							target: this
						});
					}
				} else {
					if (grip !== null && inputSource.gripSpace) {
						gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);

						if (gripPose !== null) {
							grip.matrix.fromArray(gripPose.transform.matrix);
							grip.matrix.decompose(grip.position, grip.rotation, grip.scale);

							if (gripPose.linearVelocity) {
								grip.hasLinearVelocity = true;
								grip.linearVelocity.copy(gripPose.linearVelocity);
							} else {
								grip.hasLinearVelocity = false;
							}

							if (gripPose.angularVelocity) {
								grip.hasAngularVelocity = true;
								grip.angularVelocity.copy(gripPose.angularVelocity);
							} else {
								grip.hasAngularVelocity = false;
							}
						}
					}
				}
			}

			if (targetRay !== null) {
				targetRay.visible = inputPose !== null;
			}

			if (grip !== null) {
				grip.visible = gripPose !== null;
			}

			if (hand !== null) {
				hand.visible = handPose !== null;
			}

			return this;
		}

	}

	class DepthTexture extends Texture {
		constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
			format = format !== undefined ? format : DepthFormat;

			if (format !== DepthFormat && format !== DepthStencilFormat) {
				throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
			}

			if (type === undefined && format === DepthFormat) type = UnsignedShortType;
			if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
			this.image = {
				width: width,
				height: height
			};
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
			this.flipY = false;
			this.generateMipmaps = false;
		}

	}

	DepthTexture.prototype.isDepthTexture = true;

	class WebXRManager extends EventDispatcher {
		constructor(renderer, gl) {
			super();
			const scope = this;
			let session = null;
			let framebufferScaleFactor = 1.0;
			let referenceSpace = null;
			let referenceSpaceType = 'local-floor';
			let pose = null;
			let glBinding = null;
			let glProjLayer = null;
			let glBaseLayer = null;
			let xrFrame = null;
			const attributes = gl.getContextAttributes();
			let initialRenderTarget = null;
			let newRenderTarget = null;
			const controllers = [];
			const inputSourcesMap = new Map(); //

			const cameraL = new PerspectiveCamera();
			cameraL.layers.enable(1);
			cameraL.viewport = new Vector4();
			const cameraR = new PerspectiveCamera();
			cameraR.layers.enable(2);
			cameraR.viewport = new Vector4();
			const cameras = [cameraL, cameraR];
			const cameraVR = new ArrayCamera();
			cameraVR.layers.enable(1);
			cameraVR.layers.enable(2);
			let _currentDepthNear = null;
			let _currentDepthFar = null; //

			this.cameraAutoUpdate = true;
			this.enabled = false;
			this.isPresenting = false;

			this.getController = function (index) {
				let controller = controllers[index];

				if (controller === undefined) {
					controller = new WebXRController();
					controllers[index] = controller;
				}

				return controller.getTargetRaySpace();
			};

			this.getControllerGrip = function (index) {
				let controller = controllers[index];

				if (controller === undefined) {
					controller = new WebXRController();
					controllers[index] = controller;
				}

				return controller.getGripSpace();
			};

			this.getHand = function (index) {
				let controller = controllers[index];

				if (controller === undefined) {
					controller = new WebXRController();
					controllers[index] = controller;
				}

				return controller.getHandSpace();
			}; //


			function onSessionEvent(event) {
				const controller = inputSourcesMap.get(event.inputSource);

				if (controller) {
					controller.dispatchEvent({
						type: event.type,
						data: event.inputSource
					});
				}
			}

			function onSessionEnd() {
				inputSourcesMap.forEach(function (controller, inputSource) {
					controller.disconnect(inputSource);
				});
				inputSourcesMap.clear();
				_currentDepthNear = null;
				_currentDepthFar = null; // restore framebuffer/rendering state

				renderer.setRenderTarget(initialRenderTarget);
				glBaseLayer = null;
				glProjLayer = null;
				glBinding = null;
				session = null;
				newRenderTarget = null; //

				animation.stop();
				scope.isPresenting = false;
				scope.dispatchEvent({
					type: 'sessionend'
				});
			}

			this.setFramebufferScaleFactor = function (value) {
				framebufferScaleFactor = value;

				if (scope.isPresenting === true) {
					console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
				}
			};

			this.setReferenceSpaceType = function (value) {
				referenceSpaceType = value;

				if (scope.isPresenting === true) {
					console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
				}
			};

			this.getReferenceSpace = function () {
				return referenceSpace;
			};

			this.getBaseLayer = function () {
				return glProjLayer !== null ? glProjLayer : glBaseLayer;
			};

			this.getBinding = function () {
				return glBinding;
			};

			this.getFrame = function () {
				return xrFrame;
			};

			this.getSession = function () {
				return session;
			};

			this.setSession = async function (value) {
				session = value;

				if (session !== null) {
					initialRenderTarget = renderer.getRenderTarget();
					session.addEventListener('select', onSessionEvent);
					session.addEventListener('selectstart', onSessionEvent);
					session.addEventListener('selectend', onSessionEvent);
					session.addEventListener('squeeze', onSessionEvent);
					session.addEventListener('squeezestart', onSessionEvent);
					session.addEventListener('squeezeend', onSessionEvent);
					session.addEventListener('end', onSessionEnd);
					session.addEventListener('inputsourceschange', onInputSourcesChange);

					if (attributes.xrCompatible !== true) {
						await gl.makeXRCompatible();
					}

					if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
						const layerInit = {
							antialias: session.renderState.layers === undefined ? attributes.antialias : true,
							alpha: attributes.alpha,
							depth: attributes.depth,
							stencil: attributes.stencil,
							framebufferScaleFactor: framebufferScaleFactor
						};
						glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
						session.updateRenderState({
							baseLayer: glBaseLayer
						});
						newRenderTarget = new WebGLRenderTarget(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
							format: RGBAFormat,
							type: UnsignedByteType,
							encoding: renderer.outputEncoding
						});
					} else {
						let depthFormat = null;
						let depthType = null;
						let glDepthFormat = null;

						if (attributes.depth) {
							glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
							depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
							depthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;
						}

						const projectionlayerInit = {
							colorFormat: renderer.outputEncoding === sRGBEncoding ? gl.SRGB8_ALPHA8 : gl.RGBA8,
							depthFormat: glDepthFormat,
							scaleFactor: framebufferScaleFactor
						};
						glBinding = new XRWebGLBinding(session, gl);
						glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
						session.updateRenderState({
							layers: [glProjLayer]
						});
						newRenderTarget = new WebGLRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
							format: RGBAFormat,
							type: UnsignedByteType,
							depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
							stencilBuffer: attributes.stencil,
							encoding: renderer.outputEncoding,
							samples: attributes.antialias ? 4 : 0
						});
						const renderTargetProperties = renderer.properties.get(newRenderTarget);
						renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
					}

					newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
					// Set foveation to maximum.

					this.setFoveation(1.0);
					referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
					animation.setContext(session);
					animation.start();
					scope.isPresenting = true;
					scope.dispatchEvent({
						type: 'sessionstart'
					});
				}
			};

			function onInputSourcesChange(event) {
				const inputSources = session.inputSources; // Assign inputSources to available controllers

				for (let i = 0; i < controllers.length; i++) {
					inputSourcesMap.set(inputSources[i], controllers[i]);
				} // Notify disconnected


				for (let i = 0; i < event.removed.length; i++) {
					const inputSource = event.removed[i];
					const controller = inputSourcesMap.get(inputSource);

					if (controller) {
						controller.dispatchEvent({
							type: 'disconnected',
							data: inputSource
						});
						inputSourcesMap.delete(inputSource);
					}
				} // Notify connected


				for (let i = 0; i < event.added.length; i++) {
					const inputSource = event.added[i];
					const controller = inputSourcesMap.get(inputSource);

					if (controller) {
						controller.dispatchEvent({
							type: 'connected',
							data: inputSource
						});
					}
				}
			} //


			const cameraLPos = new Vector3();
			const cameraRPos = new Vector3();
			/**
			 * Assumes 2 cameras that are parallel and share an X-axis, and that
			 * the cameras' projection and world matrices have already been set.
			 * And that near and far planes are identical for both cameras.
			 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
			 */

			function setProjectionFromUnion(camera, cameraL, cameraR) {
				cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
				cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
				const ipd = cameraLPos.distanceTo(cameraRPos);
				const projL = cameraL.projectionMatrix.elements;
				const projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
				// most likely identical top and bottom frustum extents.
				// Use the left camera for these values.

				const near = projL[14] / (projL[10] - 1);
				const far = projL[14] / (projL[10] + 1);
				const topFov = (projL[9] + 1) / projL[5];
				const bottomFov = (projL[9] - 1) / projL[5];
				const leftFov = (projL[8] - 1) / projL[0];
				const rightFov = (projR[8] + 1) / projR[0];
				const left = near * leftFov;
				const right = near * rightFov; // Calculate the new camera's position offset from the
				// left camera. xOffset should be roughly half `ipd`.

				const zOffset = ipd / (-leftFov + rightFov);
				const xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?

				cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
				camera.translateX(xOffset);
				camera.translateZ(zOffset);
				camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
				camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
				// the values so that the near plane's position does not change in world space,
				// although must now be relative to the new union camera.

				const near2 = near + zOffset;
				const far2 = far + zOffset;
				const left2 = left - xOffset;
				const right2 = right + (ipd - xOffset);
				const top2 = topFov * far / far2 * near2;
				const bottom2 = bottomFov * far / far2 * near2;
				camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
			}

			function updateCamera(camera, parent) {
				if (parent === null) {
					camera.matrixWorld.copy(camera.matrix);
				} else {
					camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
				}

				camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
			}

			this.updateCamera = function (camera) {
				if (session === null) return;
				cameraVR.near = cameraR.near = cameraL.near = camera.near;
				cameraVR.far = cameraR.far = cameraL.far = camera.far;

				if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
					// Note that the new renderState won't apply until the next frame. See #18320
					session.updateRenderState({
						depthNear: cameraVR.near,
						depthFar: cameraVR.far
					});
					_currentDepthNear = cameraVR.near;
					_currentDepthFar = cameraVR.far;
				}

				const parent = camera.parent;
				const cameras = cameraVR.cameras;
				updateCamera(cameraVR, parent);

				for (let i = 0; i < cameras.length; i++) {
					updateCamera(cameras[i], parent);
				}

				cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children

				camera.position.copy(cameraVR.position);
				camera.quaternion.copy(cameraVR.quaternion);
				camera.scale.copy(cameraVR.scale);
				camera.matrix.copy(cameraVR.matrix);
				camera.matrixWorld.copy(cameraVR.matrixWorld);
				const children = camera.children;

				for (let i = 0, l = children.length; i < l; i++) {
					children[i].updateMatrixWorld(true);
				} // update projection matrix for proper view frustum culling


				if (cameras.length === 2) {
					setProjectionFromUnion(cameraVR, cameraL, cameraR);
				} else {
					// assume single camera setup (AR)
					cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
				}
			};

			this.getCamera = function () {
				return cameraVR;
			};

			this.getFoveation = function () {
				if (glProjLayer !== null) {
					return glProjLayer.fixedFoveation;
				}

				if (glBaseLayer !== null) {
					return glBaseLayer.fixedFoveation;
				}

				return undefined;
			};

			this.setFoveation = function (foveation) {
				// 0 = no foveation = full resolution
				// 1 = maximum foveation = the edges render at lower resolution
				if (glProjLayer !== null) {
					glProjLayer.fixedFoveation = foveation;
				}

				if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {
					glBaseLayer.fixedFoveation = foveation;
				}
			}; // Animation Loop


			let onAnimationFrameCallback = null;

			function onAnimationFrame(time, frame) {
				pose = frame.getViewerPose(referenceSpace);
				xrFrame = frame;

				if (pose !== null) {
					const views = pose.views;

					if (glBaseLayer !== null) {
						renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
						renderer.setRenderTarget(newRenderTarget);
					}

					let cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list

					if (views.length !== cameraVR.cameras.length) {
						cameraVR.cameras.length = 0;
						cameraVRNeedsUpdate = true;
					}

					for (let i = 0; i < views.length; i++) {
						const view = views[i];
						let viewport = null;

						if (glBaseLayer !== null) {
							viewport = glBaseLayer.getViewport(view);
						} else {
							const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
							viewport = glSubImage.viewport; // For side-by-side projection, we only produce a single texture for both eyes.

							if (i === 0) {
								renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
								renderer.setRenderTarget(newRenderTarget);
							}
						}

						const camera = cameras[i];
						camera.matrix.fromArray(view.transform.matrix);
						camera.projectionMatrix.fromArray(view.projectionMatrix);
						camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);

						if (i === 0) {
							cameraVR.matrix.copy(camera.matrix);
						}

						if (cameraVRNeedsUpdate === true) {
							cameraVR.cameras.push(camera);
						}
					}
				} //


				const inputSources = session.inputSources;

				for (let i = 0; i < controllers.length; i++) {
					const controller = controllers[i];
					const inputSource = inputSources[i];
					controller.update(inputSource, frame, referenceSpace);
				}

				if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
				xrFrame = null;
			}

			const animation = new WebGLAnimation();
			animation.setAnimationLoop(onAnimationFrame);

			this.setAnimationLoop = function (callback) {
				onAnimationFrameCallback = callback;
			};

			this.dispose = function () {};
		}

	}

	function WebGLMaterials(properties) {
		function refreshFogUniforms(uniforms, fog) {
			uniforms.fogColor.value.copy(fog.color);

			if (fog.isFog) {
				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;
			} else if (fog.isFogExp2) {
				uniforms.fogDensity.value = fog.density;
			}
		}

		function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
			if (material.isMeshBasicMaterial) {
				refreshUniformsCommon(uniforms, material);
			} else if (material.isMeshLambertMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsLambert(uniforms, material);
			} else if (material.isMeshToonMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsToon(uniforms, material);
			} else if (material.isMeshPhongMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsPhong(uniforms, material);
			} else if (material.isMeshStandardMaterial) {
				refreshUniformsCommon(uniforms, material);

				if (material.isMeshPhysicalMaterial) {
					refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
				} else {
					refreshUniformsStandard(uniforms, material);
				}
			} else if (material.isMeshMatcapMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsMatcap(uniforms, material);
			} else if (material.isMeshDepthMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsDepth(uniforms, material);
			} else if (material.isMeshDistanceMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsDistance(uniforms, material);
			} else if (material.isMeshNormalMaterial) {
				refreshUniformsCommon(uniforms, material);
				refreshUniformsNormal(uniforms, material);
			} else if (material.isLineBasicMaterial) {
				refreshUniformsLine(uniforms, material);

				if (material.isLineDashedMaterial) {
					refreshUniformsDash(uniforms, material);
				}
			} else if (material.isPointsMaterial) {
				refreshUniformsPoints(uniforms, material, pixelRatio, height);
			} else if (material.isSpriteMaterial) {
				refreshUniformsSprites(uniforms, material);
			} else if (material.isShadowMaterial) {
				uniforms.color.value.copy(material.color);
				uniforms.opacity.value = material.opacity;
			} else if (material.isShaderMaterial) {
				material.uniformsNeedUpdate = false; // #15581
			}
		}

		function refreshUniformsCommon(uniforms, material) {
			uniforms.opacity.value = material.opacity;

			if (material.color) {
				uniforms.diffuse.value.copy(material.color);
			}

			if (material.emissive) {
				uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
			}

			if (material.map) {
				uniforms.map.value = material.map;
			}

			if (material.alphaMap) {
				uniforms.alphaMap.value = material.alphaMap;
			}

			if (material.specularMap) {
				uniforms.specularMap.value = material.specularMap;
			}

			if (material.alphaTest > 0) {
				uniforms.alphaTest.value = material.alphaTest;
			}

			const envMap = properties.get(material).envMap;

			if (envMap) {
				uniforms.envMap.value = envMap;
				uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
				uniforms.reflectivity.value = material.reflectivity;
				uniforms.ior.value = material.ior;
				uniforms.refractionRatio.value = material.refractionRatio;
			}

			if (material.lightMap) {
				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;
			}

			if (material.aoMap) {
				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;
			} // uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. displacementMap map
			// 4. normal map
			// 5. bump map
			// 6. roughnessMap map
			// 7. metalnessMap map
			// 8. alphaMap map
			// 9. emissiveMap map
			// 10. clearcoat map
			// 11. clearcoat normal map
			// 12. clearcoat roughnessMap map
			// 13. specular intensity map
			// 14. specular tint map
			// 15. transmission map
			// 16. thickness map


			let uvScaleMap;

			if (material.map) {
				uvScaleMap = material.map;
			} else if (material.specularMap) {
				uvScaleMap = material.specularMap;
			} else if (material.displacementMap) {
				uvScaleMap = material.displacementMap;
			} else if (material.normalMap) {
				uvScaleMap = material.normalMap;
			} else if (material.bumpMap) {
				uvScaleMap = material.bumpMap;
			} else if (material.roughnessMap) {
				uvScaleMap = material.roughnessMap;
			} else if (material.metalnessMap) {
				uvScaleMap = material.metalnessMap;
			} else if (material.alphaMap) {
				uvScaleMap = material.alphaMap;
			} else if (material.emissiveMap) {
				uvScaleMap = material.emissiveMap;
			} else if (material.clearcoatMap) {
				uvScaleMap = material.clearcoatMap;
			} else if (material.clearcoatNormalMap) {
				uvScaleMap = material.clearcoatNormalMap;
			} else if (material.clearcoatRoughnessMap) {
				uvScaleMap = material.clearcoatRoughnessMap;
			} else if (material.specularIntensityMap) {
				uvScaleMap = material.specularIntensityMap;
			} else if (material.specularColorMap) {
				uvScaleMap = material.specularColorMap;
			} else if (material.transmissionMap) {
				uvScaleMap = material.transmissionMap;
			} else if (material.thicknessMap) {
				uvScaleMap = material.thicknessMap;
			} else if (material.sheenColorMap) {
				uvScaleMap = material.sheenColorMap;
			} else if (material.sheenRoughnessMap) {
				uvScaleMap = material.sheenRoughnessMap;
			}

			if (uvScaleMap !== undefined) {
				// backwards compatibility
				if (uvScaleMap.isWebGLRenderTarget) {
					uvScaleMap = uvScaleMap.texture;
				}

				if (uvScaleMap.matrixAutoUpdate === true) {
					uvScaleMap.updateMatrix();
				}

				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
			} // uv repeat and offset setting priorities for uv2
			// 1. ao map
			// 2. light map


			let uv2ScaleMap;

			if (material.aoMap) {
				uv2ScaleMap = material.aoMap;
			} else if (material.lightMap) {
				uv2ScaleMap = material.lightMap;
			}

			if (uv2ScaleMap !== undefined) {
				// backwards compatibility
				if (uv2ScaleMap.isWebGLRenderTarget) {
					uv2ScaleMap = uv2ScaleMap.texture;
				}

				if (uv2ScaleMap.matrixAutoUpdate === true) {
					uv2ScaleMap.updateMatrix();
				}

				uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
			}
		}

		function refreshUniformsLine(uniforms, material) {
			uniforms.diffuse.value.copy(material.color);
			uniforms.opacity.value = material.opacity;
		}

		function refreshUniformsDash(uniforms, material) {
			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;
		}

		function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
			uniforms.diffuse.value.copy(material.color);
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * pixelRatio;
			uniforms.scale.value = height * 0.5;

			if (material.map) {
				uniforms.map.value = material.map;
			}

			if (material.alphaMap) {
				uniforms.alphaMap.value = material.alphaMap;
			}

			if (material.alphaTest > 0) {
				uniforms.alphaTest.value = material.alphaTest;
			} // uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map


			let uvScaleMap;

			if (material.map) {
				uvScaleMap = material.map;
			} else if (material.alphaMap) {
				uvScaleMap = material.alphaMap;
			}

			if (uvScaleMap !== undefined) {
				if (uvScaleMap.matrixAutoUpdate === true) {
					uvScaleMap.updateMatrix();
				}

				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
			}
		}

		function refreshUniformsSprites(uniforms, material) {
			uniforms.diffuse.value.copy(material.color);
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;

			if (material.map) {
				uniforms.map.value = material.map;
			}

			if (material.alphaMap) {
				uniforms.alphaMap.value = material.alphaMap;
			}

			if (material.alphaTest > 0) {
				uniforms.alphaTest.value = material.alphaTest;
			} // uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map


			let uvScaleMap;

			if (material.map) {
				uvScaleMap = material.map;
			} else if (material.alphaMap) {
				uvScaleMap = material.alphaMap;
			}

			if (uvScaleMap !== undefined) {
				if (uvScaleMap.matrixAutoUpdate === true) {
					uvScaleMap.updateMatrix();
				}

				uniforms.uvTransform.value.copy(uvScaleMap.matrix);
			}
		}

		function refreshUniformsLambert(uniforms, material) {
			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}
		}

		function refreshUniformsPhong(uniforms, material) {
			uniforms.specular.value.copy(material.specular);
			uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )

			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsToon(uniforms, material) {
			if (material.gradientMap) {
				uniforms.gradientMap.value = material.gradientMap;
			}

			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsStandard(uniforms, material) {
			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if (material.roughnessMap) {
				uniforms.roughnessMap.value = material.roughnessMap;
			}

			if (material.metalnessMap) {
				uniforms.metalnessMap.value = material.metalnessMap;
			}

			if (material.emissiveMap) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}

			const envMap = properties.get(material).envMap;

			if (envMap) {
				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;
			}
		}

		function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
			refreshUniformsStandard(uniforms, material);
			uniforms.ior.value = material.ior; // also part of uniforms common

			if (material.sheen > 0) {
				uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
				uniforms.sheenRoughness.value = material.sheenRoughness;

				if (material.sheenColorMap) {
					uniforms.sheenColorMap.value = material.sheenColorMap;
				}

				if (material.sheenRoughnessMap) {
					uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
				}
			}

			if (material.clearcoat > 0) {
				uniforms.clearcoat.value = material.clearcoat;
				uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

				if (material.clearcoatMap) {
					uniforms.clearcoatMap.value = material.clearcoatMap;
				}

				if (material.clearcoatRoughnessMap) {
					uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
				}

				if (material.clearcoatNormalMap) {
					uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
					uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

					if (material.side === BackSide) {
						uniforms.clearcoatNormalScale.value.negate();
					}
				}
			}

			if (material.transmission > 0) {
				uniforms.transmission.value = material.transmission;
				uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
				uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);

				if (material.transmissionMap) {
					uniforms.transmissionMap.value = material.transmissionMap;
				}

				uniforms.thickness.value = material.thickness;

				if (material.thicknessMap) {
					uniforms.thicknessMap.value = material.thicknessMap;
				}

				uniforms.attenuationDistance.value = material.attenuationDistance;
				uniforms.attenuationColor.value.copy(material.attenuationColor);
			}

			uniforms.specularIntensity.value = material.specularIntensity;
			uniforms.specularColor.value.copy(material.specularColor);

			if (material.specularIntensityMap) {
				uniforms.specularIntensityMap.value = material.specularIntensityMap;
			}

			if (material.specularColorMap) {
				uniforms.specularColorMap.value = material.specularColorMap;
			}
		}

		function refreshUniformsMatcap(uniforms, material) {
			if (material.matcap) {
				uniforms.matcap.value = material.matcap;
			}

			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsDepth(uniforms, material) {
			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		function refreshUniformsDistance(uniforms, material) {
			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}

			uniforms.referencePosition.value.copy(material.referencePosition);
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;
		}

		function refreshUniformsNormal(uniforms, material) {
			if (material.bumpMap) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if (material.side === BackSide) uniforms.bumpScale.value *= -1;
			}

			if (material.normalMap) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy(material.normalScale);
				if (material.side === BackSide) uniforms.normalScale.value.negate();
			}

			if (material.displacementMap) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}

		return {
			refreshFogUniforms: refreshFogUniforms,
			refreshMaterialUniforms: refreshMaterialUniforms
		};
	}

	function createCanvasElement() {
		const canvas = createElementNS('canvas');
		canvas.style.display = 'block';
		return canvas;
	}

	function WebGLRenderer(parameters = {}) {
		const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
					_context = parameters.context !== undefined ? parameters.context : null,
					_depth = parameters.depth !== undefined ? parameters.depth : true,
					_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
					_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
					_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
					_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
					_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
					_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

		let _alpha;

		if (parameters.context !== undefined) {
			_alpha = _context.getContextAttributes().alpha;
		} else {
			_alpha = parameters.alpha !== undefined ? parameters.alpha : false;
		}

		let currentRenderList = null;
		let currentRenderState = null; // render() can be called from within a callback triggered by another render.
		// We track this so that the nested render call gets its list and state isolated from the parent render call.

		const renderListStack = [];
		const renderStateStack = []; // public properties

		this.domElement = _canvas; // Debug configuration container

		this.debug = {
			/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
			checkShaderErrors: true
		}; // clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true; // scene graph

		this.sortObjects = true; // user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false; // physically based shading

		this.outputEncoding = LinearEncoding; // physical lights

		this.physicallyCorrectLights = false; // tone mapping

		this.toneMapping = NoToneMapping;
		this.toneMappingExposure = 1.0; // internal properties

		const _this = this;

		let _isContextLost = false; // internal state cache

		let _currentActiveCubeFace = 0;
		let _currentActiveMipmapLevel = 0;
		let _currentRenderTarget = null;

		let _currentMaterialId = -1;

		let _currentCamera = null;

		const _currentViewport = new Vector4();

		const _currentScissor = new Vector4();

		let _currentScissorTest = null; //

		let _width = _canvas.width;
		let _height = _canvas.height;
		let _pixelRatio = 1;
		let _opaqueSort = null;
		let _transparentSort = null;

		const _viewport = new Vector4(0, 0, _width, _height);

		const _scissor = new Vector4(0, 0, _width, _height);

		let _scissorTest = false; // frustum

		const _frustum = new Frustum(); // clipping


		let _clippingEnabled = false;
		let _localClippingEnabled = false; // transmission

		let _transmissionRenderTarget = null; // camera matrices cache

		const _projScreenMatrix = new Matrix4();

		const _vector2 = new Vector2();

		const _vector3 = new Vector3();

		const _emptyScene = {
			background: null,
			fog: null,
			environment: null,
			overrideMaterial: null,
			isScene: true
		};

		function getTargetPixelRatio() {
			return _currentRenderTarget === null ? _pixelRatio : 1;
		} // initialize


		let _gl = _context;

		function getContext(contextNames, contextAttributes) {
			for (let i = 0; i < contextNames.length; i++) {
				const contextName = contextNames[i];

				const context = _canvas.getContext(contextName, contextAttributes);

				if (context !== null) return context;
			}

			return null;
		}

		try {
			const contextAttributes = {
				alpha: true,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference,
				failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
			}; // OffscreenCanvas does not have setAttribute, see #22811

			if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION}`); // event listeners must be registered before WebGL context is created, see #12753

			_canvas.addEventListener('webglcontextlost', onContextLost, false);

			_canvas.addEventListener('webglcontextrestored', onContextRestore, false);

			if (_gl === null) {
				const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];

				if (_this.isWebGL1Renderer === true) {
					contextNames.shift();
				}

				_gl = getContext(contextNames, contextAttributes);

				if (_gl === null) {
					if (getContext(contextNames)) {
						throw new Error('Error creating WebGL context with your selected attributes.');
					} else {
						throw new Error('Error creating WebGL context.');
					}
				}
			} // Some experimental-webgl implementations do not have getShaderPrecisionFormat


			if (_gl.getShaderPrecisionFormat === undefined) {
				_gl.getShaderPrecisionFormat = function () {
					return {
						'rangeMin': 1,
						'rangeMax': 1,
						'precision': 1
					};
				};
			}
		} catch (error) {
			console.error('THREE.WebGLRenderer: ' + error.message);
			throw error;
		}

		let extensions, capabilities, state, info;
		let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
		let programCache, materials, renderLists, renderStates, clipping, shadowMap;
		let background, morphtargets, bufferRenderer, indexedBufferRenderer;
		let utils, bindingStates;

		function initGLContext() {
			extensions = new WebGLExtensions(_gl);
			capabilities = new WebGLCapabilities(_gl, extensions, parameters);
			extensions.init(capabilities);
			utils = new WebGLUtils(_gl, extensions, capabilities);
			state = new WebGLState(_gl, extensions, capabilities);
			info = new WebGLInfo(_gl);
			properties = new WebGLProperties();
			textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
			cubemaps = new WebGLCubeMaps(_this);
			cubeuvmaps = new WebGLCubeUVMaps(_this);
			attributes = new WebGLAttributes(_gl, capabilities);
			bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
			geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
			objects = new WebGLObjects(_gl, geometries, attributes, info);
			morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
			clipping = new WebGLClipping(properties);
			programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
			materials = new WebGLMaterials(properties);
			renderLists = new WebGLRenderLists();
			renderStates = new WebGLRenderStates(extensions, capabilities);
			background = new WebGLBackground(_this, cubemaps, state, objects, _alpha, _premultipliedAlpha);
			shadowMap = new WebGLShadowMap(_this, objects, capabilities);
			bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
			indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
			info.programs = programCache.programs;
			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.shadowMap = shadowMap;
			_this.state = state;
			_this.info = info;
		}

		initGLContext(); // xr

		const xr = new WebXRManager(_this, _gl);
		this.xr = xr; // API

		this.getContext = function () {
			return _gl;
		};

		this.getContextAttributes = function () {
			return _gl.getContextAttributes();
		};

		this.forceContextLoss = function () {
			const extension = extensions.get('WEBGL_lose_context');
			if (extension) extension.loseContext();
		};

		this.forceContextRestore = function () {
			const extension = extensions.get('WEBGL_lose_context');
			if (extension) extension.restoreContext();
		};

		this.getPixelRatio = function () {
			return _pixelRatio;
		};

		this.setPixelRatio = function (value) {
			if (value === undefined) return;
			_pixelRatio = value;
			this.setSize(_width, _height, false);
		};

		this.getSize = function (target) {
			return target.set(_width, _height);
		};

		this.setSize = function (width, height, updateStyle) {
			if (xr.isPresenting) {
				console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
				return;
			}

			_width = width;
			_height = height;
			_canvas.width = Math.floor(width * _pixelRatio);
			_canvas.height = Math.floor(height * _pixelRatio);

			if (updateStyle !== false) {
				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';
			}

			this.setViewport(0, 0, width, height);
		};

		this.getDrawingBufferSize = function (target) {
			return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
		};

		this.setDrawingBufferSize = function (width, height, pixelRatio) {
			_width = width;
			_height = height;
			_pixelRatio = pixelRatio;
			_canvas.width = Math.floor(width * pixelRatio);
			_canvas.height = Math.floor(height * pixelRatio);
			this.setViewport(0, 0, width, height);
		};

		this.getCurrentViewport = function (target) {
			return target.copy(_currentViewport);
		};

		this.getViewport = function (target) {
			return target.copy(_viewport);
		};

		this.setViewport = function (x, y, width, height) {
			if (x.isVector4) {
				_viewport.set(x.x, x.y, x.z, x.w);
			} else {
				_viewport.set(x, y, width, height);
			}

			state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
		};

		this.getScissor = function (target) {
			return target.copy(_scissor);
		};

		this.setScissor = function (x, y, width, height) {
			if (x.isVector4) {
				_scissor.set(x.x, x.y, x.z, x.w);
			} else {
				_scissor.set(x, y, width, height);
			}

			state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
		};

		this.getScissorTest = function () {
			return _scissorTest;
		};

		this.setScissorTest = function (boolean) {
			state.setScissorTest(_scissorTest = boolean);
		};

		this.setOpaqueSort = function (method) {
			_opaqueSort = method;
		};

		this.setTransparentSort = function (method) {
			_transparentSort = method;
		}; // Clearing


		this.getClearColor = function (target) {
			return target.copy(background.getClearColor());
		};

		this.setClearColor = function () {
			background.setClearColor.apply(background, arguments);
		};

		this.getClearAlpha = function () {
			return background.getClearAlpha();
		};

		this.setClearAlpha = function () {
			background.setClearAlpha.apply(background, arguments);
		};

		this.clear = function (color = true, depth = true, stencil = true) {
			let bits = 0;
			if (color) bits |= _gl.COLOR_BUFFER_BIT;
			if (depth) bits |= _gl.DEPTH_BUFFER_BIT;
			if (stencil) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear(bits);
		};

		this.clearColor = function () {
			this.clear(true, false, false);
		};

		this.clearDepth = function () {
			this.clear(false, true, false);
		};

		this.clearStencil = function () {
			this.clear(false, false, true);
		}; //


		this.dispose = function () {
			_canvas.removeEventListener('webglcontextlost', onContextLost, false);

			_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);

			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			cubemaps.dispose();
			cubeuvmaps.dispose();
			objects.dispose();
			bindingStates.dispose();
			programCache.dispose();
			xr.dispose();
			xr.removeEventListener('sessionstart', onXRSessionStart);
			xr.removeEventListener('sessionend', onXRSessionEnd);

			if (_transmissionRenderTarget) {
				_transmissionRenderTarget.dispose();

				_transmissionRenderTarget = null;
			}

			animation.stop();
		}; // Events


		function onContextLost(event) {
			event.preventDefault();
			console.log('THREE.WebGLRenderer: Context Lost.');
			_isContextLost = true;
		}

		function
			/* event */
		onContextRestore() {
			console.log('THREE.WebGLRenderer: Context Restored.');
			_isContextLost = false;
			const infoAutoReset = info.autoReset;
			const shadowMapEnabled = shadowMap.enabled;
			const shadowMapAutoUpdate = shadowMap.autoUpdate;
			const shadowMapNeedsUpdate = shadowMap.needsUpdate;
			const shadowMapType = shadowMap.type;
			initGLContext();
			info.autoReset = infoAutoReset;
			shadowMap.enabled = shadowMapEnabled;
			shadowMap.autoUpdate = shadowMapAutoUpdate;
			shadowMap.needsUpdate = shadowMapNeedsUpdate;
			shadowMap.type = shadowMapType;
		}

		function onMaterialDispose(event) {
			const material = event.target;
			material.removeEventListener('dispose', onMaterialDispose);
			deallocateMaterial(material);
		} // Buffer deallocation


		function deallocateMaterial(material) {
			releaseMaterialProgramReferences(material);
			properties.remove(material);
		}

		function releaseMaterialProgramReferences(material) {
			const programs = properties.get(material).programs;

			if (programs !== undefined) {
				programs.forEach(function (program) {
					programCache.releaseProgram(program);
				});

				if (material.isShaderMaterial) {
					programCache.releaseShaderCache(material);
				}
			}
		} // Buffer rendering


		this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {
			if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

			const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
			const program = setProgram(camera, scene, geometry, material, object);
			state.setMaterial(material, frontFaceCW); //

			let index = geometry.index;
			const position = geometry.attributes.position; //

			if (index === null) {
				if (position === undefined || position.count === 0) return;
			} else if (index.count === 0) {
				return;
			} //


			let rangeFactor = 1;

			if (material.wireframe === true) {
				index = geometries.getWireframeAttribute(geometry);
				rangeFactor = 2;
			}

			bindingStates.setup(object, material, program, geometry, index);
			let attribute;
			let renderer = bufferRenderer;

			if (index !== null) {
				attribute = attributes.get(index);
				renderer = indexedBufferRenderer;
				renderer.setIndex(attribute);
			} //


			const dataCount = index !== null ? index.count : position.count;
			const rangeStart = geometry.drawRange.start * rangeFactor;
			const rangeCount = geometry.drawRange.count * rangeFactor;
			const groupStart = group !== null ? group.start * rangeFactor : 0;
			const groupCount = group !== null ? group.count * rangeFactor : Infinity;
			const drawStart = Math.max(rangeStart, groupStart);
			const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
			const drawCount = Math.max(0, drawEnd - drawStart + 1);
			if (drawCount === 0) return; //

			if (object.isMesh) {
				if (material.wireframe === true) {
					state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
					renderer.setMode(_gl.LINES);
				} else {
					renderer.setMode(_gl.TRIANGLES);
				}
			} else if (object.isLine) {
				let lineWidth = material.linewidth;
				if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material

				state.setLineWidth(lineWidth * getTargetPixelRatio());

				if (object.isLineSegments) {
					renderer.setMode(_gl.LINES);
				} else if (object.isLineLoop) {
					renderer.setMode(_gl.LINE_LOOP);
				} else {
					renderer.setMode(_gl.LINE_STRIP);
				}
			} else if (object.isPoints) {
				renderer.setMode(_gl.POINTS);
			} else if (object.isSprite) {
				renderer.setMode(_gl.TRIANGLES);
			}

			if (object.isInstancedMesh) {
				renderer.renderInstances(drawStart, drawCount, object.count);
			} else if (geometry.isInstancedBufferGeometry) {
				const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
				renderer.renderInstances(drawStart, drawCount, instanceCount);
			} else {
				renderer.render(drawStart, drawCount);
			}
		}; // Compile


		this.compile = function (scene, camera) {
			currentRenderState = renderStates.get(scene);
			currentRenderState.init();
			renderStateStack.push(currentRenderState);
			scene.traverseVisible(function (object) {
				if (object.isLight && object.layers.test(camera.layers)) {
					currentRenderState.pushLight(object);

					if (object.castShadow) {
						currentRenderState.pushShadow(object);
					}
				}
			});
			currentRenderState.setupLights(_this.physicallyCorrectLights);
			scene.traverse(function (object) {
				const material = object.material;

				if (material) {
					if (Array.isArray(material)) {
						for (let i = 0; i < material.length; i++) {
							const material2 = material[i];
							getProgram(material2, scene, object);
						}
					} else {
						getProgram(material, scene, object);
					}
				}
			});
			renderStateStack.pop();
			currentRenderState = null;
		}; // Animation Loop


		let onAnimationFrameCallback = null;

		function onAnimationFrame(time) {
			if (onAnimationFrameCallback) onAnimationFrameCallback(time);
		}

		function onXRSessionStart() {
			animation.stop();
		}

		function onXRSessionEnd() {
			animation.start();
		}

		const animation = new WebGLAnimation();
		animation.setAnimationLoop(onAnimationFrame);
		if (typeof window !== 'undefined') animation.setContext(window);

		this.setAnimationLoop = function (callback) {
			onAnimationFrameCallback = callback;
			xr.setAnimationLoop(callback);
			callback === null ? animation.stop() : animation.start();
		};

		xr.addEventListener('sessionstart', onXRSessionStart);
		xr.addEventListener('sessionend', onXRSessionEnd); // Rendering

		this.render = function (scene, camera) {
			if (camera !== undefined && camera.isCamera !== true) {
				console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
				return;
			}

			if (_isContextLost === true) return; // update scene graph

			if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum

			if (camera.parent === null) camera.updateMatrixWorld();

			if (xr.enabled === true && xr.isPresenting === true) {
				if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
				camera = xr.getCamera(); // use XR camera for rendering
			} //


			if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
			currentRenderState = renderStates.get(scene, renderStateStack.length);
			currentRenderState.init();
			renderStateStack.push(currentRenderState);

			_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

			_frustum.setFromProjectionMatrix(_projScreenMatrix);

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
			currentRenderList = renderLists.get(scene, renderListStack.length);
			currentRenderList.init();
			renderListStack.push(currentRenderList);
			projectObject(scene, camera, 0, _this.sortObjects);
			currentRenderList.finish();

			if (_this.sortObjects === true) {
				currentRenderList.sort(_opaqueSort, _transparentSort);
			} //


			if (_clippingEnabled === true) clipping.beginShadows();
			const shadowsArray = currentRenderState.state.shadowsArray;
			shadowMap.render(shadowsArray, scene, camera);
			if (_clippingEnabled === true) clipping.endShadows(); //

			if (this.info.autoReset === true) this.info.reset(); //

			background.render(currentRenderList, scene); // render scene

			currentRenderState.setupLights(_this.physicallyCorrectLights);

			if (camera.isArrayCamera) {
				const cameras = camera.cameras;

				for (let i = 0, l = cameras.length; i < l; i++) {
					const camera2 = cameras[i];
					renderScene(currentRenderList, scene, camera2, camera2.viewport);
				}
			} else {
				renderScene(currentRenderList, scene, camera);
			} //


			if (_currentRenderTarget !== null) {
				// resolve multisample renderbuffers to a single-sample texture if necessary
				textures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering

				textures.updateRenderTargetMipmap(_currentRenderTarget);
			} //


			if (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // _gl.finish();

			bindingStates.resetDefaultState();
			_currentMaterialId = -1;
			_currentCamera = null;
			renderStateStack.pop();

			if (renderStateStack.length > 0) {
				currentRenderState = renderStateStack[renderStateStack.length - 1];
			} else {
				currentRenderState = null;
			}

			renderListStack.pop();

			if (renderListStack.length > 0) {
				currentRenderList = renderListStack[renderListStack.length - 1];
			} else {
				currentRenderList = null;
			}
		};

		function projectObject(object, camera, groupOrder, sortObjects) {
			if (object.visible === false) return;
			const visible = object.layers.test(camera.layers);

			if (visible) {
				if (object.isGroup) {
					groupOrder = object.renderOrder;
				} else if (object.isLOD) {
					if (object.autoUpdate === true) object.update(camera);
				} else if (object.isLight) {
					currentRenderState.pushLight(object);

					if (object.castShadow) {
						currentRenderState.pushShadow(object);
					}
				} else if (object.isSprite) {
					if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
						if (sortObjects) {
							_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
						}

						const geometry = objects.update(object);
						const material = object.material;

						if (material.visible) {
							currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
						}
					}
				} else if (object.isMesh || object.isLine || object.isPoints) {
					if (object.isSkinnedMesh) {
						// update skeleton only once in a frame
						if (object.skeleton.frame !== info.render.frame) {
							object.skeleton.update();
							object.skeleton.frame = info.render.frame;
						}
					}

					if (!object.frustumCulled || _frustum.intersectsObject(object)) {
						if (sortObjects) {
							_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
						}

						const geometry = objects.update(object);
						const material = object.material;

						if (Array.isArray(material)) {
							const groups = geometry.groups;

							for (let i = 0, l = groups.length; i < l; i++) {
								const group = groups[i];
								const groupMaterial = material[group.materialIndex];

								if (groupMaterial && groupMaterial.visible) {
									currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
								}
							}
						} else if (material.visible) {
							currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
						}
					}
				}
			}

			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				projectObject(children[i], camera, groupOrder, sortObjects);
			}
		}

		function renderScene(currentRenderList, scene, camera, viewport) {
			const opaqueObjects = currentRenderList.opaque;
			const transmissiveObjects = currentRenderList.transmissive;
			const transparentObjects = currentRenderList.transparent;
			currentRenderState.setupLightsView(camera);
			if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);
			if (viewport) state.viewport(_currentViewport.copy(viewport));
			if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
			if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
			if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest(true);
			state.buffers.depth.setMask(true);
			state.buffers.color.setMask(true);
			state.setPolygonOffset(false);
		}

		function renderTransmissionPass(opaqueObjects, scene, camera) {
			const isWebGL2 = capabilities.isWebGL2;

			if (_transmissionRenderTarget === null) {
				_transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
					generateMipmaps: true,
					type: utils.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,
					minFilter: LinearMipmapLinearFilter,
					samples: isWebGL2 && _antialias === true ? 4 : 0
				});
			}

			_this.getDrawingBufferSize(_vector2);

			if (isWebGL2) {
				_transmissionRenderTarget.setSize(_vector2.x, _vector2.y);
			} else {
				_transmissionRenderTarget.setSize(floorPowerOfTwo(_vector2.x), floorPowerOfTwo(_vector2.y));
			} //


			const currentRenderTarget = _this.getRenderTarget();

			_this.setRenderTarget(_transmissionRenderTarget);

			_this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.
			// Otherwise they are applied twice in opaque objects pass and transmission objects pass.


			const currentToneMapping = _this.toneMapping;
			_this.toneMapping = NoToneMapping;
			renderObjects(opaqueObjects, scene, camera);
			_this.toneMapping = currentToneMapping;
			textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
			textures.updateRenderTargetMipmap(_transmissionRenderTarget);

			_this.setRenderTarget(currentRenderTarget);
		}

		function renderObjects(renderList, scene, camera) {
			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

			for (let i = 0, l = renderList.length; i < l; i++) {
				const renderItem = renderList[i];
				const object = renderItem.object;
				const geometry = renderItem.geometry;
				const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
				const group = renderItem.group;

				if (object.layers.test(camera.layers)) {
					renderObject(object, scene, camera, geometry, material, group);
				}
			}
		}

		function renderObject(object, scene, camera, geometry, material, group) {
			object.onBeforeRender(_this, scene, camera, geometry, material, group);
			object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
			object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
			material.onBeforeRender(_this, scene, camera, geometry, object, group);

			if (material.transparent === true && material.side === DoubleSide) {
				material.side = BackSide;
				material.needsUpdate = true;

				_this.renderBufferDirect(camera, scene, geometry, material, object, group);

				material.side = FrontSide;
				material.needsUpdate = true;

				_this.renderBufferDirect(camera, scene, geometry, material, object, group);

				material.side = DoubleSide;
			} else {
				_this.renderBufferDirect(camera, scene, geometry, material, object, group);
			}

			object.onAfterRender(_this, scene, camera, geometry, material, group);
		}

		function getProgram(material, scene, object) {
			if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

			const materialProperties = properties.get(material);
			const lights = currentRenderState.state.lights;
			const shadowsArray = currentRenderState.state.shadowsArray;
			const lightsStateVersion = lights.state.version;
			const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
			const programCacheKey = programCache.getProgramCacheKey(parameters);
			let programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
			materialProperties.fog = scene.fog;
			materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);

			if (programs === undefined) {
				// new material
				material.addEventListener('dispose', onMaterialDispose);
				programs = new Map();
				materialProperties.programs = programs;
			}

			let program = programs.get(programCacheKey);

			if (program !== undefined) {
				// early out if program and light state is identical
				if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
					updateCommonMaterialProperties(material, parameters);
					return program;
				}
			} else {
				parameters.uniforms = programCache.getUniforms(material);
				material.onBuild(object, parameters, _this);
				material.onBeforeCompile(parameters, _this);
				program = programCache.acquireProgram(parameters, programCacheKey);
				programs.set(programCacheKey, program);
				materialProperties.uniforms = parameters.uniforms;
			}

			const uniforms = materialProperties.uniforms;

			if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
				uniforms.clippingPlanes = clipping.uniform;
			}

			updateCommonMaterialProperties(material, parameters); // store the light setup it was created for

			materialProperties.needsLights = materialNeedsLights(material);
			materialProperties.lightsStateVersion = lightsStateVersion;

			if (materialProperties.needsLights) {
				// wire up the material to this renderer's lighting state
				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.lightProbe.value = lights.state.probe;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.directionalLightShadows.value = lights.state.directionalShadow;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.spotLightShadows.value = lights.state.spotShadow;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.ltc_1.value = lights.state.rectAreaLTC1;
				uniforms.ltc_2.value = lights.state.rectAreaLTC2;
				uniforms.pointLights.value = lights.state.point;
				uniforms.pointLightShadows.value = lights.state.pointShadow;
				uniforms.hemisphereLights.value = lights.state.hemi;
				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms
			}

			const progUniforms = program.getUniforms();
			const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
			materialProperties.currentProgram = program;
			materialProperties.uniformsList = uniformsList;
			return program;
		}

		function updateCommonMaterialProperties(material, parameters) {
			const materialProperties = properties.get(material);
			materialProperties.outputEncoding = parameters.outputEncoding;
			materialProperties.instancing = parameters.instancing;
			materialProperties.skinning = parameters.skinning;
			materialProperties.morphTargets = parameters.morphTargets;
			materialProperties.morphNormals = parameters.morphNormals;
			materialProperties.morphColors = parameters.morphColors;
			materialProperties.morphTargetsCount = parameters.morphTargetsCount;
			materialProperties.numClippingPlanes = parameters.numClippingPlanes;
			materialProperties.numIntersection = parameters.numClipIntersection;
			materialProperties.vertexAlphas = parameters.vertexAlphas;
			materialProperties.vertexTangents = parameters.vertexTangents;
			materialProperties.toneMapping = parameters.toneMapping;
		}

		function setProgram(camera, scene, geometry, material, object) {
			if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

			textures.resetTextureUnits();
			const fog = scene.fog;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;
			const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding;
			const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
			const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
			const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
			const morphTargets = !!geometry.morphAttributes.position;
			const morphNormals = !!geometry.morphAttributes.normal;
			const morphColors = !!geometry.morphAttributes.color;
			const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
			const materialProperties = properties.get(material);
			const lights = currentRenderState.state.lights;

			if (_clippingEnabled === true) {
				if (_localClippingEnabled === true || camera !== _currentCamera) {
					const useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)

					clipping.setState(material, camera, useCache);
				}
			} //


			let needsProgramChange = false;

			if (material.version === materialProperties.__version) {
				if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
					needsProgramChange = true;
				} else if (materialProperties.outputEncoding !== encoding) {
					needsProgramChange = true;
				} else if (object.isInstancedMesh && materialProperties.instancing === false) {
					needsProgramChange = true;
				} else if (!object.isInstancedMesh && materialProperties.instancing === true) {
					needsProgramChange = true;
				} else if (object.isSkinnedMesh && materialProperties.skinning === false) {
					needsProgramChange = true;
				} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
					needsProgramChange = true;
				} else if (materialProperties.envMap !== envMap) {
					needsProgramChange = true;
				} else if (material.fog && materialProperties.fog !== fog) {
					needsProgramChange = true;
				} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
					needsProgramChange = true;
				} else if (materialProperties.vertexAlphas !== vertexAlphas) {
					needsProgramChange = true;
				} else if (materialProperties.vertexTangents !== vertexTangents) {
					needsProgramChange = true;
				} else if (materialProperties.morphTargets !== morphTargets) {
					needsProgramChange = true;
				} else if (materialProperties.morphNormals !== morphNormals) {
					needsProgramChange = true;
				} else if (materialProperties.morphColors !== morphColors) {
					needsProgramChange = true;
				} else if (materialProperties.toneMapping !== toneMapping) {
					needsProgramChange = true;
				} else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {
					needsProgramChange = true;
				}
			} else {
				needsProgramChange = true;
				materialProperties.__version = material.version;
			} //


			let program = materialProperties.currentProgram;

			if (needsProgramChange === true) {
				program = getProgram(material, scene, object);
			}

			let refreshProgram = false;
			let refreshMaterial = false;
			let refreshLights = false;
			const p_uniforms = program.getUniforms(),
						m_uniforms = materialProperties.uniforms;

			if (state.useProgram(program.program)) {
				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;
			}

			if (material.id !== _currentMaterialId) {
				_currentMaterialId = material.id;
				refreshMaterial = true;
			}

			if (refreshProgram || _currentCamera !== camera) {
				p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);

				if (capabilities.logarithmicDepthBuffer) {
					p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
				}

				if (_currentCamera !== camera) {
					_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true; // set to true on material change

					refreshLights = true; // remains set until update done
				} // load material specific uniforms
				// (shader material also gets them for the sake of genericity)


				if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
					const uCamPos = p_uniforms.map.cameraPosition;

					if (uCamPos !== undefined) {
						uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
					}
				}

				if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
					p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
				}

				if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
					p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
				}
			} // skinning and morph target uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone and morph texture must go before other textures
			// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures


			if (object.isSkinnedMesh) {
				p_uniforms.setOptional(_gl, object, 'bindMatrix');
				p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
				const skeleton = object.skeleton;

				if (skeleton) {
					if (capabilities.floatVertexTextures) {
						if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
						p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);
						p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
					} else {
						p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
					}
				}
			}

			const morphAttributes = geometry.morphAttributes;

			if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined && capabilities.isWebGL2 === true) {
				morphtargets.update(object, geometry, material, program);
			}

			if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
				materialProperties.receiveShadow = object.receiveShadow;
				p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
			}

			if (refreshMaterial) {
				p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);

				if (materialProperties.needsLights) {
					// the current material requires lighting info
					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required
					markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
				} // refresh uniforms common to several materials


				if (fog && material.fog) {
					materials.refreshFogUniforms(m_uniforms, fog);
				}

				materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
				WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
			}

			if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
				WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
				material.uniformsNeedUpdate = false;
			}

			if (material.isSpriteMaterial) {
				p_uniforms.setValue(_gl, 'center', object.center);
			} // common matrices


			p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
			p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
			p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
			return program;
		} // If uniforms are marked as clean, they don't need to be loaded to the GPU.


		function markUniformsLightsNeedsUpdate(uniforms, value) {
			uniforms.ambientLightColor.needsUpdate = value;
			uniforms.lightProbe.needsUpdate = value;
			uniforms.directionalLights.needsUpdate = value;
			uniforms.directionalLightShadows.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.pointLightShadows.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.spotLightShadows.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;
		}

		function materialNeedsLights(material) {
			return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
		}

		this.getActiveCubeFace = function () {
			return _currentActiveCubeFace;
		};

		this.getActiveMipmapLevel = function () {
			return _currentActiveMipmapLevel;
		};

		this.getRenderTarget = function () {
			return _currentRenderTarget;
		};

		this.setRenderTargetTextures = function (renderTarget, colorTexture, depthTexture) {
			properties.get(renderTarget.texture).__webglTexture = colorTexture;
			properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
			const renderTargetProperties = properties.get(renderTarget);
			renderTargetProperties.__hasExternalTextures = true;

			if (renderTargetProperties.__hasExternalTextures) {
				renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

				if (!renderTargetProperties.__autoAllocateDepthBuffer) {
					// The multisample_render_to_texture extension doesn't work properly if there
					// are midframe flushes and an external depth buffer. Disable use of the extension.
					if (extensions.has('WEBGL_multisampled_render_to_texture') === true) {
						console.warn('THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided');
						renderTargetProperties.__useRenderToTexture = false;
					}
				}
			}
		};

		this.setRenderTargetFramebuffer = function (renderTarget, defaultFramebuffer) {
			const renderTargetProperties = properties.get(renderTarget);
			renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
			renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
		};

		this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
			_currentRenderTarget = renderTarget;
			_currentActiveCubeFace = activeCubeFace;
			_currentActiveMipmapLevel = activeMipmapLevel;
			let useDefaultFramebuffer = true;

			if (renderTarget) {
				const renderTargetProperties = properties.get(renderTarget);

				if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
					// We need to make sure to rebind the framebuffer.
					state.bindFramebuffer(_gl.FRAMEBUFFER, null);
					useDefaultFramebuffer = false;
				} else if (renderTargetProperties.__webglFramebuffer === undefined) {
					textures.setupRenderTarget(renderTarget);
				} else if (renderTargetProperties.__hasExternalTextures) {
					// Color and depth texture must be rebound in order for the swapchain to update.
					textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
				}
			}

			let framebuffer = null;
			let isCube = false;
			let isRenderTarget3D = false;

			if (renderTarget) {
				const texture = renderTarget.texture;

				if (texture.isData3DTexture || texture.isDataArrayTexture) {
					isRenderTarget3D = true;
				}

				const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;

				if (renderTarget.isWebGLCubeRenderTarget) {
					framebuffer = __webglFramebuffer[activeCubeFace];
					isCube = true;
				} else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
					framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
				} else {
					framebuffer = __webglFramebuffer;
				}

				_currentViewport.copy(renderTarget.viewport);

				_currentScissor.copy(renderTarget.scissor);

				_currentScissorTest = renderTarget.scissorTest;
			} else {
				_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();

				_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();

				_currentScissorTest = _scissorTest;
			}

			const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

			if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
				state.drawBuffers(renderTarget, framebuffer);
			}

			state.viewport(_currentViewport);
			state.scissor(_currentScissor);
			state.setScissorTest(_currentScissorTest);

			if (isCube) {
				const textureProperties = properties.get(renderTarget.texture);

				_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
			} else if (isRenderTarget3D) {
				const textureProperties = properties.get(renderTarget.texture);
				const layer = activeCubeFace || 0;

				_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
			}

			_currentMaterialId = -1; // reset current material to ensure correct uniform bindings
		};

		this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
			if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
				console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
				return;
			}

			let framebuffer = properties.get(renderTarget).__webglFramebuffer;

			if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {
				framebuffer = framebuffer[activeCubeFaceIndex];
			}

			if (framebuffer) {
				state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);

				try {
					const texture = renderTarget.texture;
					const textureFormat = texture.format;
					const textureType = texture.type;

					if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
						console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
						return;
					}

					const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));

					if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
					!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
					!halfFloatSupportedByExt) {
						console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
						return;
					}

					if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {
						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
						if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {
							_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
						}
					} else {
						console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');
					}
				} finally {
					// restore framebuffer of current render target if necessary
					const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
					state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
				}
			}
		};

		this.copyFramebufferToTexture = function (position, texture, level = 0) {
			if (texture.isFramebufferTexture !== true) {
				console.error('THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.');
				return;
			}

			const levelScale = Math.pow(2, -level);
			const width = Math.floor(texture.image.width * levelScale);
			const height = Math.floor(texture.image.height * levelScale);
			textures.setTexture2D(texture, 0);

			_gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);

			state.unbindTexture();
		};

		this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {
			const width = srcTexture.image.width;
			const height = srcTexture.image.height;
			const glFormat = utils.convert(dstTexture.format);
			const glType = utils.convert(dstTexture.type);
			textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei
			// parameters, make sure they are correct for the dstTexture

			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);

			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);

			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);

			if (srcTexture.isDataTexture) {
				_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
			} else {
				if (srcTexture.isCompressedTexture) {
					_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
				} else {
					_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
				}
			} // Generate mipmaps only when copying level 0


			if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
			state.unbindTexture();
		};

		this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {
			if (_this.isWebGL1Renderer) {
				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
				return;
			}

			const width = sourceBox.max.x - sourceBox.min.x + 1;
			const height = sourceBox.max.y - sourceBox.min.y + 1;
			const depth = sourceBox.max.z - sourceBox.min.z + 1;
			const glFormat = utils.convert(dstTexture.format);
			const glType = utils.convert(dstTexture.type);
			let glTarget;

			if (dstTexture.isData3DTexture) {
				textures.setTexture3D(dstTexture, 0);
				glTarget = _gl.TEXTURE_3D;
			} else if (dstTexture.isDataArrayTexture) {
				textures.setTexture2DArray(dstTexture, 0);
				glTarget = _gl.TEXTURE_2D_ARRAY;
			} else {
				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
				return;
			}

			_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);

			_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);

			_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);

			const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);

			const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);

			const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);

			const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);

			const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);

			const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;

			_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);

			_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);

			_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);

			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);

			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);

			if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
				_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
			} else {
				if (srcTexture.isCompressedTexture) {
					console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');

					_gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
				} else {
					_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
				}
			}

			_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);

			_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);

			_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);

			_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);

			_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0


			if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
			state.unbindTexture();
		};

		this.initTexture = function (texture) {
			textures.setTexture2D(texture, 0);
			state.unbindTexture();
		};

		this.resetState = function () {
			_currentActiveCubeFace = 0;
			_currentActiveMipmapLevel = 0;
			_currentRenderTarget = null;
			state.reset();
			bindingStates.reset();
		};

		if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
			__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
				detail: this
			}));
		}
	}

	WebGLRenderer.prototype.isWebGLRenderer = true;

	class WebGL1Renderer extends WebGLRenderer {}

	WebGL1Renderer.prototype.isWebGL1Renderer = true;

	class FogExp2 {
		constructor(color, density = 0.00025) {
			this.name = '';
			this.color = new Color(color);
			this.density = density;
		}

		clone() {
			return new FogExp2(this.color, this.density);
		}

		toJSON() {
			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};
		}

	}

	FogExp2.prototype.isFogExp2 = true;

	class Fog {
		constructor(color, near = 1, far = 1000) {
			this.name = '';
			this.color = new Color(color);
			this.near = near;
			this.far = far;
		}

		clone() {
			return new Fog(this.color, this.near, this.far);
		}

		toJSON() {
			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};
		}

	}

	Fog.prototype.isFog = true;

	class Scene extends Object3D {
		constructor() {
			super();
			this.type = 'Scene';
			this.background = null;
			this.environment = null;
			this.fog = null;
			this.overrideMaterial = null;
			this.autoUpdate = true; // checked by the renderer

			if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
				__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
					detail: this
				}));
			}
		}

		copy(source, recursive) {
			super.copy(source, recursive);
			if (source.background !== null) this.background = source.background.clone();
			if (source.environment !== null) this.environment = source.environment.clone();
			if (source.fog !== null) this.fog = source.fog.clone();
			if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			if (this.fog !== null) data.object.fog = this.fog.toJSON();
			return data;
		}

	}

	Scene.prototype.isScene = true;

	class InterleavedBuffer {
		constructor(array, stride) {
			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;
			this.usage = StaticDrawUsage;
			this.updateRange = {
				offset: 0,
				count: -1
			};
			this.version = 0;
			this.uuid = generateUUID();
		}

		onUploadCallback() {}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		setUsage(value) {
			this.usage = value;
			return this;
		}

		copy(source) {
			this.array = new source.array.constructor(source.array);
			this.count = source.count;
			this.stride = source.stride;
			this.usage = source.usage;
			return this;
		}

		copyAt(index1, attribute, index2) {
			index1 *= this.stride;
			index2 *= attribute.stride;

			for (let i = 0, l = this.stride; i < l; i++) {
				this.array[index1 + i] = attribute.array[index2 + i];
			}

			return this;
		}

		set(value, offset = 0) {
			this.array.set(value, offset);
			return this;
		}

		clone(data) {
			if (data.arrayBuffers === undefined) {
				data.arrayBuffers = {};
			}

			if (this.array.buffer._uuid === undefined) {
				this.array.buffer._uuid = generateUUID();
			}

			if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
				data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
			}

			const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
			const ib = new this.constructor(array, this.stride);
			ib.setUsage(this.usage);
			return ib;
		}

		onUpload(callback) {
			this.onUploadCallback = callback;
			return this;
		}

		toJSON(data) {
			if (data.arrayBuffers === undefined) {
				data.arrayBuffers = {};
			} // generate UUID for array buffer if necessary


			if (this.array.buffer._uuid === undefined) {
				this.array.buffer._uuid = generateUUID();
			}

			if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
				data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
			} //


			return {
				uuid: this.uuid,
				buffer: this.array.buffer._uuid,
				type: this.array.constructor.name,
				stride: this.stride
			};
		}

	}

	InterleavedBuffer.prototype.isInterleavedBuffer = true;

	const _vector$6 = /*@__PURE__*/new Vector3();

	class InterleavedBufferAttribute {
		constructor(interleavedBuffer, itemSize, offset, normalized = false) {
			this.name = '';
			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;
			this.normalized = normalized === true;
		}

		get count() {
			return this.data.count;
		}

		get array() {
			return this.data.array;
		}

		set needsUpdate(value) {
			this.data.needsUpdate = value;
		}

		applyMatrix4(m) {
			for (let i = 0, l = this.data.count; i < l; i++) {
				_vector$6.x = this.getX(i);
				_vector$6.y = this.getY(i);
				_vector$6.z = this.getZ(i);

				_vector$6.applyMatrix4(m);

				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
			}

			return this;
		}

		applyNormalMatrix(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$6.x = this.getX(i);
				_vector$6.y = this.getY(i);
				_vector$6.z = this.getZ(i);

				_vector$6.applyNormalMatrix(m);

				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
			}

			return this;
		}

		transformDirection(m) {
			for (let i = 0, l = this.count; i < l; i++) {
				_vector$6.x = this.getX(i);
				_vector$6.y = this.getY(i);
				_vector$6.z = this.getZ(i);

				_vector$6.transformDirection(m);

				this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
			}

			return this;
		}

		setX(index, x) {
			this.data.array[index * this.data.stride + this.offset] = x;
			return this;
		}

		setY(index, y) {
			this.data.array[index * this.data.stride + this.offset + 1] = y;
			return this;
		}

		setZ(index, z) {
			this.data.array[index * this.data.stride + this.offset + 2] = z;
			return this;
		}

		setW(index, w) {
			this.data.array[index * this.data.stride + this.offset + 3] = w;
			return this;
		}

		getX(index) {
			return this.data.array[index * this.data.stride + this.offset];
		}

		getY(index) {
			return this.data.array[index * this.data.stride + this.offset + 1];
		}

		getZ(index) {
			return this.data.array[index * this.data.stride + this.offset + 2];
		}

		getW(index) {
			return this.data.array[index * this.data.stride + this.offset + 3];
		}

		setXY(index, x, y) {
			index = index * this.data.stride + this.offset;
			this.data.array[index + 0] = x;
			this.data.array[index + 1] = y;
			return this;
		}

		setXYZ(index, x, y, z) {
			index = index * this.data.stride + this.offset;
			this.data.array[index + 0] = x;
			this.data.array[index + 1] = y;
			this.data.array[index + 2] = z;
			return this;
		}

		setXYZW(index, x, y, z, w) {
			index = index * this.data.stride + this.offset;
			this.data.array[index + 0] = x;
			this.data.array[index + 1] = y;
			this.data.array[index + 2] = z;
			this.data.array[index + 3] = w;
			return this;
		}

		clone(data) {
			if (data === undefined) {
				console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');
				const array = [];

				for (let i = 0; i < this.count; i++) {
					const index = i * this.data.stride + this.offset;

					for (let j = 0; j < this.itemSize; j++) {
						array.push(this.data.array[index + j]);
					}
				}

				return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
			} else {
				if (data.interleavedBuffers === undefined) {
					data.interleavedBuffers = {};
				}

				if (data.interleavedBuffers[this.data.uuid] === undefined) {
					data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
				}

				return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
			}
		}

		toJSON(data) {
			if (data === undefined) {
				console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');
				const array = [];

				for (let i = 0; i < this.count; i++) {
					const index = i * this.data.stride + this.offset;

					for (let j = 0; j < this.itemSize; j++) {
						array.push(this.data.array[index + j]);
					}
				} // deinterleave data and save it as an ordinary buffer attribute for now


				return {
					itemSize: this.itemSize,
					type: this.array.constructor.name,
					array: array,
					normalized: this.normalized
				};
			} else {
				// save as true interlaved attribtue
				if (data.interleavedBuffers === undefined) {
					data.interleavedBuffers = {};
				}

				if (data.interleavedBuffers[this.data.uuid] === undefined) {
					data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
				}

				return {
					isInterleavedBufferAttribute: true,
					itemSize: this.itemSize,
					data: this.data.uuid,
					offset: this.offset,
					normalized: this.normalized
				};
			}
		}

	}

	InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	map: new THREE.Texture( <Image> ),
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *	rotation: <float>,
	 *	sizeAttenuation: <bool>
	 * }
	 */

	class SpriteMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'SpriteMaterial';
			this.color = new Color(0xffffff);
			this.map = null;
			this.alphaMap = null;
			this.rotation = 0;
			this.sizeAttenuation = true;
			this.transparent = true;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.rotation = source.rotation;
			this.sizeAttenuation = source.sizeAttenuation;
			return this;
		}

	}

	SpriteMaterial.prototype.isSpriteMaterial = true;

	let _geometry;

	const _intersectPoint = /*@__PURE__*/new Vector3();

	const _worldScale = /*@__PURE__*/new Vector3();

	const _mvPosition = /*@__PURE__*/new Vector3();

	const _alignedPosition = /*@__PURE__*/new Vector2();

	const _rotatedPosition = /*@__PURE__*/new Vector2();

	const _viewWorldMatrix = /*@__PURE__*/new Matrix4();

	const _vA = /*@__PURE__*/new Vector3();

	const _vB = /*@__PURE__*/new Vector3();

	const _vC = /*@__PURE__*/new Vector3();

	const _uvA = /*@__PURE__*/new Vector2();

	const _uvB = /*@__PURE__*/new Vector2();

	const _uvC = /*@__PURE__*/new Vector2();

	class Sprite extends Object3D {
		constructor(material) {
			super();
			this.type = 'Sprite';

			if (_geometry === undefined) {
				_geometry = new BufferGeometry();
				const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
				const interleavedBuffer = new InterleavedBuffer(float32Array, 5);

				_geometry.setIndex([0, 1, 2, 0, 2, 3]);

				_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));

				_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
			}

			this.geometry = _geometry;
			this.material = material !== undefined ? material : new SpriteMaterial();
			this.center = new Vector2(0.5, 0.5);
		}

		raycast(raycaster, intersects) {
			if (raycaster.camera === null) {
				console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
			}

			_worldScale.setFromMatrixScale(this.matrixWorld);

			_viewWorldMatrix.copy(raycaster.camera.matrixWorld);

			this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);

			_mvPosition.setFromMatrixPosition(this.modelViewMatrix);

			if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
				_worldScale.multiplyScalar(-_mvPosition.z);
			}

			const rotation = this.material.rotation;
			let sin, cos;

			if (rotation !== 0) {
				cos = Math.cos(rotation);
				sin = Math.sin(rotation);
			}

			const center = this.center;
			transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
			transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
			transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);

			_uvA.set(0, 0);

			_uvB.set(1, 0);

			_uvC.set(1, 1); // check first triangle


			let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);

			if (intersect === null) {
				// check second triangle
				transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);

				_uvB.set(0, 1);

				intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);

				if (intersect === null) {
					return;
				}
			}

			const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
			if (distance < raycaster.near || distance > raycaster.far) return;
			intersects.push({
				distance: distance,
				point: _intersectPoint.clone(),
				uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
				face: null,
				object: this
			});
		}

		copy(source) {
			super.copy(source);
			if (source.center !== undefined) this.center.copy(source.center);
			this.material = source.material;
			return this;
		}

	}

	Sprite.prototype.isSprite = true;

	function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
		// compute position in camera space
		_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero


		if (sin !== undefined) {
			_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
			_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
		} else {
			_rotatedPosition.copy(_alignedPosition);
		}

		vertexPosition.copy(mvPosition);
		vertexPosition.x += _rotatedPosition.x;
		vertexPosition.y += _rotatedPosition.y; // transform to world space

		vertexPosition.applyMatrix4(_viewWorldMatrix);
	}

	const _v1$2 = /*@__PURE__*/new Vector3();

	const _v2$1 = /*@__PURE__*/new Vector3();

	class LOD extends Object3D {
		constructor() {
			super();
			this._currentLevel = 0;
			this.type = 'LOD';
			Object.defineProperties(this, {
				levels: {
					enumerable: true,
					value: []
				},
				isLOD: {
					value: true
				}
			});
			this.autoUpdate = true;
		}

		copy(source) {
			super.copy(source, false);
			const levels = source.levels;

			for (let i = 0, l = levels.length; i < l; i++) {
				const level = levels[i];
				this.addLevel(level.object.clone(), level.distance);
			}

			this.autoUpdate = source.autoUpdate;
			return this;
		}

		addLevel(object, distance = 0) {
			distance = Math.abs(distance);
			const levels = this.levels;
			let l;

			for (l = 0; l < levels.length; l++) {
				if (distance < levels[l].distance) {
					break;
				}
			}

			levels.splice(l, 0, {
				distance: distance,
				object: object
			});
			this.add(object);
			return this;
		}

		getCurrentLevel() {
			return this._currentLevel;
		}

		getObjectForDistance(distance) {
			const levels = this.levels;

			if (levels.length > 0) {
				let i, l;

				for (i = 1, l = levels.length; i < l; i++) {
					if (distance < levels[i].distance) {
						break;
					}
				}

				return levels[i - 1].object;
			}

			return null;
		}

		raycast(raycaster, intersects) {
			const levels = this.levels;

			if (levels.length > 0) {
				_v1$2.setFromMatrixPosition(this.matrixWorld);

				const distance = raycaster.ray.origin.distanceTo(_v1$2);
				this.getObjectForDistance(distance).raycast(raycaster, intersects);
			}
		}

		update(camera) {
			const levels = this.levels;

			if (levels.length > 1) {
				_v1$2.setFromMatrixPosition(camera.matrixWorld);

				_v2$1.setFromMatrixPosition(this.matrixWorld);

				const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
				levels[0].object.visible = true;
				let i, l;

				for (i = 1, l = levels.length; i < l; i++) {
					if (distance >= levels[i].distance) {
						levels[i - 1].object.visible = false;
						levels[i].object.visible = true;
					} else {
						break;
					}
				}

				this._currentLevel = i - 1;

				for (; i < l; i++) {
					levels[i].object.visible = false;
				}
			}
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			if (this.autoUpdate === false) data.object.autoUpdate = false;
			data.object.levels = [];
			const levels = this.levels;

			for (let i = 0, l = levels.length; i < l; i++) {
				const level = levels[i];
				data.object.levels.push({
					object: level.object.uuid,
					distance: level.distance
				});
			}

			return data;
		}

	}

	const _basePosition = /*@__PURE__*/new Vector3();

	const _skinIndex = /*@__PURE__*/new Vector4();

	const _skinWeight = /*@__PURE__*/new Vector4();

	const _vector$5 = /*@__PURE__*/new Vector3();

	const _matrix = /*@__PURE__*/new Matrix4();

	class SkinnedMesh extends Mesh {
		constructor(geometry, material) {
			super(geometry, material);
			this.type = 'SkinnedMesh';
			this.bindMode = 'attached';
			this.bindMatrix = new Matrix4();
			this.bindMatrixInverse = new Matrix4();
		}

		copy(source) {
			super.copy(source);
			this.bindMode = source.bindMode;
			this.bindMatrix.copy(source.bindMatrix);
			this.bindMatrixInverse.copy(source.bindMatrixInverse);
			this.skeleton = source.skeleton;
			return this;
		}

		bind(skeleton, bindMatrix) {
			this.skeleton = skeleton;

			if (bindMatrix === undefined) {
				this.updateMatrixWorld(true);
				this.skeleton.calculateInverses();
				bindMatrix = this.matrixWorld;
			}

			this.bindMatrix.copy(bindMatrix);
			this.bindMatrixInverse.copy(bindMatrix).invert();
		}

		pose() {
			this.skeleton.pose();
		}

		normalizeSkinWeights() {
			const vector = new Vector4();
			const skinWeight = this.geometry.attributes.skinWeight;

			for (let i = 0, l = skinWeight.count; i < l; i++) {
				vector.x = skinWeight.getX(i);
				vector.y = skinWeight.getY(i);
				vector.z = skinWeight.getZ(i);
				vector.w = skinWeight.getW(i);
				const scale = 1.0 / vector.manhattanLength();

				if (scale !== Infinity) {
					vector.multiplyScalar(scale);
				} else {
					vector.set(1, 0, 0, 0); // do something reasonable
				}

				skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
			}
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);

			if (this.bindMode === 'attached') {
				this.bindMatrixInverse.copy(this.matrixWorld).invert();
			} else if (this.bindMode === 'detached') {
				this.bindMatrixInverse.copy(this.bindMatrix).invert();
			} else {
				console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
			}
		}

		boneTransform(index, target) {
			const skeleton = this.skeleton;
			const geometry = this.geometry;

			_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);

			_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);

			_basePosition.copy(target).applyMatrix4(this.bindMatrix);

			target.set(0, 0, 0);

			for (let i = 0; i < 4; i++) {
				const weight = _skinWeight.getComponent(i);

				if (weight !== 0) {
					const boneIndex = _skinIndex.getComponent(i);

					_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);

					target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
				}
			}

			return target.applyMatrix4(this.bindMatrixInverse);
		}

	}

	SkinnedMesh.prototype.isSkinnedMesh = true;

	class Bone extends Object3D {
		constructor() {
			super();
			this.type = 'Bone';
		}

	}

	Bone.prototype.isBone = true;

	class DataTexture extends Texture {
		constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding) {
			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
			this.image = {
				data: data,
				width: width,
				height: height
			};
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
		}

	}

	DataTexture.prototype.isDataTexture = true;

	const _offsetMatrix = /*@__PURE__*/new Matrix4();

	const _identityMatrix = /*@__PURE__*/new Matrix4();

	class Skeleton {
		constructor(bones = [], boneInverses = []) {
			this.uuid = generateUUID();
			this.bones = bones.slice(0);
			this.boneInverses = boneInverses;
			this.boneMatrices = null;
			this.boneTexture = null;
			this.boneTextureSize = 0;
			this.frame = -1;
			this.init();
		}

		init() {
			const bones = this.bones;
			const boneInverses = this.boneInverses;
			this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary

			if (boneInverses.length === 0) {
				this.calculateInverses();
			} else {
				// handle special case
				if (bones.length !== boneInverses.length) {
					console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
					this.boneInverses = [];

					for (let i = 0, il = this.bones.length; i < il; i++) {
						this.boneInverses.push(new Matrix4());
					}
				}
			}
		}

		calculateInverses() {
			this.boneInverses.length = 0;

			for (let i = 0, il = this.bones.length; i < il; i++) {
				const inverse = new Matrix4();

				if (this.bones[i]) {
					inverse.copy(this.bones[i].matrixWorld).invert();
				}

				this.boneInverses.push(inverse);
			}
		}

		pose() {
			// recover the bind-time world matrices
			for (let i = 0, il = this.bones.length; i < il; i++) {
				const bone = this.bones[i];

				if (bone) {
					bone.matrixWorld.copy(this.boneInverses[i]).invert();
				}
			} // compute the local matrices, positions, rotations and scales


			for (let i = 0, il = this.bones.length; i < il; i++) {
				const bone = this.bones[i];

				if (bone) {
					if (bone.parent && bone.parent.isBone) {
						bone.matrix.copy(bone.parent.matrixWorld).invert();
						bone.matrix.multiply(bone.matrixWorld);
					} else {
						bone.matrix.copy(bone.matrixWorld);
					}

					bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
				}
			}
		}

		update() {
			const bones = this.bones;
			const boneInverses = this.boneInverses;
			const boneMatrices = this.boneMatrices;
			const boneTexture = this.boneTexture; // flatten bone matrices to array

			for (let i = 0, il = bones.length; i < il; i++) {
				// compute the offset between the current and the original transform
				const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;

				_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);

				_offsetMatrix.toArray(boneMatrices, i * 16);
			}

			if (boneTexture !== null) {
				boneTexture.needsUpdate = true;
			}
		}

		clone() {
			return new Skeleton(this.bones, this.boneInverses);
		}

		computeBoneTexture() {
			// layout (1 matrix = 4 pixels)
			//			RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//	with	8x8	pixel texture max	 16 bones * 4 pixels =	(8 * 8)
			//			 16x16 pixel texture max	 64 bones * 4 pixels = (16 * 16)
			//			 32x32 pixel texture max	256 bones * 4 pixels = (32 * 32)
			//			 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
			let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix

			size = ceilPowerOfTwo(size);
			size = Math.max(size, 4);
			const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel

			boneMatrices.set(this.boneMatrices); // copy current values

			const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
			boneTexture.needsUpdate = true;
			this.boneMatrices = boneMatrices;
			this.boneTexture = boneTexture;
			this.boneTextureSize = size;
			return this;
		}

		getBoneByName(name) {
			for (let i = 0, il = this.bones.length; i < il; i++) {
				const bone = this.bones[i];

				if (bone.name === name) {
					return bone;
				}
			}

			return undefined;
		}

		dispose() {
			if (this.boneTexture !== null) {
				this.boneTexture.dispose();
				this.boneTexture = null;
			}
		}

		fromJSON(json, bones) {
			this.uuid = json.uuid;

			for (let i = 0, l = json.bones.length; i < l; i++) {
				const uuid = json.bones[i];
				let bone = bones[uuid];

				if (bone === undefined) {
					console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
					bone = new Bone();
				}

				this.bones.push(bone);
				this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
			}

			this.init();
			return this;
		}

		toJSON() {
			const data = {
				metadata: {
					version: 4.5,
					type: 'Skeleton',
					generator: 'Skeleton.toJSON'
				},
				bones: [],
				boneInverses: []
			};
			data.uuid = this.uuid;
			const bones = this.bones;
			const boneInverses = this.boneInverses;

			for (let i = 0, l = bones.length; i < l; i++) {
				const bone = bones[i];
				data.bones.push(bone.uuid);
				const boneInverse = boneInverses[i];
				data.boneInverses.push(boneInverse.toArray());
			}

			return data;
		}

	}

	class InstancedBufferAttribute extends BufferAttribute {
		constructor(array, itemSize, normalized, meshPerAttribute = 1) {
			if (typeof normalized === 'number') {
				meshPerAttribute = normalized;
				normalized = false;
				console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');
			}

			super(array, itemSize, normalized);
			this.meshPerAttribute = meshPerAttribute;
		}

		copy(source) {
			super.copy(source);
			this.meshPerAttribute = source.meshPerAttribute;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.meshPerAttribute = this.meshPerAttribute;
			data.isInstancedBufferAttribute = true;
			return data;
		}

	}

	InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

	const _instanceLocalMatrix = /*@__PURE__*/new Matrix4();

	const _instanceWorldMatrix = /*@__PURE__*/new Matrix4();

	const _instanceIntersects = [];

	const _mesh = /*@__PURE__*/new Mesh();

	class InstancedMesh extends Mesh {
		constructor(geometry, material, count) {
			super(geometry, material);
			this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
			this.instanceColor = null;
			this.count = count;
			this.frustumCulled = false;
		}

		copy(source) {
			super.copy(source);
			this.instanceMatrix.copy(source.instanceMatrix);
			if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
			this.count = source.count;
			return this;
		}

		getColorAt(index, color) {
			color.fromArray(this.instanceColor.array, index * 3);
		}

		getMatrixAt(index, matrix) {
			matrix.fromArray(this.instanceMatrix.array, index * 16);
		}

		raycast(raycaster, intersects) {
			const matrixWorld = this.matrixWorld;
			const raycastTimes = this.count;
			_mesh.geometry = this.geometry;
			_mesh.material = this.material;
			if (_mesh.material === undefined) return;

			for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
				// calculate the world matrix for each instance
				this.getMatrixAt(instanceId, _instanceLocalMatrix);

				_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance


				_mesh.matrixWorld = _instanceWorldMatrix;

				_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast


				for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
					const intersect = _instanceIntersects[i];
					intersect.instanceId = instanceId;
					intersect.object = this;
					intersects.push(intersect);
				}

				_instanceIntersects.length = 0;
			}
		}

		setColorAt(index, color) {
			if (this.instanceColor === null) {
				this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
			}

			color.toArray(this.instanceColor.array, index * 3);
		}

		setMatrixAt(index, matrix) {
			matrix.toArray(this.instanceMatrix.array, index * 16);
		}

		updateMorphTargets() {}

		dispose() {
			this.dispatchEvent({
				type: 'dispose'
			});
		}

	}

	InstancedMesh.prototype.isInstancedMesh = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	linewidth: <float>,
	 *	linecap: "round",
	 *	linejoin: "round"
	 * }
	 */

	class LineBasicMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'LineBasicMaterial';
			this.color = new Color(0xffffff);
			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;
			return this;
		}

	}

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	const _start$1 = /*@__PURE__*/new Vector3();

	const _end$1 = /*@__PURE__*/new Vector3();

	const _inverseMatrix$1 = /*@__PURE__*/new Matrix4();

	const _ray$1 = /*@__PURE__*/new Ray();

	const _sphere$1 = /*@__PURE__*/new Sphere();

	class Line extends Object3D {
		constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
			super();
			this.type = 'Line';
			this.geometry = geometry;
			this.material = material;
			this.updateMorphTargets();
		}

		copy(source) {
			super.copy(source);
			this.material = source.material;
			this.geometry = source.geometry;
			return this;
		}

		computeLineDistances() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				// we assume non-indexed geometry
				if (geometry.index === null) {
					const positionAttribute = geometry.attributes.position;
					const lineDistances = [0];

					for (let i = 1, l = positionAttribute.count; i < l; i++) {
						_start$1.fromBufferAttribute(positionAttribute, i - 1);

						_end$1.fromBufferAttribute(positionAttribute, i);

						lineDistances[i] = lineDistances[i - 1];
						lineDistances[i] += _start$1.distanceTo(_end$1);
					}

					geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
				} else {
					console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}

			return this;
		}

		raycast(raycaster, intersects) {
			const geometry = this.geometry;
			const matrixWorld = this.matrixWorld;
			const threshold = raycaster.params.Line.threshold;
			const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray

			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere$1.copy(geometry.boundingSphere);

			_sphere$1.applyMatrix4(matrixWorld);

			_sphere$1.radius += threshold;
			if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //

			_inverseMatrix$1.copy(matrixWorld).invert();

			_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);

			const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
			const localThresholdSq = localThreshold * localThreshold;
			const vStart = new Vector3();
			const vEnd = new Vector3();
			const interSegment = new Vector3();
			const interRay = new Vector3();
			const step = this.isLineSegments ? 2 : 1;

			if (geometry.isBufferGeometry) {
				const index = geometry.index;
				const attributes = geometry.attributes;
				const positionAttribute = attributes.position;

				if (index !== null) {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(index.count, drawRange.start + drawRange.count);

					for (let i = start, l = end - 1; i < l; i += step) {
						const a = index.getX(i);
						const b = index.getX(i + 1);
						vStart.fromBufferAttribute(positionAttribute, a);
						vEnd.fromBufferAttribute(positionAttribute, b);

						const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

						if (distSq > localThresholdSq) continue;
						interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

						const distance = raycaster.ray.origin.distanceTo(interRay);
						if (distance < raycaster.near || distance > raycaster.far) continue;
						intersects.push({
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4(this.matrixWorld),
							index: i,
							face: null,
							faceIndex: null,
							object: this
						});
					}
				} else {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

					for (let i = start, l = end - 1; i < l; i += step) {
						vStart.fromBufferAttribute(positionAttribute, i);
						vEnd.fromBufferAttribute(positionAttribute, i + 1);

						const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

						if (distSq > localThresholdSq) continue;
						interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

						const distance = raycaster.ray.origin.distanceTo(interRay);
						if (distance < raycaster.near || distance > raycaster.far) continue;
						intersects.push({
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4(this.matrixWorld),
							index: i,
							face: null,
							faceIndex: null,
							object: this
						});
					}
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}
		}

		updateMorphTargets() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				const morphAttributes = geometry.morphAttributes;
				const keys = Object.keys(morphAttributes);

				if (keys.length > 0) {
					const morphAttribute = morphAttributes[keys[0]];

					if (morphAttribute !== undefined) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
							const name = morphAttribute[m].name || String(m);
							this.morphTargetInfluences.push(0);
							this.morphTargetDictionary[name] = m;
						}
					}
				}
			} else {
				const morphTargets = geometry.morphTargets;

				if (morphTargets !== undefined && morphTargets.length > 0) {
					console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
				}
			}
		}

	}

	Line.prototype.isLine = true;

	const _start = /*@__PURE__*/new Vector3();

	const _end = /*@__PURE__*/new Vector3();

	class LineSegments extends Line {
		constructor(geometry, material) {
			super(geometry, material);
			this.type = 'LineSegments';
		}

		computeLineDistances() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				// we assume non-indexed geometry
				if (geometry.index === null) {
					const positionAttribute = geometry.attributes.position;
					const lineDistances = [];

					for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
						_start.fromBufferAttribute(positionAttribute, i);

						_end.fromBufferAttribute(positionAttribute, i + 1);

						lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
						lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
					}

					geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
				} else {
					console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
				}
			} else if (geometry.isGeometry) {
				console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}

			return this;
		}

	}

	LineSegments.prototype.isLineSegments = true;

	class LineLoop extends Line {
		constructor(geometry, material) {
			super(geometry, material);
			this.type = 'LineLoop';
		}

	}

	LineLoop.prototype.isLineLoop = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *	map: new THREE.Texture( <Image> ),
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	size: <float>,
	 *	sizeAttenuation: <bool>
	 *
	 * }
	 */

	class PointsMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'PointsMaterial';
			this.color = new Color(0xffffff);
			this.map = null;
			this.alphaMap = null;
			this.size = 1;
			this.sizeAttenuation = true;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.alphaMap = source.alphaMap;
			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;
			return this;
		}

	}

	PointsMaterial.prototype.isPointsMaterial = true;

	const _inverseMatrix = /*@__PURE__*/new Matrix4();

	const _ray = /*@__PURE__*/new Ray();

	const _sphere = /*@__PURE__*/new Sphere();

	const _position$2 = /*@__PURE__*/new Vector3();

	class Points extends Object3D {
		constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
			super();
			this.type = 'Points';
			this.geometry = geometry;
			this.material = material;
			this.updateMorphTargets();
		}

		copy(source) {
			super.copy(source);
			this.material = source.material;
			this.geometry = source.geometry;
			return this;
		}

		raycast(raycaster, intersects) {
			const geometry = this.geometry;
			const matrixWorld = this.matrixWorld;
			const threshold = raycaster.params.Points.threshold;
			const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray

			if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

			_sphere.copy(geometry.boundingSphere);

			_sphere.applyMatrix4(matrixWorld);

			_sphere.radius += threshold;
			if (raycaster.ray.intersectsSphere(_sphere) === false) return; //

			_inverseMatrix.copy(matrixWorld).invert();

			_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);

			const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
			const localThresholdSq = localThreshold * localThreshold;

			if (geometry.isBufferGeometry) {
				const index = geometry.index;
				const attributes = geometry.attributes;
				const positionAttribute = attributes.position;

				if (index !== null) {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(index.count, drawRange.start + drawRange.count);

					for (let i = start, il = end; i < il; i++) {
						const a = index.getX(i);

						_position$2.fromBufferAttribute(positionAttribute, a);

						testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
					}
				} else {
					const start = Math.max(0, drawRange.start);
					const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

					for (let i = start, l = end; i < l; i++) {
						_position$2.fromBufferAttribute(positionAttribute, i);

						testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
					}
				}
			} else {
				console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
			}
		}

		updateMorphTargets() {
			const geometry = this.geometry;

			if (geometry.isBufferGeometry) {
				const morphAttributes = geometry.morphAttributes;
				const keys = Object.keys(morphAttributes);

				if (keys.length > 0) {
					const morphAttribute = morphAttributes[keys[0]];

					if (morphAttribute !== undefined) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
							const name = morphAttribute[m].name || String(m);
							this.morphTargetInfluences.push(0);
							this.morphTargetDictionary[name] = m;
						}
					}
				}
			} else {
				const morphTargets = geometry.morphTargets;

				if (morphTargets !== undefined && morphTargets.length > 0) {
					console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
				}
			}
		}

	}

	Points.prototype.isPoints = true;

	function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
		const rayPointDistanceSq = _ray.distanceSqToPoint(point);

		if (rayPointDistanceSq < localThresholdSq) {
			const intersectPoint = new Vector3();

			_ray.closestPointToPoint(point, intersectPoint);

			intersectPoint.applyMatrix4(matrixWorld);
			const distance = raycaster.ray.origin.distanceTo(intersectPoint);
			if (distance < raycaster.near || distance > raycaster.far) return;
			intersects.push({
				distance: distance,
				distanceToRay: Math.sqrt(rayPointDistanceSq),
				point: intersectPoint,
				index: index,
				face: null,
				object: object
			});
		}
	}

	class VideoTexture extends Texture {
		constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
			super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
			this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
			this.generateMipmaps = false;
			const scope = this;

			function updateVideo() {
				scope.needsUpdate = true;
				video.requestVideoFrameCallback(updateVideo);
			}

			if ('requestVideoFrameCallback' in video) {
				video.requestVideoFrameCallback(updateVideo);
			}
		}

		clone() {
			return new this.constructor(this.image).copy(this);
		}

		update() {
			const video = this.image;
			const hasVideoFrameCallback = ('requestVideoFrameCallback' in video);

			if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
				this.needsUpdate = true;
			}
		}

	}

	VideoTexture.prototype.isVideoTexture = true;

	class FramebufferTexture extends Texture {
		constructor(width, height, format) {
			super({
				width,
				height
			});
			this.format = format;
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
			this.generateMipmaps = false;
			this.needsUpdate = true;
		}

	}

	FramebufferTexture.prototype.isFramebufferTexture = true;

	class CompressedTexture extends Texture {
		constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
			super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
			this.image = {
				width: width,
				height: height
			};
			this.mipmaps = mipmaps; // no flipping for cube textures
			// (also flipping doesn't work for compressed textures )

			this.flipY = false; // can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files

			this.generateMipmaps = false;
		}

	}

	CompressedTexture.prototype.isCompressedTexture = true;

	class CanvasTexture extends Texture {
		constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
			super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
			this.needsUpdate = true;
		}

	}

	CanvasTexture.prototype.isCanvasTexture = true;

	class CircleGeometry extends BufferGeometry {
		constructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {
			super();
			this.type = 'CircleGeometry';
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			segments = Math.max(3, segments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			const vertex = new Vector3();
			const uv = new Vector2(); // center point

			vertices.push(0, 0, 0);
			normals.push(0, 0, 1);
			uvs.push(0.5, 0.5);

			for (let s = 0, i = 3; s <= segments; s++, i += 3) {
				const segment = thetaStart + s / segments * thetaLength; // vertex

				vertex.x = radius * Math.cos(segment);
				vertex.y = radius * Math.sin(segment);
				vertices.push(vertex.x, vertex.y, vertex.z); // normal

				normals.push(0, 0, 1); // uvs

				uv.x = (vertices[i] / radius + 1) / 2;
				uv.y = (vertices[i + 1] / radius + 1) / 2;
				uvs.push(uv.x, uv.y);
			} // indices


			for (let i = 1; i <= segments; i++) {
				indices.push(i, i + 1, 0);
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

		static fromJSON(data) {
			return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
		}

	}

	class CylinderGeometry extends BufferGeometry {
		constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
			super();
			this.type = 'CylinderGeometry';
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			const scope = this;
			radialSegments = Math.floor(radialSegments);
			heightSegments = Math.floor(heightSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			let index = 0;
			const indexArray = [];
			const halfHeight = height / 2;
			let groupStart = 0; // generate geometry

			generateTorso();

			if (openEnded === false) {
				if (radiusTop > 0) generateCap(true);
				if (radiusBottom > 0) generateCap(false);
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

			function generateTorso() {
				const normal = new Vector3();
				const vertex = new Vector3();
				let groupCount = 0; // this will be used to calculate the normal

				const slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs

				for (let y = 0; y <= heightSegments; y++) {
					const indexRow = [];
					const v = y / heightSegments; // calculate the radius of the current row

					const radius = v * (radiusBottom - radiusTop) + radiusTop;

					for (let x = 0; x <= radialSegments; x++) {
						const u = x / radialSegments;
						const theta = u * thetaLength + thetaStart;
						const sinTheta = Math.sin(theta);
						const cosTheta = Math.cos(theta); // vertex

						vertex.x = radius * sinTheta;
						vertex.y = -v * height + halfHeight;
						vertex.z = radius * cosTheta;
						vertices.push(vertex.x, vertex.y, vertex.z); // normal

						normal.set(sinTheta, slope, cosTheta).normalize();
						normals.push(normal.x, normal.y, normal.z); // uv

						uvs.push(u, 1 - v); // save index of vertex in respective row

						indexRow.push(index++);
					} // now save vertices of the row in our index array


					indexArray.push(indexRow);
				} // generate indices


				for (let x = 0; x < radialSegments; x++) {
					for (let y = 0; y < heightSegments; y++) {
						// we use the index array to access the correct indices
						const a = indexArray[y][x];
						const b = indexArray[y + 1][x];
						const c = indexArray[y + 1][x + 1];
						const d = indexArray[y][x + 1]; // faces

						indices.push(a, b, d);
						indices.push(b, c, d); // update group counter

						groupCount += 6;
					}
				} // add a group to the geometry. this will ensure multi material support


				scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups

				groupStart += groupCount;
			}

			function generateCap(top) {
				// save the index of the first center vertex
				const centerIndexStart = index;
				const uv = new Vector2();
				const vertex = new Vector3();
				let groupCount = 0;
				const radius = top === true ? radiusTop : radiusBottom;
				const sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment

				for (let x = 1; x <= radialSegments; x++) {
					// vertex
					vertices.push(0, halfHeight * sign, 0); // normal

					normals.push(0, sign, 0); // uv

					uvs.push(0.5, 0.5); // increase index

					index++;
				} // save the index of the last center vertex


				const centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs

				for (let x = 0; x <= radialSegments; x++) {
					const u = x / radialSegments;
					const theta = u * thetaLength + thetaStart;
					const cosTheta = Math.cos(theta);
					const sinTheta = Math.sin(theta); // vertex

					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					normals.push(0, sign, 0); // uv

					uv.x = cosTheta * 0.5 + 0.5;
					uv.y = sinTheta * 0.5 * sign + 0.5;
					uvs.push(uv.x, uv.y); // increase index

					index++;
				} // generate indices


				for (let x = 0; x < radialSegments; x++) {
					const c = centerIndexStart + x;
					const i = centerIndexEnd + x;

					if (top === true) {
						// face top
						indices.push(i, i + 1, c);
					} else {
						// face bottom
						indices.push(i + 1, i, c);
					}

					groupCount += 3;
				} // add a group to the geometry. this will ensure multi material support


				scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups

				groupStart += groupCount;
			}
		}

		static fromJSON(data) {
			return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
		}

	}

	class ConeGeometry extends CylinderGeometry {
		constructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
			super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
			this.type = 'ConeGeometry';
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
		}

		static fromJSON(data) {
			return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
		}

	}

	class PolyhedronGeometry extends BufferGeometry {
		constructor(vertices = [], indices = [], radius = 1, detail = 0) {
			super();
			this.type = 'PolyhedronGeometry';
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			}; // default buffer data

			const vertexBuffer = [];
			const uvBuffer = []; // the subdivision creates the vertex buffer data

			subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius

			applyRadius(radius); // finally, create the uv data

			generateUVs(); // build non-indexed geometry

			this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
			this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));

			if (detail === 0) {
				this.computeVertexNormals(); // flat normals
			} else {
				this.normalizeNormals(); // smooth normals
			} // helper functions


			function subdivide(detail) {
				const a = new Vector3();
				const b = new Vector3();
				const c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value

				for (let i = 0; i < indices.length; i += 3) {
					// get the vertices of the face
					getVertexByIndex(indices[i + 0], a);
					getVertexByIndex(indices[i + 1], b);
					getVertexByIndex(indices[i + 2], c); // perform subdivision

					subdivideFace(a, b, c, detail);
				}
			}

			function subdivideFace(a, b, c, detail) {
				const cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision

				const v = []; // construct all of the vertices for this subdivision

				for (let i = 0; i <= cols; i++) {
					v[i] = [];
					const aj = a.clone().lerp(c, i / cols);
					const bj = b.clone().lerp(c, i / cols);
					const rows = cols - i;

					for (let j = 0; j <= rows; j++) {
						if (j === 0 && i === cols) {
							v[i][j] = aj;
						} else {
							v[i][j] = aj.clone().lerp(bj, j / rows);
						}
					}
				} // construct all of the faces


				for (let i = 0; i < cols; i++) {
					for (let j = 0; j < 2 * (cols - i) - 1; j++) {
						const k = Math.floor(j / 2);

						if (j % 2 === 0) {
							pushVertex(v[i][k + 1]);
							pushVertex(v[i + 1][k]);
							pushVertex(v[i][k]);
						} else {
							pushVertex(v[i][k + 1]);
							pushVertex(v[i + 1][k + 1]);
							pushVertex(v[i + 1][k]);
						}
					}
				}
			}

			function applyRadius(radius) {
				const vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex

				for (let i = 0; i < vertexBuffer.length; i += 3) {
					vertex.x = vertexBuffer[i + 0];
					vertex.y = vertexBuffer[i + 1];
					vertex.z = vertexBuffer[i + 2];
					vertex.normalize().multiplyScalar(radius);
					vertexBuffer[i + 0] = vertex.x;
					vertexBuffer[i + 1] = vertex.y;
					vertexBuffer[i + 2] = vertex.z;
				}
			}

			function generateUVs() {
				const vertex = new Vector3();

				for (let i = 0; i < vertexBuffer.length; i += 3) {
					vertex.x = vertexBuffer[i + 0];
					vertex.y = vertexBuffer[i + 1];
					vertex.z = vertexBuffer[i + 2];
					const u = azimuth(vertex) / 2 / Math.PI + 0.5;
					const v = inclination(vertex) / Math.PI + 0.5;
					uvBuffer.push(u, 1 - v);
				}

				correctUVs();
				correctSeam();
			}

			function correctSeam() {
				// handle case when face straddles the seam, see #3269
				for (let i = 0; i < uvBuffer.length; i += 6) {
					// uv data of a single face
					const x0 = uvBuffer[i + 0];
					const x1 = uvBuffer[i + 2];
					const x2 = uvBuffer[i + 4];
					const max = Math.max(x0, x1, x2);
					const min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary

					if (max > 0.9 && min < 0.1) {
						if (x0 < 0.2) uvBuffer[i + 0] += 1;
						if (x1 < 0.2) uvBuffer[i + 2] += 1;
						if (x2 < 0.2) uvBuffer[i + 4] += 1;
					}
				}
			}

			function pushVertex(vertex) {
				vertexBuffer.push(vertex.x, vertex.y, vertex.z);
			}

			function getVertexByIndex(index, vertex) {
				const stride = index * 3;
				vertex.x = vertices[stride + 0];
				vertex.y = vertices[stride + 1];
				vertex.z = vertices[stride + 2];
			}

			function correctUVs() {
				const a = new Vector3();
				const b = new Vector3();
				const c = new Vector3();
				const centroid = new Vector3();
				const uvA = new Vector2();
				const uvB = new Vector2();
				const uvC = new Vector2();

				for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
					a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
					b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
					c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
					uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
					uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
					uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
					centroid.copy(a).add(b).add(c).divideScalar(3);
					const azi = azimuth(centroid);
					correctUV(uvA, j + 0, a, azi);
					correctUV(uvB, j + 2, b, azi);
					correctUV(uvC, j + 4, c, azi);
				}
			}

			function correctUV(uv, stride, vector, azimuth) {
				if (azimuth < 0 && uv.x === 1) {
					uvBuffer[stride] = uv.x - 1;
				}

				if (vector.x === 0 && vector.z === 0) {
					uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
				}
			} // Angle around the Y axis, counter-clockwise when looking from above.


			function azimuth(vector) {
				return Math.atan2(vector.z, -vector.x);
			} // Angle above the XZ plane.


			function inclination(vector) {
				return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
			}
		}

		static fromJSON(data) {
			return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
		}

	}

	class DodecahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const t = (1 + Math.sqrt(5)) / 2;
			const r = 1 / t;
			const vertices = [// (±1, ±1, ±1)
			-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)
			0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)
			-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)
			-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
			const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
			super(vertices, indices, radius, detail);
			this.type = 'DodecahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

		static fromJSON(data) {
			return new DodecahedronGeometry(data.radius, data.detail);
		}

	}

	const _v0 = new Vector3();

	const _v1$1 = new Vector3();

	const _normal = new Vector3();

	const _triangle = new Triangle();

	class EdgesGeometry extends BufferGeometry {
		constructor(geometry = null, thresholdAngle = 1) {
			super();
			this.type = 'EdgesGeometry';
			this.parameters = {
				geometry: geometry,
				thresholdAngle: thresholdAngle
			};

			if (geometry !== null) {
				const precisionPoints = 4;
				const precision = Math.pow(10, precisionPoints);
				const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
				const indexAttr = geometry.getIndex();
				const positionAttr = geometry.getAttribute('position');
				const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
				const indexArr = [0, 0, 0];
				const vertKeys = ['a', 'b', 'c'];
				const hashes = new Array(3);
				const edgeData = {};
				const vertices = [];

				for (let i = 0; i < indexCount; i += 3) {
					if (indexAttr) {
						indexArr[0] = indexAttr.getX(i);
						indexArr[1] = indexAttr.getX(i + 1);
						indexArr[2] = indexAttr.getX(i + 2);
					} else {
						indexArr[0] = i;
						indexArr[1] = i + 1;
						indexArr[2] = i + 2;
					}

					const {
						a,
						b,
						c
					} = _triangle;
					a.fromBufferAttribute(positionAttr, indexArr[0]);
					b.fromBufferAttribute(positionAttr, indexArr[1]);
					c.fromBufferAttribute(positionAttr, indexArr[2]);

					_triangle.getNormal(_normal); // create hashes for the edge from the vertices


					hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
					hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
					hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles

					if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
						continue;
					} // iterate over every edge


					for (let j = 0; j < 3; j++) {
						// get the first and next vertex making up the edge
						const jNext = (j + 1) % 3;
						const vecHash0 = hashes[j];
						const vecHash1 = hashes[jNext];
						const v0 = _triangle[vertKeys[j]];
						const v1 = _triangle[vertKeys[jNext]];
						const hash = `${vecHash0}_${vecHash1}`;
						const reverseHash = `${vecHash1}_${vecHash0}`;

						if (reverseHash in edgeData && edgeData[reverseHash]) {
							// if we found a sibling edge add it into the vertex array if
							// it meets the angle threshold and delete the edge from the map.
							if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
								vertices.push(v0.x, v0.y, v0.z);
								vertices.push(v1.x, v1.y, v1.z);
							}

							edgeData[reverseHash] = null;
						} else if (!(hash in edgeData)) {
							// if we've already got an edge here then skip adding a new one
							edgeData[hash] = {
								index0: indexArr[j],
								index1: indexArr[jNext],
								normal: _normal.clone()
							};
						}
					}
				} // iterate over all remaining, unmatched edges and add them to the vertex array


				for (const key in edgeData) {
					if (edgeData[key]) {
						const {
							index0,
							index1
						} = edgeData[key];

						_v0.fromBufferAttribute(positionAttr, index0);

						_v1$1.fromBufferAttribute(positionAttr, index1);

						vertices.push(_v0.x, _v0.y, _v0.z);
						vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
					}
				}

				this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			}
		}

	}

	/**
	 * Extensible curve object.
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/

	class Curve {
		constructor() {
			this.type = 'Curve';
			this.arcLengthDivisions = 200;
		} // Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]


		getPoint() {
			console.warn('THREE.Curve: .getPoint() not implemented.');
			return null;
		} // Get point at relative position in curve according to arc length
		// - u [0 .. 1]


		getPointAt(u, optionalTarget) {
			const t = this.getUtoTmapping(u);
			return this.getPoint(t, optionalTarget);
		} // Get sequence of points using getPoint( t )


		getPoints(divisions = 5) {
			const points = [];

			for (let d = 0; d <= divisions; d++) {
				points.push(this.getPoint(d / divisions));
			}

			return points;
		} // Get sequence of points using getPointAt( u )


		getSpacedPoints(divisions = 5) {
			const points = [];

			for (let d = 0; d <= divisions; d++) {
				points.push(this.getPointAt(d / divisions));
			}

			return points;
		} // Get total curve arc length


		getLength() {
			const lengths = this.getLengths();
			return lengths[lengths.length - 1];
		} // Get list of cumulative segment lengths


		getLengths(divisions = this.arcLengthDivisions) {
			if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
				return this.cacheArcLengths;
			}

			this.needsUpdate = false;
			const cache = [];
			let current,
					last = this.getPoint(0);
			let sum = 0;
			cache.push(0);

			for (let p = 1; p <= divisions; p++) {
				current = this.getPoint(p / divisions);
				sum += current.distanceTo(last);
				cache.push(sum);
				last = current;
			}

			this.cacheArcLengths = cache;
			return cache; // { sums: cache, sum: sum }; Sum is in the last element.
		}

		updateArcLengths() {
			this.needsUpdate = true;
			this.getLengths();
		} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant


		getUtoTmapping(u, distance) {
			const arcLengths = this.getLengths();
			let i = 0;
			const il = arcLengths.length;
			let targetArcLength; // The targeted u distance value to get

			if (distance) {
				targetArcLength = distance;
			} else {
				targetArcLength = u * arcLengths[il - 1];
			} // binary search for the index with largest value smaller than target u distance


			let low = 0,
					high = il - 1,
					comparison;

			while (low <= high) {
				i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[i] - targetArcLength;

				if (comparison < 0) {
					low = i + 1;
				} else if (comparison > 0) {
					high = i - 1;
				} else {
					high = i;
					break; // DONE
				}
			}

			i = high;

			if (arcLengths[i] === targetArcLength) {
				return i / (il - 1);
			} // we could get finer grain at lengths, or use simple interpolation between two points


			const lengthBefore = arcLengths[i];
			const lengthAfter = arcLengths[i + 1];
			const segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points

			const segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t

			const t = (i + segmentFraction) / (il - 1);
			return t;
		} // Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation


		getTangent(t, optionalTarget) {
			const delta = 0.0001;
			let t1 = t - delta;
			let t2 = t + delta; // Capping in case of danger

			if (t1 < 0) t1 = 0;
			if (t2 > 1) t2 = 1;
			const pt1 = this.getPoint(t1);
			const pt2 = this.getPoint(t2);
			const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
			tangent.copy(pt2).sub(pt1).normalize();
			return tangent;
		}

		getTangentAt(u, optionalTarget) {
			const t = this.getUtoTmapping(u);
			return this.getTangent(t, optionalTarget);
		}

		computeFrenetFrames(segments, closed) {
			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
			const normal = new Vector3();
			const tangents = [];
			const normals = [];
			const binormals = [];
			const vec = new Vector3();
			const mat = new Matrix4(); // compute the tangent vectors for each segment on the curve

			for (let i = 0; i <= segments; i++) {
				const u = i / segments;
				tangents[i] = this.getTangentAt(u, new Vector3());
			} // select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component


			normals[0] = new Vector3();
			binormals[0] = new Vector3();
			let min = Number.MAX_VALUE;
			const tx = Math.abs(tangents[0].x);
			const ty = Math.abs(tangents[0].y);
			const tz = Math.abs(tangents[0].z);

			if (tx <= min) {
				min = tx;
				normal.set(1, 0, 0);
			}

			if (ty <= min) {
				min = ty;
				normal.set(0, 1, 0);
			}

			if (tz <= min) {
				normal.set(0, 0, 1);
			}

			vec.crossVectors(tangents[0], normal).normalize();
			normals[0].crossVectors(tangents[0], vec);
			binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve

			for (let i = 1; i <= segments; i++) {
				normals[i] = normals[i - 1].clone();
				binormals[i] = binormals[i - 1].clone();
				vec.crossVectors(tangents[i - 1], tangents[i]);

				if (vec.length() > Number.EPSILON) {
					vec.normalize();
					const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors

					normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
				}

				binormals[i].crossVectors(tangents[i], normals[i]);
			} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same


			if (closed === true) {
				let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
				theta /= segments;

				if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
					theta = -theta;
				}

				for (let i = 1; i <= segments; i++) {
					// twist a little...
					normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
					binormals[i].crossVectors(tangents[i], normals[i]);
				}
			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(source) {
			this.arcLengthDivisions = source.arcLengthDivisions;
			return this;
		}

		toJSON() {
			const data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};
			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;
			return data;
		}

		fromJSON(json) {
			this.arcLengthDivisions = json.arcLengthDivisions;
			return this;
		}

	}

	class EllipseCurve extends Curve {
		constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
			super();
			this.type = 'EllipseCurve';
			this.aX = aX;
			this.aY = aY;
			this.xRadius = xRadius;
			this.yRadius = yRadius;
			this.aStartAngle = aStartAngle;
			this.aEndAngle = aEndAngle;
			this.aClockwise = aClockwise;
			this.aRotation = aRotation;
		}

		getPoint(t, optionalTarget) {
			const point = optionalTarget || new Vector2();
			const twoPi = Math.PI * 2;
			let deltaAngle = this.aEndAngle - this.aStartAngle;
			const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI

			while (deltaAngle < 0) deltaAngle += twoPi;

			while (deltaAngle > twoPi) deltaAngle -= twoPi;

			if (deltaAngle < Number.EPSILON) {
				if (samePoints) {
					deltaAngle = 0;
				} else {
					deltaAngle = twoPi;
				}
			}

			if (this.aClockwise === true && !samePoints) {
				if (deltaAngle === twoPi) {
					deltaAngle = -twoPi;
				} else {
					deltaAngle = deltaAngle - twoPi;
				}
			}

			const angle = this.aStartAngle + t * deltaAngle;
			let x = this.aX + this.xRadius * Math.cos(angle);
			let y = this.aY + this.yRadius * Math.sin(angle);

			if (this.aRotation !== 0) {
				const cos = Math.cos(this.aRotation);
				const sin = Math.sin(this.aRotation);
				const tx = x - this.aX;
				const ty = y - this.aY; // Rotate the point about the center of the ellipse.

				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;
			}

			return point.set(x, y);
		}

		copy(source) {
			super.copy(source);
			this.aX = source.aX;
			this.aY = source.aY;
			this.xRadius = source.xRadius;
			this.yRadius = source.yRadius;
			this.aStartAngle = source.aStartAngle;
			this.aEndAngle = source.aEndAngle;
			this.aClockwise = source.aClockwise;
			this.aRotation = source.aRotation;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.aX = this.aX;
			data.aY = this.aY;
			data.xRadius = this.xRadius;
			data.yRadius = this.yRadius;
			data.aStartAngle = this.aStartAngle;
			data.aEndAngle = this.aEndAngle;
			data.aClockwise = this.aClockwise;
			data.aRotation = this.aRotation;
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.aX = json.aX;
			this.aY = json.aY;
			this.xRadius = json.xRadius;
			this.yRadius = json.yRadius;
			this.aStartAngle = json.aStartAngle;
			this.aEndAngle = json.aEndAngle;
			this.aClockwise = json.aClockwise;
			this.aRotation = json.aRotation;
			return this;
		}

	}

	EllipseCurve.prototype.isEllipseCurve = true;

	class ArcCurve extends EllipseCurve {
		constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
			super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
			this.type = 'ArcCurve';
		}

	}

	ArcCurve.prototype.isArcCurve = true;

	/**
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/

	function CubicPoly() {
		let c0 = 0,
				c1 = 0,
				c2 = 0,
				c3 = 0;
		/*
		 * Compute coefficients for a cubic polynomial
		 *	 p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *	 p(0) = x0, p(1) = x1
		 *	and
		 *	 p'(0) = t0, p'(1) = t1.
		 */

		function init(x0, x1, t0, t1) {
			c0 = x0;
			c1 = t0;
			c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;
		}

		return {
			initCatmullRom: function (x0, x1, x2, x3, tension) {
				init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
			},
			initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {
				// compute tangents when parameterized in [t1,t2]
				let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
				let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]

				t1 *= dt1;
				t2 *= dt1;
				init(x1, x2, t1, t2);
			},
			calc: function (t) {
				const t2 = t * t;
				const t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;
			}
		};
	} //


	const tmp = new Vector3();
	const px = new CubicPoly(),
				py = new CubicPoly(),
				pz = new CubicPoly();

	class CatmullRomCurve3 extends Curve {
		constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {
			super();
			this.type = 'CatmullRomCurve3';
			this.points = points;
			this.closed = closed;
			this.curveType = curveType;
			this.tension = tension;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;
			const points = this.points;
			const l = points.length;
			const p = (l - (this.closed ? 0 : 1)) * t;
			let intPoint = Math.floor(p);
			let weight = p - intPoint;

			if (this.closed) {
				intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
			} else if (weight === 0 && intPoint === l - 1) {
				intPoint = l - 2;
				weight = 1;
			}

			let p0, p3; // 4 points (p1 & p2 defined below)

			if (this.closed || intPoint > 0) {
				p0 = points[(intPoint - 1) % l];
			} else {
				// extrapolate first point
				tmp.subVectors(points[0], points[1]).add(points[0]);
				p0 = tmp;
			}

			const p1 = points[intPoint % l];
			const p2 = points[(intPoint + 1) % l];

			if (this.closed || intPoint + 2 < l) {
				p3 = points[(intPoint + 2) % l];
			} else {
				// extrapolate last point
				tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
				p3 = tmp;
			}

			if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
				// init Centripetal / Chordal Catmull-Rom
				const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
				let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
				let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
				let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points

				if (dt1 < 1e-4) dt1 = 1.0;
				if (dt0 < 1e-4) dt0 = dt1;
				if (dt2 < 1e-4) dt2 = dt1;
				px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
				py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
				pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
			} else if (this.curveType === 'catmullrom') {
				px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
				py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
				pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
			}

			point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.points = [];

			for (let i = 0, l = source.points.length; i < l; i++) {
				const point = source.points[i];
				this.points.push(point.clone());
			}

			this.closed = source.closed;
			this.curveType = source.curveType;
			this.tension = source.tension;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.points = [];

			for (let i = 0, l = this.points.length; i < l; i++) {
				const point = this.points[i];
				data.points.push(point.toArray());
			}

			data.closed = this.closed;
			data.curveType = this.curveType;
			data.tension = this.tension;
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.points = [];

			for (let i = 0, l = json.points.length; i < l; i++) {
				const point = json.points[i];
				this.points.push(new Vector3().fromArray(point));
			}

			this.closed = json.closed;
			this.curveType = json.curveType;
			this.tension = json.tension;
			return this;
		}

	}

	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

	/**
	 * Bezier Curves formulas obtained from
	 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
	 */
	function CatmullRom(t, p0, p1, p2, p3) {
		const v0 = (p2 - p0) * 0.5;
		const v1 = (p3 - p1) * 0.5;
		const t2 = t * t;
		const t3 = t * t2;
		return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
	} //


	function QuadraticBezierP0(t, p) {
		const k = 1 - t;
		return k * k * p;
	}

	function QuadraticBezierP1(t, p) {
		return 2 * (1 - t) * t * p;
	}

	function QuadraticBezierP2(t, p) {
		return t * t * p;
	}

	function QuadraticBezier(t, p0, p1, p2) {
		return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
	} //


	function CubicBezierP0(t, p) {
		const k = 1 - t;
		return k * k * k * p;
	}

	function CubicBezierP1(t, p) {
		const k = 1 - t;
		return 3 * k * k * t * p;
	}

	function CubicBezierP2(t, p) {
		return 3 * (1 - t) * t * t * p;
	}

	function CubicBezierP3(t, p) {
		return t * t * t * p;
	}

	function CubicBezier(t, p0, p1, p2, p3) {
		return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
	}

	class CubicBezierCurve extends Curve {
		constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
			super();
			this.type = 'CubicBezierCurve';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2,
						v3 = this.v3;
			point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			this.v3.copy(source.v3);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			data.v3 = this.v3.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			this.v3.fromArray(json.v3);
			return this;
		}

	}

	CubicBezierCurve.prototype.isCubicBezierCurve = true;

	class CubicBezierCurve3 extends Curve {
		constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
			super();
			this.type = 'CubicBezierCurve3';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2,
						v3 = this.v3;
			point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			this.v3.copy(source.v3);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			data.v3 = this.v3.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			this.v3.fromArray(json.v3);
			return this;
		}

	}

	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

	class LineCurve extends Curve {
		constructor(v1 = new Vector2(), v2 = new Vector2()) {
			super();
			this.type = 'LineCurve';
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;

			if (t === 1) {
				point.copy(this.v2);
			} else {
				point.copy(this.v2).sub(this.v1);
				point.multiplyScalar(t).add(this.v1);
			}

			return point;
		} // Line curve is linear, so we can overwrite default getPointAt


		getPointAt(u, optionalTarget) {
			return this.getPoint(u, optionalTarget);
		}

		getTangent(t, optionalTarget) {
			const tangent = optionalTarget || new Vector2();
			tangent.copy(this.v2).sub(this.v1).normalize();
			return tangent;
		}

		copy(source) {
			super.copy(source);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	LineCurve.prototype.isLineCurve = true;

	class LineCurve3 extends Curve {
		constructor(v1 = new Vector3(), v2 = new Vector3()) {
			super();
			this.type = 'LineCurve3';
			this.isLineCurve3 = true;
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;

			if (t === 1) {
				point.copy(this.v2);
			} else {
				point.copy(this.v2).sub(this.v1);
				point.multiplyScalar(t).add(this.v1);
			}

			return point;
		} // Line curve is linear, so we can overwrite default getPointAt


		getPointAt(u, optionalTarget) {
			return this.getPoint(u, optionalTarget);
		}

		copy(source) {
			super.copy(source);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	class QuadraticBezierCurve extends Curve {
		constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
			super();
			this.type = 'QuadraticBezierCurve';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2;
			point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

	class QuadraticBezierCurve3 extends Curve {
		constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
			super();
			this.type = 'QuadraticBezierCurve3';
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
		}

		getPoint(t, optionalTarget = new Vector3()) {
			const point = optionalTarget;
			const v0 = this.v0,
						v1 = this.v1,
						v2 = this.v2;
			point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.v0.copy(source.v0);
			this.v1.copy(source.v1);
			this.v2.copy(source.v2);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.v0.fromArray(json.v0);
			this.v1.fromArray(json.v1);
			this.v2.fromArray(json.v2);
			return this;
		}

	}

	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

	class SplineCurve extends Curve {
		constructor(points = []) {
			super();
			this.type = 'SplineCurve';
			this.points = points;
		}

		getPoint(t, optionalTarget = new Vector2()) {
			const point = optionalTarget;
			const points = this.points;
			const p = (points.length - 1) * t;
			const intPoint = Math.floor(p);
			const weight = p - intPoint;
			const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
			const p1 = points[intPoint];
			const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
			const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
			point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
			return point;
		}

		copy(source) {
			super.copy(source);
			this.points = [];

			for (let i = 0, l = source.points.length; i < l; i++) {
				const point = source.points[i];
				this.points.push(point.clone());
			}

			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.points = [];

			for (let i = 0, l = this.points.length; i < l; i++) {
				const point = this.points[i];
				data.points.push(point.toArray());
			}

			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.points = [];

			for (let i = 0, l = json.points.length; i < l; i++) {
				const point = json.points[i];
				this.points.push(new Vector2().fromArray(point));
			}

			return this;
		}

	}

	SplineCurve.prototype.isSplineCurve = true;

	var Curves = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *	curves, but retains the api of a curve
	 **************************************************************/

	class CurvePath extends Curve {
		constructor() {
			super();
			this.type = 'CurvePath';
			this.curves = [];
			this.autoClose = false; // Automatically closes the path
		}

		add(curve) {
			this.curves.push(curve);
		}

		closePath() {
			// Add a line curve if start and end of lines are not connected
			const startPoint = this.curves[0].getPoint(0);
			const endPoint = this.curves[this.curves.length - 1].getPoint(1);

			if (!startPoint.equals(endPoint)) {
				this.curves.push(new LineCurve(endPoint, startPoint));
			}
		} // To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:
		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')


		getPoint(t, optionalTarget) {
			const d = t * this.getLength();
			const curveLengths = this.getCurveLengths();
			let i = 0; // To think about boundaries points.

			while (i < curveLengths.length) {
				if (curveLengths[i] >= d) {
					const diff = curveLengths[i] - d;
					const curve = this.curves[i];
					const segmentLength = curve.getLength();
					const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
					return curve.getPointAt(u, optionalTarget);
				}

				i++;
			}

			return null; // loop where sum != 0, sum > d , sum+1 <d
		} // We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength


		getLength() {
			const lens = this.getCurveLengths();
			return lens[lens.length - 1];
		} // cacheLengths must be recalculated.


		updateArcLengths() {
			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();
		} // Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.


		getCurveLengths() {
			// We use cache values if curves and cache array are same length
			if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
				return this.cacheLengths;
			} // Get length of sub-curve
			// Push sums into cached array


			const lengths = [];
			let sums = 0;

			for (let i = 0, l = this.curves.length; i < l; i++) {
				sums += this.curves[i].getLength();
				lengths.push(sums);
			}

			this.cacheLengths = lengths;
			return lengths;
		}

		getSpacedPoints(divisions = 40) {
			const points = [];

			for (let i = 0; i <= divisions; i++) {
				points.push(this.getPoint(i / divisions));
			}

			if (this.autoClose) {
				points.push(points[0]);
			}

			return points;
		}

		getPoints(divisions = 12) {
			const points = [];
			let last;

			for (let i = 0, curves = this.curves; i < curves.length; i++) {
				const curve = curves[i];
				const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
				const pts = curve.getPoints(resolution);

				for (let j = 0; j < pts.length; j++) {
					const point = pts[j];
					if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates

					points.push(point);
					last = point;
				}
			}

			if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
				points.push(points[0]);
			}

			return points;
		}

		copy(source) {
			super.copy(source);
			this.curves = [];

			for (let i = 0, l = source.curves.length; i < l; i++) {
				const curve = source.curves[i];
				this.curves.push(curve.clone());
			}

			this.autoClose = source.autoClose;
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.autoClose = this.autoClose;
			data.curves = [];

			for (let i = 0, l = this.curves.length; i < l; i++) {
				const curve = this.curves[i];
				data.curves.push(curve.toJSON());
			}

			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.autoClose = json.autoClose;
			this.curves = [];

			for (let i = 0, l = json.curves.length; i < l; i++) {
				const curve = json.curves[i];
				this.curves.push(new Curves[curve.type]().fromJSON(curve));
			}

			return this;
		}

	}

	class Path extends CurvePath {
		constructor(points) {
			super();
			this.type = 'Path';
			this.currentPoint = new Vector2();

			if (points) {
				this.setFromPoints(points);
			}
		}

		setFromPoints(points) {
			this.moveTo(points[0].x, points[0].y);

			for (let i = 1, l = points.length; i < l; i++) {
				this.lineTo(points[i].x, points[i].y);
			}

			return this;
		}

		moveTo(x, y) {
			this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?

			return this;
		}

		lineTo(x, y) {
			const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
			this.curves.push(curve);
			this.currentPoint.set(x, y);
			return this;
		}

		quadraticCurveTo(aCPx, aCPy, aX, aY) {
			const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
			this.curves.push(curve);
			this.currentPoint.set(aX, aY);
			return this;
		}

		bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
			const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
			this.curves.push(curve);
			this.currentPoint.set(aX, aY);
			return this;
		}

		splineThru(pts
		/*Array of Vector*/
		) {
			const npts = [this.currentPoint.clone()].concat(pts);
			const curve = new SplineCurve(npts);
			this.curves.push(curve);
			this.currentPoint.copy(pts[pts.length - 1]);
			return this;
		}

		arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
			const x0 = this.currentPoint.x;
			const y0 = this.currentPoint.y;
			this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
			return this;
		}

		absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
			this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
			return this;
		}

		ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
			const x0 = this.currentPoint.x;
			const y0 = this.currentPoint.y;
			this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
			return this;
		}

		absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
			const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);

			if (this.curves.length > 0) {
				// if a previous curve is present, attempt to join
				const firstPoint = curve.getPoint(0);

				if (!firstPoint.equals(this.currentPoint)) {
					this.lineTo(firstPoint.x, firstPoint.y);
				}
			}

			this.curves.push(curve);
			const lastPoint = curve.getPoint(1);
			this.currentPoint.copy(lastPoint);
			return this;
		}

		copy(source) {
			super.copy(source);
			this.currentPoint.copy(source.currentPoint);
			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.currentPoint = this.currentPoint.toArray();
			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.currentPoint.fromArray(json.currentPoint);
			return this;
		}

	}

	class Shape extends Path {
		constructor(points) {
			super(points);
			this.uuid = generateUUID();
			this.type = 'Shape';
			this.holes = [];
		}

		getPointsHoles(divisions) {
			const holesPts = [];

			for (let i = 0, l = this.holes.length; i < l; i++) {
				holesPts[i] = this.holes[i].getPoints(divisions);
			}

			return holesPts;
		} // get points of shape and holes (keypoints based on segments parameter)


		extractPoints(divisions) {
			return {
				shape: this.getPoints(divisions),
				holes: this.getPointsHoles(divisions)
			};
		}

		copy(source) {
			super.copy(source);
			this.holes = [];

			for (let i = 0, l = source.holes.length; i < l; i++) {
				const hole = source.holes[i];
				this.holes.push(hole.clone());
			}

			return this;
		}

		toJSON() {
			const data = super.toJSON();
			data.uuid = this.uuid;
			data.holes = [];

			for (let i = 0, l = this.holes.length; i < l; i++) {
				const hole = this.holes[i];
				data.holes.push(hole.toJSON());
			}

			return data;
		}

		fromJSON(json) {
			super.fromJSON(json);
			this.uuid = json.uuid;
			this.holes = [];

			for (let i = 0, l = json.holes.length; i < l; i++) {
				const hole = json.holes[i];
				this.holes.push(new Path().fromJSON(hole));
			}

			return this;
		}

	}

	/**
	 * Port from https://github.com/mapbox/earcut (v2.2.2)
	 */
	const Earcut = {
		triangulate: function (data, holeIndices, dim = 2) {
			const hasHoles = holeIndices && holeIndices.length;
			const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
			let outerNode = linkedList(data, 0, outerLen, dim, true);
			const triangles = [];
			if (!outerNode || outerNode.next === outerNode.prev) return triangles;
			let minX, minY, maxX, maxY, x, y, invSize;
			if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

			if (data.length > 80 * dim) {
				minX = maxX = data[0];
				minY = maxY = data[1];

				for (let i = dim; i < outerLen; i += dim) {
					x = data[i];
					y = data[i + 1];
					if (x < minX) minX = x;
					if (y < minY) minY = y;
					if (x > maxX) maxX = x;
					if (y > maxY) maxY = y;
				} // minX, minY and invSize are later used to transform coords into integers for z-order calculation


				invSize = Math.max(maxX - minX, maxY - minY);
				invSize = invSize !== 0 ? 1 / invSize : 0;
			}

			earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
			return triangles;
		}
	}; // create a circular doubly linked list from polygon points in the specified winding order

	function linkedList(data, start, end, dim, clockwise) {
		let i, last;

		if (clockwise === signedArea(data, start, end, dim) > 0) {
			for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
		} else {
			for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
		}

		if (last && equals(last, last.next)) {
			removeNode(last);
			last = last.next;
		}

		return last;
	} // eliminate colinear or duplicate points


	function filterPoints(start, end) {
		if (!start) return start;
		if (!end) end = start;
		let p = start,
				again;

		do {
			again = false;

			if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
				removeNode(p);
				p = end = p.prev;
				if (p === p.next) break;
				again = true;
			} else {
				p = p.next;
			}
		} while (again || p !== end);

		return end;
	} // main ear slicing loop which triangulates a polygon (given as a linked list)


	function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
		if (!ear) return; // interlink polygon nodes in z-order

		if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
		let stop = ear,
				prev,
				next; // iterate through ears, slicing them one by one

		while (ear.prev !== ear.next) {
			prev = ear.prev;
			next = ear.next;

			if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
				// cut off the triangle
				triangles.push(prev.i / dim);
				triangles.push(ear.i / dim);
				triangles.push(next.i / dim);
				removeNode(ear); // skipping the next vertex leads to less sliver triangles

				ear = next.next;
				stop = next.next;
				continue;
			}

			ear = next; // if we looped through the whole remaining polygon and can't find any more ears

			if (ear === stop) {
				// try filtering points and slicing again
				if (!pass) {
					earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
				} else if (pass === 1) {
					ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
					earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
				} else if (pass === 2) {
					splitEarcut(ear, triangles, dim, minX, minY, invSize);
				}

				break;
			}
		}
	} // check whether a polygon node forms a valid ear with adjacent nodes


	function isEar(ear) {
		const a = ear.prev,
					b = ear,
					c = ear.next;
		if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
		// now make sure we don't have other points inside the potential ear

		let p = ear.next.next;

		while (p !== ear.prev) {
			if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
			p = p.next;
		}

		return true;
	}

	function isEarHashed(ear, minX, minY, invSize) {
		const a = ear.prev,
					b = ear,
					c = ear.next;
		if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
		// triangle bbox; min & max are calculated like this for speed

		const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
					minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
					maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
					maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

		const minZ = zOrder(minTX, minTY, minX, minY, invSize),
					maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
		let p = ear.prevZ,
				n = ear.nextZ; // look for points inside the triangle in both directions

		while (p && p.z >= minZ && n && n.z <= maxZ) {
			if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
			p = p.prevZ;
			if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
			n = n.nextZ;
		} // look for remaining points in decreasing z-order


		while (p && p.z >= minZ) {
			if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
			p = p.prevZ;
		} // look for remaining points in increasing z-order


		while (n && n.z <= maxZ) {
			if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
			n = n.nextZ;
		}

		return true;
	} // go through all polygon nodes and cure small local self-intersections


	function cureLocalIntersections(start, triangles, dim) {
		let p = start;

		do {
			const a = p.prev,
						b = p.next.next;

			if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
				triangles.push(a.i / dim);
				triangles.push(p.i / dim);
				triangles.push(b.i / dim); // remove two nodes involved

				removeNode(p);
				removeNode(p.next);
				p = start = b;
			}

			p = p.next;
		} while (p !== start);

		return filterPoints(p);
	} // try splitting polygon into two and triangulate them independently


	function splitEarcut(start, triangles, dim, minX, minY, invSize) {
		// look for a valid diagonal that divides the polygon into two
		let a = start;

		do {
			let b = a.next.next;

			while (b !== a.prev) {
				if (a.i !== b.i && isValidDiagonal(a, b)) {
					// split the polygon in two by the diagonal
					let c = splitPolygon(a, b); // filter colinear points around the cuts

					a = filterPoints(a, a.next);
					c = filterPoints(c, c.next); // run earcut on each half

					earcutLinked(a, triangles, dim, minX, minY, invSize);
					earcutLinked(c, triangles, dim, minX, minY, invSize);
					return;
				}

				b = b.next;
			}

			a = a.next;
		} while (a !== start);
	} // link every hole into the outer loop, producing a single-ring polygon without holes


	function eliminateHoles(data, holeIndices, outerNode, dim) {
		const queue = [];
		let i, len, start, end, list;

		for (i = 0, len = holeIndices.length; i < len; i++) {
			start = holeIndices[i] * dim;
			end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
			list = linkedList(data, start, end, dim, false);
			if (list === list.next) list.steiner = true;
			queue.push(getLeftmost(list));
		}

		queue.sort(compareX); // process holes from left to right

		for (i = 0; i < queue.length; i++) {
			eliminateHole(queue[i], outerNode);
			outerNode = filterPoints(outerNode, outerNode.next);
		}

		return outerNode;
	}

	function compareX(a, b) {
		return a.x - b.x;
	} // find a bridge between vertices that connects hole with an outer ring and and link it


	function eliminateHole(hole, outerNode) {
		outerNode = findHoleBridge(hole, outerNode);

		if (outerNode) {
			const b = splitPolygon(outerNode, hole); // filter collinear points around the cuts

			filterPoints(outerNode, outerNode.next);
			filterPoints(b, b.next);
		}
	} // David Eberly's algorithm for finding a bridge between hole and outer polygon


	function findHoleBridge(hole, outerNode) {
		let p = outerNode;
		const hx = hole.x;
		const hy = hole.y;
		let qx = -Infinity,
				m; // find a segment intersected by a ray from the hole's leftmost point to the left;
		// segment's endpoint with lesser x will be potential connection point

		do {
			if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
				const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

				if (x <= hx && x > qx) {
					qx = x;

					if (x === hx) {
						if (hy === p.y) return p;
						if (hy === p.next.y) return p.next;
					}

					m = p.x < p.next.x ? p : p.next;
				}
			}

			p = p.next;
		} while (p !== outerNode);

		if (!m) return null;
		if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
		// look for points inside the triangle of hole point, segment intersection and endpoint;
		// if there are no points found, we have a valid connection;
		// otherwise choose the point of the minimum angle with the ray as connection point

		const stop = m,
					mx = m.x,
					my = m.y;
		let tanMin = Infinity,
				tan;
		p = m;

		do {
			if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
				tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

				if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
					m = p;
					tanMin = tan;
				}
			}

			p = p.next;
		} while (p !== stop);

		return m;
	} // whether sector in vertex m contains sector in vertex p in the same coordinates


	function sectorContainsSector(m, p) {
		return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
	} // interlink polygon nodes in z-order


	function indexCurve(start, minX, minY, invSize) {
		let p = start;

		do {
			if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while (p !== start);

		p.prevZ.nextZ = null;
		p.prevZ = null;
		sortLinked(p);
	} // Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


	function sortLinked(list) {
		let i,
				p,
				q,
				e,
				tail,
				numMerges,
				pSize,
				qSize,
				inSize = 1;

		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;

			while (p) {
				numMerges++;
				q = p;
				pSize = 0;

				for (i = 0; i < inSize; i++) {
					pSize++;
					q = q.nextZ;
					if (!q) break;
				}

				qSize = inSize;

				while (pSize > 0 || qSize > 0 && q) {
					if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
						e = p;
						p = p.nextZ;
						pSize--;
					} else {
						e = q;
						q = q.nextZ;
						qSize--;
					}

					if (tail) tail.nextZ = e;else list = e;
					e.prevZ = tail;
					tail = e;
				}

				p = q;
			}

			tail.nextZ = null;
			inSize *= 2;
		} while (numMerges > 1);

		return list;
	} // z-order of a point given coords and inverse of the longer side of data bbox


	function zOrder(x, y, minX, minY, invSize) {
		// coords are transformed into non-negative 15-bit integer range
		x = 32767 * (x - minX) * invSize;
		y = 32767 * (y - minY) * invSize;
		x = (x | x << 8) & 0x00FF00FF;
		x = (x | x << 4) & 0x0F0F0F0F;
		x = (x | x << 2) & 0x33333333;
		x = (x | x << 1) & 0x55555555;
		y = (y | y << 8) & 0x00FF00FF;
		y = (y | y << 4) & 0x0F0F0F0F;
		y = (y | y << 2) & 0x33333333;
		y = (y | y << 1) & 0x55555555;
		return x | y << 1;
	} // find the leftmost node of a polygon ring


	function getLeftmost(start) {
		let p = start,
				leftmost = start;

		do {
			if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
			p = p.next;
		} while (p !== start);

		return leftmost;
	} // check if a point lies within a convex triangle


	function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
		return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
	} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


	function isValidDiagonal(a, b) {
		return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
		locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
		area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
		equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
	} // signed area of a triangle


	function area(p, q, r) {
		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	} // check if two points are equal


	function equals(p1, p2) {
		return p1.x === p2.x && p1.y === p2.y;
	} // check if two segments intersect


	function intersects(p1, q1, p2, q2) {
		const o1 = sign(area(p1, q1, p2));
		const o2 = sign(area(p1, q1, q2));
		const o3 = sign(area(p2, q2, p1));
		const o4 = sign(area(p2, q2, q1));
		if (o1 !== o2 && o3 !== o4) return true; // general case

		if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1

		if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1

		if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2

		if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

		return false;
	} // for collinear points p, q, r, check if point q lies on segment pr


	function onSegment(p, q, r) {
		return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
	}

	function sign(num) {
		return num > 0 ? 1 : num < 0 ? -1 : 0;
	} // check if a polygon diagonal intersects any polygon segments


	function intersectsPolygon(a, b) {
		let p = a;

		do {
			if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
			p = p.next;
		} while (p !== a);

		return false;
	} // check if a polygon diagonal is locally inside the polygon


	function locallyInside(a, b) {
		return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
	} // check if the middle point of a polygon diagonal is inside the polygon


	function middleInside(a, b) {
		let p = a,
				inside = false;
		const px = (a.x + b.x) / 2,
					py = (a.y + b.y) / 2;

		do {
			if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
			p = p.next;
		} while (p !== a);

		return inside;
	} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring


	function splitPolygon(a, b) {
		const a2 = new Node(a.i, a.x, a.y),
					b2 = new Node(b.i, b.x, b.y),
					an = a.next,
					bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	} // create a node and optionally link it with previous one (in a circular doubly linked list)


	function insertNode(i, x, y, last) {
		const p = new Node(i, x, y);

		if (!last) {
			p.prev = p;
			p.next = p;
		} else {
			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;
		}

		return p;
	}

	function removeNode(p) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if (p.prevZ) p.prevZ.nextZ = p.nextZ;
		if (p.nextZ) p.nextZ.prevZ = p.prevZ;
	}

	function Node(i, x, y) {
		// vertex index in coordinates array
		this.i = i; // vertex coordinates

		this.x = x;
		this.y = y; // previous and next vertex nodes in a polygon ring

		this.prev = null;
		this.next = null; // z-order curve value

		this.z = null; // previous and next nodes in z-order

		this.prevZ = null;
		this.nextZ = null; // indicates whether this is a steiner point

		this.steiner = false;
	}

	function signedArea(data, start, end, dim) {
		let sum = 0;

		for (let i = start, j = end - dim; i < end; i += dim) {
			sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
			j = i;
		}

		return sum;
	}

	class ShapeUtils {
		// calculate area of the contour polygon
		static area(contour) {
			const n = contour.length;
			let a = 0.0;

			for (let p = n - 1, q = 0; q < n; p = q++) {
				a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
			}

			return a * 0.5;
		}

		static isClockWise(pts) {
			return ShapeUtils.area(pts) < 0;
		}

		static triangulateShape(contour, holes) {
			const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]

			const holeIndices = []; // array of hole indices

			const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

			removeDupEndPts(contour);
			addContour(vertices, contour); //

			let holeIndex = contour.length;
			holes.forEach(removeDupEndPts);

			for (let i = 0; i < holes.length; i++) {
				holeIndices.push(holeIndex);
				holeIndex += holes[i].length;
				addContour(vertices, holes[i]);
			} //


			const triangles = Earcut.triangulate(vertices, holeIndices); //

			for (let i = 0; i < triangles.length; i += 3) {
				faces.push(triangles.slice(i, i + 3));
			}

			return faces;
		}

	}

	function removeDupEndPts(points) {
		const l = points.length;

		if (l > 2 && points[l - 1].equals(points[0])) {
			points.pop();
		}
	}

	function addContour(vertices, contour) {
		for (let i = 0; i < contour.length; i++) {
			vertices.push(contour[i].x);
			vertices.push(contour[i].y);
		}
	}

	/**
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves
	 *	steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *	depth: <float>, // Depth to extrude the shape
	 *
	 *	bevelEnabled: <bool>, // turn on bevel
	 *	bevelThickness: <float>, // how deep into the original shape bevel goes
	 *	bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
	 *	bevelOffset: <float>, // how far from shape outline does bevel start
	 *	bevelSegments: <int>, // number of bevel layers
	 *
	 *	extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *	UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */

	class ExtrudeGeometry extends BufferGeometry {
		constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
			super();
			this.type = 'ExtrudeGeometry';
			this.parameters = {
				shapes: shapes,
				options: options
			};
			shapes = Array.isArray(shapes) ? shapes : [shapes];
			const scope = this;
			const verticesArray = [];
			const uvArray = [];

			for (let i = 0, l = shapes.length; i < l; i++) {
				const shape = shapes[i];
				addShape(shape);
			} // build geometry


			this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));
			this.computeVertexNormals(); // functions

			function addShape(shape) {
				const placeholder = []; // options

				const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
				const steps = options.steps !== undefined ? options.steps : 1;
				let depth = options.depth !== undefined ? options.depth : 1;
				let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
				let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
				let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
				let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
				let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
				const extrudePath = options.extrudePath;
				const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options

				if (options.amount !== undefined) {
					console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');
					depth = options.amount;
				} //


				let extrudePts,
						extrudeByPath = false;
				let splineTube, binormal, normal, position2;

				if (extrudePath) {
					extrudePts = extrudePath.getSpacedPoints(steps);
					extrudeByPath = true;
					bevelEnabled = false; // bevels not supported for path extrusion
					// SETUP TNB variables
					// TODO1 - have a .isClosed in spline?

					splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

					binormal = new Vector3();
					normal = new Vector3();
					position2 = new Vector3();
				} // Safeguards if bevels are not enabled


				if (!bevelEnabled) {
					bevelSegments = 0;
					bevelThickness = 0;
					bevelSize = 0;
					bevelOffset = 0;
				} // Variables initialization


				const shapePoints = shape.extractPoints(curveSegments);
				let vertices = shapePoints.shape;
				const holes = shapePoints.holes;
				const reverse = !ShapeUtils.isClockWise(vertices);

				if (reverse) {
					vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...

					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];

						if (ShapeUtils.isClockWise(ahole)) {
							holes[h] = ahole.reverse();
						}
					}
				}

				const faces = ShapeUtils.triangulateShape(vertices, holes);
				/* Vertices */

				const contour = vertices; // vertices has all points but contour has only points of circumference

				for (let h = 0, hl = holes.length; h < hl; h++) {
					const ahole = holes[h];
					vertices = vertices.concat(ahole);
				}

				function scalePt2(pt, vec, size) {
					if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
					return vec.clone().multiplyScalar(size).add(pt);
				}

				const vlen = vertices.length,
							flen = faces.length; // Find directions for point movement

				function getBevelVec(inPt, inPrev, inNext) {
					// computes for inPt the corresponding point inPt' on a new contour
					//	 shifted by 1 unit (length of normalized vector) to the left
					// if we walk along contour clockwise, this new contour is outside the old one
					//
					// inPt' is the intersection of the two lines parallel to the two
					//	adjacent edges of inPt at a distance of 1 unit on the left side.
					let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
					// good reading for geometry algorithms (here: line-line intersection)
					// http://geomalgorithms.com/a05-_intersect-1.html

					const v_prev_x = inPt.x - inPrev.x,
								v_prev_y = inPt.y - inPrev.y;
					const v_next_x = inNext.x - inPt.x,
								v_next_y = inNext.y - inPt.y;
					const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges

					const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;

					if (Math.abs(collinear0) > Number.EPSILON) {
						// not collinear
						// length of vectors for normalizing
						const v_prev_len = Math.sqrt(v_prev_lensq);
						const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left

						const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
						const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
						const ptNextShift_x = inNext.x - v_next_y / v_next_len;
						const ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point

						const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point

						v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
						v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly
						//	but prevent crazy spikes

						const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;

						if (v_trans_lensq <= 2) {
							return new Vector2(v_trans_x, v_trans_y);
						} else {
							shrink_by = Math.sqrt(v_trans_lensq / 2);
						}
					} else {
						// handle special case of collinear edges
						let direction_eq = false; // assumes: opposite

						if (v_prev_x > Number.EPSILON) {
							if (v_next_x > Number.EPSILON) {
								direction_eq = true;
							}
						} else {
							if (v_prev_x < -Number.EPSILON) {
								if (v_next_x < -Number.EPSILON) {
									direction_eq = true;
								}
							} else {
								if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
									direction_eq = true;
								}
							}
						}

						if (direction_eq) {
							// console.log("Warning: lines are a straight sequence");
							v_trans_x = -v_prev_y;
							v_trans_y = v_prev_x;
							shrink_by = Math.sqrt(v_prev_lensq);
						} else {
							// console.log("Warning: lines are a straight spike");
							v_trans_x = v_prev_x;
							v_trans_y = v_prev_y;
							shrink_by = Math.sqrt(v_prev_lensq / 2);
						}
					}

					return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
				}

				const contourMovements = [];

				for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
					if (j === il) j = 0;
					if (k === il) k = 0; //	(j)---(i)---(k)
					// console.log('i,j,k', i, j , k)

					contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
				}

				const holesMovements = [];
				let oneHoleMovements,
						verticesMovements = contourMovements.concat();

				for (let h = 0, hl = holes.length; h < hl; h++) {
					const ahole = holes[h];
					oneHoleMovements = [];

					for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
						if (j === il) j = 0;
						if (k === il) k = 0; //	(j)---(i)---(k)

						oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
					}

					holesMovements.push(oneHoleMovements);
					verticesMovements = verticesMovements.concat(oneHoleMovements);
				} // Loop bevelSegments, 1 for the front, 1 for the back


				for (let b = 0; b < bevelSegments; b++) {
					//for ( b = bevelSegments; b > 0; b -- ) {
					const t = b / bevelSegments;
					const z = bevelThickness * Math.cos(t * Math.PI / 2);
					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape

					for (let i = 0, il = contour.length; i < il; i++) {
						const vert = scalePt2(contour[i], contourMovements[i], bs);
						v(vert.x, vert.y, -z);
					} // expand holes


					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];
						oneHoleMovements = holesMovements[h];

						for (let i = 0, il = ahole.length; i < il; i++) {
							const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
							v(vert.x, vert.y, -z);
						}
					}
				}

				const bs = bevelSize + bevelOffset; // Back facing vertices

				for (let i = 0; i < vlen; i++) {
					const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

					if (!extrudeByPath) {
						v(vert.x, vert.y, 0);
					} else {
						// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
						normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
						binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
						position2.copy(extrudePts[0]).add(normal).add(binormal);
						v(position2.x, position2.y, position2.z);
					}
				} // Add stepped vertices...
				// Including front facing vertices


				for (let s = 1; s <= steps; s++) {
					for (let i = 0; i < vlen; i++) {
						const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

						if (!extrudeByPath) {
							v(vert.x, vert.y, depth / steps * s);
						} else {
							// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
							normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
							binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
							position2.copy(extrudePts[s]).add(normal).add(binormal);
							v(position2.x, position2.y, position2.z);
						}
					}
				} // Add bevel segments planes
				//for ( b = 1; b <= bevelSegments; b ++ ) {


				for (let b = bevelSegments - 1; b >= 0; b--) {
					const t = b / bevelSegments;
					const z = bevelThickness * Math.cos(t * Math.PI / 2);
					const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape

					for (let i = 0, il = contour.length; i < il; i++) {
						const vert = scalePt2(contour[i], contourMovements[i], bs);
						v(vert.x, vert.y, depth + z);
					} // expand holes


					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];
						oneHoleMovements = holesMovements[h];

						for (let i = 0, il = ahole.length; i < il; i++) {
							const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);

							if (!extrudeByPath) {
								v(vert.x, vert.y, depth + z);
							} else {
								v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
							}
						}
					}
				}
				/* Faces */
				// Top and bottom faces


				buildLidFaces(); // Sides faces

				buildSideFaces(); /////	Internal functions

				function buildLidFaces() {
					const start = verticesArray.length / 3;

					if (bevelEnabled) {
						let layer = 0; // steps + 1

						let offset = vlen * layer; // Bottom faces

						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[2] + offset, face[1] + offset, face[0] + offset);
						}

						layer = steps + bevelSegments * 2;
						offset = vlen * layer; // Top faces

						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[0] + offset, face[1] + offset, face[2] + offset);
						}
					} else {
						// Bottom faces
						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[2], face[1], face[0]);
						} // Top faces


						for (let i = 0; i < flen; i++) {
							const face = faces[i];
							f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
						}
					}

					scope.addGroup(start, verticesArray.length / 3 - start, 0);
				} // Create faces for the z-sides of the shape


				function buildSideFaces() {
					const start = verticesArray.length / 3;
					let layeroffset = 0;
					sidewalls(contour, layeroffset);
					layeroffset += contour.length;

					for (let h = 0, hl = holes.length; h < hl; h++) {
						const ahole = holes[h];
						sidewalls(ahole, layeroffset); //, true

						layeroffset += ahole.length;
					}

					scope.addGroup(start, verticesArray.length / 3 - start, 1);
				}

				function sidewalls(contour, layeroffset) {
					let i = contour.length;

					while (--i >= 0) {
						const j = i;
						let k = i - 1;
						if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);

						for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
							const slen1 = vlen * s;
							const slen2 = vlen * (s + 1);
							const a = layeroffset + j + slen1,
										b = layeroffset + k + slen1,
										c = layeroffset + k + slen2,
										d = layeroffset + j + slen2;
							f4(a, b, c, d);
						}
					}
				}

				function v(x, y, z) {
					placeholder.push(x);
					placeholder.push(y);
					placeholder.push(z);
				}

				function f3(a, b, c) {
					addVertex(a);
					addVertex(b);
					addVertex(c);
					const nextIndex = verticesArray.length / 3;
					const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
					addUV(uvs[0]);
					addUV(uvs[1]);
					addUV(uvs[2]);
				}

				function f4(a, b, c, d) {
					addVertex(a);
					addVertex(b);
					addVertex(d);
					addVertex(b);
					addVertex(c);
					addVertex(d);
					const nextIndex = verticesArray.length / 3;
					const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
					addUV(uvs[0]);
					addUV(uvs[1]);
					addUV(uvs[3]);
					addUV(uvs[1]);
					addUV(uvs[2]);
					addUV(uvs[3]);
				}

				function addVertex(index) {
					verticesArray.push(placeholder[index * 3 + 0]);
					verticesArray.push(placeholder[index * 3 + 1]);
					verticesArray.push(placeholder[index * 3 + 2]);
				}

				function addUV(vector2) {
					uvArray.push(vector2.x);
					uvArray.push(vector2.y);
				}
			}
		}

		toJSON() {
			const data = super.toJSON();
			const shapes = this.parameters.shapes;
			const options = this.parameters.options;
			return toJSON$1(shapes, options, data);
		}

		static fromJSON(data, shapes) {
			const geometryShapes = [];

			for (let j = 0, jl = data.shapes.length; j < jl; j++) {
				const shape = shapes[data.shapes[j]];
				geometryShapes.push(shape);
			}

			const extrudePath = data.options.extrudePath;

			if (extrudePath !== undefined) {
				data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
			}

			return new ExtrudeGeometry(geometryShapes, data.options);
		}

	}

	const WorldUVGenerator = {
		generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {
			const a_x = vertices[indexA * 3];
			const a_y = vertices[indexA * 3 + 1];
			const b_x = vertices[indexB * 3];
			const b_y = vertices[indexB * 3 + 1];
			const c_x = vertices[indexC * 3];
			const c_y = vertices[indexC * 3 + 1];
			return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];
		},
		generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {
			const a_x = vertices[indexA * 3];
			const a_y = vertices[indexA * 3 + 1];
			const a_z = vertices[indexA * 3 + 2];
			const b_x = vertices[indexB * 3];
			const b_y = vertices[indexB * 3 + 1];
			const b_z = vertices[indexB * 3 + 2];
			const c_x = vertices[indexC * 3];
			const c_y = vertices[indexC * 3 + 1];
			const c_z = vertices[indexC * 3 + 2];
			const d_x = vertices[indexD * 3];
			const d_y = vertices[indexD * 3 + 1];
			const d_z = vertices[indexD * 3 + 2];

			if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
				return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];
			} else {
				return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];
			}
		}
	};

	function toJSON$1(shapes, options, data) {
		data.shapes = [];

		if (Array.isArray(shapes)) {
			for (let i = 0, l = shapes.length; i < l; i++) {
				const shape = shapes[i];
				data.shapes.push(shape.uuid);
			}
		} else {
			data.shapes.push(shapes.uuid);
		}

		if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
		return data;
	}

	class IcosahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const t = (1 + Math.sqrt(5)) / 2;
			const vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];
			const indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
			super(vertices, indices, radius, detail);
			this.type = 'IcosahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

		static fromJSON(data) {
			return new IcosahedronGeometry(data.radius, data.detail);
		}

	}

	class LatheGeometry extends BufferGeometry {
		constructor(points = [new Vector2(0, 0.5), new Vector2(0.5, 0), new Vector2(0, -0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
			super();
			this.type = 'LatheGeometry';
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
			segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]

			phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers

			const indices = [];
			const vertices = [];
			const uvs = [];
			const initNormals = [];
			const normals = []; // helper variables

			const inverseSegments = 1.0 / segments;
			const vertex = new Vector3();
			const uv = new Vector2();
			const normal = new Vector3();
			const curNormal = new Vector3();
			const prevNormal = new Vector3();
			let dx = 0;
			let dy = 0; // pre-compute normals for initial "meridian"

			for (let j = 0; j <= points.length - 1; j++) {
				switch (j) {
					case 0:
						// special handling for 1st vertex on path
						dx = points[j + 1].x - points[j].x;
						dy = points[j + 1].y - points[j].y;
						normal.x = dy * 1.0;
						normal.y = -dx;
						normal.z = dy * 0.0;
						prevNormal.copy(normal);
						normal.normalize();
						initNormals.push(normal.x, normal.y, normal.z);
						break;

					case points.length - 1:
						// special handling for last Vertex on path
						initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
						break;

					default:
						// default handling for all vertices in between
						dx = points[j + 1].x - points[j].x;
						dy = points[j + 1].y - points[j].y;
						normal.x = dy * 1.0;
						normal.y = -dx;
						normal.z = dy * 0.0;
						curNormal.copy(normal);
						normal.x += prevNormal.x;
						normal.y += prevNormal.y;
						normal.z += prevNormal.z;
						normal.normalize();
						initNormals.push(normal.x, normal.y, normal.z);
						prevNormal.copy(curNormal);
				}
			} // generate vertices, uvs and normals


			for (let i = 0; i <= segments; i++) {
				const phi = phiStart + i * inverseSegments * phiLength;
				const sin = Math.sin(phi);
				const cos = Math.cos(phi);

				for (let j = 0; j <= points.length - 1; j++) {
					// vertex
					vertex.x = points[j].x * sin;
					vertex.y = points[j].y;
					vertex.z = points[j].x * cos;
					vertices.push(vertex.x, vertex.y, vertex.z); // uv

					uv.x = i / segments;
					uv.y = j / (points.length - 1);
					uvs.push(uv.x, uv.y); // normal

					const x = initNormals[3 * j + 0] * sin;
					const y = initNormals[3 * j + 1];
					const z = initNormals[3 * j + 0] * cos;
					normals.push(x, y, z);
				}
			} // indices


			for (let i = 0; i < segments; i++) {
				for (let j = 0; j < points.length - 1; j++) {
					const base = j + i * points.length;
					const a = base;
					const b = base + points.length;
					const c = base + points.length + 1;
					const d = base + 1; // faces

					indices.push(a, b, d);
					indices.push(c, d, b);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
		}

		static fromJSON(data) {
			return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
		}

	}

	class OctahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];
			const indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
			super(vertices, indices, radius, detail);
			this.type = 'OctahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

		static fromJSON(data) {
			return new OctahedronGeometry(data.radius, data.detail);
		}

	}

	class RingGeometry extends BufferGeometry {
		constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
			super();
			this.type = 'RingGeometry';
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			thetaSegments = Math.max(3, thetaSegments);
			phiSegments = Math.max(1, phiSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // some helper variables

			let radius = innerRadius;
			const radiusStep = (outerRadius - innerRadius) / phiSegments;
			const vertex = new Vector3();
			const uv = new Vector2(); // generate vertices, normals and uvs

			for (let j = 0; j <= phiSegments; j++) {
				for (let i = 0; i <= thetaSegments; i++) {
					// values are generate from the inside of the ring to the outside
					const segment = thetaStart + i / thetaSegments * thetaLength; // vertex

					vertex.x = radius * Math.cos(segment);
					vertex.y = radius * Math.sin(segment);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					normals.push(0, 0, 1); // uv

					uv.x = (vertex.x / outerRadius + 1) / 2;
					uv.y = (vertex.y / outerRadius + 1) / 2;
					uvs.push(uv.x, uv.y);
				} // increase the radius for next row of vertices


				radius += radiusStep;
			} // indices


			for (let j = 0; j < phiSegments; j++) {
				const thetaSegmentLevel = j * (thetaSegments + 1);

				for (let i = 0; i < thetaSegments; i++) {
					const segment = i + thetaSegmentLevel;
					const a = segment;
					const b = segment + thetaSegments + 1;
					const c = segment + thetaSegments + 2;
					const d = segment + 1; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

		static fromJSON(data) {
			return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
		}

	}

	class ShapeGeometry extends BufferGeometry {
		constructor(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {
			super();
			this.type = 'ShapeGeometry';
			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			}; // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			let groupStart = 0;
			let groupCount = 0; // allow single and array values for "shapes" parameter

			if (Array.isArray(shapes) === false) {
				addShape(shapes);
			} else {
				for (let i = 0; i < shapes.length; i++) {
					addShape(shapes[i]);
					this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support

					groupStart += groupCount;
					groupCount = 0;
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions

			function addShape(shape) {
				const indexOffset = vertices.length / 3;
				const points = shape.extractPoints(curveSegments);
				let shapeVertices = points.shape;
				const shapeHoles = points.holes; // check direction of vertices

				if (ShapeUtils.isClockWise(shapeVertices) === false) {
					shapeVertices = shapeVertices.reverse();
				}

				for (let i = 0, l = shapeHoles.length; i < l; i++) {
					const shapeHole = shapeHoles[i];

					if (ShapeUtils.isClockWise(shapeHole) === true) {
						shapeHoles[i] = shapeHole.reverse();
					}
				}

				const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array

				for (let i = 0, l = shapeHoles.length; i < l; i++) {
					const shapeHole = shapeHoles[i];
					shapeVertices = shapeVertices.concat(shapeHole);
				} // vertices, normals, uvs


				for (let i = 0, l = shapeVertices.length; i < l; i++) {
					const vertex = shapeVertices[i];
					vertices.push(vertex.x, vertex.y, 0);
					normals.push(0, 0, 1);
					uvs.push(vertex.x, vertex.y); // world uvs
				} // incides


				for (let i = 0, l = faces.length; i < l; i++) {
					const face = faces[i];
					const a = face[0] + indexOffset;
					const b = face[1] + indexOffset;
					const c = face[2] + indexOffset;
					indices.push(a, b, c);
					groupCount += 3;
				}
			}
		}

		toJSON() {
			const data = super.toJSON();
			const shapes = this.parameters.shapes;
			return toJSON(shapes, data);
		}

		static fromJSON(data, shapes) {
			const geometryShapes = [];

			for (let j = 0, jl = data.shapes.length; j < jl; j++) {
				const shape = shapes[data.shapes[j]];
				geometryShapes.push(shape);
			}

			return new ShapeGeometry(geometryShapes, data.curveSegments);
		}

	}

	function toJSON(shapes, data) {
		data.shapes = [];

		if (Array.isArray(shapes)) {
			for (let i = 0, l = shapes.length; i < l; i++) {
				const shape = shapes[i];
				data.shapes.push(shape.uuid);
			}
		} else {
			data.shapes.push(shapes.uuid);
		}

		return data;
	}

	class SphereGeometry extends BufferGeometry {
		constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
			super();
			this.type = 'SphereGeometry';
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
			widthSegments = Math.max(3, Math.floor(widthSegments));
			heightSegments = Math.max(2, Math.floor(heightSegments));
			const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
			let index = 0;
			const grid = [];
			const vertex = new Vector3();
			const normal = new Vector3(); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // generate vertices, normals and uvs

			for (let iy = 0; iy <= heightSegments; iy++) {
				const verticesRow = [];
				const v = iy / heightSegments; // special case for the poles

				let uOffset = 0;

				if (iy == 0 && thetaStart == 0) {
					uOffset = 0.5 / widthSegments;
				} else if (iy == heightSegments && thetaEnd == Math.PI) {
					uOffset = -0.5 / widthSegments;
				}

				for (let ix = 0; ix <= widthSegments; ix++) {
					const u = ix / widthSegments; // vertex

					vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
					vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
					vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					normal.copy(vertex).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(u + uOffset, 1 - v);
					verticesRow.push(index++);
				}

				grid.push(verticesRow);
			} // indices


			for (let iy = 0; iy < heightSegments; iy++) {
				for (let ix = 0; ix < widthSegments; ix++) {
					const a = grid[iy][ix + 1];
					const b = grid[iy][ix];
					const c = grid[iy + 1][ix];
					const d = grid[iy + 1][ix + 1];
					if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
					if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

		static fromJSON(data) {
			return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
		}

	}

	class TetrahedronGeometry extends PolyhedronGeometry {
		constructor(radius = 1, detail = 0) {
			const vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];
			const indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
			super(vertices, indices, radius, detail);
			this.type = 'TetrahedronGeometry';
			this.parameters = {
				radius: radius,
				detail: detail
			};
		}

		static fromJSON(data) {
			return new TetrahedronGeometry(data.radius, data.detail);
		}

	}

	class TorusGeometry extends BufferGeometry {
		constructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {
			super();
			this.type = 'TorusGeometry';
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
			radialSegments = Math.floor(radialSegments);
			tubularSegments = Math.floor(tubularSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			const center = new Vector3();
			const vertex = new Vector3();
			const normal = new Vector3(); // generate vertices, normals and uvs

			for (let j = 0; j <= radialSegments; j++) {
				for (let i = 0; i <= tubularSegments; i++) {
					const u = i / tubularSegments * arc;
					const v = j / radialSegments * Math.PI * 2; // vertex

					vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
					vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
					vertex.z = tube * Math.sin(v);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal

					center.x = radius * Math.cos(u);
					center.y = radius * Math.sin(u);
					normal.subVectors(vertex, center).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(i / tubularSegments);
					uvs.push(j / radialSegments);
				}
			} // generate indices


			for (let j = 1; j <= radialSegments; j++) {
				for (let i = 1; i <= tubularSegments; i++) {
					// indices
					const a = (tubularSegments + 1) * j + i - 1;
					const b = (tubularSegments + 1) * (j - 1) + i - 1;
					const c = (tubularSegments + 1) * (j - 1) + i;
					const d = (tubularSegments + 1) * j + i; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
		}

		static fromJSON(data) {
			return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
		}

	}

	class TorusKnotGeometry extends BufferGeometry {
		constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
			super();
			this.type = 'TorusKnotGeometry';
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
			tubularSegments = Math.floor(tubularSegments);
			radialSegments = Math.floor(radialSegments); // buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = []; // helper variables

			const vertex = new Vector3();
			const normal = new Vector3();
			const P1 = new Vector3();
			const P2 = new Vector3();
			const B = new Vector3();
			const T = new Vector3();
			const N = new Vector3(); // generate vertices, normals and uvs

			for (let i = 0; i <= tubularSegments; ++i) {
				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
				const u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

				calculatePositionOnCurve(u, p, q, radius, P1);
				calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis

				T.subVectors(P2, P1);
				N.addVectors(P2, P1);
				B.crossVectors(T, N);
				N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it

				B.normalize();
				N.normalize();

				for (let j = 0; j <= radialSegments; ++j) {
					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
					const v = j / radialSegments * Math.PI * 2;
					const cx = -tube * Math.cos(v);
					const cy = tube * Math.sin(v); // now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

					vertex.x = P1.x + (cx * N.x + cy * B.x);
					vertex.y = P1.y + (cx * N.y + cy * B.y);
					vertex.z = P1.z + (cx * N.z + cy * B.z);
					vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

					normal.subVectors(vertex, P1).normalize();
					normals.push(normal.x, normal.y, normal.z); // uv

					uvs.push(i / tubularSegments);
					uvs.push(j / radialSegments);
				}
			} // generate indices


			for (let j = 1; j <= tubularSegments; j++) {
				for (let i = 1; i <= radialSegments; i++) {
					// indices
					const a = (radialSegments + 1) * (j - 1) + (i - 1);
					const b = (radialSegments + 1) * j + (i - 1);
					const c = (radialSegments + 1) * j + i;
					const d = (radialSegments + 1) * (j - 1) + i; // faces

					indices.push(a, b, d);
					indices.push(b, c, d);
				}
			} // build geometry


			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve

			function calculatePositionOnCurve(u, p, q, radius, position) {
				const cu = Math.cos(u);
				const su = Math.sin(u);
				const quOverP = q / p * u;
				const cs = Math.cos(quOverP);
				position.x = radius * (2 + cs) * 0.5 * cu;
				position.y = radius * (2 + cs) * su * 0.5;
				position.z = radius * Math.sin(quOverP) * 0.5;
			}
		}

		static fromJSON(data) {
			return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
		}

	}

	class TubeGeometry extends BufferGeometry {
		constructor(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
			super();
			this.type = 'TubeGeometry';
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
			const frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals

			this.tangents = frames.tangents;
			this.normals = frames.normals;
			this.binormals = frames.binormals; // helper variables

			const vertex = new Vector3();
			const normal = new Vector3();
			const uv = new Vector2();
			let P = new Vector3(); // buffer

			const vertices = [];
			const normals = [];
			const uvs = [];
			const indices = []; // create buffer data

			generateBufferData(); // build geometry

			this.setIndex(indices);
			this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
			this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions

			function generateBufferData() {
				for (let i = 0; i < tubularSegments; i++) {
					generateSegment(i);
				} // if the geometry is not closed, generate the last row of vertices and normals
				// at the regular position on the given path
				//
				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)


				generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.
				// this makes it easy compute correct values for closed geometries

				generateUVs(); // finally create faces

				generateIndices();
			}

			function generateSegment(i) {
				// we use getPointAt to sample evenly distributed points from the given path
				P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal

				const N = frames.normals[i];
				const B = frames.binormals[i]; // generate normals and vertices for the current segment

				for (let j = 0; j <= radialSegments; j++) {
					const v = j / radialSegments * Math.PI * 2;
					const sin = Math.sin(v);
					const cos = -Math.cos(v); // normal

					normal.x = cos * N.x + sin * B.x;
					normal.y = cos * N.y + sin * B.y;
					normal.z = cos * N.z + sin * B.z;
					normal.normalize();
					normals.push(normal.x, normal.y, normal.z); // vertex

					vertex.x = P.x + radius * normal.x;
					vertex.y = P.y + radius * normal.y;
					vertex.z = P.z + radius * normal.z;
					vertices.push(vertex.x, vertex.y, vertex.z);
				}
			}

			function generateIndices() {
				for (let j = 1; j <= tubularSegments; j++) {
					for (let i = 1; i <= radialSegments; i++) {
						const a = (radialSegments + 1) * (j - 1) + (i - 1);
						const b = (radialSegments + 1) * j + (i - 1);
						const c = (radialSegments + 1) * j + i;
						const d = (radialSegments + 1) * (j - 1) + i; // faces

						indices.push(a, b, d);
						indices.push(b, c, d);
					}
				}
			}

			function generateUVs() {
				for (let i = 0; i <= tubularSegments; i++) {
					for (let j = 0; j <= radialSegments; j++) {
						uv.x = i / tubularSegments;
						uv.y = j / radialSegments;
						uvs.push(uv.x, uv.y);
					}
				}
			}
		}

		toJSON() {
			const data = super.toJSON();
			data.path = this.parameters.path.toJSON();
			return data;
		}

		static fromJSON(data) {
			// This only works for built-in curves (e.g. CatmullRomCurve3).
			// User defined curves or instances of CurvePath will not be deserialized.
			return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
		}

	}

	class WireframeGeometry extends BufferGeometry {
		constructor(geometry = null) {
			super();
			this.type = 'WireframeGeometry';
			this.parameters = {
				geometry: geometry
			};

			if (geometry !== null) {
				// buffer
				const vertices = [];
				const edges = new Set(); // helper variables

				const start = new Vector3();
				const end = new Vector3();

				if (geometry.index !== null) {
					// indexed BufferGeometry
					const position = geometry.attributes.position;
					const indices = geometry.index;
					let groups = geometry.groups;

					if (groups.length === 0) {
						groups = [{
							start: 0,
							count: indices.count,
							materialIndex: 0
						}];
					} // create a data structure that contains all eges without duplicates


					for (let o = 0, ol = groups.length; o < ol; ++o) {
						const group = groups[o];
						const groupStart = group.start;
						const groupCount = group.count;

						for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
							for (let j = 0; j < 3; j++) {
								const index1 = indices.getX(i + j);
								const index2 = indices.getX(i + (j + 1) % 3);
								start.fromBufferAttribute(position, index1);
								end.fromBufferAttribute(position, index2);

								if (isUniqueEdge(start, end, edges) === true) {
									vertices.push(start.x, start.y, start.z);
									vertices.push(end.x, end.y, end.z);
								}
							}
						}
					}
				} else {
					// non-indexed BufferGeometry
					const position = geometry.attributes.position;

					for (let i = 0, l = position.count / 3; i < l; i++) {
						for (let j = 0; j < 3; j++) {
							// three edges per triangle, an edge is represented as (index1, index2)
							// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
							const index1 = 3 * i + j;
							const index2 = 3 * i + (j + 1) % 3;
							start.fromBufferAttribute(position, index1);
							end.fromBufferAttribute(position, index2);

							if (isUniqueEdge(start, end, edges) === true) {
								vertices.push(start.x, start.y, start.z);
								vertices.push(end.x, end.y, end.z);
							}
						}
					}
				} // build geometry


				this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			}
		}

	}

	function isUniqueEdge(start, end, edges) {
		const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
		const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge

		if (edges.has(hash1) === true || edges.has(hash2) === true) {
			return false;
		} else {
			edges.add(hash1);
			edges.add(hash2);
			return true;
		}
	}

	var Geometries = /*#__PURE__*/Object.freeze({
		__proto__: null,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronGeometry,
		EdgesGeometry: EdgesGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeGeometry,
		WireframeGeometry: WireframeGeometry
	});

	/**
	 * parameters = {
	 *	color: <THREE.Color>
	 * }
	 */

	class ShadowMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'ShadowMaterial';
			this.color = new Color(0x000000);
			this.transparent = true;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			return this;
		}

	}

	ShadowMaterial.prototype.isShadowMaterial = true;

	class RawShaderMaterial extends ShaderMaterial {
		constructor(parameters) {
			super(parameters);
			this.type = 'RawShaderMaterial';
		}

	}

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	roughness: <float>,
	 *	metalness: <float>,
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *	metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	envMapIntensity: <float>
	 *
	 *	refractionRatio: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshStandardMaterial extends Material {
		constructor(parameters) {
			super();
			this.defines = {
				'STANDARD': ''
			};
			this.type = 'MeshStandardMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.roughness = 1.0;
			this.metalness = 0.0;
			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.roughnessMap = null;
			this.metalnessMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.envMapIntensity = 1.0;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.defines = {
				'STANDARD': ''
			};
			this.color.copy(source.color);
			this.roughness = source.roughness;
			this.metalness = source.metalness;
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.roughnessMap = source.roughnessMap;
			this.metalnessMap = source.metalnessMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	/**
	 * parameters = {
	 *	clearcoat: <float>,
	 *	clearcoatMap: new THREE.Texture( <Image> ),
	 *	clearcoatRoughness: <float>,
	 *	clearcoatRoughnessMap: new THREE.Texture( <Image> ),
	 *	clearcoatNormalScale: <Vector2>,
	 *	clearcoatNormalMap: new THREE.Texture( <Image> ),
	 *
	 *	ior: <float>,
	 *	reflectivity: <float>,
	 *
	 *	sheen: <float>,
	 *	sheenColor: <Color>,
	 *	sheenColorMap: new THREE.Texture( <Image> ),
	 *	sheenRoughness: <float>,
	 *	sheenRoughnessMap: new THREE.Texture( <Image> ),
	 *
	 *	transmission: <float>,
	 *	transmissionMap: new THREE.Texture( <Image> ),
	 *
	 *	thickness: <float>,
	 *	thicknessMap: new THREE.Texture( <Image> ),
	 *	attenuationDistance: <float>,
	 *	attenuationColor: <Color>,
	 *
	 *	specularIntensity: <float>,
	 *	specularIntensityMap: new THREE.Texture( <Image> ),
	 *	specularColor: <Color>,
	 *	specularColorMap: new THREE.Texture( <Image> )
	 * }
	 */

	class MeshPhysicalMaterial extends MeshStandardMaterial {
		constructor(parameters) {
			super();
			this.defines = {
				'STANDARD': '',
				'PHYSICAL': ''
			};
			this.type = 'MeshPhysicalMaterial';
			this.clearcoatMap = null;
			this.clearcoatRoughness = 0.0;
			this.clearcoatRoughnessMap = null;
			this.clearcoatNormalScale = new Vector2(1, 1);
			this.clearcoatNormalMap = null;
			this.ior = 1.5;
			Object.defineProperty(this, 'reflectivity', {
				get: function () {
					return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
				},
				set: function (reflectivity) {
					this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
				}
			});
			this.sheenColor = new Color(0x000000);
			this.sheenColorMap = null;
			this.sheenRoughness = 1.0;
			this.sheenRoughnessMap = null;
			this.transmissionMap = null;
			this.thickness = 0;
			this.thicknessMap = null;
			this.attenuationDistance = 0.0;
			this.attenuationColor = new Color(1, 1, 1);
			this.specularIntensity = 1.0;
			this.specularIntensityMap = null;
			this.specularColor = new Color(1, 1, 1);
			this.specularColorMap = null;
			this._sheen = 0.0;
			this._clearcoat = 0;
			this._transmission = 0;
			this.setValues(parameters);
		}

		get sheen() {
			return this._sheen;
		}

		set sheen(value) {
			if (this._sheen > 0 !== value > 0) {
				this.version++;
			}

			this._sheen = value;
		}

		get clearcoat() {
			return this._clearcoat;
		}

		set clearcoat(value) {
			if (this._clearcoat > 0 !== value > 0) {
				this.version++;
			}

			this._clearcoat = value;
		}

		get transmission() {
			return this._transmission;
		}

		set transmission(value) {
			if (this._transmission > 0 !== value > 0) {
				this.version++;
			}

			this._transmission = value;
		}

		copy(source) {
			super.copy(source);
			this.defines = {
				'STANDARD': '',
				'PHYSICAL': ''
			};
			this.clearcoat = source.clearcoat;
			this.clearcoatMap = source.clearcoatMap;
			this.clearcoatRoughness = source.clearcoatRoughness;
			this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
			this.clearcoatNormalMap = source.clearcoatNormalMap;
			this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
			this.ior = source.ior;
			this.sheen = source.sheen;
			this.sheenColor.copy(source.sheenColor);
			this.sheenColorMap = source.sheenColorMap;
			this.sheenRoughness = source.sheenRoughness;
			this.sheenRoughnessMap = source.sheenRoughnessMap;
			this.transmission = source.transmission;
			this.transmissionMap = source.transmissionMap;
			this.thickness = source.thickness;
			this.thicknessMap = source.thicknessMap;
			this.attenuationDistance = source.attenuationDistance;
			this.attenuationColor.copy(source.attenuationColor);
			this.specularIntensity = source.specularIntensity;
			this.specularIntensityMap = source.specularIntensityMap;
			this.specularColor.copy(source.specularColor);
			this.specularColorMap = source.specularColorMap;
			return this;
		}

	}

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	specular: <hex>,
	 *	shininess: <float>,
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	specularMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	combine: THREE.MultiplyOperation,
	 *	reflectivity: <float>,
	 *	refractionRatio: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshPhongMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshPhongMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.specular = new Color(0x111111);
			this.shininess = 30;
			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.specularMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.specular.copy(source.specular);
			this.shininess = source.shininess;
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.specularMap = source.specularMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *	gradientMap: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 * }
	 */

	class MeshToonMaterial extends Material {
		constructor(parameters) {
			super();
			this.defines = {
				'TOON': ''
			};
			this.type = 'MeshToonMaterial';
			this.color = new Color(0xffffff);
			this.map = null;
			this.gradientMap = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.alphaMap = null;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.gradientMap = source.gradientMap;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.alphaMap = source.alphaMap;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			return this;
		}

	}

	MeshToonMaterial.prototype.isMeshToonMaterial = true;

	/**
	 * parameters = {
	 *	opacity: <float>,
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshNormalMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshNormalMaterial';
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.fog = false;
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	lightMap: new THREE.Texture( <Image> ),
	 *	lightMapIntensity: <float>
	 *
	 *	aoMap: new THREE.Texture( <Image> ),
	 *	aoMapIntensity: <float>
	 *
	 *	emissive: <hex>,
	 *	emissiveIntensity: <float>
	 *	emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *	specularMap: new THREE.Texture( <Image> ),
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *	combine: THREE.Multiply,
	 *	reflectivity: <float>,
	 *	refractionRatio: <float>,
	 *
	 *	wireframe: <boolean>,
	 *	wireframeLinewidth: <float>,
	 *
	 * }
	 */

	class MeshLambertMaterial extends Material {
		constructor(parameters) {
			super();
			this.type = 'MeshLambertMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.map = null;
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
			this.emissive = new Color(0x000000);
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
			this.specularMap = null;
			this.alphaMap = null;
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.map = source.map;
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
			this.emissive.copy(source.emissive);
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
			this.specularMap = source.specularMap;
			this.alphaMap = source.alphaMap;
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
			return this;
		}

	}

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	matcap: new THREE.Texture( <Image> ),
	 *
	 *	map: new THREE.Texture( <Image> ),
	 *
	 *	bumpMap: new THREE.Texture( <Image> ),
	 *	bumpScale: <float>,
	 *
	 *	normalMap: new THREE.Texture( <Image> ),
	 *	normalMapType: THREE.TangentSpaceNormalMap,
	 *	normalScale: <Vector2>,
	 *
	 *	displacementMap: new THREE.Texture( <Image> ),
	 *	displacementScale: <float>,
	 *	displacementBias: <float>,
	 *
	 *	alphaMap: new THREE.Texture( <Image> ),
	 *
	 *	flatShading: <bool>
	 * }
	 */

	class MeshMatcapMaterial extends Material {
		constructor(parameters) {
			super();
			this.defines = {
				'MATCAP': ''
			};
			this.type = 'MeshMatcapMaterial';
			this.color = new Color(0xffffff); // diffuse

			this.matcap = null;
			this.map = null;
			this.bumpMap = null;
			this.bumpScale = 1;
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2(1, 1);
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
			this.alphaMap = null;
			this.flatShading = false;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.defines = {
				'MATCAP': ''
			};
			this.color.copy(source.color);
			this.matcap = source.matcap;
			this.map = source.map;
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy(source.normalScale);
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
			this.alphaMap = source.alphaMap;
			this.flatShading = source.flatShading;
			return this;
		}

	}

	MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

	/**
	 * parameters = {
	 *	color: <hex>,
	 *	opacity: <float>,
	 *
	 *	linewidth: <float>,
	 *
	 *	scale: <float>,
	 *	dashSize: <float>,
	 *	gapSize: <float>
	 * }
	 */

	class LineDashedMaterial extends LineBasicMaterial {
		constructor(parameters) {
			super();
			this.type = 'LineDashedMaterial';
			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;
			this.setValues(parameters);
		}

		copy(source) {
			super.copy(source);
			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;
			return this;
		}

	}

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	const materialLib = {
		ShadowMaterial,
		SpriteMaterial,
		RawShaderMaterial,
		ShaderMaterial,
		PointsMaterial,
		MeshPhysicalMaterial,
		MeshStandardMaterial,
		MeshPhongMaterial,
		MeshToonMaterial,
		MeshNormalMaterial,
		MeshLambertMaterial,
		MeshDepthMaterial,
		MeshDistanceMaterial,
		MeshBasicMaterial,
		MeshMatcapMaterial,
		LineDashedMaterial,
		LineBasicMaterial,
		Material
	};

	Material.fromType = function (type) {
		return new materialLib[type]();
	};

	const AnimationUtils = {
		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function (array, from, to) {
			if (AnimationUtils.isTypedArray(array)) {
				// in ios9 array.subarray(from, undefined) will return empty array
				// but array.subarray(from) or array.subarray(from, len) is correct
				return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
			}

			return array.slice(from, to);
		},
		// converts an array to a specific type
		convertArray: function (array, type, forceClone) {
			if (!array || // let 'undefined' and 'null' pass
			!forceClone && array.constructor === type) return array;

			if (typeof type.BYTES_PER_ELEMENT === 'number') {
				return new type(array); // create typed array
			}

			return Array.prototype.slice.call(array); // create Array
		},
		isTypedArray: function (object) {
			return ArrayBuffer.isView(object) && !(object instanceof DataView);
		},
		// returns an array by which times and values can be sorted
		getKeyframeOrder: function (times) {
			function compareTime(i, j) {
				return times[i] - times[j];
			}

			const n = times.length;
			const result = new Array(n);

			for (let i = 0; i !== n; ++i) result[i] = i;

			result.sort(compareTime);
			return result;
		},
		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function (values, stride, order) {
			const nValues = values.length;
			const result = new values.constructor(nValues);

			for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
				const srcOffset = order[i] * stride;

				for (let j = 0; j !== stride; ++j) {
					result[dstOffset++] = values[srcOffset + j];
				}
			}

			return result;
		},
		// function for parsing AOS keyframe formats
		flattenJSON: function (jsonKeys, times, values, valuePropertyName) {
			let i = 1,
					key = jsonKeys[0];

			while (key !== undefined && key[valuePropertyName] === undefined) {
				key = jsonKeys[i++];
			}

			if (key === undefined) return; // no data

			let value = key[valuePropertyName];
			if (value === undefined) return; // no data

			if (Array.isArray(value)) {
				do {
					value = key[valuePropertyName];

					if (value !== undefined) {
						times.push(key.time);
						values.push.apply(values, value); // push all elements
					}

					key = jsonKeys[i++];
				} while (key !== undefined);
			} else if (value.toArray !== undefined) {
				// ...assume THREE.Math-ish
				do {
					value = key[valuePropertyName];

					if (value !== undefined) {
						times.push(key.time);
						value.toArray(values, values.length);
					}

					key = jsonKeys[i++];
				} while (key !== undefined);
			} else {
				// otherwise push as-is
				do {
					value = key[valuePropertyName];

					if (value !== undefined) {
						times.push(key.time);
						values.push(value);
					}

					key = jsonKeys[i++];
				} while (key !== undefined);
			}
		},
		subclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {
			const clip = sourceClip.clone();
			clip.name = name;
			const tracks = [];

			for (let i = 0; i < clip.tracks.length; ++i) {
				const track = clip.tracks[i];
				const valueSize = track.getValueSize();
				const times = [];
				const values = [];

				for (let j = 0; j < track.times.length; ++j) {
					const frame = track.times[j] * fps;
					if (frame < startFrame || frame >= endFrame) continue;
					times.push(track.times[j]);

					for (let k = 0; k < valueSize; ++k) {
						values.push(track.values[j * valueSize + k]);
					}
				}

				if (times.length === 0) continue;
				track.times = AnimationUtils.convertArray(times, track.times.constructor);
				track.values = AnimationUtils.convertArray(values, track.values.constructor);
				tracks.push(track);
			}

			clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip

			let minStartTime = Infinity;

			for (let i = 0; i < clip.tracks.length; ++i) {
				if (minStartTime > clip.tracks[i].times[0]) {
					minStartTime = clip.tracks[i].times[0];
				}
			} // shift all tracks such that clip begins at t=0


			for (let i = 0; i < clip.tracks.length; ++i) {
				clip.tracks[i].shift(-1 * minStartTime);
			}

			clip.resetDuration();
			return clip;
		},
		makeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
			if (fps <= 0) fps = 30;
			const numTracks = referenceClip.tracks.length;
			const referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame

			for (let i = 0; i < numTracks; ++i) {
				const referenceTrack = referenceClip.tracks[i];
				const referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric

				if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track

				const targetTrack = targetClip.tracks.find(function (track) {
					return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
				});
				if (targetTrack === undefined) continue;
				let referenceOffset = 0;
				const referenceValueSize = referenceTrack.getValueSize();

				if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
					referenceOffset = referenceValueSize / 3;
				}

				let targetOffset = 0;
				const targetValueSize = targetTrack.getValueSize();

				if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
					targetOffset = targetValueSize / 3;
				}

				const lastIndex = referenceTrack.times.length - 1;
				let referenceValue; // Find the value to subtract out of the track

				if (referenceTime <= referenceTrack.times[0]) {
					// Reference frame is earlier than the first keyframe, so just use the first keyframe
					const startIndex = referenceOffset;
					const endIndex = referenceValueSize - referenceOffset;
					referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
				} else if (referenceTime >= referenceTrack.times[lastIndex]) {
					// Reference frame is after the last keyframe, so just use the last keyframe
					const startIndex = lastIndex * referenceValueSize + referenceOffset;
					const endIndex = startIndex + referenceValueSize - referenceOffset;
					referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
				} else {
					// Interpolate to the reference value
					const interpolant = referenceTrack.createInterpolant();
					const startIndex = referenceOffset;
					const endIndex = referenceValueSize - referenceOffset;
					interpolant.evaluate(referenceTime);
					referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
				} // Conjugate the quaternion


				if (referenceTrackType === 'quaternion') {
					const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
					referenceQuat.toArray(referenceValue);
				} // Subtract the reference value from all of the track values


				const numTimes = targetTrack.times.length;

				for (let j = 0; j < numTimes; ++j) {
					const valueStart = j * targetValueSize + targetOffset;

					if (referenceTrackType === 'quaternion') {
						// Multiply the conjugate for quaternion track types
						Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
					} else {
						const valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types

						for (let k = 0; k < valueEnd; ++k) {
							targetTrack.values[valueStart + k] -= referenceValue[k];
						}
					}
				}
			}

			targetClip.blendMode = AdditiveAnimationBlendMode;
			return targetClip;
		}
	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 */
	class Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;
			this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;
			this.settings = null;
			this.DefaultSettings_ = {};
		}

		evaluate(t) {
			const pp = this.parameterPositions;
			let i1 = this._cachedIndex,
					t1 = pp[i1],
					t0 = pp[i1 - 1];

			validate_interval: {
				seek: {
					let right;

					linear_scan: {
						//- See http://jsperf.com/comparison-to-undefined/3
						//- slower code:
						//-
						//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if (!(t < t1)) {
							for (let giveUpAt = i1 + 2;;) {
								if (t1 === undefined) {
									if (t < t0) break forward_scan; // after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_(i1 - 1, t, t0);
								}

								if (i1 === giveUpAt) break; // this loop

								t0 = t1;
								t1 = pp[++i1];

								if (t < t1) {
									// we have arrived at the sought interval
									break seek;
								}
							} // prepare binary search on the right side of the index


							right = pp.length;
							break linear_scan;
						} //- slower code:
						//-					if ( t < t0 || t0 === undefined ) {


						if (!(t >= t0)) {
							// looping?
							const t1global = pp[1];

							if (t < t1global) {
								i1 = 2; // + 1, using the scan for the details

								t0 = t1global;
							} // linear reverse scan


							for (let giveUpAt = i1 - 2;;) {
								if (t0 === undefined) {
									// before start
									this._cachedIndex = 0;
									return this.beforeStart_(0, t, t1);
								}

								if (i1 === giveUpAt) break; // this loop

								t1 = t0;
								t0 = pp[--i1 - 1];

								if (t >= t0) {
									// we have arrived at the sought interval
									break seek;
								}
							} // prepare binary search on the left side of the index


							right = i1;
							i1 = 0;
							break linear_scan;
						} // the interval is valid


						break validate_interval;
					} // linear scan
					// binary search


					while (i1 < right) {
						const mid = i1 + right >>> 1;

						if (t < pp[mid]) {
							right = mid;
						} else {
							i1 = mid + 1;
						}
					}

					t1 = pp[i1];
					t0 = pp[i1 - 1]; // check boundary cases, again

					if (t0 === undefined) {
						this._cachedIndex = 0;
						return this.beforeStart_(0, t, t1);
					}

					if (t1 === undefined) {
						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_(i1 - 1, t0, t);
					}
				} // seek


				this._cachedIndex = i1;
				this.intervalChanged_(i1, t0, t1);
			} // validate_interval


			return this.interpolate_(i1, t0, t, t1);
		}

		getSettings_() {
			return this.settings || this.DefaultSettings_;
		}

		copySampleValue_(index) {
			// copies a sample value to the result buffer
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						offset = index * stride;

			for (let i = 0; i !== stride; ++i) {
				result[i] = values[offset + i];
			}

			return result;
		} // Template methods for derived classes:


		interpolate_() {
			throw new Error('call to abstract method'); // implementations shall return this.resultBuffer
		}

		intervalChanged_() {// empty
		}

	} // ALIAS DEFINITIONS


	Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
	Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 */

	class CubicInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
			this._weightPrev = -0;
			this._offsetPrev = -0;
			this._weightNext = -0;
			this._offsetNext = -0;
			this.DefaultSettings_ = {
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
			};
		}

		intervalChanged_(i1, t0, t1) {
			const pp = this.parameterPositions;
			let iPrev = i1 - 2,
					iNext = i1 + 1,
					tPrev = pp[iPrev],
					tNext = pp[iNext];

			if (tPrev === undefined) {
				switch (this.getSettings_().endingStart) {
					case ZeroSlopeEnding:
						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;
						break;

					case WrapAroundEnding:
						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
						break;

					default:
						// ZeroCurvatureEnding
						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;
				}
			}

			if (tNext === undefined) {
				switch (this.getSettings_().endingEnd) {
					case ZeroSlopeEnding:
						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;
						break;

					case WrapAroundEnding:
						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[1] - pp[0];
						break;

					default:
						// ZeroCurvatureEnding
						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;
				}
			}

			const halfDt = (t1 - t0) * 0.5,
						stride = this.valueSize;
			this._weightPrev = halfDt / (t0 - tPrev);
			this._weightNext = halfDt / (tNext - t1);
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;
		}

		interpolate_(i1, t0, t, t1) {
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						o1 = i1 * stride,
						o0 = o1 - stride,
						oP = this._offsetPrev,
						oN = this._offsetNext,
						wP = this._weightPrev,
						wN = this._weightNext,
						p = (t - t0) / (t1 - t0),
						pp = p * p,
						ppp = pp * p; // evaluate polynomials

			const sP = -wP * ppp + 2 * wP * pp - wP * p;
			const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
			const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
			const sN = wN * ppp - wN * pp; // combine data linearly

			for (let i = 0; i !== stride; ++i) {
				result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
			}

			return result;
		}

	}

	class LinearInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
		}

		interpolate_(i1, t0, t, t1) {
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						offset1 = i1 * stride,
						offset0 = offset1 - stride,
						weight1 = (t - t0) / (t1 - t0),
						weight0 = 1 - weight1;

			for (let i = 0; i !== stride; ++i) {
				result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
			}

			return result;
		}

	}

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 */

	class DiscreteInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
		}

		interpolate_(i1
		/*, t0, t, t1 */
		) {
			return this.copySampleValue_(i1 - 1);
		}

	}

	class KeyframeTrack {
		constructor(name, times, values, interpolation) {
			if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');
			if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);
			this.name = name;
			this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
			this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
			this.setInterpolation(interpolation || this.DefaultInterpolation);
		} // Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):


		static toJSON(track) {
			const trackType = track.constructor;
			let json; // derived classes can define a static toJSON method

			if (trackType.toJSON !== this.toJSON) {
				json = trackType.toJSON(track);
			} else {
				// by default, we assume the data can be serialized as-is
				json = {
					'name': track.name,
					'times': AnimationUtils.convertArray(track.times, Array),
					'values': AnimationUtils.convertArray(track.values, Array)
				};
				const interpolation = track.getInterpolation();

				if (interpolation !== track.DefaultInterpolation) {
					json.interpolation = interpolation;
				}
			}

			json.type = track.ValueTypeName; // mandatory

			return json;
		}

		InterpolantFactoryMethodDiscrete(result) {
			return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
		}

		InterpolantFactoryMethodLinear(result) {
			return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
		}

		InterpolantFactoryMethodSmooth(result) {
			return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
		}

		setInterpolation(interpolation) {
			let factoryMethod;

			switch (interpolation) {
				case InterpolateDiscrete:
					factoryMethod = this.InterpolantFactoryMethodDiscrete;
					break;

				case InterpolateLinear:
					factoryMethod = this.InterpolantFactoryMethodLinear;
					break;

				case InterpolateSmooth:
					factoryMethod = this.InterpolantFactoryMethodSmooth;
					break;
			}

			if (factoryMethod === undefined) {
				const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;

				if (this.createInterpolant === undefined) {
					// fall back to default, unless the default itself is messed up
					if (interpolation !== this.DefaultInterpolation) {
						this.setInterpolation(this.DefaultInterpolation);
					} else {
						throw new Error(message); // fatal, in this case
					}
				}

				console.warn('THREE.KeyframeTrack:', message);
				return this;
			}

			this.createInterpolant = factoryMethod;
			return this;
		}

		getInterpolation() {
			switch (this.createInterpolant) {
				case this.InterpolantFactoryMethodDiscrete:
					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:
					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:
					return InterpolateSmooth;
			}
		}

		getValueSize() {
			return this.values.length / this.times.length;
		} // move all keyframes either forwards or backwards in time


		shift(timeOffset) {
			if (timeOffset !== 0.0) {
				const times = this.times;

				for (let i = 0, n = times.length; i !== n; ++i) {
					times[i] += timeOffset;
				}
			}

			return this;
		} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)


		scale(timeScale) {
			if (timeScale !== 1.0) {
				const times = this.times;

				for (let i = 0, n = times.length; i !== n; ++i) {
					times[i] *= timeScale;
				}
			}

			return this;
		} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values


		trim(startTime, endTime) {
			const times = this.times,
						nKeys = times.length;
			let from = 0,
					to = nKeys - 1;

			while (from !== nKeys && times[from] < startTime) {
				++from;
			}

			while (to !== -1 && times[to] > endTime) {
				--to;
			}

			++to; // inclusive -> exclusive bound

			if (from !== 0 || to !== nKeys) {
				// empty tracks are forbidden, so keep at least one keyframe
				if (from >= to) {
					to = Math.max(to, 1);
					from = to - 1;
				}

				const stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice(times, from, to);
				this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
			}

			return this;
		} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable


		validate() {
			let valid = true;
			const valueSize = this.getValueSize();

			if (valueSize - Math.floor(valueSize) !== 0) {
				console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
				valid = false;
			}

			const times = this.times,
						values = this.values,
						nKeys = times.length;

			if (nKeys === 0) {
				console.error('THREE.KeyframeTrack: Track is empty.', this);
				valid = false;
			}

			let prevTime = null;

			for (let i = 0; i !== nKeys; i++) {
				const currTime = times[i];

				if (typeof currTime === 'number' && isNaN(currTime)) {
					console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);
					valid = false;
					break;
				}

				if (prevTime !== null && prevTime > currTime) {
					console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);
					valid = false;
					break;
				}

				prevTime = currTime;
			}

			if (values !== undefined) {
				if (AnimationUtils.isTypedArray(values)) {
					for (let i = 0, n = values.length; i !== n; ++i) {
						const value = values[i];

						if (isNaN(value)) {
							console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);
							valid = false;
							break;
						}
					}
				}
			}

			return valid;
		} // removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)


		optimize() {
			// times or values may be shared with other tracks, so overwriting is unsafe
			const times = AnimationUtils.arraySlice(this.times),
						values = AnimationUtils.arraySlice(this.values),
						stride = this.getValueSize(),
						smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
						lastIndex = times.length - 1;
			let writeIndex = 1;

			for (let i = 1; i < lastIndex; ++i) {
				let keep = false;
				const time = times[i];
				const timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time

				if (time !== timeNext && (i !== 1 || time !== times[0])) {
					if (!smoothInterpolation) {
						// remove unnecessary keyframes same as their neighbors
						const offset = i * stride,
									offsetP = offset - stride,
									offsetN = offset + stride;

						for (let j = 0; j !== stride; ++j) {
							const value = values[offset + j];

							if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
								keep = true;
								break;
							}
						}
					} else {
						keep = true;
					}
				} // in-place compaction


				if (keep) {
					if (i !== writeIndex) {
						times[writeIndex] = times[i];
						const readOffset = i * stride,
									writeOffset = writeIndex * stride;

						for (let j = 0; j !== stride; ++j) {
							values[writeOffset + j] = values[readOffset + j];
						}
					}

					++writeIndex;
				}
			} // flush last keyframe (compaction looks ahead)


			if (lastIndex > 0) {
				times[writeIndex] = times[lastIndex];

				for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
					values[writeOffset + j] = values[readOffset + j];
				}

				++writeIndex;
			}

			if (writeIndex !== times.length) {
				this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
				this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
			} else {
				this.times = times;
				this.values = values;
			}

			return this;
		}

		clone() {
			const times = AnimationUtils.arraySlice(this.times, 0);
			const values = AnimationUtils.arraySlice(this.values, 0);
			const TypedKeyframeTrack = this.constructor;
			const track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.

			track.createInterpolant = this.createInterpolant;
			return track;
		}

	}

	KeyframeTrack.prototype.TimeBufferType = Float32Array;
	KeyframeTrack.prototype.ValueBufferType = Float32Array;
	KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;

	/**
	 * A Track of Boolean keyframe values.
	 */

	class BooleanKeyframeTrack extends KeyframeTrack {}

	BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
	BooleanKeyframeTrack.prototype.ValueBufferType = Array;
	BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
	BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed

	/**
	 * A Track of keyframe values that represent color.
	 */

	class ColorKeyframeTrack extends KeyframeTrack {}

	ColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited

	/**
	 * A Track of numeric keyframe values.
	 */

	class NumberKeyframeTrack extends KeyframeTrack {}

	NumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited

	/**
	 * Spherical linear unit quaternion interpolant.
	 */

	class QuaternionLinearInterpolant extends Interpolant {
		constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
			super(parameterPositions, sampleValues, sampleSize, resultBuffer);
		}

		interpolate_(i1, t0, t, t1) {
			const result = this.resultBuffer,
						values = this.sampleValues,
						stride = this.valueSize,
						alpha = (t - t0) / (t1 - t0);
			let offset = i1 * stride;

			for (let end = offset + stride; offset !== end; offset += 4) {
				Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
			}

			return result;
		}

	}

	/**
	 * A Track of quaternion keyframe values.
	 */

	class QuaternionKeyframeTrack extends KeyframeTrack {
		InterpolantFactoryMethodLinear(result) {
			return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
		}

	}

	QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited

	QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
	QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

	/**
	 * A Track that interpolates Strings
	 */

	class StringKeyframeTrack extends KeyframeTrack {}

	StringKeyframeTrack.prototype.ValueTypeName = 'string';
	StringKeyframeTrack.prototype.ValueBufferType = Array;
	StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
	StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
	StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;

	/**
	 * A Track of vectored keyframe values.
	 */

	class VectorKeyframeTrack extends KeyframeTrack {}

	VectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited

	class AnimationClip {
		constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
			this.name = name;
			this.tracks = tracks;
			this.duration = duration;
			this.blendMode = blendMode;
			this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks

			if (this.duration < 0) {
				this.resetDuration();
			}
		}

		static parse(json) {
			const tracks = [],
						jsonTracks = json.tracks,
						frameTime = 1.0 / (json.fps || 1.0);

			for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
				tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
			}

			const clip = new this(json.name, json.duration, tracks, json.blendMode);
			clip.uuid = json.uuid;
			return clip;
		}

		static toJSON(clip) {
			const tracks = [],
						clipTracks = clip.tracks;
			const json = {
				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks,
				'uuid': clip.uuid,
				'blendMode': clip.blendMode
			};

			for (let i = 0, n = clipTracks.length; i !== n; ++i) {
				tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
			}

			return json;
		}

		static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
			const numMorphTargets = morphTargetSequence.length;
			const tracks = [];

			for (let i = 0; i < numMorphTargets; i++) {
				let times = [];
				let values = [];
				times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
				values.push(0, 1, 0);
				const order = AnimationUtils.getKeyframeOrder(times);
				times = AnimationUtils.sortedArray(times, 1, order);
				values = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.

				if (!noLoop && times[0] === 0) {
					times.push(numMorphTargets);
					values.push(values[0]);
				}

				tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));
			}

			return new this(name, -1, tracks);
		}

		static findByName(objectOrClipArray, name) {
			let clipArray = objectOrClipArray;

			if (!Array.isArray(objectOrClipArray)) {
				const o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;
			}

			for (let i = 0; i < clipArray.length; i++) {
				if (clipArray[i].name === name) {
					return clipArray[i];
				}
			}

			return null;
		}

		static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
			const animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059

			const pattern = /^([\w-]*?)([\d]+)$/; // sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002

			for (let i = 0, il = morphTargets.length; i < il; i++) {
				const morphTarget = morphTargets[i];
				const parts = morphTarget.name.match(pattern);

				if (parts && parts.length > 1) {
					const name = parts[1];
					let animationMorphTargets = animationToMorphTargets[name];

					if (!animationMorphTargets) {
						animationToMorphTargets[name] = animationMorphTargets = [];
					}

					animationMorphTargets.push(morphTarget);
				}
			}

			const clips = [];

			for (const name in animationToMorphTargets) {
				clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
			}

			return clips;
		} // parse the animation.hierarchy format


		static parseAnimation(animation, bones) {
			if (!animation) {
				console.error('THREE.AnimationClip: No animation in JSONLoader data.');
				return null;
			}

			const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {
				// only return track if there are actually keys.
				if (animationKeys.length !== 0) {
					const times = [];
					const values = [];
					AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again

					if (times.length !== 0) {
						destTracks.push(new trackType(trackName, times, values));
					}
				}
			};

			const tracks = [];
			const clipName = animation.name || 'default';
			const fps = animation.fps || 30;
			const blendMode = animation.blendMode; // automatic length determination in AnimationClip.

			let duration = animation.length || -1;
			const hierarchyTracks = animation.hierarchy || [];

			for (let h = 0; h < hierarchyTracks.length; h++) {
				const animationKeys = hierarchyTracks[h].keys; // skip empty tracks

				if (!animationKeys || animationKeys.length === 0) continue; // process morph targets

				if (animationKeys[0].morphTargets) {
					// figure out all morph targets used in this track
					const morphTargetNames = {};
					let k;

					for (k = 0; k < animationKeys.length; k++) {
						if (animationKeys[k].morphTargets) {
							for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
								morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
							}
						}
					} // create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.


					for (const morphTargetName in morphTargetNames) {
						const times = [];
						const values = [];

						for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
							const animationKey = animationKeys[k];
							times.push(animationKey.time);
							values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
						}

						tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
					}

					duration = morphTargetNames.length * fps;
				} else {
					// ...assume skeletal animation
					const boneName = '.bones[' + bones[h].name + ']';
					addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
					addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
					addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
				}
			}

			if (tracks.length === 0) {
				return null;
			}

			const clip = new this(clipName, duration, tracks, blendMode);
			return clip;
		}

		resetDuration() {
			const tracks = this.tracks;
			let duration = 0;

			for (let i = 0, n = tracks.length; i !== n; ++i) {
				const track = this.tracks[i];
				duration = Math.max(duration, track.times[track.times.length - 1]);
			}

			this.duration = duration;
			return this;
		}

		trim() {
			for (let i = 0; i < this.tracks.length; i++) {
				this.tracks[i].trim(0, this.duration);
			}

			return this;
		}

		validate() {
			let valid = true;

			for (let i = 0; i < this.tracks.length; i++) {
				valid = valid && this.tracks[i].validate();
			}

			return valid;
		}

		optimize() {
			for (let i = 0; i < this.tracks.length; i++) {
				this.tracks[i].optimize();
			}

			return this;
		}

		clone() {
			const tracks = [];

			for (let i = 0; i < this.tracks.length; i++) {
				tracks.push(this.tracks[i].clone());
			}

			return new this.constructor(this.name, this.duration, tracks, this.blendMode);
		}

		toJSON() {
			return this.constructor.toJSON(this);
		}

	}

	function getTrackTypeForValueTypeName(typeName) {
		switch (typeName.toLowerCase()) {
			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':
				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':
				return VectorKeyframeTrack;

			case 'color':
				return ColorKeyframeTrack;

			case 'quaternion':
				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':
				return BooleanKeyframeTrack;

			case 'string':
				return StringKeyframeTrack;
		}

		throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
	}

	function parseKeyframeTrack(json) {
		if (json.type === undefined) {
			throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
		}

		const trackType = getTrackTypeForValueTypeName(json.type);

		if (json.times === undefined) {
			const times = [],
						values = [];
			AnimationUtils.flattenJSON(json.keys, times, values, 'value');
			json.times = times;
			json.values = values;
		} // derived classes can define a static parse method


		if (trackType.parse !== undefined) {
			return trackType.parse(json);
		} else {
			// by default, we assume a constructor compatible with the base
			return new trackType(json.name, json.times, json.values, json.interpolation);
		}
	}

	const Cache = {
		enabled: false,
		files: {},
		add: function (key, file) {
			if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[key] = file;
		},
		get: function (key) {
			if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[key];
		},
		remove: function (key) {
			delete this.files[key];
		},
		clear: function () {
			this.files = {};
		}
	};

	class LoadingManager {
		constructor(onLoad, onProgress, onError) {
			const scope = this;
			let isLoading = false;
			let itemsLoaded = 0;
			let itemsTotal = 0;
			let urlModifier = undefined;
			const handlers = []; // Refer to #5689 for the reason why we don't set .onStart
			// in the constructor

			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;

			this.itemStart = function (url) {
				itemsTotal++;

				if (isLoading === false) {
					if (scope.onStart !== undefined) {
						scope.onStart(url, itemsLoaded, itemsTotal);
					}
				}

				isLoading = true;
			};

			this.itemEnd = function (url) {
				itemsLoaded++;

				if (scope.onProgress !== undefined) {
					scope.onProgress(url, itemsLoaded, itemsTotal);
				}

				if (itemsLoaded === itemsTotal) {
					isLoading = false;

					if (scope.onLoad !== undefined) {
						scope.onLoad();
					}
				}
			};

			this.itemError = function (url) {
				if (scope.onError !== undefined) {
					scope.onError(url);
				}
			};

			this.resolveURL = function (url) {
				if (urlModifier) {
					return urlModifier(url);
				}

				return url;
			};

			this.setURLModifier = function (transform) {
				urlModifier = transform;
				return this;
			};

			this.addHandler = function (regex, loader) {
				handlers.push(regex, loader);
				return this;
			};

			this.removeHandler = function (regex) {
				const index = handlers.indexOf(regex);

				if (index !== -1) {
					handlers.splice(index, 2);
				}

				return this;
			};

			this.getHandler = function (file) {
				for (let i = 0, l = handlers.length; i < l; i += 2) {
					const regex = handlers[i];
					const loader = handlers[i + 1];
					if (regex.global) regex.lastIndex = 0; // see #17920

					if (regex.test(file)) {
						return loader;
					}
				}

				return null;
			};
		}

	}

	const DefaultLoadingManager = new LoadingManager();

	class Loader {
		constructor(manager) {
			this.manager = manager !== undefined ? manager : DefaultLoadingManager;
			this.crossOrigin = 'anonymous';
			this.withCredentials = false;
			this.path = '';
			this.resourcePath = '';
			this.requestHeader = {};
		}

		load() {}

		loadAsync(url, onProgress) {
			const scope = this;
			return new Promise(function (resolve, reject) {
				scope.load(url, resolve, onProgress, reject);
			});
		}

		parse() {}

		setCrossOrigin(crossOrigin) {
			this.crossOrigin = crossOrigin;
			return this;
		}

		setWithCredentials(value) {
			this.withCredentials = value;
			return this;
		}

		setPath(path) {
			this.path = path;
			return this;
		}

		setResourcePath(resourcePath) {
			this.resourcePath = resourcePath;
			return this;
		}

		setRequestHeader(requestHeader) {
			this.requestHeader = requestHeader;
			return this;
		}

	}

	const loading = {};

	class FileLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			if (url === undefined) url = '';
			if (this.path !== undefined) url = this.path + url;
			url = this.manager.resolveURL(url);
			const cached = Cache.get(url);

			if (cached !== undefined) {
				this.manager.itemStart(url);
				setTimeout(() => {
					if (onLoad) onLoad(cached);
					this.manager.itemEnd(url);
				}, 0);
				return cached;
			} // Check if request is duplicate


			if (loading[url] !== undefined) {
				loading[url].push({
					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError
				});
				return;
			} // Initialise array for duplicate requests


			loading[url] = [];
			loading[url].push({
				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError
			}); // create request

			const req = new Request(url, {
				headers: new Headers(this.requestHeader),
				credentials: this.withCredentials ? 'include' : 'same-origin' // An abort controller could be added within a future PR

			}); // record states ( avoid data race )

			const mimeType = this.mimeType;
			const responseType = this.responseType; // start the fetch

			fetch(req).then(response => {
				if (response.status === 200 || response.status === 0) {
					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.
					if (response.status === 0) {
						console.warn('THREE.FileLoader: HTTP Status 0 received.');
					} // Workaround: Checking if response.body === undefined for Alipay browser #23548


					if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {
						return response;
					}

					const callbacks = loading[url];
					const reader = response.body.getReader();
					const contentLength = response.headers.get('Content-Length');
					const total = contentLength ? parseInt(contentLength) : 0;
					const lengthComputable = total !== 0;
					let loaded = 0; // periodically read data into the new stream tracking while download progress

					const stream = new ReadableStream({
						start(controller) {
							readData();

							function readData() {
								reader.read().then(({
									done,
									value
								}) => {
									if (done) {
										controller.close();
									} else {
										loaded += value.byteLength;
										const event = new ProgressEvent('progress', {
											lengthComputable,
											loaded,
											total
										});

										for (let i = 0, il = callbacks.length; i < il; i++) {
											const callback = callbacks[i];
											if (callback.onProgress) callback.onProgress(event);
										}

										controller.enqueue(value);
										readData();
									}
								});
							}
						}

					});
					return new Response(stream);
				} else {
					throw Error(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`);
				}
			}).then(response => {
				switch (responseType) {
					case 'arraybuffer':
						return response.arrayBuffer();

					case 'blob':
						return response.blob();

					case 'document':
						return response.text().then(text => {
							const parser = new DOMParser();
							return parser.parseFromString(text, mimeType);
						});

					case 'json':
						return response.json();

					default:
						if (mimeType === undefined) {
							return response.text();
						} else {
							// sniff encoding
							const re = /charset="?([^;"\s]*)"?/i;
							const exec = re.exec(mimeType);
							const label = exec && exec[1] ? exec[1].toLowerCase() : undefined;
							const decoder = new TextDecoder(label);
							return response.arrayBuffer().then(ab => decoder.decode(ab));
						}

				}
			}).then(data => {
				// Add to cache only on HTTP success, so that we do not cache
				// error response bodies as proper responses to requests.
				Cache.add(url, data);
				const callbacks = loading[url];
				delete loading[url];

				for (let i = 0, il = callbacks.length; i < il; i++) {
					const callback = callbacks[i];
					if (callback.onLoad) callback.onLoad(data);
				}
			}).catch(err => {
				// Abort errors and other errors are handled the same
				const callbacks = loading[url];

				if (callbacks === undefined) {
					// When onLoad was called and url was deleted in `loading`
					this.manager.itemError(url);
					throw err;
				}

				delete loading[url];

				for (let i = 0, il = callbacks.length; i < il; i++) {
					const callback = callbacks[i];
					if (callback.onError) callback.onError(err);
				}

				this.manager.itemError(url);
			}).finally(() => {
				this.manager.itemEnd(url);
			});
			this.manager.itemStart(url);
		}

		setResponseType(value) {
			this.responseType = value;
			return this;
		}

		setMimeType(value) {
			this.mimeType = value;
			return this;
		}

	}

	class AnimationLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			loader.load(url, function (text) {
				try {
					onLoad(scope.parse(JSON.parse(text)));
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

		parse(json) {
			const animations = [];

			for (let i = 0; i < json.length; i++) {
				const clip = AnimationClip.parse(json[i]);
				animations.push(clip);
			}

			return animations;
		}

	}

	/**
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	class CompressedTextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const images = [];
			const texture = new CompressedTexture();
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setResponseType('arraybuffer');
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			let loaded = 0;

			function loadTexture(i) {
				loader.load(url[i], function (buffer) {
					const texDatas = scope.parse(buffer, true);
					images[i] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};
					loaded += 1;

					if (loaded === 6) {
						if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
						texture.image = images;
						texture.format = texDatas.format;
						texture.needsUpdate = true;
						if (onLoad) onLoad(texture);
					}
				}, onProgress, onError);
			}

			if (Array.isArray(url)) {
				for (let i = 0, il = url.length; i < il; ++i) {
					loadTexture(i);
				}
			} else {
				// compressed cubemap texture stored in a single DDS file
				loader.load(url, function (buffer) {
					const texDatas = scope.parse(buffer, true);

					if (texDatas.isCubemap) {
						const faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for (let f = 0; f < faces; f++) {
							images[f] = {
								mipmaps: []
							};

							for (let i = 0; i < texDatas.mipmapCount; i++) {
								images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
								images[f].format = texDatas.format;
								images[f].width = texDatas.width;
								images[f].height = texDatas.height;
							}
						}

						texture.image = images;
					} else {
						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;
					}

					if (texDatas.mipmapCount === 1) {
						texture.minFilter = LinearFilter;
					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;
					if (onLoad) onLoad(texture);
				}, onProgress, onError);
			}

			return texture;
		}

	}

	class ImageLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			if (this.path !== undefined) url = this.path + url;
			url = this.manager.resolveURL(url);
			const scope = this;
			const cached = Cache.get(url);

			if (cached !== undefined) {
				scope.manager.itemStart(url);
				setTimeout(function () {
					if (onLoad) onLoad(cached);
					scope.manager.itemEnd(url);
				}, 0);
				return cached;
			}

			const image = createElementNS('img');

			function onImageLoad() {
				removeEventListeners();
				Cache.add(url, this);
				if (onLoad) onLoad(this);
				scope.manager.itemEnd(url);
			}

			function onImageError(event) {
				removeEventListeners();
				if (onError) onError(event);
				scope.manager.itemError(url);
				scope.manager.itemEnd(url);
			}

			function removeEventListeners() {
				image.removeEventListener('load', onImageLoad, false);
				image.removeEventListener('error', onImageError, false);
			}

			image.addEventListener('load', onImageLoad, false);
			image.addEventListener('error', onImageError, false);

			if (url.slice(0, 5) !== 'data:') {
				if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
			}

			scope.manager.itemStart(url);
			image.src = url;
			return image;
		}

	}

	class CubeTextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(urls, onLoad, onProgress, onError) {
			const texture = new CubeTexture();
			const loader = new ImageLoader(this.manager);
			loader.setCrossOrigin(this.crossOrigin);
			loader.setPath(this.path);
			let loaded = 0;

			function loadTexture(i) {
				loader.load(urls[i], function (image) {
					texture.images[i] = image;
					loaded++;

					if (loaded === 6) {
						texture.needsUpdate = true;
						if (onLoad) onLoad(texture);
					}
				}, undefined, onError);
			}

			for (let i = 0; i < urls.length; ++i) {
				loadTexture(i);
			}

			return texture;
		}

	}

	/**
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	class DataTextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const texture = new DataTexture();
			const loader = new FileLoader(this.manager);
			loader.setResponseType('arraybuffer');
			loader.setRequestHeader(this.requestHeader);
			loader.setPath(this.path);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (buffer) {
				const texData = scope.parse(buffer);
				if (!texData) return;

				if (texData.image !== undefined) {
					texture.image = texData.image;
				} else if (texData.data !== undefined) {
					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;
				}

				texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
				texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
				texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
				texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

				if (texData.encoding !== undefined) {
					texture.encoding = texData.encoding;
				}

				if (texData.flipY !== undefined) {
					texture.flipY = texData.flipY;
				}

				if (texData.format !== undefined) {
					texture.format = texData.format;
				}

				if (texData.type !== undefined) {
					texture.type = texData.type;
				}

				if (texData.mipmaps !== undefined) {
					texture.mipmaps = texData.mipmaps;
					texture.minFilter = LinearMipmapLinearFilter; // presumably...
				}

				if (texData.mipmapCount === 1) {
					texture.minFilter = LinearFilter;
				}

				if (texData.generateMipmaps !== undefined) {
					texture.generateMipmaps = texData.generateMipmaps;
				}

				texture.needsUpdate = true;
				if (onLoad) onLoad(texture, texData);
			}, onProgress, onError);
			return texture;
		}

	}

	class TextureLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const texture = new Texture();
			const loader = new ImageLoader(this.manager);
			loader.setCrossOrigin(this.crossOrigin);
			loader.setPath(this.path);
			loader.load(url, function (image) {
				texture.image = image;
				texture.needsUpdate = true;

				if (onLoad !== undefined) {
					onLoad(texture);
				}
			}, onProgress, onError);
			return texture;
		}

	}

	class Light extends Object3D {
		constructor(color, intensity = 1) {
			super();
			this.type = 'Light';
			this.color = new Color(color);
			this.intensity = intensity;
		}

		dispose() {// Empty here in base class; some subclasses override.
		}

		copy(source) {
			super.copy(source);
			this.color.copy(source.color);
			this.intensity = source.intensity;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;
			if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
			if (this.distance !== undefined) data.object.distance = this.distance;
			if (this.angle !== undefined) data.object.angle = this.angle;
			if (this.decay !== undefined) data.object.decay = this.decay;
			if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
			if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
			return data;
		}

	}

	Light.prototype.isLight = true;

	class HemisphereLight extends Light {
		constructor(skyColor, groundColor, intensity) {
			super(skyColor, intensity);
			this.type = 'HemisphereLight';
			this.position.copy(Object3D.DefaultUp);
			this.updateMatrix();
			this.groundColor = new Color(groundColor);
		}

		copy(source) {
			Light.prototype.copy.call(this, source);
			this.groundColor.copy(source.groundColor);
			return this;
		}

	}

	HemisphereLight.prototype.isHemisphereLight = true;

	const _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();

	const _lightPositionWorld$1 = /*@__PURE__*/new Vector3();

	const _lookTarget$1 = /*@__PURE__*/new Vector3();

	class LightShadow {
		constructor(camera) {
			this.camera = camera;
			this.bias = 0;
			this.normalBias = 0;
			this.radius = 1;
			this.blurSamples = 8;
			this.mapSize = new Vector2(512, 512);
			this.map = null;
			this.mapPass = null;
			this.matrix = new Matrix4();
			this.autoUpdate = true;
			this.needsUpdate = false;
			this._frustum = new Frustum();
			this._frameExtents = new Vector2(1, 1);
			this._viewportCount = 1;
			this._viewports = [new Vector4(0, 0, 1, 1)];
		}

		getViewportCount() {
			return this._viewportCount;
		}

		getFrustum() {
			return this._frustum;
		}

		updateMatrices(light) {
			const shadowCamera = this.camera;
			const shadowMatrix = this.matrix;

			_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);

			shadowCamera.position.copy(_lightPositionWorld$1);

			_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);

			shadowCamera.lookAt(_lookTarget$1);
			shadowCamera.updateMatrixWorld();

			_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);

			this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);

			shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
			shadowMatrix.multiply(shadowCamera.projectionMatrix);
			shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
		}

		getViewport(viewportIndex) {
			return this._viewports[viewportIndex];
		}

		getFrameExtents() {
			return this._frameExtents;
		}

		dispose() {
			if (this.map) {
				this.map.dispose();
			}

			if (this.mapPass) {
				this.mapPass.dispose();
			}
		}

		copy(source) {
			this.camera = source.camera.clone();
			this.bias = source.bias;
			this.radius = source.radius;
			this.mapSize.copy(source.mapSize);
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		toJSON() {
			const object = {};
			if (this.bias !== 0) object.bias = this.bias;
			if (this.normalBias !== 0) object.normalBias = this.normalBias;
			if (this.radius !== 1) object.radius = this.radius;
			if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
			object.camera = this.camera.toJSON(false).object;
			delete object.camera.matrix;
			return object;
		}

	}

	class SpotLightShadow extends LightShadow {
		constructor() {
			super(new PerspectiveCamera(50, 1, 0.5, 500));
			this.focus = 1;
		}

		updateMatrices(light) {
			const camera = this.camera;
			const fov = RAD2DEG * 2 * light.angle * this.focus;
			const aspect = this.mapSize.width / this.mapSize.height;
			const far = light.distance || camera.far;

			if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();
			}

			super.updateMatrices(light);
		}

		copy(source) {
			super.copy(source);
			this.focus = source.focus;
			return this;
		}

	}

	SpotLightShadow.prototype.isSpotLightShadow = true;

	class SpotLight extends Light {
		constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {
			super(color, intensity);
			this.type = 'SpotLight';
			this.position.copy(Object3D.DefaultUp);
			this.updateMatrix();
			this.target = new Object3D();
			this.distance = distance;
			this.angle = angle;
			this.penumbra = penumbra;
			this.decay = decay; // for physically correct lights, should be 2.

			this.shadow = new SpotLightShadow();
		}

		get power() {
			// compute the light's luminous power (in lumens) from its intensity (in candela)
			// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
			return this.intensity * Math.PI;
		}

		set power(power) {
			// set the light's intensity (in candela) from the desired luminous power (in lumens)
			this.intensity = power / Math.PI;
		}

		dispose() {
			this.shadow.dispose();
		}

		copy(source) {
			super.copy(source);
			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;
			this.target = source.target.clone();
			this.shadow = source.shadow.clone();
			return this;
		}

	}

	SpotLight.prototype.isSpotLight = true;

	const _projScreenMatrix = /*@__PURE__*/new Matrix4();

	const _lightPositionWorld = /*@__PURE__*/new Vector3();

	const _lookTarget = /*@__PURE__*/new Vector3();

	class PointLightShadow extends LightShadow {
		constructor() {
			super(new PerspectiveCamera(90, 1, 0.5, 500));
			this._frameExtents = new Vector2(4, 2);
			this._viewportCount = 6;
			this._viewports = [// These viewports map a cube-map onto a 2D texture with the
			// following orientation:
			//
			//	xzXZ
			//	 y Y
			//
			// X - Positive x direction
			// x - Negative x direction
			// Y - Positive y direction
			// y - Negative y direction
			// Z - Positive z direction
			// z - Negative z direction
			// positive X
			new Vector4(2, 1, 1, 1), // negative X
			new Vector4(0, 1, 1, 1), // positive Z
			new Vector4(3, 1, 1, 1), // negative Z
			new Vector4(1, 1, 1, 1), // positive Y
			new Vector4(3, 0, 1, 1), // negative Y
			new Vector4(1, 0, 1, 1)];
			this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
			this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
		}

		updateMatrices(light, viewportIndex = 0) {
			const camera = this.camera;
			const shadowMatrix = this.matrix;
			const far = light.distance || camera.far;

			if (far !== camera.far) {
				camera.far = far;
				camera.updateProjectionMatrix();
			}

			_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);

			camera.position.copy(_lightPositionWorld);

			_lookTarget.copy(camera.position);

			_lookTarget.add(this._cubeDirections[viewportIndex]);

			camera.up.copy(this._cubeUps[viewportIndex]);
			camera.lookAt(_lookTarget);
			camera.updateMatrixWorld();
			shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);

			_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

			this._frustum.setFromProjectionMatrix(_projScreenMatrix);
		}

	}

	PointLightShadow.prototype.isPointLightShadow = true;

	class PointLight extends Light {
		constructor(color, intensity, distance = 0, decay = 1) {
			super(color, intensity);
			this.type = 'PointLight';
			this.distance = distance;
			this.decay = decay; // for physically correct lights, should be 2.

			this.shadow = new PointLightShadow();
		}

		get power() {
			// compute the light's luminous power (in lumens) from its intensity (in candela)
			// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
			return this.intensity * 4 * Math.PI;
		}

		set power(power) {
			// set the light's intensity (in candela) from the desired luminous power (in lumens)
			this.intensity = power / (4 * Math.PI);
		}

		dispose() {
			this.shadow.dispose();
		}

		copy(source) {
			super.copy(source);
			this.distance = source.distance;
			this.decay = source.decay;
			this.shadow = source.shadow.clone();
			return this;
		}

	}

	PointLight.prototype.isPointLight = true;

	class DirectionalLightShadow extends LightShadow {
		constructor() {
			super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
		}

	}

	DirectionalLightShadow.prototype.isDirectionalLightShadow = true;

	class DirectionalLight extends Light {
		constructor(color, intensity) {
			super(color, intensity);
			this.type = 'DirectionalLight';
			this.position.copy(Object3D.DefaultUp);
			this.updateMatrix();
			this.target = new Object3D();
			this.shadow = new DirectionalLightShadow();
		}

		dispose() {
			this.shadow.dispose();
		}

		copy(source) {
			super.copy(source);
			this.target = source.target.clone();
			this.shadow = source.shadow.clone();
			return this;
		}

	}

	DirectionalLight.prototype.isDirectionalLight = true;

	class AmbientLight extends Light {
		constructor(color, intensity) {
			super(color, intensity);
			this.type = 'AmbientLight';
		}

	}

	AmbientLight.prototype.isAmbientLight = true;

	class RectAreaLight extends Light {
		constructor(color, intensity, width = 10, height = 10) {
			super(color, intensity);
			this.type = 'RectAreaLight';
			this.width = width;
			this.height = height;
		}

		get power() {
			// compute the light's luminous power (in lumens) from its intensity (in nits)
			return this.intensity * this.width * this.height * Math.PI;
		}

		set power(power) {
			// set the light's intensity (in nits) from the desired luminous power (in lumens)
			this.intensity = power / (this.width * this.height * Math.PI);
		}

		copy(source) {
			super.copy(source);
			this.width = source.width;
			this.height = source.height;
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.width = this.width;
			data.object.height = this.height;
			return data;
		}

	}

	RectAreaLight.prototype.isRectAreaLight = true;

	/**
	 * Primary reference:
	 *	 https://graphics.stanford.edu/papers/envmap/envmap.pdf
	 *
	 * Secondary reference:
	 *	 https://www.ppsloan.org/publications/StupidSH36.pdf
	 */
	// 3-band SH defined by 9 coefficients

	class SphericalHarmonics3 {
		constructor() {
			this.coefficients = [];

			for (let i = 0; i < 9; i++) {
				this.coefficients.push(new Vector3());
			}
		}

		set(coefficients) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].copy(coefficients[i]);
			}

			return this;
		}

		zero() {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].set(0, 0, 0);
			}

			return this;
		} // get the radiance in the direction of the normal
		// target is a Vector3


		getAt(normal, target) {
			// normal is assumed to be unit length
			const x = normal.x,
						y = normal.y,
						z = normal.z;
			const coeff = this.coefficients; // band 0

			target.copy(coeff[0]).multiplyScalar(0.282095); // band 1

			target.addScaledVector(coeff[1], 0.488603 * y);
			target.addScaledVector(coeff[2], 0.488603 * z);
			target.addScaledVector(coeff[3], 0.488603 * x); // band 2

			target.addScaledVector(coeff[4], 1.092548 * (x * y));
			target.addScaledVector(coeff[5], 1.092548 * (y * z));
			target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
			target.addScaledVector(coeff[7], 1.092548 * (x * z));
			target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
			return target;
		} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
		// target is a Vector3
		// https://graphics.stanford.edu/papers/envmap/envmap.pdf


		getIrradianceAt(normal, target) {
			// normal is assumed to be unit length
			const x = normal.x,
						y = normal.y,
						z = normal.z;
			const coeff = this.coefficients; // band 0

			target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
			// band 1

			target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603

			target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);
			target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2

			target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548

			target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);
			target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3

			target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);
			target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274

			return target;
		}

		add(sh) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].add(sh.coefficients[i]);
			}

			return this;
		}

		addScaledSH(sh, s) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].addScaledVector(sh.coefficients[i], s);
			}

			return this;
		}

		scale(s) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].multiplyScalar(s);
			}

			return this;
		}

		lerp(sh, alpha) {
			for (let i = 0; i < 9; i++) {
				this.coefficients[i].lerp(sh.coefficients[i], alpha);
			}

			return this;
		}

		equals(sh) {
			for (let i = 0; i < 9; i++) {
				if (!this.coefficients[i].equals(sh.coefficients[i])) {
					return false;
				}
			}

			return true;
		}

		copy(sh) {
			return this.set(sh.coefficients);
		}

		clone() {
			return new this.constructor().copy(this);
		}

		fromArray(array, offset = 0) {
			const coefficients = this.coefficients;

			for (let i = 0; i < 9; i++) {
				coefficients[i].fromArray(array, offset + i * 3);
			}

			return this;
		}

		toArray(array = [], offset = 0) {
			const coefficients = this.coefficients;

			for (let i = 0; i < 9; i++) {
				coefficients[i].toArray(array, offset + i * 3);
			}

			return array;
		} // evaluate the basis functions
		// shBasis is an Array[ 9 ]


		static getBasisAt(normal, shBasis) {
			// normal is assumed to be unit length
			const x = normal.x,
						y = normal.y,
						z = normal.z; // band 0

			shBasis[0] = 0.282095; // band 1

			shBasis[1] = 0.488603 * y;
			shBasis[2] = 0.488603 * z;
			shBasis[3] = 0.488603 * x; // band 2

			shBasis[4] = 1.092548 * x * y;
			shBasis[5] = 1.092548 * y * z;
			shBasis[6] = 0.315392 * (3 * z * z - 1);
			shBasis[7] = 1.092548 * x * z;
			shBasis[8] = 0.546274 * (x * x - y * y);
		}

	}

	SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;

	class LightProbe extends Light {
		constructor(sh = new SphericalHarmonics3(), intensity = 1) {
			super(undefined, intensity);
			this.sh = sh;
		}

		copy(source) {
			super.copy(source);
			this.sh.copy(source.sh);
			return this;
		}

		fromJSON(json) {
			this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();

			this.sh.fromArray(json.sh);
			return this;
		}

		toJSON(meta) {
			const data = super.toJSON(meta);
			data.object.sh = this.sh.toArray();
			return data;
		}

	}

	LightProbe.prototype.isLightProbe = true;

	class MaterialLoader extends Loader {
		constructor(manager) {
			super(manager);
			this.textures = {};
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(scope.manager);
			loader.setPath(scope.path);
			loader.setRequestHeader(scope.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (text) {
				try {
					onLoad(scope.parse(JSON.parse(text)));
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

		parse(json) {
			const textures = this.textures;

			function getTexture(name) {
				if (textures[name] === undefined) {
					console.warn('THREE.MaterialLoader: Undefined texture', name);
				}

				return textures[name];
			}

			const material = Material.fromType(json.type);
			if (json.uuid !== undefined) material.uuid = json.uuid;
			if (json.name !== undefined) material.name = json.name;
			if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
			if (json.roughness !== undefined) material.roughness = json.roughness;
			if (json.metalness !== undefined) material.metalness = json.metalness;
			if (json.sheen !== undefined) material.sheen = json.sheen;
			if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);
			if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;
			if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
			if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
			if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;
			if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);
			if (json.shininess !== undefined) material.shininess = json.shininess;
			if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
			if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
			if (json.transmission !== undefined) material.transmission = json.transmission;
			if (json.thickness !== undefined) material.thickness = json.thickness;
			if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;
			if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);
			if (json.fog !== undefined) material.fog = json.fog;
			if (json.flatShading !== undefined) material.flatShading = json.flatShading;
			if (json.blending !== undefined) material.blending = json.blending;
			if (json.combine !== undefined) material.combine = json.combine;
			if (json.side !== undefined) material.side = json.side;
			if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
			if (json.opacity !== undefined) material.opacity = json.opacity;
			if (json.transparent !== undefined) material.transparent = json.transparent;
			if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
			if (json.depthTest !== undefined) material.depthTest = json.depthTest;
			if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
			if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
			if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
			if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
			if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
			if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
			if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
			if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
			if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
			if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
			if (json.wireframe !== undefined) material.wireframe = json.wireframe;
			if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
			if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
			if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
			if (json.rotation !== undefined) material.rotation = json.rotation;
			if (json.linewidth !== 1) material.linewidth = json.linewidth;
			if (json.dashSize !== undefined) material.dashSize = json.dashSize;
			if (json.gapSize !== undefined) material.gapSize = json.gapSize;
			if (json.scale !== undefined) material.scale = json.scale;
			if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
			if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
			if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
			if (json.dithering !== undefined) material.dithering = json.dithering;
			if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
			if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
			if (json.visible !== undefined) material.visible = json.visible;
			if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
			if (json.userData !== undefined) material.userData = json.userData;

			if (json.vertexColors !== undefined) {
				if (typeof json.vertexColors === 'number') {
					material.vertexColors = json.vertexColors > 0 ? true : false;
				} else {
					material.vertexColors = json.vertexColors;
				}
			} // Shader Material


			if (json.uniforms !== undefined) {
				for (const name in json.uniforms) {
					const uniform = json.uniforms[name];
					material.uniforms[name] = {};

					switch (uniform.type) {
						case 't':
							material.uniforms[name].value = getTexture(uniform.value);
							break;

						case 'c':
							material.uniforms[name].value = new Color().setHex(uniform.value);
							break;

						case 'v2':
							material.uniforms[name].value = new Vector2().fromArray(uniform.value);
							break;

						case 'v3':
							material.uniforms[name].value = new Vector3().fromArray(uniform.value);
							break;

						case 'v4':
							material.uniforms[name].value = new Vector4().fromArray(uniform.value);
							break;

						case 'm3':
							material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
							break;

						case 'm4':
							material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
							break;

						default:
							material.uniforms[name].value = uniform.value;
					}
				}
			}

			if (json.defines !== undefined) material.defines = json.defines;
			if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
			if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;

			if (json.extensions !== undefined) {
				for (const key in json.extensions) {
					material.extensions[key] = json.extensions[key];
				}
			} // Deprecated


			if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading
			// for PointsMaterial

			if (json.size !== undefined) material.size = json.size;
			if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps

			if (json.map !== undefined) material.map = getTexture(json.map);
			if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
			if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
			if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
			if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
			if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
			if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;

			if (json.normalScale !== undefined) {
				let normalScale = json.normalScale;

				if (Array.isArray(normalScale) === false) {
					// Blender exporter used to export a scalar. See #7459
					normalScale = [normalScale, normalScale];
				}

				material.normalScale = new Vector2().fromArray(normalScale);
			}

			if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
			if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
			if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
			if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
			if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
			if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
			if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
			if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
			if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);
			if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);
			if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
			if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
			if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
			if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
			if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
			if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
			if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
			if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
			if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
			if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
			if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
			if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
			if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
			if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
			if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);
			if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);
			if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
			return material;
		}

		setTextures(value) {
			this.textures = value;
			return this;
		}

	}

	class LoaderUtils {
		static decodeText(array) {
			if (typeof TextDecoder !== 'undefined') {
				return new TextDecoder().decode(array);
			} // Avoid the String.fromCharCode.apply(null, array) shortcut, which
			// throws a "maximum call stack size exceeded" error for large arrays.


			let s = '';

			for (let i = 0, il = array.length; i < il; i++) {
				// Implicitly assumes little-endian.
				s += String.fromCharCode(array[i]);
			}

			try {
				// merges multi-byte utf-8 characters.
				return decodeURIComponent(escape(s));
			} catch (e) {
				// see #16358
				return s;
			}
		}

		static extractUrlBase(url) {
			const index = url.lastIndexOf('/');
			if (index === -1) return './';
			return url.slice(0, index + 1);
		}

		static resolveURL(url, path) {
			// Invalid URL
			if (typeof url !== 'string' || url === '') return ''; // Host Relative URL

			if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
				path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
			} // Absolute URL http://,https://,//


			if (/^(https?:)?\/\//i.test(url)) return url; // Data URI

			if (/^data:.*,.*$/i.test(url)) return url; // Blob URL

			if (/^blob:.*$/i.test(url)) return url; // Relative URL

			return path + url;
		}

	}

	class InstancedBufferGeometry extends BufferGeometry {
		constructor() {
			super();
			this.type = 'InstancedBufferGeometry';
			this.instanceCount = Infinity;
		}

		copy(source) {
			super.copy(source);
			this.instanceCount = source.instanceCount;
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		toJSON() {
			const data = super.toJSON(this);
			data.instanceCount = this.instanceCount;
			data.isInstancedBufferGeometry = true;
			return data;
		}

	}

	InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

	class BufferGeometryLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(scope.manager);
			loader.setPath(scope.path);
			loader.setRequestHeader(scope.requestHeader);
			loader.setWithCredentials(scope.withCredentials);
			loader.load(url, function (text) {
				try {
					onLoad(scope.parse(JSON.parse(text)));
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

		parse(json) {
			const interleavedBufferMap = {};
			const arrayBufferMap = {};

			function getInterleavedBuffer(json, uuid) {
				if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
				const interleavedBuffers = json.interleavedBuffers;
				const interleavedBuffer = interleavedBuffers[uuid];
				const buffer = getArrayBuffer(json, interleavedBuffer.buffer);
				const array = getTypedArray(interleavedBuffer.type, buffer);
				const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
				ib.uuid = interleavedBuffer.uuid;
				interleavedBufferMap[uuid] = ib;
				return ib;
			}

			function getArrayBuffer(json, uuid) {
				if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
				const arrayBuffers = json.arrayBuffers;
				const arrayBuffer = arrayBuffers[uuid];
				const ab = new Uint32Array(arrayBuffer).buffer;
				arrayBufferMap[uuid] = ab;
				return ab;
			}

			const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
			const index = json.data.index;

			if (index !== undefined) {
				const typedArray = getTypedArray(index.type, index.array);
				geometry.setIndex(new BufferAttribute(typedArray, 1));
			}

			const attributes = json.data.attributes;

			for (const key in attributes) {
				const attribute = attributes[key];
				let bufferAttribute;

				if (attribute.isInterleavedBufferAttribute) {
					const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
					bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
				} else {
					const typedArray = getTypedArray(attribute.type, attribute.array);
					const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
					bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
				}

				if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
				if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);

				if (attribute.updateRange !== undefined) {
					bufferAttribute.updateRange.offset = attribute.updateRange.offset;
					bufferAttribute.updateRange.count = attribute.updateRange.count;
				}

				geometry.setAttribute(key, bufferAttribute);
			}

			const morphAttributes = json.data.morphAttributes;

			if (morphAttributes) {
				for (const key in morphAttributes) {
					const attributeArray = morphAttributes[key];
					const array = [];

					for (let i = 0, il = attributeArray.length; i < il; i++) {
						const attribute = attributeArray[i];
						let bufferAttribute;

						if (attribute.isInterleavedBufferAttribute) {
							const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
							bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
						} else {
							const typedArray = getTypedArray(attribute.type, attribute.array);
							bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
						}

						if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
						array.push(bufferAttribute);
					}

					geometry.morphAttributes[key] = array;
				}
			}

			const morphTargetsRelative = json.data.morphTargetsRelative;

			if (morphTargetsRelative) {
				geometry.morphTargetsRelative = true;
			}

			const groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if (groups !== undefined) {
				for (let i = 0, n = groups.length; i !== n; ++i) {
					const group = groups[i];
					geometry.addGroup(group.start, group.count, group.materialIndex);
				}
			}

			const boundingSphere = json.data.boundingSphere;

			if (boundingSphere !== undefined) {
				const center = new Vector3();

				if (boundingSphere.center !== undefined) {
					center.fromArray(boundingSphere.center);
				}

				geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
			}

			if (json.name) geometry.name = json.name;
			if (json.userData) geometry.userData = json.userData;
			return geometry;
		}

	}

	class ObjectLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
			this.resourcePath = this.resourcePath || path;
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			loader.load(url, function (text) {
				let json = null;

				try {
					json = JSON.parse(text);
				} catch (error) {
					if (onError !== undefined) onError(error);
					console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
					return;
				}

				const metadata = json.metadata;

				if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
					console.error('THREE.ObjectLoader: Can\'t load ' + url);
					return;
				}

				scope.parse(json, onLoad);
			}, onProgress, onError);
		}

		async loadAsync(url, onProgress) {
			const scope = this;
			const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
			this.resourcePath = this.resourcePath || path;
			const loader = new FileLoader(this.manager);
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			const text = await loader.loadAsync(url, onProgress);
			const json = JSON.parse(text);
			const metadata = json.metadata;

			if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
				throw new Error('THREE.ObjectLoader: Can\'t load ' + url);
			}

			return await scope.parseAsync(json);
		}

		parse(json, onLoad) {
			const animations = this.parseAnimations(json.animations);
			const shapes = this.parseShapes(json.shapes);
			const geometries = this.parseGeometries(json.geometries, shapes);
			const images = this.parseImages(json.images, function () {
				if (onLoad !== undefined) onLoad(object);
			});
			const textures = this.parseTextures(json.textures, images);
			const materials = this.parseMaterials(json.materials, textures);
			const object = this.parseObject(json.object, geometries, materials, textures, animations);
			const skeletons = this.parseSkeletons(json.skeletons, object);
			this.bindSkeletons(object, skeletons); //

			if (onLoad !== undefined) {
				let hasImages = false;

				for (const uuid in images) {
					if (images[uuid] instanceof HTMLImageElement) {
						hasImages = true;
						break;
					}
				}

				if (hasImages === false) onLoad(object);
			}

			return object;
		}

		async parseAsync(json) {
			const animations = this.parseAnimations(json.animations);
			const shapes = this.parseShapes(json.shapes);
			const geometries = this.parseGeometries(json.geometries, shapes);
			const images = await this.parseImagesAsync(json.images);
			const textures = this.parseTextures(json.textures, images);
			const materials = this.parseMaterials(json.materials, textures);
			const object = this.parseObject(json.object, geometries, materials, textures, animations);
			const skeletons = this.parseSkeletons(json.skeletons, object);
			this.bindSkeletons(object, skeletons);
			return object;
		}

		parseShapes(json) {
			const shapes = {};

			if (json !== undefined) {
				for (let i = 0, l = json.length; i < l; i++) {
					const shape = new Shape().fromJSON(json[i]);
					shapes[shape.uuid] = shape;
				}
			}

			return shapes;
		}

		parseSkeletons(json, object) {
			const skeletons = {};
			const bones = {}; // generate bone lookup table

			object.traverse(function (child) {
				if (child.isBone) bones[child.uuid] = child;
			}); // create skeletons

			if (json !== undefined) {
				for (let i = 0, l = json.length; i < l; i++) {
					const skeleton = new Skeleton().fromJSON(json[i], bones);
					skeletons[skeleton.uuid] = skeleton;
				}
			}

			return skeletons;
		}

		parseGeometries(json, shapes) {
			const geometries = {};

			if (json !== undefined) {
				const bufferGeometryLoader = new BufferGeometryLoader();

				for (let i = 0, l = json.length; i < l; i++) {
					let geometry;
					const data = json[i];

					switch (data.type) {
						case 'BufferGeometry':
						case 'InstancedBufferGeometry':
							geometry = bufferGeometryLoader.parse(data);
							break;

						case 'Geometry':
							console.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');
							break;

						default:
							if (data.type in Geometries) {
								geometry = Geometries[data.type].fromJSON(data, shapes);
							} else {
								console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
							}

					}

					geometry.uuid = data.uuid;
					if (data.name !== undefined) geometry.name = data.name;
					if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
					geometries[data.uuid] = geometry;
				}
			}

			return geometries;
		}

		parseMaterials(json, textures) {
			const cache = {}; // MultiMaterial

			const materials = {};

			if (json !== undefined) {
				const loader = new MaterialLoader();
				loader.setTextures(textures);

				for (let i = 0, l = json.length; i < l; i++) {
					const data = json[i];

					if (data.type === 'MultiMaterial') {
						// Deprecated
						const array = [];

						for (let j = 0; j < data.materials.length; j++) {
							const material = data.materials[j];

							if (cache[material.uuid] === undefined) {
								cache[material.uuid] = loader.parse(material);
							}

							array.push(cache[material.uuid]);
						}

						materials[data.uuid] = array;
					} else {
						if (cache[data.uuid] === undefined) {
							cache[data.uuid] = loader.parse(data);
						}

						materials[data.uuid] = cache[data.uuid];
					}
				}
			}

			return materials;
		}

		parseAnimations(json) {
			const animations = {};

			if (json !== undefined) {
				for (let i = 0; i < json.length; i++) {
					const data = json[i];
					const clip = AnimationClip.parse(data);
					animations[clip.uuid] = clip;
				}
			}

			return animations;
		}

		parseImages(json, onLoad) {
			const scope = this;
			const images = {};
			let loader;

			function loadImage(url) {
				scope.manager.itemStart(url);
				return loader.load(url, function () {
					scope.manager.itemEnd(url);
				}, undefined, function () {
					scope.manager.itemError(url);
					scope.manager.itemEnd(url);
				});
			}

			function deserializeImage(image) {
				if (typeof image === 'string') {
					const url = image;
					const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
					return loadImage(path);
				} else {
					if (image.data) {
						return {
							data: getTypedArray(image.type, image.data),
							width: image.width,
							height: image.height
						};
					} else {
						return null;
					}
				}
			}

			if (json !== undefined && json.length > 0) {
				const manager = new LoadingManager(onLoad);
				loader = new ImageLoader(manager);
				loader.setCrossOrigin(this.crossOrigin);

				for (let i = 0, il = json.length; i < il; i++) {
					const image = json[i];
					const url = image.url;

					if (Array.isArray(url)) {
						// load array of images e.g CubeTexture
						const imageArray = [];

						for (let j = 0, jl = url.length; j < jl; j++) {
							const currentUrl = url[j];
							const deserializedImage = deserializeImage(currentUrl);

							if (deserializedImage !== null) {
								if (deserializedImage instanceof HTMLImageElement) {
									imageArray.push(deserializedImage);
								} else {
									// special case: handle array of data textures for cube textures
									imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
								}
							}
						}

						images[image.uuid] = new Source(imageArray);
					} else {
						// load single image
						const deserializedImage = deserializeImage(image.url);
						images[image.uuid] = new Source(deserializedImage);
					}
				}
			}

			return images;
		}

		async parseImagesAsync(json) {
			const scope = this;
			const images = {};
			let loader;

			async function deserializeImage(image) {
				if (typeof image === 'string') {
					const url = image;
					const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
					return await loader.loadAsync(path);
				} else {
					if (image.data) {
						return {
							data: getTypedArray(image.type, image.data),
							width: image.width,
							height: image.height
						};
					} else {
						return null;
					}
				}
			}

			if (json !== undefined && json.length > 0) {
				loader = new ImageLoader(this.manager);
				loader.setCrossOrigin(this.crossOrigin);

				for (let i = 0, il = json.length; i < il; i++) {
					const image = json[i];
					const url = image.url;

					if (Array.isArray(url)) {
						// load array of images e.g CubeTexture
						const imageArray = [];

						for (let j = 0, jl = url.length; j < jl; j++) {
							const currentUrl = url[j];
							const deserializedImage = await deserializeImage(currentUrl);

							if (deserializedImage !== null) {
								if (deserializedImage instanceof HTMLImageElement) {
									imageArray.push(deserializedImage);
								} else {
									// special case: handle array of data textures for cube textures
									imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
								}
							}
						}

						images[image.uuid] = new Source(imageArray);
					} else {
						// load single image
						const deserializedImage = await deserializeImage(image.url);
						images[image.uuid] = new Source(deserializedImage);
					}
				}
			}

			return images;
		}

		parseTextures(json, images) {
			function parseConstant(value, type) {
				if (typeof value === 'number') return value;
				console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
				return type[value];
			}

			const textures = {};

			if (json !== undefined) {
				for (let i = 0, l = json.length; i < l; i++) {
					const data = json[i];

					if (data.image === undefined) {
						console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
					}

					if (images[data.image] === undefined) {
						console.warn('THREE.ObjectLoader: Undefined image', data.image);
					}

					const source = images[data.image];
					const image = source.data;
					let texture;

					if (Array.isArray(image)) {
						texture = new CubeTexture();
						if (image.length === 6) texture.needsUpdate = true;
					} else {
						if (image && image.data) {
							texture = new DataTexture();
						} else {
							texture = new Texture();
						}

						if (image) texture.needsUpdate = true; // textures can have undefined image data
					}

					texture.source = source;
					texture.uuid = data.uuid;
					if (data.name !== undefined) texture.name = data.name;
					if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
					if (data.offset !== undefined) texture.offset.fromArray(data.offset);
					if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
					if (data.center !== undefined) texture.center.fromArray(data.center);
					if (data.rotation !== undefined) texture.rotation = data.rotation;

					if (data.wrap !== undefined) {
						texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
						texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
					}

					if (data.format !== undefined) texture.format = data.format;
					if (data.type !== undefined) texture.type = data.type;
					if (data.encoding !== undefined) texture.encoding = data.encoding;
					if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
					if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
					if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
					if (data.flipY !== undefined) texture.flipY = data.flipY;
					if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
					if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
					if (data.userData !== undefined) texture.userData = data.userData;
					textures[data.uuid] = texture;
				}
			}

			return textures;
		}

		parseObject(data, geometries, materials, textures, animations) {
			let object;

			function getGeometry(name) {
				if (geometries[name] === undefined) {
					console.warn('THREE.ObjectLoader: Undefined geometry', name);
				}

				return geometries[name];
			}

			function getMaterial(name) {
				if (name === undefined) return undefined;

				if (Array.isArray(name)) {
					const array = [];

					for (let i = 0, l = name.length; i < l; i++) {
						const uuid = name[i];

						if (materials[uuid] === undefined) {
							console.warn('THREE.ObjectLoader: Undefined material', uuid);
						}

						array.push(materials[uuid]);
					}

					return array;
				}

				if (materials[name] === undefined) {
					console.warn('THREE.ObjectLoader: Undefined material', name);
				}

				return materials[name];
			}

			function getTexture(uuid) {
				if (textures[uuid] === undefined) {
					console.warn('THREE.ObjectLoader: Undefined texture', uuid);
				}

				return textures[uuid];
			}

			let geometry, material;

			switch (data.type) {
				case 'Scene':
					object = new Scene();

					if (data.background !== undefined) {
						if (Number.isInteger(data.background)) {
							object.background = new Color(data.background);
						} else {
							object.background = getTexture(data.background);
						}
					}

					if (data.environment !== undefined) {
						object.environment = getTexture(data.environment);
					}

					if (data.fog !== undefined) {
						if (data.fog.type === 'Fog') {
							object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
						} else if (data.fog.type === 'FogExp2') {
							object.fog = new FogExp2(data.fog.color, data.fog.density);
						}
					}

					break;

				case 'PerspectiveCamera':
					object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
					if (data.focus !== undefined) object.focus = data.focus;
					if (data.zoom !== undefined) object.zoom = data.zoom;
					if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
					if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
					if (data.view !== undefined) object.view = Object.assign({}, data.view);
					break;

				case 'OrthographicCamera':
					object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
					if (data.zoom !== undefined) object.zoom = data.zoom;
					if (data.view !== undefined) object.view = Object.assign({}, data.view);
					break;

				case 'AmbientLight':
					object = new AmbientLight(data.color, data.intensity);
					break;

				case 'DirectionalLight':
					object = new DirectionalLight(data.color, data.intensity);
					break;

				case 'PointLight':
					object = new PointLight(data.color, data.intensity, data.distance, data.decay);
					break;

				case 'RectAreaLight':
					object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
					break;

				case 'SpotLight':
					object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
					break;

				case 'HemisphereLight':
					object = new HemisphereLight(data.color, data.groundColor, data.intensity);
					break;

				case 'LightProbe':
					object = new LightProbe().fromJSON(data);
					break;

				case 'SkinnedMesh':
					geometry = getGeometry(data.geometry);
					material = getMaterial(data.material);
					object = new SkinnedMesh(geometry, material);
					if (data.bindMode !== undefined) object.bindMode = data.bindMode;
					if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
					if (data.skeleton !== undefined) object.skeleton = data.skeleton;
					break;

				case 'Mesh':
					geometry = getGeometry(data.geometry);
					material = getMaterial(data.material);
					object = new Mesh(geometry, material);
					break;

				case 'InstancedMesh':
					geometry = getGeometry(data.geometry);
					material = getMaterial(data.material);
					const count = data.count;
					const instanceMatrix = data.instanceMatrix;
					const instanceColor = data.instanceColor;
					object = new InstancedMesh(geometry, material, count);
					object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
					if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
					break;

				case 'LOD':
					object = new LOD();
					break;

				case 'Line':
					object = new Line(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'LineLoop':
					object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'LineSegments':
					object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'PointCloud':
				case 'Points':
					object = new Points(getGeometry(data.geometry), getMaterial(data.material));
					break;

				case 'Sprite':
					object = new Sprite(getMaterial(data.material));
					break;

				case 'Group':
					object = new Group();
					break;

				case 'Bone':
					object = new Bone();
					break;

				default:
					object = new Object3D();
			}

			object.uuid = data.uuid;
			if (data.name !== undefined) object.name = data.name;

			if (data.matrix !== undefined) {
				object.matrix.fromArray(data.matrix);
				if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
				if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
			} else {
				if (data.position !== undefined) object.position.fromArray(data.position);
				if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
				if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
				if (data.scale !== undefined) object.scale.fromArray(data.scale);
			}

			if (data.castShadow !== undefined) object.castShadow = data.castShadow;
			if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;

			if (data.shadow) {
				if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
				if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
				if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
				if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
				if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
			}

			if (data.visible !== undefined) object.visible = data.visible;
			if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
			if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
			if (data.userData !== undefined) object.userData = data.userData;
			if (data.layers !== undefined) object.layers.mask = data.layers;

			if (data.children !== undefined) {
				const children = data.children;

				for (let i = 0; i < children.length; i++) {
					object.add(this.parseObject(children[i], geometries, materials, textures, animations));
				}
			}

			if (data.animations !== undefined) {
				const objectAnimations = data.animations;

				for (let i = 0; i < objectAnimations.length; i++) {
					const uuid = objectAnimations[i];
					object.animations.push(animations[uuid]);
				}
			}

			if (data.type === 'LOD') {
				if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
				const levels = data.levels;

				for (let l = 0; l < levels.length; l++) {
					const level = levels[l];
					const child = object.getObjectByProperty('uuid', level.object);

					if (child !== undefined) {
						object.addLevel(child, level.distance);
					}
				}
			}

			return object;
		}

		bindSkeletons(object, skeletons) {
			if (Object.keys(skeletons).length === 0) return;
			object.traverse(function (child) {
				if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
					const skeleton = skeletons[child.skeleton];

					if (skeleton === undefined) {
						console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
					} else {
						child.bind(skeleton, child.bindMatrix);
					}
				}
			});
		}
		/* DEPRECATED */


		setTexturePath(value) {
			console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');
			return this.setResourcePath(value);
		}

	}

	const TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};
	const TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};
	const TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipmapNearestFilter: NearestMipmapNearestFilter,
		NearestMipmapLinearFilter: NearestMipmapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipmapNearestFilter: LinearMipmapNearestFilter,
		LinearMipmapLinearFilter: LinearMipmapLinearFilter
	};

	class ImageBitmapLoader extends Loader {
		constructor(manager) {
			super(manager);

			if (typeof createImageBitmap === 'undefined') {
				console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
			}

			if (typeof fetch === 'undefined') {
				console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
			}

			this.options = {
				premultiplyAlpha: 'none'
			};
		}

		setOptions(options) {
			this.options = options;
			return this;
		}

		load(url, onLoad, onProgress, onError) {
			if (url === undefined) url = '';
			if (this.path !== undefined) url = this.path + url;
			url = this.manager.resolveURL(url);
			const scope = this;
			const cached = Cache.get(url);

			if (cached !== undefined) {
				scope.manager.itemStart(url);
				setTimeout(function () {
					if (onLoad) onLoad(cached);
					scope.manager.itemEnd(url);
				}, 0);
				return cached;
			}

			const fetchOptions = {};
			fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
			fetchOptions.headers = this.requestHeader;
			fetch(url, fetchOptions).then(function (res) {
				return res.blob();
			}).then(function (blob) {
				return createImageBitmap(blob, Object.assign(scope.options, {
					colorSpaceConversion: 'none'
				}));
			}).then(function (imageBitmap) {
				Cache.add(url, imageBitmap);
				if (onLoad) onLoad(imageBitmap);
				scope.manager.itemEnd(url);
			}).catch(function (e) {
				if (onError) onError(e);
				scope.manager.itemError(url);
				scope.manager.itemEnd(url);
			});
			scope.manager.itemStart(url);
		}

	}

	ImageBitmapLoader.prototype.isImageBitmapLoader = true;

	let _context;

	const AudioContext = {
		getContext: function () {
			if (_context === undefined) {
				_context = new (window.AudioContext || window.webkitAudioContext)();
			}

			return _context;
		},
		setContext: function (value) {
			_context = value;
		}
	};

	class AudioLoader extends Loader {
		constructor(manager) {
			super(manager);
		}

		load(url, onLoad, onProgress, onError) {
			const scope = this;
			const loader = new FileLoader(this.manager);
			loader.setResponseType('arraybuffer');
			loader.setPath(this.path);
			loader.setRequestHeader(this.requestHeader);
			loader.setWithCredentials(this.withCredentials);
			loader.load(url, function (buffer) {
				try {
					// Create a copy of the buffer. The `decodeAudioData` method
					// detaches the buffer when complete, preventing reuse.
					const bufferCopy = buffer.slice(0);
					const context = AudioContext.getContext();
					context.decodeAudioData(bufferCopy, function (audioBuffer) {
						onLoad(audioBuffer);
					});
				} catch (e) {
					if (onError) {
						onError(e);
					} else {
						console.error(e);
					}

					scope.manager.itemError(url);
				}
			}, onProgress, onError);
		}

	}

	class HemisphereLightProbe extends LightProbe {
		constructor(skyColor, groundColor, intensity = 1) {
			super(undefined, intensity);
			const color1 = new Color().set(skyColor);
			const color2 = new Color().set(groundColor);
			const sky = new Vector3(color1.r, color1.g, color1.b);
			const ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );

			const c0 = Math.sqrt(Math.PI);
			const c1 = c0 * Math.sqrt(0.75);
			this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
			this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
		}

	}

	HemisphereLightProbe.prototype.isHemisphereLightProbe = true;

	class AmbientLightProbe extends LightProbe {
		constructor(color, intensity = 1) {
			super(undefined, intensity);
			const color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );

			this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
		}

	}

	AmbientLightProbe.prototype.isAmbientLightProbe = true;

	const _eyeRight = /*@__PURE__*/new Matrix4();

	const _eyeLeft = /*@__PURE__*/new Matrix4();

	const _projectionMatrix = /*@__PURE__*/new Matrix4();

	class StereoCamera {
		constructor() {
			this.type = 'StereoCamera';
			this.aspect = 1;
			this.eyeSep = 0.064;
			this.cameraL = new PerspectiveCamera();
			this.cameraL.layers.enable(1);
			this.cameraL.matrixAutoUpdate = false;
			this.cameraR = new PerspectiveCamera();
			this.cameraR.layers.enable(2);
			this.cameraR.matrixAutoUpdate = false;
			this._cache = {
				focus: null,
				fov: null,
				aspect: null,
				near: null,
				far: null,
				zoom: null,
				eyeSep: null
			};
		}

		update(camera) {
			const cache = this._cache;
			const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

			if (needsUpdate) {
				cache.focus = camera.focus;
				cache.fov = camera.fov;
				cache.aspect = camera.aspect * this.aspect;
				cache.near = camera.near;
				cache.far = camera.far;
				cache.zoom = camera.zoom;
				cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				_projectionMatrix.copy(camera.projectionMatrix);

				const eyeSepHalf = cache.eyeSep / 2;
				const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
				const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
				let xmin, xmax; // translate xOffset

				_eyeLeft.elements[12] = -eyeSepHalf;
				_eyeRight.elements[12] = eyeSepHalf; // for left eye

				xmin = -ymax * cache.aspect + eyeSepOnProjection;
				xmax = ymax * cache.aspect + eyeSepOnProjection;
				_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
				_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
				this.cameraL.projectionMatrix.copy(_projectionMatrix); // for right eye

				xmin = -ymax * cache.aspect - eyeSepOnProjection;
				xmax = ymax * cache.aspect - eyeSepOnProjection;
				_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
				_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
				this.cameraR.projectionMatrix.copy(_projectionMatrix);
			}

			this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
			this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
		}

	}

	class Clock {
		constructor(autoStart = true) {
			this.autoStart = autoStart;
			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;
			this.running = false;
		}

		start() {
			this.startTime = now();
			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;
		}

		stop() {
			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;
		}

		getElapsedTime() {
			this.getDelta();
			return this.elapsedTime;
		}

		getDelta() {
			let diff = 0;

			if (this.autoStart && !this.running) {
				this.start();
				return 0;
			}

			if (this.running) {
				const newTime = now();
				diff = (newTime - this.oldTime) / 1000;
				this.oldTime = newTime;
				this.elapsedTime += diff;
			}

			return diff;
		}

	}

	function now() {
		return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
	}

	const _position$1 = /*@__PURE__*/new Vector3();

	const _quaternion$1 = /*@__PURE__*/new Quaternion();

	const _scale$1 = /*@__PURE__*/new Vector3();

	const _orientation$1 = /*@__PURE__*/new Vector3();

	class AudioListener extends Object3D {
		constructor() {
			super();
			this.type = 'AudioListener';
			this.context = AudioContext.getContext();
			this.gain = this.context.createGain();
			this.gain.connect(this.context.destination);
			this.filter = null;
			this.timeDelta = 0; // private

			this._clock = new Clock();
		}

		getInput() {
			return this.gain;
		}

		removeFilter() {
			if (this.filter !== null) {
				this.gain.disconnect(this.filter);
				this.filter.disconnect(this.context.destination);
				this.gain.connect(this.context.destination);
				this.filter = null;
			}

			return this;
		}

		getFilter() {
			return this.filter;
		}

		setFilter(value) {
			if (this.filter !== null) {
				this.gain.disconnect(this.filter);
				this.filter.disconnect(this.context.destination);
			} else {
				this.gain.disconnect(this.context.destination);
			}

			this.filter = value;
			this.gain.connect(this.filter);
			this.filter.connect(this.context.destination);
			return this;
		}

		getMasterVolume() {
			return this.gain.gain.value;
		}

		setMasterVolume(value) {
			this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
			return this;
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);
			const listener = this.context.listener;
			const up = this.up;
			this.timeDelta = this._clock.getDelta();
			this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);

			_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);

			if (listener.positionX) {
				// code path for Chrome (see #14393)
				const endTime = this.context.currentTime + this.timeDelta;
				listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
				listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
				listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
				listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
				listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
				listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
				listener.upX.linearRampToValueAtTime(up.x, endTime);
				listener.upY.linearRampToValueAtTime(up.y, endTime);
				listener.upZ.linearRampToValueAtTime(up.z, endTime);
			} else {
				listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
				listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
			}
		}

	}

	class Audio extends Object3D {
		constructor(listener) {
			super();
			this.type = 'Audio';
			this.listener = listener;
			this.context = listener.context;
			this.gain = this.context.createGain();
			this.gain.connect(listener.getInput());
			this.autoplay = false;
			this.buffer = null;
			this.detune = 0;
			this.loop = false;
			this.loopStart = 0;
			this.loopEnd = 0;
			this.offset = 0;
			this.duration = undefined;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.source = null;
			this.sourceType = 'empty';
			this._startedAt = 0;
			this._progress = 0;
			this._connected = false;
			this.filters = [];
		}

		getOutput() {
			return this.gain;
		}

		setNodeSource(audioNode) {
			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();
			return this;
		}

		setMediaElementSource(mediaElement) {
			this.hasPlaybackControl = false;
			this.sourceType = 'mediaNode';
			this.source = this.context.createMediaElementSource(mediaElement);
			this.connect();
			return this;
		}

		setMediaStreamSource(mediaStream) {
			this.hasPlaybackControl = false;
			this.sourceType = 'mediaStreamNode';
			this.source = this.context.createMediaStreamSource(mediaStream);
			this.connect();
			return this;
		}

		setBuffer(audioBuffer) {
			this.buffer = audioBuffer;
			this.sourceType = 'buffer';
			if (this.autoplay) this.play();
			return this;
		}

		play(delay = 0) {
			if (this.isPlaying === true) {
				console.warn('THREE.Audio: Audio is already playing.');
				return;
			}

			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this._startedAt = this.context.currentTime + delay;
			const source = this.context.createBufferSource();
			source.buffer = this.buffer;
			source.loop = this.loop;
			source.loopStart = this.loopStart;
			source.loopEnd = this.loopEnd;
			source.onended = this.onEnded.bind(this);
			source.start(this._startedAt, this._progress + this.offset, this.duration);
			this.isPlaying = true;
			this.source = source;
			this.setDetune(this.detune);
			this.setPlaybackRate(this.playbackRate);
			return this.connect();
		}

		pause() {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			if (this.isPlaying === true) {
				// update current progress
				this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;

				if (this.loop === true) {
					// ensure _progress does not exceed duration with looped audios
					this._progress = this._progress % (this.duration || this.buffer.duration);
				}

				this.source.stop();
				this.source.onended = null;
				this.isPlaying = false;
			}

			return this;
		}

		stop() {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this._progress = 0;
			this.source.stop();
			this.source.onended = null;
			this.isPlaying = false;
			return this;
		}

		connect() {
			if (this.filters.length > 0) {
				this.source.connect(this.filters[0]);

				for (let i = 1, l = this.filters.length; i < l; i++) {
					this.filters[i - 1].connect(this.filters[i]);
				}

				this.filters[this.filters.length - 1].connect(this.getOutput());
			} else {
				this.source.connect(this.getOutput());
			}

			this._connected = true;
			return this;
		}

		disconnect() {
			if (this.filters.length > 0) {
				this.source.disconnect(this.filters[0]);

				for (let i = 1, l = this.filters.length; i < l; i++) {
					this.filters[i - 1].disconnect(this.filters[i]);
				}

				this.filters[this.filters.length - 1].disconnect(this.getOutput());
			} else {
				this.source.disconnect(this.getOutput());
			}

			this._connected = false;
			return this;
		}

		getFilters() {
			return this.filters;
		}

		setFilters(value) {
			if (!value) value = [];

			if (this._connected === true) {
				this.disconnect();
				this.filters = value.slice();
				this.connect();
			} else {
				this.filters = value.slice();
			}

			return this;
		}

		setDetune(value) {
			this.detune = value;
			if (this.source.detune === undefined) return; // only set detune when available

			if (this.isPlaying === true) {
				this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
			}

			return this;
		}

		getDetune() {
			return this.detune;
		}

		getFilter() {
			return this.getFilters()[0];
		}

		setFilter(filter) {
			return this.setFilters(filter ? [filter] : []);
		}

		setPlaybackRate(value) {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this.playbackRate = value;

			if (this.isPlaying === true) {
				this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
			}

			return this;
		}

		getPlaybackRate() {
			return this.playbackRate;
		}

		onEnded() {
			this.isPlaying = false;
		}

		getLoop() {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return false;
			}

			return this.loop;
		}

		setLoop(value) {
			if (this.hasPlaybackControl === false) {
				console.warn('THREE.Audio: this Audio has no playback control.');
				return;
			}

			this.loop = value;

			if (this.isPlaying === true) {
				this.source.loop = this.loop;
			}

			return this;
		}

		setLoopStart(value) {
			this.loopStart = value;
			return this;
		}

		setLoopEnd(value) {
			this.loopEnd = value;
			return this;
		}

		getVolume() {
			return this.gain.gain.value;
		}

		setVolume(value) {
			this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
			return this;
		}

	}

	const _position = /*@__PURE__*/new Vector3();

	const _quaternion = /*@__PURE__*/new Quaternion();

	const _scale = /*@__PURE__*/new Vector3();

	const _orientation = /*@__PURE__*/new Vector3();

	class PositionalAudio extends Audio {
		constructor(listener) {
			super(listener);
			this.panner = this.context.createPanner();
			this.panner.panningModel = 'HRTF';
			this.panner.connect(this.gain);
		}

		getOutput() {
			return this.panner;
		}

		getRefDistance() {
			return this.panner.refDistance;
		}

		setRefDistance(value) {
			this.panner.refDistance = value;
			return this;
		}

		getRolloffFactor() {
			return this.panner.rolloffFactor;
		}

		setRolloffFactor(value) {
			this.panner.rolloffFactor = value;
			return this;
		}

		getDistanceModel() {
			return this.panner.distanceModel;
		}

		setDistanceModel(value) {
			this.panner.distanceModel = value;
			return this;
		}

		getMaxDistance() {
			return this.panner.maxDistance;
		}

		setMaxDistance(value) {
			this.panner.maxDistance = value;
			return this;
		}

		setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
			this.panner.coneInnerAngle = coneInnerAngle;
			this.panner.coneOuterAngle = coneOuterAngle;
			this.panner.coneOuterGain = coneOuterGain;
			return this;
		}

		updateMatrixWorld(force) {
			super.updateMatrixWorld(force);
			if (this.hasPlaybackControl === true && this.isPlaying === false) return;
			this.matrixWorld.decompose(_position, _quaternion, _scale);

			_orientation.set(0, 0, 1).applyQuaternion(_quaternion);

			const panner = this.panner;

			if (panner.positionX) {
				// code path for Chrome and Firefox (see #14393)
				const endTime = this.context.currentTime + this.listener.timeDelta;
				panner.positionX.linearRampToValueAtTime(_position.x, endTime);
				panner.positionY.linearRampToValueAtTime(_position.y, endTime);
				panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
				panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
				panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
				panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
			} else {
				panner.setPosition(_position.x, _position.y, _position.z);
				panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
			}
		}

	}

	class AudioAnalyser {
		constructor(audio, fftSize = 2048) {
			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize;
			this.data = new Uint8Array(this.analyser.frequencyBinCount);
			audio.getOutput().connect(this.analyser);
		}

		getFrequencyData() {
			this.analyser.getByteFrequencyData(this.data);
			return this.data;
		}

		getAverageFrequency() {
			let value = 0;
			const data = this.getFrequencyData();

			for (let i = 0; i < data.length; i++) {
				value += data[i];
			}

			return value / data.length;
		}

	}

	class PropertyMixer {
		constructor(binding, typeName, valueSize) {
			this.binding = binding;
			this.valueSize = valueSize;
			let mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property
			//
			// 'add' is used for additive cumulative results
			//
			// 'work' is optional and is only present for quaternion types. It is used
			// to store intermediate quaternion multiplication results

			switch (typeName) {
				case 'quaternion':
					mixFunction = this._slerp;
					mixFunctionAdditive = this._slerpAdditive;
					setIdentity = this._setAdditiveIdentityQuaternion;
					this.buffer = new Float64Array(valueSize * 6);
					this._workIndex = 5;
					break;

				case 'string':
				case 'bool':
					mixFunction = this._select; // Use the regular mix function and for additive on these types,
					// additive is not relevant for non-numeric types

					mixFunctionAdditive = this._select;
					setIdentity = this._setAdditiveIdentityOther;
					this.buffer = new Array(valueSize * 5);
					break;

				default:
					mixFunction = this._lerp;
					mixFunctionAdditive = this._lerpAdditive;
					setIdentity = this._setAdditiveIdentityNumeric;
					this.buffer = new Float64Array(valueSize * 5);
			}

			this._mixBufferRegion = mixFunction;
			this._mixBufferRegionAdditive = mixFunctionAdditive;
			this._setIdentity = setIdentity;
			this._origIndex = 3;
			this._addIndex = 4;
			this.cumulativeWeight = 0;
			this.cumulativeWeightAdditive = 0;
			this.useCount = 0;
			this.referenceCount = 0;
		} // accumulate data in the 'incoming' region into 'accu<i>'


		accumulate(accuIndex, weight) {
			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place
			const buffer = this.buffer,
						stride = this.valueSize,
						offset = accuIndex * stride + stride;
			let currentWeight = this.cumulativeWeight;

			if (currentWeight === 0) {
				// accuN := incoming * weight
				for (let i = 0; i !== stride; ++i) {
					buffer[offset + i] = buffer[i];
				}

				currentWeight = weight;
			} else {
				// accuN := accuN + incoming * weight
				currentWeight += weight;
				const mix = weight / currentWeight;

				this._mixBufferRegion(buffer, offset, 0, mix, stride);
			}

			this.cumulativeWeight = currentWeight;
		} // accumulate data in the 'incoming' region into 'add'


		accumulateAdditive(weight) {
			const buffer = this.buffer,
						stride = this.valueSize,
						offset = stride * this._addIndex;

			if (this.cumulativeWeightAdditive === 0) {
				// add = identity
				this._setIdentity();
			} // add := add + incoming * weight


			this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);

			this.cumulativeWeightAdditive += weight;
		} // apply the state of 'accu<i>' to the binding when accus differ


		apply(accuIndex) {
			const stride = this.valueSize,
						buffer = this.buffer,
						offset = accuIndex * stride + stride,
						weight = this.cumulativeWeight,
						weightAdditive = this.cumulativeWeightAdditive,
						binding = this.binding;
			this.cumulativeWeight = 0;
			this.cumulativeWeightAdditive = 0;

			if (weight < 1) {
				// accuN := accuN + original * ( 1 - cumulativeWeight )
				const originalValueOffset = stride * this._origIndex;

				this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
			}

			if (weightAdditive > 0) {
				// accuN := accuN + additive accuN
				this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
			}

			for (let i = stride, e = stride + stride; i !== e; ++i) {
				if (buffer[i] !== buffer[i + stride]) {
					// value has changed -> update scene graph
					binding.setValue(buffer, offset);
					break;
				}
			}
		} // remember the state of the bound property and copy it to both accus


		saveOriginalState() {
			const binding = this.binding;
			const buffer = this.buffer,
						stride = this.valueSize,
						originalValueOffset = stride * this._origIndex;
			binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original

			for (let i = stride, e = originalValueOffset; i !== e; ++i) {
				buffer[i] = buffer[originalValueOffset + i % stride];
			} // Add to identity for additive


			this._setIdentity();

			this.cumulativeWeight = 0;
			this.cumulativeWeightAdditive = 0;
		} // apply the state previously taken via 'saveOriginalState' to the binding


		restoreOriginalState() {
			const originalValueOffset = this.valueSize * 3;
			this.binding.setValue(this.buffer, originalValueOffset);
		}

		_setAdditiveIdentityNumeric() {
			const startIndex = this._addIndex * this.valueSize;
			const endIndex = startIndex + this.valueSize;

			for (let i = startIndex; i < endIndex; i++) {
				this.buffer[i] = 0;
			}
		}

		_setAdditiveIdentityQuaternion() {
			this._setAdditiveIdentityNumeric();

			this.buffer[this._addIndex * this.valueSize + 3] = 1;
		}

		_setAdditiveIdentityOther() {
			const startIndex = this._origIndex * this.valueSize;
			const targetIndex = this._addIndex * this.valueSize;

			for (let i = 0; i < this.valueSize; i++) {
				this.buffer[targetIndex + i] = this.buffer[startIndex + i];
			}
		} // mix functions


		_select(buffer, dstOffset, srcOffset, t, stride) {
			if (t >= 0.5) {
				for (let i = 0; i !== stride; ++i) {
					buffer[dstOffset + i] = buffer[srcOffset + i];
				}
			}
		}

		_slerp(buffer, dstOffset, srcOffset, t) {
			Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
		}

		_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
			const workOffset = this._workIndex * stride; // Store result in intermediate buffer offset

			Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result

			Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
		}

		_lerp(buffer, dstOffset, srcOffset, t, stride) {
			const s = 1 - t;

			for (let i = 0; i !== stride; ++i) {
				const j = dstOffset + i;
				buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
			}
		}

		_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
			for (let i = 0; i !== stride; ++i) {
				const j = dstOffset + i;
				buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
			}
		}

	}

	// Characters [].:/ are reserved for track binding syntax.
	const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

	const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\w` regexp matches
	// only latin characters, and the unicode \p{L} is not yet supported. So
	// instead, we exclude reserved characters and match everything else.


	const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';

	const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must
	// be matched to parse the rest of the track name.


	const _directoryRe = /((?:WC+[\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.


	const _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved
	// characters. Accessor may contain any character except closing bracket.


	const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may
	// contain any non-bracket characters.


	const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar);

	const _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');

	const _supportedObjectNames = ['material', 'materials', 'bones'];

	class Composite {
		constructor(targetGroup, path, optionalParsedPath) {
			const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_(path, parsedPath);
		}

		getValue(array, offset) {
			this.bind(); // bind all binding

			const firstValidIndex = this._targetGroup.nCachedObjects_,
						binding = this._bindings[firstValidIndex]; // and only call .getValue on the first

			if (binding !== undefined) binding.getValue(array, offset);
		}

		setValue(array, offset) {
			const bindings = this._bindings;

			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
				bindings[i].setValue(array, offset);
			}
		}

		bind() {
			const bindings = this._bindings;

			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
				bindings[i].bind();
			}
		}

		unbind() {
			const bindings = this._bindings;

			for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
				bindings[i].unbind();
			}
		}

	} // Note: This class uses a State pattern on a per-method basis:
	// 'bind' sets 'this.getValue' / 'setValue' and shadows the
	// prototype version of these methods with one that represents
	// the bound state. When the property is not found, the methods
	// become no-ops.


	class PropertyBinding {
		constructor(rootNode, path, parsedPath) {
			this.path = path;
			this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
			this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
			this.rootNode = rootNode; // initial state of these methods that calls 'bind'

			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;
		}

		static create(root, path, parsedPath) {
			if (!(root && root.isAnimationObjectGroup)) {
				return new PropertyBinding(root, path, parsedPath);
			} else {
				return new PropertyBinding.Composite(root, path, parsedPath);
			}
		}
		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param {string} name Node name to be sanitized.
		 * @return {string}
		 */


		static sanitizeNodeName(name) {
			return name.replace(/\s/g, '_').replace(_reservedRe, '');
		}

		static parseTrackName(trackName) {
			const matches = _trackRe.exec(trackName);

			if (matches === null) {
				throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
			}

			const results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[2],
				objectName: matches[3],
				objectIndex: matches[4],
				propertyName: matches[5],
				// required
				propertyIndex: matches[6]
			};
			const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');

			if (lastDot !== undefined && lastDot !== -1) {
				const objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there
				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
				// 'bar' could be the objectName, or part of a nodeName (which can
				// include '.' characters).

				if (_supportedObjectNames.indexOf(objectName) !== -1) {
					results.nodeName = results.nodeName.substring(0, lastDot);
					results.objectName = objectName;
				}
			}

			if (results.propertyName === null || results.propertyName.length === 0) {
				throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
			}

			return results;
		}

		static findNode(root, nodeName) {
			if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
				return root;
			} // search into skeleton bones.


			if (root.skeleton) {
				const bone = root.skeleton.getBoneByName(nodeName);

				if (bone !== undefined) {
					return bone;
				}
			} // search into node subtree.


			if (root.children) {
				const searchNodeSubtree = function (children) {
					for (let i = 0; i < children.length; i++) {
						const childNode = children[i];

						if (childNode.name === nodeName || childNode.uuid === nodeName) {
							return childNode;
						}

						const result = searchNodeSubtree(childNode.children);
						if (result) return result;
					}

					return null;
				};

				const subTreeNode = searchNodeSubtree(root.children);

				if (subTreeNode) {
					return subTreeNode;
				}
			}

			return null;
		} // these are used to "bind" a nonexistent property


		_getValue_unavailable() {}

		_setValue_unavailable() {} // Getters


		_getValue_direct(buffer, offset) {
			buffer[offset] = this.targetObject[this.propertyName];
		}

		_getValue_array(buffer, offset) {
			const source = this.resolvedProperty;

			for (let i = 0, n = source.length; i !== n; ++i) {
				buffer[offset++] = source[i];
			}
		}

		_getValue_arrayElement(buffer, offset) {
			buffer[offset] = this.resolvedProperty[this.propertyIndex];
		}

		_getValue_toArray(buffer, offset) {
			this.resolvedProperty.toArray(buffer, offset);
		} // Direct


		_setValue_direct(buffer, offset) {
			this.targetObject[this.propertyName] = buffer[offset];
		}

		_setValue_direct_setNeedsUpdate(buffer, offset) {
			this.targetObject[this.propertyName] = buffer[offset];
			this.targetObject.needsUpdate = true;
		}

		_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
			this.targetObject[this.propertyName] = buffer[offset];
			this.targetObject.matrixWorldNeedsUpdate = true;
		} // EntireArray


		_setValue_array(buffer, offset) {
			const dest = this.resolvedProperty;

			for (let i = 0, n = dest.length; i !== n; ++i) {
				dest[i] = buffer[offset++];
			}
		}

		_setValue_array_setNeedsUpdate(buffer, offset) {
			const dest = this.resolvedProperty;

			for (let i = 0, n = dest.length; i !== n; ++i) {
				dest[i] = buffer[offset++];
			}

			this.targetObject.needsUpdate = true;
		}

		_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
			const dest = this.resolvedProperty;

			for (let i = 0, n = dest.length; i !== n; ++i) {
				dest[i] = buffer[offset++];
			}

			this.targetObject.matrixWorldNeedsUpdate = true;
		} // ArrayElement


		_setValue_arrayElement(buffer, offset) {
			this.resolvedProperty[this.propertyIndex] = buffer[offset];
		}

		_setValue_arrayElement_setNeedsUpdate(buffer, offset) {
			this.resolvedProperty[this.propertyIndex] = buffer[offset];
			this.targetObject.needsUpdate = true;
		}

		_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
			this.resolvedProperty[this.propertyIndex] = buffer[offset];
			this.targetObject.matrixWorldNeedsUpdate = true;
		} // HasToFromArray


		_setValue_fromArray(buffer, offset) {
			this.resolvedProperty.fromArray(buffer, offset);
		}

		_setValue_fromArray_setNeedsUpdate(buffer, offset) {
			this.resolvedProperty.fromArray(buffer, offset);
			this.targetObject.needsUpdate = true;
		}

		_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
			this.resolvedProperty.fromArray(buffer, offset);
			this.targetObject.matrixWorldNeedsUpdate = true;
		}

		_getValue_unbound(targetArray, offset) {
			this.bind();
			this.getValue(targetArray, offset);
		}

		_setValue_unbound(sourceArray, offset) {
			this.bind();
			this.setValue(sourceArray, offset);
		} // create getter / setter pair for a property in the scene graph


		bind() {
			let targetObject = this.node;
			const parsedPath = this.parsedPath;
			const objectName = parsedPath.objectName;
			const propertyName = parsedPath.propertyName;
			let propertyIndex = parsedPath.propertyIndex;

			if (!targetObject) {
				targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
				this.node = targetObject;
			} // set fail state so we can just 'return' on error


			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable; // ensure there is a value node

			if (!targetObject) {
				console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
				return;
			}

			if (objectName) {
				let objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....

				switch (objectName) {
					case 'materials':
						if (!targetObject.material) {
							console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
							return;
						}

						if (!targetObject.material.materials) {
							console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
							return;
						}

						targetObject = targetObject.material.materials;
						break;

					case 'bones':
						if (!targetObject.skeleton) {
							console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
							return;
						} // potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.


						targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.

						for (let i = 0; i < targetObject.length; i++) {
							if (targetObject[i].name === objectIndex) {
								objectIndex = i;
								break;
							}
						}

						break;

					default:
						if (targetObject[objectName] === undefined) {
							console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
							return;
						}

						targetObject = targetObject[objectName];
				}

				if (objectIndex !== undefined) {
					if (targetObject[objectIndex] === undefined) {
						console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
						return;
					}

					targetObject = targetObject[objectIndex];
				}
			} // resolve property


			const nodeProperty = targetObject[propertyName];

			if (nodeProperty === undefined) {
				const nodeName = parsedPath.nodeName;
				console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
				return;
			} // determine versioning scheme


			let versioning = this.Versioning.None;
			this.targetObject = targetObject;

			if (targetObject.needsUpdate !== undefined) {
				// material
				versioning = this.Versioning.NeedsUpdate;
			} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
				// node transform
				versioning = this.Versioning.MatrixWorldNeedsUpdate;
			} // determine how the property gets bound


			let bindingType = this.BindingType.Direct;

			if (propertyIndex !== undefined) {
				// access a sub element of the property array (only primitives are supported right now)
				if (propertyName === 'morphTargetInfluences') {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
					// support resolving morphTarget names into indices.
					if (!targetObject.geometry) {
						console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
						return;
					}

					if (targetObject.geometry.isBufferGeometry) {
						if (!targetObject.geometry.morphAttributes) {
							console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
							return;
						}

						if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {
							propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
						}
					} else {
						console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);
						return;
					}
				}

				bindingType = this.BindingType.ArrayElement;
				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;
			} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
				// must use copy for Object3D.Euler/Quaternion
				bindingType = this.BindingType.HasFromToArray;
				this.resolvedProperty = nodeProperty;
			} else if (Array.isArray(nodeProperty)) {
				bindingType = this.BindingType.EntireArray;
				this.resolvedProperty = nodeProperty;
			} else {
				this.propertyName = propertyName;
			} // select getter / setter


			this.getValue = this.GetterByBindingType[bindingType];
			this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
		}

		unbind() {
			this.node = null; // back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'

			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;
		}

	}

	PropertyBinding.Composite = Composite;
	PropertyBinding.prototype.BindingType = {
		Direct: 0,
		EntireArray: 1,
		ArrayElement: 2,
		HasFromToArray: 3
	};
	PropertyBinding.prototype.Versioning = {
		None: 0,
		NeedsUpdate: 1,
		MatrixWorldNeedsUpdate: 2
	};
	PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];
	PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct
	PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray
	PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement
	PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray
	PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 *	- Add objects you would otherwise pass as 'root' to the
	 *		constructor or the .clipAction method of AnimationMixer.
	 *
	 *	- Instead pass this object as 'root'.
	 *
	 *	- You can also add and remove objects later when the mixer
	 *		is running.
	 *
	 * Note:
	 *
	 *		Objects of this class appear as one object to the mixer,
	 *		so cache control of the individual objects must be done
	 *		on the group.
	 *
	 * Limitation:
	 *
	 *	- The animated properties must be compatible among the
	 *		all objects in the group.
	 *
	 *	- A single property can either be controlled through a
	 *		target group or directly, but not both.
	 */

	class AnimationObjectGroup {
		constructor() {
			this.uuid = generateUUID(); // cached objects followed by the active ones

			this._objects = Array.prototype.slice.call(arguments);
			this.nCachedObjects_ = 0; // threshold
			// note: read by PropertyBinding.Composite

			const indices = {};
			this._indicesByUUID = indices; // for bookkeeping

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				indices[arguments[i].uuid] = i;
			}

			this._paths = []; // inside: string

			this._parsedPaths = []; // inside: { we don't care, here }

			this._bindings = []; // inside: Array< PropertyBinding >

			this._bindingsIndicesByPath = {}; // inside: indices in these arrays

			const scope = this;
			this.stats = {
				objects: {
					get total() {
						return scope._objects.length;
					},

					get inUse() {
						return this.total - scope.nCachedObjects_;
					}

				},

				get bindingsPerObject() {
					return scope._bindings.length;
				}

			};
		}

		add() {
			const objects = this._objects,
						indicesByUUID = this._indicesByUUID,
						paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						nBindings = bindings.length;
			let knownObject = undefined,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_;

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				const object = arguments[i],
							uuid = object.uuid;
				let index = indicesByUUID[uuid];

				if (index === undefined) {
					// unknown object -> add it to the ACTIVE region
					index = nObjects++;
					indicesByUUID[uuid] = index;
					objects.push(object); // accounting is done, now do the same for all bindings

					for (let j = 0, m = nBindings; j !== m; ++j) {
						bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
					}
				} else if (index < nCachedObjects) {
					knownObject = objects[index]; // move existing object to the ACTIVE region

					const firstActiveIndex = --nCachedObjects,
								lastCachedObject = objects[firstActiveIndex];
					indicesByUUID[lastCachedObject.uuid] = index;
					objects[index] = lastCachedObject;
					indicesByUUID[uuid] = firstActiveIndex;
					objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings

					for (let j = 0, m = nBindings; j !== m; ++j) {
						const bindingsForPath = bindings[j],
									lastCached = bindingsForPath[firstActiveIndex];
						let binding = bindingsForPath[index];
						bindingsForPath[index] = lastCached;

						if (binding === undefined) {
							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist
							binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
						}

						bindingsForPath[firstActiveIndex] = binding;
					}
				} else if (objects[index] !== knownObject) {
					console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');
				} // else the object is already where we want it to be

			} // for arguments


			this.nCachedObjects_ = nCachedObjects;
		}

		remove() {
			const objects = this._objects,
						indicesByUUID = this._indicesByUUID,
						bindings = this._bindings,
						nBindings = bindings.length;
			let nCachedObjects = this.nCachedObjects_;

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				const object = arguments[i],
							uuid = object.uuid,
							index = indicesByUUID[uuid];

				if (index !== undefined && index >= nCachedObjects) {
					// move existing object into the CACHED region
					const lastCachedIndex = nCachedObjects++,
								firstActiveObject = objects[lastCachedIndex];
					indicesByUUID[firstActiveObject.uuid] = index;
					objects[index] = firstActiveObject;
					indicesByUUID[uuid] = lastCachedIndex;
					objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings

					for (let j = 0, m = nBindings; j !== m; ++j) {
						const bindingsForPath = bindings[j],
									firstActive = bindingsForPath[lastCachedIndex],
									binding = bindingsForPath[index];
						bindingsForPath[index] = firstActive;
						bindingsForPath[lastCachedIndex] = binding;
					}
				}
			} // for arguments


			this.nCachedObjects_ = nCachedObjects;
		} // remove & forget


		uncache() {
			const objects = this._objects,
						indicesByUUID = this._indicesByUUID,
						bindings = this._bindings,
						nBindings = bindings.length;
			let nCachedObjects = this.nCachedObjects_,
					nObjects = objects.length;

			for (let i = 0, n = arguments.length; i !== n; ++i) {
				const object = arguments[i],
							uuid = object.uuid,
							index = indicesByUUID[uuid];

				if (index !== undefined) {
					delete indicesByUUID[uuid];

					if (index < nCachedObjects) {
						// object is cached, shrink the CACHED region
						const firstActiveIndex = --nCachedObjects,
									lastCachedObject = objects[firstActiveIndex],
									lastIndex = --nObjects,
									lastObject = objects[lastIndex]; // last cached object takes this object's place

						indicesByUUID[lastCachedObject.uuid] = index;
						objects[index] = lastCachedObject; // last object goes to the activated slot and pop

						indicesByUUID[lastObject.uuid] = firstActiveIndex;
						objects[firstActiveIndex] = lastObject;
						objects.pop(); // accounting is done, now do the same for all bindings

						for (let j = 0, m = nBindings; j !== m; ++j) {
							const bindingsForPath = bindings[j],
										lastCached = bindingsForPath[firstActiveIndex],
										last = bindingsForPath[lastIndex];
							bindingsForPath[index] = lastCached;
							bindingsForPath[firstActiveIndex] = last;
							bindingsForPath.pop();
						}
					} else {
						// object is active, just swap with the last and pop
						const lastIndex = --nObjects,
									lastObject = objects[lastIndex];

						if (lastIndex > 0) {
							indicesByUUID[lastObject.uuid] = index;
						}

						objects[index] = lastObject;
						objects.pop(); // accounting is done, now do the same for all bindings

						for (let j = 0, m = nBindings; j !== m; ++j) {
							const bindingsForPath = bindings[j];
							bindingsForPath[index] = bindingsForPath[lastIndex];
							bindingsForPath.pop();
						}
					} // cached or active

				} // if object is known

			} // for arguments


			this.nCachedObjects_ = nCachedObjects;
		} // Internal interface used by befriended PropertyBinding.Composite:


		subscribe_(path, parsedPath) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group
			const indicesByPath = this._bindingsIndicesByPath;
			let index = indicesByPath[path];
			const bindings = this._bindings;
			if (index !== undefined) return bindings[index];
			const paths = this._paths,
						parsedPaths = this._parsedPaths,
						objects = this._objects,
						nObjects = objects.length,
						nCachedObjects = this.nCachedObjects_,
						bindingsForPath = new Array(nObjects);
			index = bindings.length;
			indicesByPath[path] = index;
			paths.push(path);
			parsedPaths.push(parsedPath);
			bindings.push(bindingsForPath);

			for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
				const object = objects[i];
				bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
			}

			return bindingsForPath;
		}

		unsubscribe_(path) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'
			const indicesByPath = this._bindingsIndicesByPath,
						index = indicesByPath[path];

			if (index !== undefined) {
				const paths = this._paths,
							parsedPaths = this._parsedPaths,
							bindings = this._bindings,
							lastBindingsIndex = bindings.length - 1,
							lastBindings = bindings[lastBindingsIndex],
							lastBindingsPath = path[lastBindingsIndex];
				indicesByPath[lastBindingsPath] = index;
				bindings[index] = lastBindings;
				bindings.pop();
				parsedPaths[index] = parsedPaths[lastBindingsIndex];
				parsedPaths.pop();
				paths[index] = paths[lastBindingsIndex];
				paths.pop();
			}
		}

	}

	AnimationObjectGroup.prototype.isAnimationObjectGroup = true;

	class AnimationAction {
		constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot;
			this.blendMode = blendMode;
			const tracks = clip.tracks,
						nTracks = tracks.length,
						interpolants = new Array(nTracks);
			const interpolantSettings = {
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
			};

			for (let i = 0; i !== nTracks; ++i) {
				const interpolant = tracks[i].createInterpolant(null);
				interpolants[i] = interpolant;
				interpolant.settings = interpolantSettings;
			}

			this._interpolantSettings = interpolantSettings;
			this._interpolants = interpolants; // bound by the mixer
			// inside: PropertyMixer (managed by the mixer)

			this._propertyBindings = new Array(nTracks);
			this._cacheIndex = null; // for the memory manager

			this._byClipCacheIndex = null; // for the memory manager

			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;
			this.loop = LoopRepeat;
			this._loopCount = -1; // global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action

			this._startTime = null; // scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop

			this.time = 0;
			this.timeScale = 1;
			this._effectiveTimeScale = 1;
			this.weight = 1;
			this._effectiveWeight = 1;
			this.repetitions = Infinity; // no. of repetitions when looping

			this.paused = false; // true -> zero effective time scale

			this.enabled = true; // false -> zero effective weight

			this.clampWhenFinished = false; // keep feeding the last frame?

			this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate

			this.zeroSlopeAtEnd = true; // clips for start, loop and end
		} // State & Scheduling


		play() {
			this._mixer._activateAction(this);

			return this;
		}

		stop() {
			this._mixer._deactivateAction(this);

			return this.reset();
		}

		reset() {
			this.paused = false;
			this.enabled = true;
			this.time = 0; // restart clip

			this._loopCount = -1; // forget previous loops

			this._startTime = null; // forget scheduling

			return this.stopFading().stopWarping();
		}

		isRunning() {
			return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
		} // return true when play has been called


		isScheduled() {
			return this._mixer._isActiveAction(this);
		}

		startAt(time) {
			this._startTime = time;
			return this;
		}

		setLoop(mode, repetitions) {
			this.loop = mode;
			this.repetitions = repetitions;
			return this;
		} // Weight
		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing


		setEffectiveWeight(weight) {
			this.weight = weight; // note: same logic as when updated at runtime

			this._effectiveWeight = this.enabled ? weight : 0;
			return this.stopFading();
		} // return the weight considering fading and .enabled


		getEffectiveWeight() {
			return this._effectiveWeight;
		}

		fadeIn(duration) {
			return this._scheduleFading(duration, 0, 1);
		}

		fadeOut(duration) {
			return this._scheduleFading(duration, 1, 0);
		}

		crossFadeFrom(fadeOutAction, duration, warp) {
			fadeOutAction.fadeOut(duration);
			this.fadeIn(duration);

			if (warp) {
				const fadeInDuration = this._clip.duration,
							fadeOutDuration = fadeOutAction._clip.duration,
							startEndRatio = fadeOutDuration / fadeInDuration,
							endStartRatio = fadeInDuration / fadeOutDuration;
				fadeOutAction.warp(1.0, startEndRatio, duration);
				this.warp(endStartRatio, 1.0, duration);
			}

			return this;
		}

		crossFadeTo(fadeInAction, duration, warp) {
			return fadeInAction.crossFadeFrom(this, duration, warp);
		}

		stopFading() {
			const weightInterpolant = this._weightInterpolant;

			if (weightInterpolant !== null) {
				this._weightInterpolant = null;

				this._mixer._takeBackControlInterpolant(weightInterpolant);
			}

			return this;
		} // Time Scale Control
		// set the time scale stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing


		setEffectiveTimeScale(timeScale) {
			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;
			return this.stopWarping();
		} // return the time scale considering warping and .paused


		getEffectiveTimeScale() {
			return this._effectiveTimeScale;
		}

		setDuration(duration) {
			this.timeScale = this._clip.duration / duration;
			return this.stopWarping();
		}

		syncWith(action) {
			this.time = action.time;
			this.timeScale = action.timeScale;
			return this.stopWarping();
		}

		halt(duration) {
			return this.warp(this._effectiveTimeScale, 0, duration);
		}

		warp(startTimeScale, endTimeScale, duration) {
			const mixer = this._mixer,
						now = mixer.time,
						timeScale = this.timeScale;
			let interpolant = this._timeScaleInterpolant;

			if (interpolant === null) {
				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;
			}

			const times = interpolant.parameterPositions,
						values = interpolant.sampleValues;
			times[0] = now;
			times[1] = now + duration;
			values[0] = startTimeScale / timeScale;
			values[1] = endTimeScale / timeScale;
			return this;
		}

		stopWarping() {
			const timeScaleInterpolant = this._timeScaleInterpolant;

			if (timeScaleInterpolant !== null) {
				this._timeScaleInterpolant = null;

				this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
			}

			return this;
		} // Object Accessors


		getMixer() {
			return this._mixer;
		}

		getClip() {
			return this._clip;
		}

		getRoot() {
			return this._localRoot || this._mixer._root;
		} // Interna


		_update(time, deltaTime, timeDirection, accuIndex) {
			// called by the mixer
			if (!this.enabled) {
				// call ._updateWeight() to update ._effectiveWeight
				this._updateWeight(time);

				return;
			}

			const startTime = this._startTime;

			if (startTime !== null) {
				// check for scheduled start of action
				const timeRunning = (time - startTime) * timeDirection;

				if (timeRunning < 0 || timeDirection === 0) {
					return; // yet to come / don't decide when delta = 0
				} // start


				this._startTime = null; // unschedule

				deltaTime = timeDirection * timeRunning;
			} // apply time scale and advance time


			deltaTime *= this._updateTimeScale(time);

			const clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in
			// an effective weight of 0


			const weight = this._updateWeight(time);

			if (weight > 0) {
				const interpolants = this._interpolants;
				const propertyMixers = this._propertyBindings;

				switch (this.blendMode) {
					case AdditiveAnimationBlendMode:
						for (let j = 0, m = interpolants.length; j !== m; ++j) {
							interpolants[j].evaluate(clipTime);
							propertyMixers[j].accumulateAdditive(weight);
						}

						break;

					case NormalAnimationBlendMode:
					default:
						for (let j = 0, m = interpolants.length; j !== m; ++j) {
							interpolants[j].evaluate(clipTime);
							propertyMixers[j].accumulate(accuIndex, weight);
						}

				}
			}
		}

		_updateWeight(time) {
			let weight = 0;

			if (this.enabled) {
				weight = this.weight;
				const interpolant = this._weightInterpolant;

				if (interpolant !== null) {
					const interpolantValue = interpolant.evaluate(time)[0];
					weight *= interpolantValue;

					if (time > interpolant.parameterPositions[1]) {
						this.stopFading();

						if (interpolantValue === 0) {
							// faded out, disable
							this.enabled = false;
						}
					}
				}
			}

			this._effectiveWeight = weight;
			return weight;
		}

		_updateTimeScale(time) {
			let timeScale = 0;

			if (!this.paused) {
				timeScale = this.timeScale;
				const interpolant = this._timeScaleInterpolant;

				if (interpolant !== null) {
					const interpolantValue = interpolant.evaluate(time)[0];
					timeScale *= interpolantValue;

					if (time > interpolant.parameterPositions[1]) {
						this.stopWarping();

						if (timeScale === 0) {
							// motion has halted, pause
							this.paused = true;
						} else {
							// warp done - apply final time scale
							this.timeScale = timeScale;
						}
					}
				}
			}

			this._effectiveTimeScale = timeScale;
			return timeScale;
		}

		_updateTime(deltaTime) {
			const duration = this._clip.duration;
			const loop = this.loop;
			let time = this.time + deltaTime;
			let loopCount = this._loopCount;
			const pingPong = loop === LoopPingPong;

			if (deltaTime === 0) {
				if (loopCount === -1) return time;
				return pingPong && (loopCount & 1) === 1 ? duration - time : time;
			}

			if (loop === LoopOnce) {
				if (loopCount === -1) {
					// just started
					this._loopCount = 0;

					this._setEndings(true, true, false);
				}

				handle_stop: {
					if (time >= duration) {
						time = duration;
					} else if (time < 0) {
						time = 0;
					} else {
						this.time = time;
						break handle_stop;
					}

					if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
					this.time = time;

					this._mixer.dispatchEvent({
						type: 'finished',
						action: this,
						direction: deltaTime < 0 ? -1 : 1
					});
				}
			} else {
				// repetitive Repeat or PingPong
				if (loopCount === -1) {
					// just started
					if (deltaTime >= 0) {
						loopCount = 0;

						this._setEndings(true, this.repetitions === 0, pingPong);
					} else {
						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1
						this._setEndings(this.repetitions === 0, true, pingPong);
					}
				}

				if (time >= duration || time < 0) {
					// wrap around
					const loopDelta = Math.floor(time / duration); // signed

					time -= duration * loopDelta;
					loopCount += Math.abs(loopDelta);
					const pending = this.repetitions - loopCount;

					if (pending <= 0) {
						// have to stop (switch state, clamp time, fire event)
						if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
						time = deltaTime > 0 ? duration : 0;
						this.time = time;

						this._mixer.dispatchEvent({
							type: 'finished',
							action: this,
							direction: deltaTime > 0 ? 1 : -1
						});
					} else {
						// keep running
						if (pending === 1) {
							// entering the last round
							const atStart = deltaTime < 0;

							this._setEndings(atStart, !atStart, pingPong);
						} else {
							this._setEndings(false, false, pingPong);
						}

						this._loopCount = loopCount;
						this.time = time;

						this._mixer.dispatchEvent({
							type: 'loop',
							action: this,
							loopDelta: loopDelta
						});
					}
				} else {
					this.time = time;
				}

				if (pingPong && (loopCount & 1) === 1) {
					// invert time for the "pong round"
					return duration - time;
				}
			}

			return time;
		}

		_setEndings(atStart, atEnd, pingPong) {
			const settings = this._interpolantSettings;

			if (pingPong) {
				settings.endingStart = ZeroSlopeEnding;
				settings.endingEnd = ZeroSlopeEnding;
			} else {
				// assuming for LoopOnce atStart == atEnd == true
				if (atStart) {
					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
				} else {
					settings.endingStart = WrapAroundEnding;
				}

				if (atEnd) {
					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
				} else {
					settings.endingEnd = WrapAroundEnding;
				}
			}
		}

		_scheduleFading(duration, weightNow, weightThen) {
			const mixer = this._mixer,
						now = mixer.time;
			let interpolant = this._weightInterpolant;

			if (interpolant === null) {
				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;
			}

			const times = interpolant.parameterPositions,
						values = interpolant.sampleValues;
			times[0] = now;
			values[0] = weightNow;
			times[1] = now + duration;
			values[1] = weightThen;
			return this;
		}

	}

	class AnimationMixer extends EventDispatcher {
		constructor(root) {
			super();
			this._root = root;

			this._initMemoryManager();

			this._accuIndex = 0;
			this.time = 0;
			this.timeScale = 1.0;
		}

		_bindAction(action, prototypeAction) {
			const root = action._localRoot || this._root,
						tracks = action._clip.tracks,
						nTracks = tracks.length,
						bindings = action._propertyBindings,
						interpolants = action._interpolants,
						rootUuid = root.uuid,
						bindingsByRoot = this._bindingsByRootAndName;
			let bindingsByName = bindingsByRoot[rootUuid];

			if (bindingsByName === undefined) {
				bindingsByName = {};
				bindingsByRoot[rootUuid] = bindingsByName;
			}

			for (let i = 0; i !== nTracks; ++i) {
				const track = tracks[i],
							trackName = track.name;
				let binding = bindingsByName[trackName];

				if (binding !== undefined) {
					++binding.referenceCount;
					bindings[i] = binding;
				} else {
					binding = bindings[i];

					if (binding !== undefined) {
						// existing binding, make sure the cache knows
						if (binding._cacheIndex === null) {
							++binding.referenceCount;

							this._addInactiveBinding(binding, rootUuid, trackName);
						}

						continue;
					}

					const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
					binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
					++binding.referenceCount;

					this._addInactiveBinding(binding, rootUuid, trackName);

					bindings[i] = binding;
				}

				interpolants[i].resultBuffer = binding.buffer;
			}
		}

		_activateAction(action) {
			if (!this._isActiveAction(action)) {
				if (action._cacheIndex === null) {
					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind
					const rootUuid = (action._localRoot || this._root).uuid,
								clipUuid = action._clip.uuid,
								actionsForClip = this._actionsByClip[clipUuid];

					this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);

					this._addInactiveAction(action, clipUuid, rootUuid);
				}

				const bindings = action._propertyBindings; // increment reference counts / sort out state

				for (let i = 0, n = bindings.length; i !== n; ++i) {
					const binding = bindings[i];

					if (binding.useCount++ === 0) {
						this._lendBinding(binding);

						binding.saveOriginalState();
					}
				}

				this._lendAction(action);
			}
		}

		_deactivateAction(action) {
			if (this._isActiveAction(action)) {
				const bindings = action._propertyBindings; // decrement reference counts / sort out state

				for (let i = 0, n = bindings.length; i !== n; ++i) {
					const binding = bindings[i];

					if (--binding.useCount === 0) {
						binding.restoreOriginalState();

						this._takeBackBinding(binding);
					}
				}

				this._takeBackAction(action);
			}
		} // Memory manager


		_initMemoryManager() {
			this._actions = []; // 'nActiveActions' followed by inactive ones

			this._nActiveActions = 0;
			this._actionsByClip = {}; // inside:
			// {
			// 	knownActions: Array< AnimationAction > - used as prototypes
			// 	actionByRoot: AnimationAction - lookup
			// }

			this._bindings = []; // 'nActiveBindings' followed by inactive ones

			this._nActiveBindings = 0;
			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >

			this._controlInterpolants = []; // same game as above

			this._nActiveControlInterpolants = 0;
			const scope = this;
			this.stats = {
				actions: {
					get total() {
						return scope._actions.length;
					},

					get inUse() {
						return scope._nActiveActions;
					}

				},
				bindings: {
					get total() {
						return scope._bindings.length;
					},

					get inUse() {
						return scope._nActiveBindings;
					}

				},
				controlInterpolants: {
					get total() {
						return scope._controlInterpolants.length;
					},

					get inUse() {
						return scope._nActiveControlInterpolants;
					}

				}
			};
		} // Memory management for AnimationAction objects


		_isActiveAction(action) {
			const index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;
		}

		_addInactiveAction(action, clipUuid, rootUuid) {
			const actions = this._actions,
						actionsByClip = this._actionsByClip;
			let actionsForClip = actionsByClip[clipUuid];

			if (actionsForClip === undefined) {
				actionsForClip = {
					knownActions: [action],
					actionByRoot: {}
				};
				action._byClipCacheIndex = 0;
				actionsByClip[clipUuid] = actionsForClip;
			} else {
				const knownActions = actionsForClip.knownActions;
				action._byClipCacheIndex = knownActions.length;
				knownActions.push(action);
			}

			action._cacheIndex = actions.length;
			actions.push(action);
			actionsForClip.actionByRoot[rootUuid] = action;
		}

		_removeInactiveAction(action) {
			const actions = this._actions,
						lastInactiveAction = actions[actions.length - 1],
						cacheIndex = action._cacheIndex;
			lastInactiveAction._cacheIndex = cacheIndex;
			actions[cacheIndex] = lastInactiveAction;
			actions.pop();
			action._cacheIndex = null;
			const clipUuid = action._clip.uuid,
						actionsByClip = this._actionsByClip,
						actionsForClip = actionsByClip[clipUuid],
						knownActionsForClip = actionsForClip.knownActions,
						lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
						byClipCacheIndex = action._byClipCacheIndex;
			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[byClipCacheIndex] = lastKnownAction;
			knownActionsForClip.pop();
			action._byClipCacheIndex = null;
			const actionByRoot = actionsForClip.actionByRoot,
						rootUuid = (action._localRoot || this._root).uuid;
			delete actionByRoot[rootUuid];

			if (knownActionsForClip.length === 0) {
				delete actionsByClip[clipUuid];
			}

			this._removeInactiveBindingsForAction(action);
		}

		_removeInactiveBindingsForAction(action) {
			const bindings = action._propertyBindings;

			for (let i = 0, n = bindings.length; i !== n; ++i) {
				const binding = bindings[i];

				if (--binding.referenceCount === 0) {
					this._removeInactiveBinding(binding);
				}
			}
		}

		_lendAction(action) {
			// [ active actions |	inactive actions	]
			// [	active actions >| inactive actions ]
			//								 s				a
			//									<-swap->
			//								 a				s
			const actions = this._actions,
						prevIndex = action._cacheIndex,
						lastActiveIndex = this._nActiveActions++,
						firstInactiveAction = actions[lastActiveIndex];
			action._cacheIndex = lastActiveIndex;
			actions[lastActiveIndex] = action;
			firstInactiveAction._cacheIndex = prevIndex;
			actions[prevIndex] = firstInactiveAction;
		}

		_takeBackAction(action) {
			// [	active actions	| inactive actions ]
			// [ active actions |< inactive actions	]
			//				a				s
			//				 <-swap->
			//				s				a
			const actions = this._actions,
						prevIndex = action._cacheIndex,
						firstInactiveIndex = --this._nActiveActions,
						lastActiveAction = actions[firstInactiveIndex];
			action._cacheIndex = firstInactiveIndex;
			actions[firstInactiveIndex] = action;
			lastActiveAction._cacheIndex = prevIndex;
			actions[prevIndex] = lastActiveAction;
		} // Memory management for PropertyMixer objects


		_addInactiveBinding(binding, rootUuid, trackName) {
			const bindingsByRoot = this._bindingsByRootAndName,
						bindings = this._bindings;
			let bindingByName = bindingsByRoot[rootUuid];

			if (bindingByName === undefined) {
				bindingByName = {};
				bindingsByRoot[rootUuid] = bindingByName;
			}

			bindingByName[trackName] = binding;
			binding._cacheIndex = bindings.length;
			bindings.push(binding);
		}

		_removeInactiveBinding(binding) {
			const bindings = this._bindings,
						propBinding = binding.binding,
						rootUuid = propBinding.rootNode.uuid,
						trackName = propBinding.path,
						bindingsByRoot = this._bindingsByRootAndName,
						bindingByName = bindingsByRoot[rootUuid],
						lastInactiveBinding = bindings[bindings.length - 1],
						cacheIndex = binding._cacheIndex;
			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[cacheIndex] = lastInactiveBinding;
			bindings.pop();
			delete bindingByName[trackName];

			if (Object.keys(bindingByName).length === 0) {
				delete bindingsByRoot[rootUuid];
			}
		}

		_lendBinding(binding) {
			const bindings = this._bindings,
						prevIndex = binding._cacheIndex,
						lastActiveIndex = this._nActiveBindings++,
						firstInactiveBinding = bindings[lastActiveIndex];
			binding._cacheIndex = lastActiveIndex;
			bindings[lastActiveIndex] = binding;
			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[prevIndex] = firstInactiveBinding;
		}

		_takeBackBinding(binding) {
			const bindings = this._bindings,
						prevIndex = binding._cacheIndex,
						firstInactiveIndex = --this._nActiveBindings,
						lastActiveBinding = bindings[firstInactiveIndex];
			binding._cacheIndex = firstInactiveIndex;
			bindings[firstInactiveIndex] = binding;
			lastActiveBinding._cacheIndex = prevIndex;
			bindings[prevIndex] = lastActiveBinding;
		} // Memory management of Interpolants for weight and time scale


		_lendControlInterpolant() {
			const interpolants = this._controlInterpolants,
						lastActiveIndex = this._nActiveControlInterpolants++;
			let interpolant = interpolants[lastActiveIndex];

			if (interpolant === undefined) {
				interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[lastActiveIndex] = interpolant;
			}

			return interpolant;
		}

		_takeBackControlInterpolant(interpolant) {
			const interpolants = this._controlInterpolants,
						prevIndex = interpolant.__cacheIndex,
						firstInactiveIndex = --this._nActiveControlInterpolants,
						lastActiveInterpolant = interpolants[firstInactiveIndex];
			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[firstInactiveIndex] = interpolant;
			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[prevIndex] = lastActiveInterpolant;
		} // return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)


		clipAction(clip, optionalRoot, blendMode) {
			const root = optionalRoot || this._root,
						rootUuid = root.uuid;
			let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;
			const clipUuid = clipObject !== null ? clipObject.uuid : clip;
			const actionsForClip = this._actionsByClip[clipUuid];
			let prototypeAction = null;

			if (blendMode === undefined) {
				if (clipObject !== null) {
					blendMode = clipObject.blendMode;
				} else {
					blendMode = NormalAnimationBlendMode;
				}
			}

			if (actionsForClip !== undefined) {
				const existingAction = actionsForClip.actionByRoot[rootUuid];

				if (existingAction !== undefined && existingAction.blendMode === blendMode) {
					return existingAction;
				} // we know the clip, so we don't have to parse all
				// the bindings again but can just copy


				prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action

				if (clipObject === null) clipObject = prototypeAction._clip;
			} // clip must be known when specified via string


			if (clipObject === null) return null; // allocate all resources required to run it

			const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);

			this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager


			this._addInactiveAction(newAction, clipUuid, rootUuid);

			return newAction;
		} // get an existing action


		existingAction(clip, optionalRoot) {
			const root = optionalRoot || this._root,
						rootUuid = root.uuid,
						clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
						clipUuid = clipObject ? clipObject.uuid : clip,
						actionsForClip = this._actionsByClip[clipUuid];

			if (actionsForClip !== undefined) {
				return actionsForClip.actionByRoot[rootUuid] || null;
			}

			return null;
		} // deactivates all previously scheduled actions


		stopAllAction() {
			const actions = this._actions,
						nActions = this._nActiveActions;

			for (let i = nActions - 1; i >= 0; --i) {
				actions[i].stop();
			}

			return this;
		} // advance the time and update apply the animation


		update(deltaTime) {
			deltaTime *= this.timeScale;
			const actions = this._actions,
						nActions = this._nActiveActions,
						time = this.time += deltaTime,
						timeDirection = Math.sign(deltaTime),
						accuIndex = this._accuIndex ^= 1; // run active actions

			for (let i = 0; i !== nActions; ++i) {
				const action = actions[i];

				action._update(time, deltaTime, timeDirection, accuIndex);
			} // update scene graph


			const bindings = this._bindings,
						nBindings = this._nActiveBindings;

			for (let i = 0; i !== nBindings; ++i) {
				bindings[i].apply(accuIndex);
			}

			return this;
		} // Allows you to seek to a specific time in an animation.


		setTime(timeInSeconds) {
			this.time = 0; // Zero out time attribute for AnimationMixer object;

			for (let i = 0; i < this._actions.length; i++) {
				this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
			}

			return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
		} // return this mixer's root target object


		getRoot() {
			return this._root;
		} // free all resources specific to a particular clip


		uncacheClip(clip) {
			const actions = this._actions,
						clipUuid = clip.uuid,
						actionsByClip = this._actionsByClip,
						actionsForClip = actionsByClip[clipUuid];

			if (actionsForClip !== undefined) {
				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away
				const actionsToRemove = actionsForClip.knownActions;

				for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
					const action = actionsToRemove[i];

					this._deactivateAction(action);

					const cacheIndex = action._cacheIndex,
								lastInactiveAction = actions[actions.length - 1];
					action._cacheIndex = null;
					action._byClipCacheIndex = null;
					lastInactiveAction._cacheIndex = cacheIndex;
					actions[cacheIndex] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction(action);
				}

				delete actionsByClip[clipUuid];
			}
		} // free all resources specific to a particular root target object


		uncacheRoot(root) {
			const rootUuid = root.uuid,
						actionsByClip = this._actionsByClip;

			for (const clipUuid in actionsByClip) {
				const actionByRoot = actionsByClip[clipUuid].actionByRoot,
							action = actionByRoot[rootUuid];

				if (action !== undefined) {
					this._deactivateAction(action);

					this._removeInactiveAction(action);
				}
			}

			const bindingsByRoot = this._bindingsByRootAndName,
						bindingByName = bindingsByRoot[rootUuid];

			if (bindingByName !== undefined) {
				for (const trackName in bindingByName) {
					const binding = bindingByName[trackName];
					binding.restoreOriginalState();

					this._removeInactiveBinding(binding);
				}
			}
		} // remove a targeted clip from the cache


		uncacheAction(clip, optionalRoot) {
			const action = this.existingAction(clip, optionalRoot);

			if (action !== null) {
				this._deactivateAction(action);

				this._removeInactiveAction(action);
			}
		}

	}

	AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);

	class Uniform {
		constructor(value) {
			if (typeof value === 'string') {
				console.warn('THREE.Uniform: Type parameter is no longer needed.');
				value = arguments[1];
			}

			this.value = value;
		}

		clone() {
			return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
		}

	}

	class InstancedInterleavedBuffer extends InterleavedBuffer {
		constructor(array, stride, meshPerAttribute = 1) {
			super(array, stride);
			this.meshPerAttribute = meshPerAttribute;
		}

		copy(source) {
			super.copy(source);
			this.meshPerAttribute = source.meshPerAttribute;
			return this;
		}

		clone(data) {
			const ib = super.clone(data);
			ib.meshPerAttribute = this.meshPerAttribute;
			return ib;
		}

		toJSON(data) {
			const json = super.toJSON(data);
			json.isInstancedInterleavedBuffer = true;
			json.meshPerAttribute = this.meshPerAttribute;
			return json;
		}

	}

	InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

	class GLBufferAttribute {
		constructor(buffer, type, itemSize, elementSize, count) {
			this.buffer = buffer;
			this.type = type;
			this.itemSize = itemSize;
			this.elementSize = elementSize;
			this.count = count;
			this.version = 0;
		}

		set needsUpdate(value) {
			if (value === true) this.version++;
		}

		setBuffer(buffer) {
			this.buffer = buffer;
			return this;
		}

		setType(type, elementSize) {
			this.type = type;
			this.elementSize = elementSize;
			return this;
		}

		setItemSize(itemSize) {
			this.itemSize = itemSize;
			return this;
		}

		setCount(count) {
			this.count = count;
			return this;
		}

	}

	GLBufferAttribute.prototype.isGLBufferAttribute = true;

	class Raycaster {
		constructor(origin, direction, near = 0, far = Infinity) {
			this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)

			this.near = near;
			this.far = far;
			this.camera = null;
			this.layers = new Layers();
			this.params = {
				Mesh: {},
				Line: {
					threshold: 1
				},
				LOD: {},
				Points: {
					threshold: 1
				},
				Sprite: {}
			};
		}

		set(origin, direction) {
			// direction is assumed to be normalized (for accurate distance calculations)
			this.ray.set(origin, direction);
		}

		setFromCamera(coords, camera) {
			if (camera.isPerspectiveCamera) {
				this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
				this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
				this.camera = camera;
			} else if (camera.isOrthographicCamera) {
				this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera

				this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
				this.camera = camera;
			} else {
				console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
			}
		}

		intersectObject(object, recursive = true, intersects = []) {
			intersectObject(object, this, intersects, recursive);
			intersects.sort(ascSort);
			return intersects;
		}

		intersectObjects(objects, recursive = true, intersects = []) {
			for (let i = 0, l = objects.length; i < l; i++) {
				intersectObject(objects[i], this, intersects, recursive);
			}

			intersects.sort(ascSort);
			return intersects;
		}

	}

	function ascSort(a, b) {
		return a.distance - b.distance;
	}

	function intersectObject(object, raycaster, intersects, recursive) {
		if (object.layers.test(raycaster.layers)) {
			object.raycast(raycaster, intersects);
		}

		if (recursive === true) {
			const children = object.children;

			for (let i = 0, l = children.length; i < l; i++) {
				intersectObject(children[i], raycaster, intersects, true);
			}
		}
	}

	/**
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axis.
	 */

	class Spherical {
		constructor(radius = 1, phi = 0, theta = 0) {
			this.radius = radius;
			this.phi = phi; // polar angle

			this.theta = theta; // azimuthal angle

			return this;
		}

		set(radius, phi, theta) {
			this.radius = radius;
			this.phi = phi;
			this.theta = theta;
			return this;
		}

		copy(other) {
			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;
			return this;
		} // restrict phi to be betwee EPS and PI-EPS


		makeSafe() {
			const EPS = 0.000001;
			this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
			return this;
		}

		setFromVector3(v) {
			return this.setFromCartesianCoords(v.x, v.y, v.z);
		}

		setFromCartesianCoords(x, y, z) {
			this.radius = Math.sqrt(x * x + y * y + z * z);

			if (this.radius === 0) {
				this.theta = 0;
				this.phi = 0;
			} else {
				this.theta = Math.atan2(x, z);
				this.phi = Math.acos(clamp(y / this.radius, -1, 1));
			}

			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	/**
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 */
	class Cylindrical {
		constructor(radius = 1, theta = 0, y = 0) {
			this.radius = radius; // distance from the origin to a point in the x-z plane

			this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis

			this.y = y; // height above the x-z plane

			return this;
		}

		set(radius, theta, y) {
			this.radius = radius;
			this.theta = theta;
			this.y = y;
			return this;
		}

		copy(other) {
			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;
			return this;
		}

		setFromVector3(v) {
			return this.setFromCartesianCoords(v.x, v.y, v.z);
		}

		setFromCartesianCoords(x, y, z) {
			this.radius = Math.sqrt(x * x + z * z);
			this.theta = Math.atan2(x, z);
			this.y = y;
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	const _vector$4 = /*@__PURE__*/new Vector2();

	class Box2 {
		constructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {
			this.min = min;
			this.max = max;
		}

		set(min, max) {
			this.min.copy(min);
			this.max.copy(max);
			return this;
		}

		setFromPoints(points) {
			this.makeEmpty();

			for (let i = 0, il = points.length; i < il; i++) {
				this.expandByPoint(points[i]);
			}

			return this;
		}

		setFromCenterAndSize(center, size) {
			const halfSize = _vector$4.copy(size).multiplyScalar(0.5);

			this.min.copy(center).sub(halfSize);
			this.max.copy(center).add(halfSize);
			return this;
		}

		clone() {
			return new this.constructor().copy(this);
		}

		copy(box) {
			this.min.copy(box.min);
			this.max.copy(box.max);
			return this;
		}

		makeEmpty() {
			this.min.x = this.min.y = +Infinity;
			this.max.x = this.max.y = -Infinity;
			return this;
		}

		isEmpty() {
			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
			return this.max.x < this.min.x || this.max.y < this.min.y;
		}

		getCenter(target) {
			return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
		}

		getSize(target) {
			return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
		}

		expandByPoint(point) {
			this.min.min(point);
			this.max.max(point);
			return this;
		}

		expandByVector(vector) {
			this.min.sub(vector);
			this.max.add(vector);
			return this;
		}

		expandByScalar(scalar) {
			this.min.addScalar(-scalar);
			this.max.addScalar(scalar);
			return this;
		}

		containsPoint(point) {
			return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
		}

		containsBox(box) {
			return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
		}

		getParameter(point, target) {
			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.
			return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
		}

		intersectsBox(box) {
			// using 4 splitting planes to rule out intersections
			return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
		}

		clampPoint(point, target) {
			return target.copy(point).clamp(this.min, this.max);
		}

		distanceToPoint(point) {
			const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);

			return clampedPoint.sub(point).length();
		}

		intersect(box) {
			this.min.max(box.min);
			this.max.min(box.max);
			return this;
		}

		union(box) {
			this.min.min(box.min);
			this.max.max(box.max);
			return this;
		}

		translate(offset) {
			this.min.add(offset);
			this.max.add(offset);
			return this;
		}

		equals(box) {
			return box.min.equals(this.min) && box.max.equals(this.max);
		}

	}

	Box2.prototype.isBox2 = true;

	const _startP = /*@__PURE__*/new Vector3();

	const _startEnd = /*@__PURE__*/new Vector3();

	class Line3 {
		constructor(start = new Vector3(), end = new Vector3()) {
			this.start = start;
			this.end = end;
		}

		set(start, end) {
			this.start.copy(start);
			this.end.copy(end);
			return this;
		}

		copy(line) {
			this.start.copy(line.start);
			this.end.copy(line.end);
			return this;
		}

		getCenter(target) {
			return target.addVectors(this.start, this.end).multiplyScalar(0.5);
		}

		delta(target) {
			return target.subVectors(this.end, this.start);
		}

		distanceSq() {
			return this.start.distanceToSquared(this.end);
		}

		distance() {
			return this.start.distanceTo(this.end);
		}

		at(t, target) {
			return this.delta(target).multiplyScalar(t).add(this.start);
		}

		closestPointToPointParameter(point, clampToLine) {
			_startP.subVectors(point, this.start);

			_startEnd.subVectors(this.end, this.start);

			const startEnd2 = _startEnd.dot(_startEnd);

			const startEnd_startP = _startEnd.dot(_startP);

			let t = startEnd_startP / startEnd2;

			if (clampToLine) {
				t = clamp(t, 0, 1);
			}

			return t;
		}

		closestPointToPoint(point, clampToLine, target) {
			const t = this.closestPointToPointParameter(point, clampToLine);
			return this.delta(target).multiplyScalar(t).add(this.start);
		}

		applyMatrix4(matrix) {
			this.start.applyMatrix4(matrix);
			this.end.applyMatrix4(matrix);
			return this;
		}

		equals(line) {
			return line.start.equals(this.start) && line.end.equals(this.end);
		}

		clone() {
			return new this.constructor().copy(this);
		}

	}

	const _vector$3 = /*@__PURE__*/new Vector3();

	class SpotLightHelper extends Object3D {
		constructor(light, color) {
			super();
			this.light = light;
			this.light.updateMatrixWorld();
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.color = color;
			const geometry = new BufferGeometry();
			const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];

			for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
				const p1 = i / l * Math.PI * 2;
				const p2 = j / l * Math.PI * 2;
				positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
			}

			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
			const material = new LineBasicMaterial({
				fog: false,
				toneMapped: false
			});
			this.cone = new LineSegments(geometry, material);
			this.add(this.cone);
			this.update();
		}

		dispose() {
			this.cone.geometry.dispose();
			this.cone.material.dispose();
		}

		update() {
			this.light.updateMatrixWorld();
			const coneLength = this.light.distance ? this.light.distance : 1000;
			const coneWidth = coneLength * Math.tan(this.light.angle);
			this.cone.scale.set(coneWidth, coneWidth, coneLength);

			_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);

			this.cone.lookAt(_vector$3);

			if (this.color !== undefined) {
				this.cone.material.color.set(this.color);
			} else {
				this.cone.material.color.copy(this.light.color);
			}
		}

	}

	const _vector$2 = /*@__PURE__*/new Vector3();

	const _boneMatrix = /*@__PURE__*/new Matrix4();

	const _matrixWorldInv = /*@__PURE__*/new Matrix4();

	class SkeletonHelper extends LineSegments {
		constructor(object) {
			const bones = getBoneList(object);
			const geometry = new BufferGeometry();
			const vertices = [];
			const colors = [];
			const color1 = new Color(0, 0, 1);
			const color2 = new Color(0, 1, 0);

			for (let i = 0; i < bones.length; i++) {
				const bone = bones[i];

				if (bone.parent && bone.parent.isBone) {
					vertices.push(0, 0, 0);
					vertices.push(0, 0, 0);
					colors.push(color1.r, color1.g, color1.b);
					colors.push(color2.r, color2.g, color2.b);
				}
			}

			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				depthTest: false,
				depthWrite: false,
				toneMapped: false,
				transparent: true
			});
			super(geometry, material);
			this.type = 'SkeletonHelper';
			this.isSkeletonHelper = true;
			this.root = object;
			this.bones = bones;
			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;
		}

		updateMatrixWorld(force) {
			const bones = this.bones;
			const geometry = this.geometry;
			const position = geometry.getAttribute('position');

			_matrixWorldInv.copy(this.root.matrixWorld).invert();

			for (let i = 0, j = 0; i < bones.length; i++) {
				const bone = bones[i];

				if (bone.parent && bone.parent.isBone) {
					_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);

					_vector$2.setFromMatrixPosition(_boneMatrix);

					position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);

					_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);

					_vector$2.setFromMatrixPosition(_boneMatrix);

					position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
					j += 2;
				}
			}

			geometry.getAttribute('position').needsUpdate = true;
			super.updateMatrixWorld(force);
		}

	}

	function getBoneList(object) {
		const boneList = [];

		if (object.isBone === true) {
			boneList.push(object);
		}

		for (let i = 0; i < object.children.length; i++) {
			boneList.push.apply(boneList, getBoneList(object.children[i]));
		}

		return boneList;
	}

	class PointLightHelper extends Mesh {
		constructor(light, sphereSize, color) {
			const geometry = new SphereGeometry(sphereSize, 4, 2);
			const material = new MeshBasicMaterial({
				wireframe: true,
				fog: false,
				toneMapped: false
			});
			super(geometry, material);
			this.light = light;
			this.light.updateMatrixWorld();
			this.color = color;
			this.type = 'PointLightHelper';
			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.update();
			/*
			// TODO: delete this comment?
			const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
			const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
			const d = light.distance;
			if ( d === 0.0 ) {
				this.lightDistance.visible = false;
			} else {
				this.lightDistance.scale.set( d, d, d );
			}
			this.add( this.lightDistance );
			*/
		}

		dispose() {
			this.geometry.dispose();
			this.material.dispose();
		}

		update() {
			if (this.color !== undefined) {
				this.material.color.set(this.color);
			} else {
				this.material.color.copy(this.light.color);
			}
			/*
			const d = this.light.distance;
				if ( d === 0.0 ) {
					this.lightDistance.visible = false;
				} else {
					this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );
				}
			*/

		}

	}

	const _vector$1 = /*@__PURE__*/new Vector3();

	const _color1 = /*@__PURE__*/new Color();

	const _color2 = /*@__PURE__*/new Color();

	class HemisphereLightHelper extends Object3D {
		constructor(light, size, color) {
			super();
			this.light = light;
			this.light.updateMatrixWorld();
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.color = color;
			const geometry = new OctahedronGeometry(size);
			geometry.rotateY(Math.PI * 0.5);
			this.material = new MeshBasicMaterial({
				wireframe: true,
				fog: false,
				toneMapped: false
			});
			if (this.color === undefined) this.material.vertexColors = true;
			const position = geometry.getAttribute('position');
			const colors = new Float32Array(position.count * 3);
			geometry.setAttribute('color', new BufferAttribute(colors, 3));
			this.add(new Mesh(geometry, this.material));
			this.update();
		}

		dispose() {
			this.children[0].geometry.dispose();
			this.children[0].material.dispose();
		}

		update() {
			const mesh = this.children[0];

			if (this.color !== undefined) {
				this.material.color.set(this.color);
			} else {
				const colors = mesh.geometry.getAttribute('color');

				_color1.copy(this.light.color);

				_color2.copy(this.light.groundColor);

				for (let i = 0, l = colors.count; i < l; i++) {
					const color = i < l / 2 ? _color1 : _color2;
					colors.setXYZ(i, color.r, color.g, color.b);
				}

				colors.needsUpdate = true;
			}

			mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
		}

	}

	class GridHelper extends LineSegments {
		constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {
			color1 = new Color(color1);
			color2 = new Color(color2);
			const center = divisions / 2;
			const step = size / divisions;
			const halfSize = size / 2;
			const vertices = [],
						colors = [];

			for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
				vertices.push(-halfSize, 0, k, halfSize, 0, k);
				vertices.push(k, 0, -halfSize, k, 0, halfSize);
				const color = i === center ? color1 : color2;
				color.toArray(colors, j);
				j += 3;
				color.toArray(colors, j);
				j += 3;
				color.toArray(colors, j);
				j += 3;
				color.toArray(colors, j);
				j += 3;
			}

			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				toneMapped: false
			});
			super(geometry, material);
			this.type = 'GridHelper';
		}

	}

	class PolarGridHelper extends LineSegments {
		constructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {
			color1 = new Color(color1);
			color2 = new Color(color2);
			const vertices = [];
			const colors = []; // create the radials

			for (let i = 0; i <= radials; i++) {
				const v = i / radials * (Math.PI * 2);
				const x = Math.sin(v) * radius;
				const z = Math.cos(v) * radius;
				vertices.push(0, 0, 0);
				vertices.push(x, 0, z);
				const color = i & 1 ? color1 : color2;
				colors.push(color.r, color.g, color.b);
				colors.push(color.r, color.g, color.b);
			} // create the circles


			for (let i = 0; i <= circles; i++) {
				const color = i & 1 ? color1 : color2;
				const r = radius - radius / circles * i;

				for (let j = 0; j < divisions; j++) {
					// first vertex
					let v = j / divisions * (Math.PI * 2);
					let x = Math.sin(v) * r;
					let z = Math.cos(v) * r;
					vertices.push(x, 0, z);
					colors.push(color.r, color.g, color.b); // second vertex

					v = (j + 1) / divisions * (Math.PI * 2);
					x = Math.sin(v) * r;
					z = Math.cos(v) * r;
					vertices.push(x, 0, z);
					colors.push(color.r, color.g, color.b);
				}
			}

			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				toneMapped: false
			});
			super(geometry, material);
			this.type = 'PolarGridHelper';
		}

	}

	const _v1 = /*@__PURE__*/new Vector3();

	const _v2 = /*@__PURE__*/new Vector3();

	const _v3 = /*@__PURE__*/new Vector3();

	class DirectionalLightHelper extends Object3D {
		constructor(light, size, color) {
			super();
			this.light = light;
			this.light.updateMatrixWorld();
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
			this.color = color;
			if (size === undefined) size = 1;
			let geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));
			const material = new LineBasicMaterial({
				fog: false,
				toneMapped: false
			});
			this.lightPlane = new Line(geometry, material);
			this.add(this.lightPlane);
			geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
			this.targetLine = new Line(geometry, material);
			this.add(this.targetLine);
			this.update();
		}

		dispose() {
			this.lightPlane.geometry.dispose();
			this.lightPlane.material.dispose();
			this.targetLine.geometry.dispose();
			this.targetLine.material.dispose();
		}

		update() {
			_v1.setFromMatrixPosition(this.light.matrixWorld);

			_v2.setFromMatrixPosition(this.light.target.matrixWorld);

			_v3.subVectors(_v2, _v1);

			this.lightPlane.lookAt(_v2);

			if (this.color !== undefined) {
				this.lightPlane.material.color.set(this.color);
				this.targetLine.material.color.set(this.color);
			} else {
				this.lightPlane.material.color.copy(this.light.color);
				this.targetLine.material.color.copy(this.light.color);
			}

			this.targetLine.lookAt(_v2);
			this.targetLine.scale.z = _v3.length();
		}

	}

	const _vector = /*@__PURE__*/new Vector3();

	const _camera = /*@__PURE__*/new Camera();
	/**
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
	 */


	class CameraHelper extends LineSegments {
		constructor(camera) {
			const geometry = new BufferGeometry();
			const material = new LineBasicMaterial({
				color: 0xffffff,
				vertexColors: true,
				toneMapped: false
			});
			const vertices = [];
			const colors = [];
			const pointMap = {}; // colors

			const colorFrustum = new Color(0xffaa00);
			const colorCone = new Color(0xff0000);
			const colorUp = new Color(0x00aaff);
			const colorTarget = new Color(0xffffff);
			const colorCross = new Color(0x333333); // near

			addLine('n1', 'n2', colorFrustum);
			addLine('n2', 'n4', colorFrustum);
			addLine('n4', 'n3', colorFrustum);
			addLine('n3', 'n1', colorFrustum); // far

			addLine('f1', 'f2', colorFrustum);
			addLine('f2', 'f4', colorFrustum);
			addLine('f4', 'f3', colorFrustum);
			addLine('f3', 'f1', colorFrustum); // sides

			addLine('n1', 'f1', colorFrustum);
			addLine('n2', 'f2', colorFrustum);
			addLine('n3', 'f3', colorFrustum);
			addLine('n4', 'f4', colorFrustum); // cone

			addLine('p', 'n1', colorCone);
			addLine('p', 'n2', colorCone);
			addLine('p', 'n3', colorCone);
			addLine('p', 'n4', colorCone); // up

			addLine('u1', 'u2', colorUp);
			addLine('u2', 'u3', colorUp);
			addLine('u3', 'u1', colorUp); // target

			addLine('c', 't', colorTarget);
			addLine('p', 'c', colorCross); // cross

			addLine('cn1', 'cn2', colorCross);
			addLine('cn3', 'cn4', colorCross);
			addLine('cf1', 'cf2', colorCross);
			addLine('cf3', 'cf4', colorCross);

			function addLine(a, b, color) {
				addPoint(a, color);
				addPoint(b, color);
			}

			function addPoint(id, color) {
				vertices.push(0, 0, 0);
				colors.push(color.r, color.g, color.b);

				if (pointMap[id] === undefined) {
					pointMap[id] = [];
				}

				pointMap[id].push(vertices.length / 3 - 1);
			}

			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			super(geometry, material);
			this.type = 'CameraHelper';
			this.camera = camera;
			if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;
			this.pointMap = pointMap;
			this.update();
		}

		update() {
			const geometry = this.geometry;
			const pointMap = this.pointMap;
			const w = 1,
						h = 1; // we need just camera projection matrix inverse
			// world matrix must be identity

			_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target


			setPoint('c', pointMap, geometry, _camera, 0, 0, -1);
			setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near

			setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);
			setPoint('n2', pointMap, geometry, _camera, w, -h, -1);
			setPoint('n3', pointMap, geometry, _camera, -w, h, -1);
			setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far

			setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);
			setPoint('f2', pointMap, geometry, _camera, w, -h, 1);
			setPoint('f3', pointMap, geometry, _camera, -w, h, 1);
			setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up

			setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
			setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
			setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross

			setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);
			setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);
			setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);
			setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);
			setPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);
			setPoint('cn2', pointMap, geometry, _camera, w, 0, -1);
			setPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);
			setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);
			geometry.getAttribute('position').needsUpdate = true;
		}

		dispose() {
			this.geometry.dispose();
			this.material.dispose();
		}

	}

	function setPoint(point, pointMap, geometry, camera, x, y, z) {
		_vector.set(x, y, z).unproject(camera);

		const points = pointMap[point];

		if (points !== undefined) {
			const position = geometry.getAttribute('position');

			for (let i = 0, l = points.length; i < l; i++) {
				position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
			}
		}
	}

	const _box = /*@__PURE__*/new Box3();

	class BoxHelper extends LineSegments {
		constructor(object, color = 0xffff00) {
			const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
			const positions = new Float32Array(8 * 3);
			const geometry = new BufferGeometry();
			geometry.setIndex(new BufferAttribute(indices, 1));
			geometry.setAttribute('position', new BufferAttribute(positions, 3));
			super(geometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.object = object;
			this.type = 'BoxHelper';
			this.matrixAutoUpdate = false;
			this.update();
		}

		update(object) {
			if (object !== undefined) {
				console.warn('THREE.BoxHelper: .update() has no longer arguments.');
			}

			if (this.object !== undefined) {
				_box.setFromObject(this.object);
			}

			if (_box.isEmpty()) return;
			const min = _box.min;
			const max = _box.max;
			/*
				5____4
			1/___0/|
			| 6__|_7
			2/___3/
				0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			const position = this.geometry.attributes.position;
			const array = position.array;
			array[0] = max.x;
			array[1] = max.y;
			array[2] = max.z;
			array[3] = min.x;
			array[4] = max.y;
			array[5] = max.z;
			array[6] = min.x;
			array[7] = min.y;
			array[8] = max.z;
			array[9] = max.x;
			array[10] = min.y;
			array[11] = max.z;
			array[12] = max.x;
			array[13] = max.y;
			array[14] = min.z;
			array[15] = min.x;
			array[16] = max.y;
			array[17] = min.z;
			array[18] = min.x;
			array[19] = min.y;
			array[20] = min.z;
			array[21] = max.x;
			array[22] = min.y;
			array[23] = min.z;
			position.needsUpdate = true;
			this.geometry.computeBoundingSphere();
		}

		setFromObject(object) {
			this.object = object;
			this.update();
			return this;
		}

		copy(source) {
			LineSegments.prototype.copy.call(this, source);
			this.object = source.object;
			return this;
		}

	}

	class Box3Helper extends LineSegments {
		constructor(box, color = 0xffff00) {
			const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
			const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
			const geometry = new BufferGeometry();
			geometry.setIndex(new BufferAttribute(indices, 1));
			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
			super(geometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.box = box;
			this.type = 'Box3Helper';
			this.geometry.computeBoundingSphere();
		}

		updateMatrixWorld(force) {
			const box = this.box;
			if (box.isEmpty()) return;
			box.getCenter(this.position);
			box.getSize(this.scale);
			this.scale.multiplyScalar(0.5);
			super.updateMatrixWorld(force);
		}

	}

	class PlaneHelper extends Line {
		constructor(plane, size = 1, hex = 0xffff00) {
			const color = hex;
			const positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
			geometry.computeBoundingSphere();
			super(geometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.type = 'PlaneHelper';
			this.plane = plane;
			this.size = size;
			const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
			const geometry2 = new BufferGeometry();
			geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));
			geometry2.computeBoundingSphere();
			this.add(new Mesh(geometry2, new MeshBasicMaterial({
				color: color,
				opacity: 0.2,
				transparent: true,
				depthWrite: false,
				toneMapped: false
			})));
		}

		updateMatrixWorld(force) {
			let scale = -this.plane.constant;
			if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter

			this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
			this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

			this.lookAt(this.plane.normal);
			super.updateMatrixWorld(force);
		}

	}

	const _axis = /*@__PURE__*/new Vector3();

	let _lineGeometry, _coneGeometry;

	class ArrowHelper extends Object3D {
		// dir is assumed to be normalized
		constructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {
			super();
			this.type = 'ArrowHelper';

			if (_lineGeometry === undefined) {
				_lineGeometry = new BufferGeometry();

				_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));

				_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);

				_coneGeometry.translate(0, -0.5, 0);
			}

			this.position.copy(origin);
			this.line = new Line(_lineGeometry, new LineBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.line.matrixAutoUpdate = false;
			this.add(this.line);
			this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
				color: color,
				toneMapped: false
			}));
			this.cone.matrixAutoUpdate = false;
			this.add(this.cone);
			this.setDirection(dir);
			this.setLength(length, headLength, headWidth);
		}

		setDirection(dir) {
			// dir is assumed to be normalized
			if (dir.y > 0.99999) {
				this.quaternion.set(0, 0, 0, 1);
			} else if (dir.y < -0.99999) {
				this.quaternion.set(1, 0, 0, 0);
			} else {
				_axis.set(dir.z, 0, -dir.x).normalize();

				const radians = Math.acos(dir.y);
				this.quaternion.setFromAxisAngle(_axis, radians);
			}
		}

		setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
			this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458

			this.line.updateMatrix();
			this.cone.scale.set(headWidth, headLength, headWidth);
			this.cone.position.y = length;
			this.cone.updateMatrix();
		}

		setColor(color) {
			this.line.material.color.set(color);
			this.cone.material.color.set(color);
		}

		copy(source) {
			super.copy(source, false);
			this.line.copy(source.line);
			this.cone.copy(source.cone);
			return this;
		}

	}

	class AxesHelper extends LineSegments {
		constructor(size = 1) {
			const vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];
			const colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];
			const geometry = new BufferGeometry();
			geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
			geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
			const material = new LineBasicMaterial({
				vertexColors: true,
				toneMapped: false
			});
			super(geometry, material);
			this.type = 'AxesHelper';
		}

		setColors(xAxisColor, yAxisColor, zAxisColor) {
			const color = new Color();
			const array = this.geometry.attributes.color.array;
			color.set(xAxisColor);
			color.toArray(array, 0);
			color.toArray(array, 3);
			color.set(yAxisColor);
			color.toArray(array, 6);
			color.toArray(array, 9);
			color.set(zAxisColor);
			color.toArray(array, 12);
			color.toArray(array, 15);
			this.geometry.attributes.color.needsUpdate = true;
			return this;
		}

		dispose() {
			this.geometry.dispose();
			this.material.dispose();
		}

	}

	class ShapePath {
		constructor() {
			this.type = 'ShapePath';
			this.color = new Color();
			this.subPaths = [];
			this.currentPath = null;
		}

		moveTo(x, y) {
			this.currentPath = new Path();
			this.subPaths.push(this.currentPath);
			this.currentPath.moveTo(x, y);
			return this;
		}

		lineTo(x, y) {
			this.currentPath.lineTo(x, y);
			return this;
		}

		quadraticCurveTo(aCPx, aCPy, aX, aY) {
			this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
			return this;
		}

		bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
			this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
			return this;
		}

		splineThru(pts) {
			this.currentPath.splineThru(pts);
			return this;
		}

		toShapes(isCCW, noHoles) {
			function toShapesNoHoles(inSubpaths) {
				const shapes = [];

				for (let i = 0, l = inSubpaths.length; i < l; i++) {
					const tmpPath = inSubpaths[i];
					const tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push(tmpShape);
				}

				return shapes;
			}

			function isPointInsidePolygon(inPt, inPolygon) {
				const polyLen = inPolygon.length; // inPt on polygon contour => immediate success		or
				// toggling of inside/outside at every single! intersection point of an edge
				//	with the horizontal line through inPt, left of inPt
				//	not counting lowerY endpoints of edges and whole edges on that line

				let inside = false;

				for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
					let edgeLowPt = inPolygon[p];
					let edgeHighPt = inPolygon[q];
					let edgeDx = edgeHighPt.x - edgeLowPt.x;
					let edgeDy = edgeHighPt.y - edgeLowPt.y;

					if (Math.abs(edgeDy) > Number.EPSILON) {
						// not parallel
						if (edgeDy < 0) {
							edgeLowPt = inPolygon[q];
							edgeDx = -edgeDx;
							edgeHighPt = inPolygon[p];
							edgeDy = -edgeDy;
						}

						if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;

						if (inPt.y === edgeLowPt.y) {
							if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!
						} else {
							const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
							if (perpEdge === 0) return true; // inPt is on contour ?

							if (perpEdge < 0) continue;
							inside = !inside; // true intersection left of inPt
						}
					} else {
						// parallel or collinear
						if (inPt.y !== edgeLowPt.y) continue; // parallel
						// edge lies on the same horizontal line as inPt

						if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
						// continue;
					}
				}

				return inside;
			}

			const isClockWise = ShapeUtils.isClockWise;
			const subPaths = this.subPaths;
			if (subPaths.length === 0) return [];
			if (noHoles === true) return toShapesNoHoles(subPaths);
			let solid, tmpPath, tmpShape;
			const shapes = [];

			if (subPaths.length === 1) {
				tmpPath = subPaths[0];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push(tmpShape);
				return shapes;
			}

			let holesFirst = !isClockWise(subPaths[0].getPoints());
			holesFirst = isCCW ? !holesFirst : holesFirst; // console.log("Holes first", holesFirst);

			const betterShapeHoles = [];
			const newShapes = [];
			let newShapeHoles = [];
			let mainIdx = 0;
			let tmpPoints;
			newShapes[mainIdx] = undefined;
			newShapeHoles[mainIdx] = [];

			for (let i = 0, l = subPaths.length; i < l; i++) {
				tmpPath = subPaths[i];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise(tmpPoints);
				solid = isCCW ? !solid : solid;

				if (solid) {
					if (!holesFirst && newShapes[mainIdx]) mainIdx++;
					newShapes[mainIdx] = {
						s: new Shape(),
						p: tmpPoints
					};
					newShapes[mainIdx].s.curves = tmpPath.curves;
					if (holesFirst) mainIdx++;
					newShapeHoles[mainIdx] = []; //console.log('cw', i);
				} else {
					newShapeHoles[mainIdx].push({
						h: tmpPath,
						p: tmpPoints[0]
					}); //console.log('ccw', i);
				}
			} // only Holes? -> probably all Shapes with wrong orientation


			if (!newShapes[0]) return toShapesNoHoles(subPaths);

			if (newShapes.length > 1) {
				let ambiguous = false;
				let toChange = 0;

				for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
					betterShapeHoles[sIdx] = [];
				}

				for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
					const sho = newShapeHoles[sIdx];

					for (let hIdx = 0; hIdx < sho.length; hIdx++) {
						const ho = sho[hIdx];
						let hole_unassigned = true;

						for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
							if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
								if (sIdx !== s2Idx) toChange++;

								if (hole_unassigned) {
									hole_unassigned = false;
									betterShapeHoles[s2Idx].push(ho);
								} else {
									ambiguous = true;
								}
							}
						}

						if (hole_unassigned) {
							betterShapeHoles[sIdx].push(ho);
						}
					}
				}

				if (toChange > 0 && ambiguous === false) {
					newShapeHoles = betterShapeHoles;
				}
			}

			let tmpHoles;

			for (let i = 0, il = newShapes.length; i < il; i++) {
				tmpShape = newShapes[i].s;
				shapes.push(tmpShape);
				tmpHoles = newShapeHoles[i];

				for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
					tmpShape.holes.push(tmpHoles[j].h);
				}
			} //console.log("shape", shapes);


			return shapes;
		}

	}

	const _floatView = new Float32Array(1);

	const _int32View = new Int32Array(_floatView.buffer);

	class DataUtils {
		// Converts float32 to float16 (stored as uint16 value).
		static toHalfFloat(val) {
			if (val > 65504) {
				console.warn('THREE.DataUtils.toHalfFloat(): value exceeds 65504.');
				val = 65504; // maximum representable value in float16
			} // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410

			/* This method is faster than the OpenEXR implementation (very often
			* used, eg. in Ogre), with the additional benefit of rounding, inspired
			* by James Tursa?s half-precision code. */


			_floatView[0] = val;
			const x = _int32View[0];
			let bits = x >> 16 & 0x8000;
			/* Get the sign */

			let m = x >> 12 & 0x07ff;
			/* Keep one extra bit for rounding */

			const e = x >> 23 & 0xff;
			/* Using int is faster here */

			/* If zero, or denormal, or exponent underflows too much for a denormal
				* half, return signed zero. */

			if (e < 103) return bits;
			/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */

			if (e > 142) {
				bits |= 0x7c00;
				/* If exponent was 0xff and one mantissa bit was set, it means NaN,
							* not Inf, so make sure we set one mantissa bit too. */

				bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
				return bits;
			}
			/* If exponent underflows but not too much, return a denormal */


			if (e < 113) {
				m |= 0x0800;
				/* Extra rounding may overflow and set mantissa to 0 and exponent
					* to 1, which is OK. */

				bits |= (m >> 114 - e) + (m >> 113 - e & 1);
				return bits;
			}

			bits |= e - 112 << 10 | m >> 1;
			/* Extra rounding. An overflow will set mantissa to 0 and increment
				* the exponent, which is OK. */

			bits += m & 1;
			return bits;
		}

	}

	const LineStrip = 0;
	const LinePieces = 1;
	const NoColors = 0;
	const FaceColors = 1;
	const VertexColors = 2;
	function MeshFaceMaterial(materials) {
		console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');
		return materials;
	}
	function MultiMaterial(materials = []) {
		console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');
		materials.isMultiMaterial = true;
		materials.materials = materials;

		materials.clone = function () {
			return materials.slice();
		};

		return materials;
	}
	function PointCloud(geometry, material) {
		console.warn('THREE.PointCloud has been renamed to THREE.Points.');
		return new Points(geometry, material);
	}
	function Particle(material) {
		console.warn('THREE.Particle has been renamed to THREE.Sprite.');
		return new Sprite(material);
	}
	function ParticleSystem(geometry, material) {
		console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
		return new Points(geometry, material);
	}
	function PointCloudMaterial(parameters) {
		console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
		return new PointsMaterial(parameters);
	}
	function ParticleBasicMaterial(parameters) {
		console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
		return new PointsMaterial(parameters);
	}
	function ParticleSystemMaterial(parameters) {
		console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
		return new PointsMaterial(parameters);
	}
	function Vertex(x, y, z) {
		console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
		return new Vector3(x, y, z);
	} //

	function DynamicBufferAttribute(array, itemSize) {
		console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');
		return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);
	}
	function Int8Attribute(array, itemSize) {
		console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
		return new Int8BufferAttribute(array, itemSize);
	}
	function Uint8Attribute(array, itemSize) {
		console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
		return new Uint8BufferAttribute(array, itemSize);
	}
	function Uint8ClampedAttribute(array, itemSize) {
		console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
		return new Uint8ClampedBufferAttribute(array, itemSize);
	}
	function Int16Attribute(array, itemSize) {
		console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
		return new Int16BufferAttribute(array, itemSize);
	}
	function Uint16Attribute(array, itemSize) {
		console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
		return new Uint16BufferAttribute(array, itemSize);
	}
	function Int32Attribute(array, itemSize) {
		console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
		return new Int32BufferAttribute(array, itemSize);
	}
	function Uint32Attribute(array, itemSize) {
		console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
		return new Uint32BufferAttribute(array, itemSize);
	}
	function Float32Attribute(array, itemSize) {
		console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
		return new Float32BufferAttribute(array, itemSize);
	}
	function Float64Attribute(array, itemSize) {
		console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
		return new Float64BufferAttribute(array, itemSize);
	} //

	Curve.create = function (construct, getPoint) {
		console.log('THREE.Curve.create() has been deprecated');
		construct.prototype = Object.create(Curve.prototype);
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;
		return construct;
	}; //


	Path.prototype.fromPoints = function (points) {
		console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');
		return this.setFromPoints(points);
	}; //


	function AxisHelper(size) {
		console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');
		return new AxesHelper(size);
	}
	function BoundingBoxHelper(object, color) {
		console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
		return new BoxHelper(object, color);
	}
	function EdgesHelper(object, hex) {
		console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
		return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
			color: hex !== undefined ? hex : 0xffffff
		}));
	}

	GridHelper.prototype.setColors = function () {
		console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
	};

	SkeletonHelper.prototype.update = function () {
		console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
	};

	function WireframeHelper(object, hex) {
		console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
		return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
			color: hex !== undefined ? hex : 0xffffff
		}));
	} //

	Loader.prototype.extractUrlBase = function (url) {
		console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');
		return LoaderUtils.extractUrlBase(url);
	};

	Loader.Handlers = {
		add: function
			/* regex, loader */
		() {
			console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');
		},
		get: function
			/* file */
		() {
			console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');
		}
	};
	function XHRLoader(manager) {
		console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
		return new FileLoader(manager);
	}
	function BinaryTextureLoader(manager) {
		console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
		return new DataTextureLoader(manager);
	} //

	Box2.prototype.center = function (optionalTarget) {
		console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
		return this.getCenter(optionalTarget);
	};

	Box2.prototype.empty = function () {
		console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
		return this.isEmpty();
	};

	Box2.prototype.isIntersectionBox = function (box) {
		console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
		return this.intersectsBox(box);
	};

	Box2.prototype.size = function (optionalTarget) {
		console.warn('THREE.Box2: .size() has been renamed to .getSize().');
		return this.getSize(optionalTarget);
	}; //


	Box3.prototype.center = function (optionalTarget) {
		console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
		return this.getCenter(optionalTarget);
	};

	Box3.prototype.empty = function () {
		console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
		return this.isEmpty();
	};

	Box3.prototype.isIntersectionBox = function (box) {
		console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
		return this.intersectsBox(box);
	};

	Box3.prototype.isIntersectionSphere = function (sphere) {
		console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
		return this.intersectsSphere(sphere);
	};

	Box3.prototype.size = function (optionalTarget) {
		console.warn('THREE.Box3: .size() has been renamed to .getSize().');
		return this.getSize(optionalTarget);
	}; //


	Euler.prototype.toVector3 = function () {
		console.error('THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead');
	}; //


	Sphere.prototype.empty = function () {
		console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');
		return this.isEmpty();
	}; //


	Frustum.prototype.setFromMatrix = function (m) {
		console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');
		return this.setFromProjectionMatrix(m);
	}; //


	Line3.prototype.center = function (optionalTarget) {
		console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
		return this.getCenter(optionalTarget);
	}; //


	Matrix3.prototype.flattenToArrayOffset = function (array, offset) {
		console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
		return this.toArray(array, offset);
	};

	Matrix3.prototype.multiplyVector3 = function (vector) {
		console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
		return vector.applyMatrix3(this);
	};

	Matrix3.prototype.multiplyVector3Array = function
		/* a */
	() {
		console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
	};

	Matrix3.prototype.applyToBufferAttribute = function (attribute) {
		console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');
		return attribute.applyMatrix3(this);
	};

	Matrix3.prototype.applyToVector3Array = function
		/* array, offset, length */
	() {
		console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
	};

	Matrix3.prototype.getInverse = function (matrix) {
		console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
		return this.copy(matrix).invert();
	}; //


	Matrix4.prototype.extractPosition = function (m) {
		console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
		return this.copyPosition(m);
	};

	Matrix4.prototype.flattenToArrayOffset = function (array, offset) {
		console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
		return this.toArray(array, offset);
	};

	Matrix4.prototype.getPosition = function () {
		console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
		return new Vector3().setFromMatrixColumn(this, 3);
	};

	Matrix4.prototype.setRotationFromQuaternion = function (q) {
		console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
		return this.makeRotationFromQuaternion(q);
	};

	Matrix4.prototype.multiplyToArray = function () {
		console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
	};

	Matrix4.prototype.multiplyVector3 = function (vector) {
		console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
		return vector.applyMatrix4(this);
	};

	Matrix4.prototype.multiplyVector4 = function (vector) {
		console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
		return vector.applyMatrix4(this);
	};

	Matrix4.prototype.multiplyVector3Array = function
		/* a */
	() {
		console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
	};

	Matrix4.prototype.rotateAxis = function (v) {
		console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
		v.transformDirection(this);
	};

	Matrix4.prototype.crossVector = function (vector) {
		console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
		return vector.applyMatrix4(this);
	};

	Matrix4.prototype.translate = function () {
		console.error('THREE.Matrix4: .translate() has been removed.');
	};

	Matrix4.prototype.rotateX = function () {
		console.error('THREE.Matrix4: .rotateX() has been removed.');
	};

	Matrix4.prototype.rotateY = function () {
		console.error('THREE.Matrix4: .rotateY() has been removed.');
	};

	Matrix4.prototype.rotateZ = function () {
		console.error('THREE.Matrix4: .rotateZ() has been removed.');
	};

	Matrix4.prototype.rotateByAxis = function () {
		console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
	};

	Matrix4.prototype.applyToBufferAttribute = function (attribute) {
		console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');
		return attribute.applyMatrix4(this);
	};

	Matrix4.prototype.applyToVector3Array = function
		/* array, offset, length */
	() {
		console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
	};

	Matrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {
		console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
		return this.makePerspective(left, right, top, bottom, near, far);
	};

	Matrix4.prototype.getInverse = function (matrix) {
		console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
		return this.copy(matrix).invert();
	}; //


	Plane.prototype.isIntersectionLine = function (line) {
		console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
		return this.intersectsLine(line);
	}; //


	Quaternion.prototype.multiplyVector3 = function (vector) {
		console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
		return vector.applyQuaternion(this);
	};

	Quaternion.prototype.inverse = function () {
		console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');
		return this.invert();
	}; //


	Ray.prototype.isIntersectionBox = function (box) {
		console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
		return this.intersectsBox(box);
	};

	Ray.prototype.isIntersectionPlane = function (plane) {
		console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
		return this.intersectsPlane(plane);
	};

	Ray.prototype.isIntersectionSphere = function (sphere) {
		console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
		return this.intersectsSphere(sphere);
	}; //


	Triangle.prototype.area = function () {
		console.warn('THREE.Triangle: .area() has been renamed to .getArea().');
		return this.getArea();
	};

	Triangle.prototype.barycoordFromPoint = function (point, target) {
		console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
		return this.getBarycoord(point, target);
	};

	Triangle.prototype.midpoint = function (target) {
		console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');
		return this.getMidpoint(target);
	};

	Triangle.prototypenormal = function (target) {
		console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
		return this.getNormal(target);
	};

	Triangle.prototype.plane = function (target) {
		console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');
		return this.getPlane(target);
	};

	Triangle.barycoordFromPoint = function (point, a, b, c, target) {
		console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
		return Triangle.getBarycoord(point, a, b, c, target);
	};

	Triangle.normal = function (a, b, c, target) {
		console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
		return Triangle.getNormal(a, b, c, target);
	}; //


	Shape.prototype.extractAllPoints = function (divisions) {
		console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');
		return this.extractPoints(divisions);
	};

	Shape.prototype.extrude = function (options) {
		console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
		return new ExtrudeGeometry(this, options);
	};

	Shape.prototype.makeGeometry = function (options) {
		console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
		return new ShapeGeometry(this, options);
	}; //


	Vector2.prototype.fromAttribute = function (attribute, index, offset) {
		console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
		return this.fromBufferAttribute(attribute, index, offset);
	};

	Vector2.prototype.distanceToManhattan = function (v) {
		console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
		return this.manhattanDistanceTo(v);
	};

	Vector2.prototype.lengthManhattan = function () {
		console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');
		return this.manhattanLength();
	}; //


	Vector3.prototype.setEulerFromRotationMatrix = function () {
		console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
	};

	Vector3.prototype.setEulerFromQuaternion = function () {
		console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
	};

	Vector3.prototype.getPositionFromMatrix = function (m) {
		console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
		return this.setFromMatrixPosition(m);
	};

	Vector3.prototype.getScaleFromMatrix = function (m) {
		console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
		return this.setFromMatrixScale(m);
	};

	Vector3.prototype.getColumnFromMatrix = function (index, matrix) {
		console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
		return this.setFromMatrixColumn(matrix, index);
	};

	Vector3.prototype.applyProjection = function (m) {
		console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
		return this.applyMatrix4(m);
	};

	Vector3.prototype.fromAttribute = function (attribute, index, offset) {
		console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
		return this.fromBufferAttribute(attribute, index, offset);
	};

	Vector3.prototype.distanceToManhattan = function (v) {
		console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
		return this.manhattanDistanceTo(v);
	};

	Vector3.prototype.lengthManhattan = function () {
		console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');
		return this.manhattanLength();
	}; //


	Vector4.prototype.fromAttribute = function (attribute, index, offset) {
		console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
		return this.fromBufferAttribute(attribute, index, offset);
	};

	Vector4.prototype.lengthManhattan = function () {
		console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');
		return this.manhattanLength();
	}; //


	Object3D.prototype.getChildByName = function (name) {
		console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
		return this.getObjectByName(name);
	};

	Object3D.prototype.renderDepth = function () {
		console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
	};

	Object3D.prototype.translate = function (distance, axis) {
		console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
		return this.translateOnAxis(axis, distance);
	};

	Object3D.prototype.getWorldRotation = function () {
		console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
	};

	Object3D.prototype.applyMatrix = function (matrix) {
		console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');
		return this.applyMatrix4(matrix);
	};

	Object.defineProperties(Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
				return this.rotation.order;
			},
			set: function (value) {
				console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
			},
			set: function () {
				console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
			}
		}
	});

	Mesh.prototype.setDrawMode = function () {
		console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
	};

	Object.defineProperties(Mesh.prototype, {
		drawMode: {
			get: function () {
				console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');
				return TrianglesDrawMode;
			},
			set: function () {
				console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
			}
		}
	});

	SkinnedMesh.prototype.initBones = function () {
		console.error('THREE.SkinnedMesh: initBones() has been removed.');
	}; //


	PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {
		console.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');
		if (filmGauge !== undefined) this.filmGauge = filmGauge;
		this.setFocalLength(focalLength);
	}; //


	Object.defineProperties(Light.prototype, {
		onlyShadow: {
			set: function () {
				console.warn('THREE.Light: .onlyShadow has been removed.');
			}
		},
		shadowCameraFov: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function (value) {
				console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function () {
				console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
			}
		},
		shadowBias: {
			set: function (value) {
				console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function () {
				console.warn('THREE.Light: .shadowDarkness has been removed.');
			}
		},
		shadowMapWidth: {
			set: function (value) {
				console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function (value) {
				console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
				this.shadow.mapSize.height = value;
			}
		}
	}); //

	Object.defineProperties(BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
				return this.array.length;
			}
		},
		dynamic: {
			get: function () {
				console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
				return this.usage === DynamicDrawUsage;
			},
			set: function
				/* value */
			() {
				console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
				this.setUsage(DynamicDrawUsage);
			}
		}
	});

	BufferAttribute.prototype.setDynamic = function (value) {
		console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');
		this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
		return this;
	};

	BufferAttribute.prototype.copyIndicesArray = function
		/* indices */
	() {
		console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
	}, BufferAttribute.prototype.setArray = function
		/* array */
	() {
		console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
	}; //

	BufferGeometry.prototype.addIndex = function (index) {
		console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
		this.setIndex(index);
	};

	BufferGeometry.prototype.addAttribute = function (name, attribute) {
		console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');

		if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
			console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');
			return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
		}

		if (name === 'index') {
			console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
			this.setIndex(attribute);
			return this;
		}

		return this.setAttribute(name, attribute);
	};

	BufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {
		if (indexOffset !== undefined) {
			console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');
		}

		console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
		this.addGroup(start, count);
	};

	BufferGeometry.prototype.clearDrawCalls = function () {
		console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
		this.clearGroups();
	};

	BufferGeometry.prototype.computeOffsets = function () {
		console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
	};

	BufferGeometry.prototype.removeAttribute = function (name) {
		console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');
		return this.deleteAttribute(name);
	};

	BufferGeometry.prototype.applyMatrix = function (matrix) {
		console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');
		return this.applyMatrix4(matrix);
	};

	Object.defineProperties(BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
				return this.groups;
			}
		}
	});

	InterleavedBuffer.prototype.setDynamic = function (value) {
		console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');
		this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
		return this;
	};

	InterleavedBuffer.prototype.setArray = function
		/* array */
	() {
		console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
	}; //


	ExtrudeGeometry.prototype.getArrays = function () {
		console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');
	};

	ExtrudeGeometry.prototype.addShapeList = function () {
		console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');
	};

	ExtrudeGeometry.prototype.addShape = function () {
		console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');
	}; //


	Scene.prototype.dispose = function () {
		console.error('THREE.Scene: .dispose() has been removed.');
	}; //


	Uniform.prototype.onUpdate = function () {
		console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
		return this;
	}; //


	Object.defineProperties(Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn('THREE.Material: .wrapAround has been removed.');
			},
			set: function () {
				console.warn('THREE.Material: .wrapAround has been removed.');
			}
		},
		overdraw: {
			get: function () {
				console.warn('THREE.Material: .overdraw has been removed.');
			},
			set: function () {
				console.warn('THREE.Material: .overdraw has been removed.');
			}
		},
		wrapRGB: {
			get: function () {
				console.warn('THREE.Material: .wrapRGB has been removed.');
				return new Color();
			}
		},
		shading: {
			get: function () {
				console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
			},
			set: function (value) {
				console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
				this.flatShading = value === FlatShading;
			}
		},
		stencilMask: {
			get: function () {
				console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
				return this.stencilFuncMask;
			},
			set: function (value) {
				console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
				this.stencilFuncMask = value;
			}
		},
		vertexTangents: {
			get: function () {
				console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
			},
			set: function () {
				console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
			}
		}
	});
	Object.defineProperties(ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
				return this.extensions.derivatives;
			},
			set: function (value) {
				console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
				this.extensions.derivatives = value;
			}
		}
	}); //

	WebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {
		console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');
		this.setRenderTarget(renderTarget);
		this.clear(color, depth, stencil);
	};

	WebGLRenderer.prototype.animate = function (callback) {
		console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');
		this.setAnimationLoop(callback);
	};

	WebGLRenderer.prototype.getCurrentRenderTarget = function () {
		console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');
		return this.getRenderTarget();
	};

	WebGLRenderer.prototype.getMaxAnisotropy = function () {
		console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');
		return this.capabilities.getMaxAnisotropy();
	};

	WebGLRenderer.prototype.getPrecision = function () {
		console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');
		return this.capabilities.precision;
	};

	WebGLRenderer.prototype.resetGLState = function () {
		console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');
		return this.state.reset();
	};

	WebGLRenderer.prototype.supportsFloatTextures = function () {
		console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
		return this.extensions.get('OES_texture_float');
	};

	WebGLRenderer.prototype.supportsHalfFloatTextures = function () {
		console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
		return this.extensions.get('OES_texture_half_float');
	};

	WebGLRenderer.prototype.supportsStandardDerivatives = function () {
		console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
		return this.extensions.get('OES_standard_derivatives');
	};

	WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {
		console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
		return this.extensions.get('WEBGL_compressed_texture_s3tc');
	};

	WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {
		console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
		return this.extensions.get('WEBGL_compressed_texture_pvrtc');
	};

	WebGLRenderer.prototype.supportsBlendMinMax = function () {
		console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
		return this.extensions.get('EXT_blend_minmax');
	};

	WebGLRenderer.prototype.supportsVertexTextures = function () {
		console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
		return this.capabilities.vertexTextures;
	};

	WebGLRenderer.prototype.supportsInstancedArrays = function () {
		console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
		return this.extensions.get('ANGLE_instanced_arrays');
	};

	WebGLRenderer.prototype.enableScissorTest = function (boolean) {
		console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
		this.setScissorTest(boolean);
	};

	WebGLRenderer.prototype.initMaterial = function () {
		console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
	};

	WebGLRenderer.prototype.addPrePlugin = function () {
		console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
	};

	WebGLRenderer.prototype.addPostPlugin = function () {
		console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
	};

	WebGLRenderer.prototype.updateShadowMap = function () {
		console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
	};

	WebGLRenderer.prototype.setFaceCulling = function () {
		console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
	};

	WebGLRenderer.prototype.allocTextureUnit = function () {
		console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');
	};

	WebGLRenderer.prototype.setTexture = function () {
		console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');
	};

	WebGLRenderer.prototype.setTexture2D = function () {
		console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');
	};

	WebGLRenderer.prototype.setTextureCube = function () {
		console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');
	};

	WebGLRenderer.prototype.getActiveMipMapLevel = function () {
		console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');
		return this.getActiveMipmapLevel();
	};

	Object.defineProperties(WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function
				/* value */
			() {
				console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
			}
		},
		context: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');
				return this.getContext();
			}
		},
		vr: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');
				return this.xr;
			}
		},
		gammaInput: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
				return false;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
			}
		},
		gammaOutput: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
				return false;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
				this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
			}
		},
		toneMappingWhitePoint: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
				return 1.0;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
			}
		},
		gammaFactor: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
				return 2;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
			}
		}
	});
	Object.defineProperties(WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function
				/* cullFace */
			() {
				console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
			}
		},
		renderReverseSided: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
			}
		},
		renderSingleSided: {
			get: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
				return undefined;
			},
			set: function () {
				console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
			}
		}
	});
	function WebGLRenderTargetCube(width, height, options) {
		console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');
		return new WebGLCubeRenderTarget(width, options);
	} //

	Object.defineProperties(WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
				return this.texture.wrapS;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
				return this.texture.wrapT;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
				return this.texture.magFilter;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
				return this.texture.minFilter;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
				return this.texture.anisotropy;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
				return this.texture.offset;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
				return this.texture.repeat;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
				return this.texture.format;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
				return this.texture.type;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
				return this.texture.generateMipmaps;
			},
			set: function (value) {
				console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
				this.texture.generateMipmaps = value;
			}
		}
	}); //

	Audio.prototype.load = function (file) {
		console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
		const scope = this;
		const audioLoader = new AudioLoader();
		audioLoader.load(file, function (buffer) {
			scope.setBuffer(buffer);
		});
		return this;
	};

	AudioAnalyser.prototype.getData = function () {
		console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
		return this.getFrequencyData();
	}; //


	CubeCamera.prototype.updateCubeMap = function (renderer, scene) {
		console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');
		return this.update(renderer, scene);
	};

	CubeCamera.prototype.clear = function (renderer, color, depth, stencil) {
		console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');
		return this.renderTarget.clear(renderer, color, depth, stencil);
	};

	ImageUtils.crossOrigin = undefined;

	ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {
		console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
		const loader = new TextureLoader();
		loader.setCrossOrigin(this.crossOrigin);
		const texture = loader.load(url, onLoad, undefined, onError);
		if (mapping) texture.mapping = mapping;
		return texture;
	};

	ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {
		console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
		const loader = new CubeTextureLoader();
		loader.setCrossOrigin(this.crossOrigin);
		const texture = loader.load(urls, onLoad, undefined, onError);
		if (mapping) texture.mapping = mapping;
		return texture;
	};

	ImageUtils.loadCompressedTexture = function () {
		console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
	};

	ImageUtils.loadCompressedTextureCube = function () {
		console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
	}; //


	function CanvasRenderer() {
		console.error('THREE.CanvasRenderer has been removed');
	} //

	function JSONLoader() {
		console.error('THREE.JSONLoader has been removed.');
	} //

	const SceneUtils = {
		createMultiMaterialObject: function
			/* geometry, materials */
		() {
			console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
		},
		detach: function
			/* child, parent, scene */
		() {
			console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
		},
		attach: function
			/* child, scene, parent */
		() {
			console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
		}
	}; //

	function LensFlare() {
		console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');
	} //

	function ParametricGeometry() {
		console.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');
		return new BufferGeometry();
	}
	function TextGeometry() {
		console.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');
		return new BufferGeometry();
	}
	function FontLoader() {
		console.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');
	}
	function Font() {
		console.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');
	}
	function ImmediateRenderObject() {
		console.error('THREE.ImmediateRenderObject has been removed.');
	}
	function WebGLMultisampleRenderTarget(width, height, options) {
		console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');
		const renderTarget = new WebGLRenderTarget(width, height, options);
		renderTarget.samples = 4;
		return renderTarget;
	}
	function DataTexture2DArray(data, width, height, depth) {
		console.warn('THREE.DataTexture2DArray has been renamed to DataArrayTexture.');
		return new DataArrayTexture(data, width, height, depth);
	}
	function DataTexture3D(data, width, height, depth) {
		console.warn('THREE.DataTexture3D has been renamed to Data3DTexture.');
		return new Data3DTexture(data, width, height, depth);
	}

	if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
		__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
			detail: {
				revision: REVISION
			}
		}));
	}

	if (typeof window !== 'undefined') {
		if (window.__THREE__) {
			console.warn('WARNING: Multiple instances of Three.js being imported.');
		} else {
			window.__THREE__ = REVISION;
		}
	}

	exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
	exports.AddEquation = AddEquation;
	exports.AddOperation = AddOperation;
	exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;
	exports.AdditiveBlending = AdditiveBlending;
	exports.AlphaFormat = AlphaFormat;
	exports.AlwaysDepth = AlwaysDepth;
	exports.AlwaysStencilFunc = AlwaysStencilFunc;
	exports.AmbientLight = AmbientLight;
	exports.AmbientLightProbe = AmbientLightProbe;
	exports.AnimationClip = AnimationClip;
	exports.AnimationLoader = AnimationLoader;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationUtils = AnimationUtils;
	exports.ArcCurve = ArcCurve;
	exports.ArrayCamera = ArrayCamera;
	exports.ArrowHelper = ArrowHelper;
	exports.Audio = Audio;
	exports.AudioAnalyser = AudioAnalyser;
	exports.AudioContext = AudioContext;
	exports.AudioListener = AudioListener;
	exports.AudioLoader = AudioLoader;
	exports.AxesHelper = AxesHelper;
	exports.AxisHelper = AxisHelper;
	exports.BackSide = BackSide;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.BasicShadowMap = BasicShadowMap;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.Bone = Bone;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.Box2 = Box2;
	exports.Box3 = Box3;
	exports.Box3Helper = Box3Helper;
	exports.BoxBufferGeometry = BoxGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.BoxHelper = BoxHelper;
	exports.BufferAttribute = BufferAttribute;
	exports.BufferGeometry = BufferGeometry;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.ByteType = ByteType;
	exports.Cache = Cache;
	exports.Camera = Camera;
	exports.CameraHelper = CameraHelper;
	exports.CanvasRenderer = CanvasRenderer;
	exports.CanvasTexture = CanvasTexture;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.CineonToneMapping = CineonToneMapping;
	exports.CircleBufferGeometry = CircleGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.Clock = Clock;
	exports.Color = Color;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.CompressedTexture = CompressedTexture;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.ConeBufferGeometry = ConeGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.CubeCamera = CubeCamera;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.CubeTexture = CubeTexture;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.CubicInterpolant = CubicInterpolant;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.CullFaceNone = CullFaceNone;
	exports.Curve = Curve;
	exports.CurvePath = CurvePath;
	exports.CustomBlending = CustomBlending;
	exports.CustomToneMapping = CustomToneMapping;
	exports.CylinderBufferGeometry = CylinderGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.Cylindrical = Cylindrical;
	exports.Data3DTexture = Data3DTexture;
	exports.DataArrayTexture = DataArrayTexture;
	exports.DataTexture = DataTexture;
	exports.DataTexture2DArray = DataTexture2DArray;
	exports.DataTexture3D = DataTexture3D;
	exports.DataTextureLoader = DataTextureLoader;
	exports.DataUtils = DataUtils;
	exports.DecrementStencilOp = DecrementStencilOp;
	exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.DepthTexture = DepthTexture;
	exports.DirectionalLight = DirectionalLight;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.DodecahedronBufferGeometry = DodecahedronGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DoubleSide = DoubleSide;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.DynamicCopyUsage = DynamicCopyUsage;
	exports.DynamicDrawUsage = DynamicDrawUsage;
	exports.DynamicReadUsage = DynamicReadUsage;
	exports.EdgesGeometry = EdgesGeometry;
	exports.EdgesHelper = EdgesHelper;
	exports.EllipseCurve = EllipseCurve;
	exports.EqualDepth = EqualDepth;
	exports.EqualStencilFunc = EqualStencilFunc;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.Euler = Euler;
	exports.EventDispatcher = EventDispatcher;
	exports.ExtrudeBufferGeometry = ExtrudeGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.FaceColors = FaceColors;
	exports.FileLoader = FileLoader;
	exports.FlatShading = FlatShading;
	exports.Float16BufferAttribute = Float16BufferAttribute;
	exports.Float32Attribute = Float32Attribute;
	exports.Float32BufferAttribute = Float32BufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float64BufferAttribute = Float64BufferAttribute;
	exports.FloatType = FloatType;
	exports.Fog = Fog;
	exports.FogExp2 = FogExp2;
	exports.Font = Font;
	exports.FontLoader = FontLoader;
	exports.FramebufferTexture = FramebufferTexture;
	exports.FrontSide = FrontSide;
	exports.Frustum = Frustum;
	exports.GLBufferAttribute = GLBufferAttribute;
	exports.GLSL1 = GLSL1;
	exports.GLSL3 = GLSL3;
	exports.GreaterDepth = GreaterDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
	exports.GreaterStencilFunc = GreaterStencilFunc;
	exports.GridHelper = GridHelper;
	exports.Group = Group;
	exports.HalfFloatType = HalfFloatType;
	exports.HemisphereLight = HemisphereLight;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.HemisphereLightProbe = HemisphereLightProbe;
	exports.IcosahedronBufferGeometry = IcosahedronGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.ImageBitmapLoader = ImageBitmapLoader;
	exports.ImageLoader = ImageLoader;
	exports.ImageUtils = ImageUtils;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.IncrementStencilOp = IncrementStencilOp;
	exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InstancedMesh = InstancedMesh;
	exports.Int16Attribute = Int16Attribute;
	exports.Int16BufferAttribute = Int16BufferAttribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Int32BufferAttribute = Int32BufferAttribute;
	exports.Int8Attribute = Int8Attribute;
	exports.Int8BufferAttribute = Int8BufferAttribute;
	exports.IntType = IntType;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.Interpolant = Interpolant;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.InvertStencilOp = InvertStencilOp;
	exports.JSONLoader = JSONLoader;
	exports.KeepStencilOp = KeepStencilOp;
	exports.KeyframeTrack = KeyframeTrack;
	exports.LOD = LOD;
	exports.LatheBufferGeometry = LatheGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.Layers = Layers;
	exports.LensFlare = LensFlare;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.LessEqualStencilFunc = LessEqualStencilFunc;
	exports.LessStencilFunc = LessStencilFunc;
	exports.Light = Light;
	exports.LightProbe = LightProbe;
	exports.Line = Line;
	exports.Line3 = Line3;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.LineCurve = LineCurve;
	exports.LineCurve3 = LineCurve3;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineLoop = LineLoop;
	exports.LinePieces = LinePieces;
	exports.LineSegments = LineSegments;
	exports.LineStrip = LineStrip;
	exports.LinearEncoding = LinearEncoding;
	exports.LinearFilter = LinearFilter;
	exports.LinearInterpolant = LinearInterpolant;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
	exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
	exports.LinearToneMapping = LinearToneMapping;
	exports.Loader = Loader;
	exports.LoaderUtils = LoaderUtils;
	exports.LoadingManager = LoadingManager;
	exports.LoopOnce = LoopOnce;
	exports.LoopPingPong = LoopPingPong;
	exports.LoopRepeat = LoopRepeat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.MOUSE = MOUSE;
	exports.Material = Material;
	exports.MaterialLoader = MaterialLoader;
	exports.Math = MathUtils;
	exports.MathUtils = MathUtils;
	exports.Matrix3 = Matrix3;
	exports.Matrix4 = Matrix4;
	exports.MaxEquation = MaxEquation;
	exports.Mesh = Mesh;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshDistanceMaterial = MeshDistanceMaterial;
	exports.MeshFaceMaterial = MeshFaceMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshMatcapMaterial = MeshMatcapMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshToonMaterial = MeshToonMaterial;
	exports.MinEquation = MinEquation;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.MixOperation = MixOperation;
	exports.MultiMaterial = MultiMaterial;
	exports.MultiplyBlending = MultiplyBlending;
	exports.MultiplyOperation = MultiplyOperation;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
	exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
	exports.NeverDepth = NeverDepth;
	exports.NeverStencilFunc = NeverStencilFunc;
	exports.NoBlending = NoBlending;
	exports.NoColors = NoColors;
	exports.NoToneMapping = NoToneMapping;
	exports.NormalAnimationBlendMode = NormalAnimationBlendMode;
	exports.NormalBlending = NormalBlending;
	exports.NotEqualDepth = NotEqualDepth;
	exports.NotEqualStencilFunc = NotEqualStencilFunc;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.Object3D = Object3D;
	exports.ObjectLoader = ObjectLoader;
	exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
	exports.OctahedronBufferGeometry = OctahedronGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OneFactor = OneFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.OrthographicCamera = OrthographicCamera;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.PMREMGenerator = PMREMGenerator;
	exports.ParametricGeometry = ParametricGeometry;
	exports.Particle = Particle;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystem = ParticleSystem;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Path = Path;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.Plane = Plane;
	exports.PlaneBufferGeometry = PlaneGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.PlaneHelper = PlaneHelper;
	exports.PointCloud = PointCloud;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.PointLight = PointLight;
	exports.PointLightHelper = PointLightHelper;
	exports.Points = Points;
	exports.PointsMaterial = PointsMaterial;
	exports.PolarGridHelper = PolarGridHelper;
	exports.PolyhedronBufferGeometry = PolyhedronGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PositionalAudio = PositionalAudio;
	exports.PropertyBinding = PropertyBinding;
	exports.PropertyMixer = PropertyMixer;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.Quaternion = Quaternion;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.REVISION = REVISION;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.RGBAFormat = RGBAFormat;
	exports.RGBAIntegerFormat = RGBAIntegerFormat;
	exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
	exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
	exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
	exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
	exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
	exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
	exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
	exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
	exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
	exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
	exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
	exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
	exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
	exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
	exports.RGBA_BPTC_Format = RGBA_BPTC_Format;
	exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGBFormat = RGBFormat;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.RGB_ETC2_Format = RGB_ETC2_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RGFormat = RGFormat;
	exports.RGIntegerFormat = RGIntegerFormat;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.Ray = Ray;
	exports.Raycaster = Raycaster;
	exports.RectAreaLight = RectAreaLight;
	exports.RedFormat = RedFormat;
	exports.RedIntegerFormat = RedIntegerFormat;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ReplaceStencilOp = ReplaceStencilOp;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.RingBufferGeometry = RingGeometry;
	exports.RingGeometry = RingGeometry;
	exports.Scene = Scene;
	exports.SceneUtils = SceneUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.ShaderLib = ShaderLib;
	exports.ShaderMaterial = ShaderMaterial;
	exports.ShadowMaterial = ShadowMaterial;
	exports.Shape = Shape;
	exports.ShapeBufferGeometry = ShapeGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ShapePath = ShapePath;
	exports.ShapeUtils = ShapeUtils;
	exports.ShortType = ShortType;
	exports.Skeleton = Skeleton;
	exports.SkeletonHelper = SkeletonHelper;
	exports.SkinnedMesh = SkinnedMesh;
	exports.SmoothShading = SmoothShading;
	exports.Sphere = Sphere;
	exports.SphereBufferGeometry = SphereGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.Spherical = Spherical;
	exports.SphericalHarmonics3 = SphericalHarmonics3;
	exports.SplineCurve = SplineCurve;
	exports.SpotLight = SpotLight;
	exports.SpotLightHelper = SpotLightHelper;
	exports.Sprite = Sprite;
	exports.SpriteMaterial = SpriteMaterial;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.StaticCopyUsage = StaticCopyUsage;
	exports.StaticDrawUsage = StaticDrawUsage;
	exports.StaticReadUsage = StaticReadUsage;
	exports.StereoCamera = StereoCamera;
	exports.StreamCopyUsage = StreamCopyUsage;
	exports.StreamDrawUsage = StreamDrawUsage;
	exports.StreamReadUsage = StreamReadUsage;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.SubtractEquation = SubtractEquation;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.TOUCH = TOUCH;
	exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
	exports.TetrahedronBufferGeometry = TetrahedronGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TextGeometry = TextGeometry;
	exports.Texture = Texture;
	exports.TextureLoader = TextureLoader;
	exports.TorusBufferGeometry = TorusGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.Triangle = Triangle;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TubeBufferGeometry = TubeGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.UVMapping = UVMapping;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Uint16BufferAttribute = Uint16BufferAttribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Uint32BufferAttribute = Uint32BufferAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Uint8BufferAttribute = Uint8BufferAttribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
	exports.Uniform = Uniform;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.UnsignedByteType = UnsignedByteType;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.UnsignedIntType = UnsignedIntType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShortType = UnsignedShortType;
	exports.VSMShadowMap = VSMShadowMap;
	exports.Vector2 = Vector2;
	exports.Vector3 = Vector3;
	exports.Vector4 = Vector4;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.Vertex = Vertex;
	exports.VertexColors = VertexColors;
	exports.VideoTexture = VideoTexture;
	exports.WebGL1Renderer = WebGL1Renderer;
	exports.WebGL3DRenderTarget = WebGL3DRenderTarget;
	exports.WebGLArrayRenderTarget = WebGLArrayRenderTarget;
	exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;
	exports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;
	exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderer = WebGLRenderer;
	exports.WebGLUtils = WebGLUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.WireframeHelper = WireframeHelper;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.XHRLoader = XHRLoader;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroFactor = ZeroFactor;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.ZeroStencilOp = ZeroStencilOp;
	exports._SRGBAFormat = _SRGBAFormat;
	exports.sRGBEncoding = sRGBEncoding;

	Object.defineProperty(exports, '__esModule', { value: true });

}));

/*
 * QRious v4.0.2
 * Copyright (C) 2017 Alasdair Mercer
 * Copyright (C) 2010 Tom Zerucha
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.QRious = factory());
}(this, (function () { 'use strict';

  /*
   * Copyright (C) 2017 Alasdair Mercer, !ninja
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */

  /**
   * A bare-bones constructor for surrogate prototype swapping.
   *
   * @private
   * @constructor
   */
  var Constructor = /* istanbul ignore next */ function() {};
  /**
   * A reference to <code>Object.prototype.hasOwnProperty</code>.
   *
   * @private
   * @type {Function}
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
   * A reference to <code>Array.prototype.slice</code>.
   *
   * @private
   * @type {Function}
   */
  var slice = Array.prototype.slice;

  /**
   * Creates an object which inherits the given <code>prototype</code>.
   *
   * Optionally, the created object can be extended further with the specified <code>properties</code>.
   *
   * @param {Object} prototype - the prototype to be inherited by the created object
   * @param {Object} [properties] - the optional properties to be extended by the created object
   * @return {Object} The newly created object.
   * @private
   */
  function createObject(prototype, properties) {
    var result;
    /* istanbul ignore next */
    if (typeof Object.create === 'function') {
      result = Object.create(prototype);
    } else {
      Constructor.prototype = prototype;
      result = new Constructor();
      Constructor.prototype = null;
    }

    if (properties) {
      extendObject(true, result, properties);
    }

    return result;
  }

  /**
   * Extends the constructor to which this method is associated with the <code>prototype</code> and/or
   * <code>statics</code> provided.
   *
   * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special
   * <code>class_</code> property on the child constructor, otherwise the class name of the super constructor will be used
   * instead. The class name may also be used string representation for instances of the child constructor (via
   * <code>toString</code>), but this is not applicable to the <i>lite</i> version of Nevis.
   *
   * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple
   * constructor which only calls the super constructor will be used instead.
   *
   * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.
   *
   * @param {string} [name=this.class_] - the class name to be used for the child constructor
   * @param {Function} [constructor] - the constructor for the child
   * @param {Object} [prototype] - the prototype properties to be defined for the child
   * @param {Object} [statics] - the static properties to be defined for the child
   * @return {Function} The child <code>constructor</code> provided or the one created if none was given.
   * @public
   */
  function extend(name, constructor, prototype, statics) {
    var superConstructor = this;

    if (typeof name !== 'string') {
      statics = prototype;
      prototype = constructor;
      constructor = name;
      name = null;
    }

    if (typeof constructor !== 'function') {
      statics = prototype;
      prototype = constructor;
      constructor = function() {
        return superConstructor.apply(this, arguments);
      };
    }

    extendObject(false, constructor, superConstructor, statics);

    constructor.prototype = createObject(superConstructor.prototype, prototype);
    constructor.prototype.constructor = constructor;

    constructor.class_ = name || superConstructor.class_;
    constructor.super_ = superConstructor;

    return constructor;
  }

  /**
   * Extends the specified <code>target</code> object with the properties in each of the <code>sources</code> provided.
   *
   * if any source is <code>null</code> it will be ignored.
   *
   * @param {boolean} own - <code>true</code> to only copy <b>own</b> properties from <code>sources</code> onto
   * <code>target</code>; otherwise <code>false</code>
   * @param {Object} target - the target object which should be extended
   * @param {...Object} [sources] - the source objects whose properties are to be copied onto <code>target</code>
   * @return {void}
   * @private
   */
  function extendObject(own, target, sources) {
    sources = slice.call(arguments, 2);

    var property;
    var source;

    for (var i = 0, length = sources.length; i < length; i++) {
      source = sources[i];

      for (property in source) {
        if (!own || hasOwnProperty.call(source, property)) {
          target[property] = source[property];
        }
      }
    }
  }

  var extend_1 = extend;

  /**
   * The base class from which all others should extend.
   *
   * @public
   * @constructor
   */
  function Nevis() {}
  Nevis.class_ = 'Nevis';
  Nevis.super_ = Object;

  /**
   * Extends the constructor to which this method is associated with the <code>prototype</code> and/or
   * <code>statics</code> provided.
   *
   * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special
   * <code>class_</code> property on the child constructor, otherwise the class name of the super constructor will be used
   * instead. The class name may also be used string representation for instances of the child constructor (via
   * <code>toString</code>), but this is not applicable to the <i>lite</i> version of Nevis.
   *
   * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple
   * constructor which only calls the super constructor will be used instead.
   *
   * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.
   *
   * @param {string} [name=this.class_] - the class name to be used for the child constructor
   * @param {Function} [constructor] - the constructor for the child
   * @param {Object} [prototype] - the prototype properties to be defined for the child
   * @param {Object} [statics] - the static properties to be defined for the child
   * @return {Function} The child <code>constructor</code> provided or the one created if none was given.
   * @public
   * @static
   * @memberof Nevis
   */
  Nevis.extend = extend_1;

  var nevis = Nevis;

  var lite = nevis;

  /**
   * Responsible for rendering a QR code {@link Frame} on a specific type of element.
   *
   * A renderer may be dependant on the rendering of another element, so the ordering of their execution is important.
   *
   * The rendering of a element can be deferred by disabling the renderer initially, however, any attempt get the element
   * from the renderer will result in it being immediately enabled and the element being rendered.
   *
   * @param {QRious} qrious - the {@link QRious} instance to be used
   * @param {*} element - the element onto which the QR code is to be rendered
   * @param {boolean} [enabled] - <code>true</code> this {@link Renderer} is enabled; otherwise <code>false</code>.
   * @public
   * @class
   * @extends Nevis
   */
  var Renderer = lite.extend(function(qrious, element, enabled) {
    /**
     * The {@link QRious} instance.
     *
     * @protected
     * @type {QRious}
     * @memberof Renderer#
     */
    this.qrious = qrious;

    /**
     * The element onto which this {@link Renderer} is rendering the QR code.
     *
     * @protected
     * @type {*}
     * @memberof Renderer#
     */
    this.element = element;
    this.element.qrious = qrious;

    /**
     * Whether this {@link Renderer} is enabled.
     *
     * @protected
     * @type {boolean}
     * @memberof Renderer#
     */
    this.enabled = Boolean(enabled);
  }, {

    /**
     * Draws the specified QR code <code>frame</code> on the underlying element.
     *
     * Implementations of {@link Renderer} <b>must</b> override this method with their own specific logic.
     *
     * @param {Frame} frame - the {@link Frame} to be drawn
     * @return {void}
     * @protected
     * @abstract
     * @memberof Renderer#
     */
    draw: function(frame) {},

    /**
     * Returns the element onto which this {@link Renderer} is rendering the QR code.
     *
     * If this method is called while this {@link Renderer} is disabled, it will be immediately enabled and rendered
     * before the element is returned.
     *
     * @return {*} The element.
     * @public
     * @memberof Renderer#
     */
    getElement: function() {
      if (!this.enabled) {
        this.enabled = true;
        this.render();
      }

      return this.element;
    },

    /**
     * Calculates the size (in pixel units) to represent an individual module within the QR code based on the
     * <code>frame</code> provided.
     *
     * Any configured padding will be excluded from the returned size.
     *
     * The returned value will be at least one, even in cases where the size of the QR code does not fit its contents.
     * This is done so that the inevitable clipping is handled more gracefully since this way at least something is
     * displayed instead of just a blank space filled by the background color.
     *
     * @param {Frame} frame - the {@link Frame} from which the module size is to be derived
     * @return {number} The pixel size for each module in the QR code which will be no less than one.
     * @protected
     * @memberof Renderer#
     */
    getModuleSize: function(frame) {
      var qrious = this.qrious;
      var padding = qrious.padding || 0;
      var pixels = Math.floor((qrious.size - (padding * 2)) / frame.width);

      return Math.max(1, pixels);
    },

    /**
     * Calculates the offset/padding (in pixel units) to be inserted before the QR code based on the <code>frame</code>
     * provided.
     *
     * The returned value will be zero if there is no available offset or if the size of the QR code does not fit its
     * contents. It will never be a negative value. This is done so that the inevitable clipping appears more naturally
     * and it is not clipped from all directions.
     *
     * @param {Frame} frame - the {@link Frame} from which the offset is to be derived
     * @return {number} The pixel offset for the QR code which will be no less than zero.
     * @protected
     * @memberof Renderer#
     */
    getOffset: function(frame) {
      var qrious = this.qrious;
      var padding = qrious.padding;

      if (padding != null) {
        return padding;
      }

      var moduleSize = this.getModuleSize(frame);
      var offset = Math.floor((qrious.size - (moduleSize * frame.width)) / 2);

      return Math.max(0, offset);
    },

    /**
     * Renders a QR code on the underlying element based on the <code>frame</code> provided.
     *
     * @param {Frame} frame - the {@link Frame} to be rendered
     * @return {void}
     * @public
     * @memberof Renderer#
     */
    render: function(frame) {
      if (this.enabled) {
        this.resize();
        this.reset();
        this.draw(frame);
      }
    },

    /**
     * Resets the underlying element, effectively clearing any previously rendered QR code.
     *
     * Implementations of {@link Renderer} <b>must</b> override this method with their own specific logic.
     *
     * @return {void}
     * @protected
     * @abstract
     * @memberof Renderer#
     */
    reset: function() {},

    /**
     * Ensures that the size of the underlying element matches that defined on the associated {@link QRious} instance.
     *
     * Implementations of {@link Renderer} <b>must</b> override this method with their own specific logic.
     *
     * @return {void}
     * @protected
     * @abstract
     * @memberof Renderer#
     */
    resize: function() {}

  });

  var Renderer_1 = Renderer;

  /**
   * An implementation of {@link Renderer} for working with <code>canvas</code> elements.
   *
   * @public
   * @class
   * @extends Renderer
   */
  var CanvasRenderer = Renderer_1.extend({

    /**
     * @override
     */
    draw: function(frame) {
      var i, j;
      var qrious = this.qrious;
      var moduleSize = this.getModuleSize(frame);
      var offset = this.getOffset(frame);
      var context = this.element.getContext('2d');

      context.fillStyle = qrious.foreground;
      context.globalAlpha = qrious.foregroundAlpha;

      for (i = 0; i < frame.width; i++) {
        for (j = 0; j < frame.width; j++) {
          if (frame.buffer[(j * frame.width) + i]) {
            context.fillRect((moduleSize * i) + offset, (moduleSize * j) + offset, moduleSize, moduleSize);
          }
        }
      }
    },

    /**
     * @override
     */
    reset: function() {
      var qrious = this.qrious;
      var context = this.element.getContext('2d');
      var size = qrious.size;

      context.lineWidth = 1;
      context.clearRect(0, 0, size, size);
      context.fillStyle = qrious.background;
      context.globalAlpha = qrious.backgroundAlpha;
      context.fillRect(0, 0, size, size);
    },

    /**
     * @override
     */
    resize: function() {
      var element = this.element;

      element.width = element.height = this.qrious.size;
    }

  });

  var CanvasRenderer_1 = CanvasRenderer;

  /* eslint no-multi-spaces: "off" */



  /**
   * Contains alignment pattern information.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var Alignment = lite.extend(null, {

    /**
     * The alignment pattern block.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Alignment
     */
    BLOCK: [
      0,  11, 15, 19, 23, 27, 31,
      16, 18, 20, 22, 24, 26, 28, 20, 22, 24, 24, 26, 28, 28, 22, 24, 24,
      26, 26, 28, 28, 24, 24, 26, 26, 26, 28, 28, 24, 26, 26, 26, 28, 28
    ]

  });

  var Alignment_1 = Alignment;

  /* eslint no-multi-spaces: "off" */



  /**
   * Contains error correction information.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var ErrorCorrection = lite.extend(null, {

    /**
     * The error correction blocks.
     *
     * There are four elements per version. The first two indicate the number of blocks, then the data width, and finally
     * the ECC width.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof ErrorCorrection
     */
    BLOCKS: [
      1,  0,  19,  7,     1,  0,  16,  10,    1,  0,  13,  13,    1,  0,  9,   17,
      1,  0,  34,  10,    1,  0,  28,  16,    1,  0,  22,  22,    1,  0,  16,  28,
      1,  0,  55,  15,    1,  0,  44,  26,    2,  0,  17,  18,    2,  0,  13,  22,
      1,  0,  80,  20,    2,  0,  32,  18,    2,  0,  24,  26,    4,  0,  9,   16,
      1,  0,  108, 26,    2,  0,  43,  24,    2,  2,  15,  18,    2,  2,  11,  22,
      2,  0,  68,  18,    4,  0,  27,  16,    4,  0,  19,  24,    4,  0,  15,  28,
      2,  0,  78,  20,    4,  0,  31,  18,    2,  4,  14,  18,    4,  1,  13,  26,
      2,  0,  97,  24,    2,  2,  38,  22,    4,  2,  18,  22,    4,  2,  14,  26,
      2,  0,  116, 30,    3,  2,  36,  22,    4,  4,  16,  20,    4,  4,  12,  24,
      2,  2,  68,  18,    4,  1,  43,  26,    6,  2,  19,  24,    6,  2,  15,  28,
      4,  0,  81,  20,    1,  4,  50,  30,    4,  4,  22,  28,    3,  8,  12,  24,
      2,  2,  92,  24,    6,  2,  36,  22,    4,  6,  20,  26,    7,  4,  14,  28,
      4,  0,  107, 26,    8,  1,  37,  22,    8,  4,  20,  24,    12, 4,  11,  22,
      3,  1,  115, 30,    4,  5,  40,  24,    11, 5,  16,  20,    11, 5,  12,  24,
      5,  1,  87,  22,    5,  5,  41,  24,    5,  7,  24,  30,    11, 7,  12,  24,
      5,  1,  98,  24,    7,  3,  45,  28,    15, 2,  19,  24,    3,  13, 15,  30,
      1,  5,  107, 28,    10, 1,  46,  28,    1,  15, 22,  28,    2,  17, 14,  28,
      5,  1,  120, 30,    9,  4,  43,  26,    17, 1,  22,  28,    2,  19, 14,  28,
      3,  4,  113, 28,    3,  11, 44,  26,    17, 4,  21,  26,    9,  16, 13,  26,
      3,  5,  107, 28,    3,  13, 41,  26,    15, 5,  24,  30,    15, 10, 15,  28,
      4,  4,  116, 28,    17, 0,  42,  26,    17, 6,  22,  28,    19, 6,  16,  30,
      2,  7,  111, 28,    17, 0,  46,  28,    7,  16, 24,  30,    34, 0,  13,  24,
      4,  5,  121, 30,    4,  14, 47,  28,    11, 14, 24,  30,    16, 14, 15,  30,
      6,  4,  117, 30,    6,  14, 45,  28,    11, 16, 24,  30,    30, 2,  16,  30,
      8,  4,  106, 26,    8,  13, 47,  28,    7,  22, 24,  30,    22, 13, 15,  30,
      10, 2,  114, 28,    19, 4,  46,  28,    28, 6,  22,  28,    33, 4,  16,  30,
      8,  4,  122, 30,    22, 3,  45,  28,    8,  26, 23,  30,    12, 28, 15,  30,
      3,  10, 117, 30,    3,  23, 45,  28,    4,  31, 24,  30,    11, 31, 15,  30,
      7,  7,  116, 30,    21, 7,  45,  28,    1,  37, 23,  30,    19, 26, 15,  30,
      5,  10, 115, 30,    19, 10, 47,  28,    15, 25, 24,  30,    23, 25, 15,  30,
      13, 3,  115, 30,    2,  29, 46,  28,    42, 1,  24,  30,    23, 28, 15,  30,
      17, 0,  115, 30,    10, 23, 46,  28,    10, 35, 24,  30,    19, 35, 15,  30,
      17, 1,  115, 30,    14, 21, 46,  28,    29, 19, 24,  30,    11, 46, 15,  30,
      13, 6,  115, 30,    14, 23, 46,  28,    44, 7,  24,  30,    59, 1,  16,  30,
      12, 7,  121, 30,    12, 26, 47,  28,    39, 14, 24,  30,    22, 41, 15,  30,
      6,  14, 121, 30,    6,  34, 47,  28,    46, 10, 24,  30,    2,  64, 15,  30,
      17, 4,  122, 30,    29, 14, 46,  28,    49, 10, 24,  30,    24, 46, 15,  30,
      4,  18, 122, 30,    13, 32, 46,  28,    48, 14, 24,  30,    42, 32, 15,  30,
      20, 4,  117, 30,    40, 7,  47,  28,    43, 22, 24,  30,    10, 67, 15,  30,
      19, 6,  118, 30,    18, 31, 47,  28,    34, 34, 24,  30,    20, 61, 15,  30
    ],

    /**
     * The final format bits with mask (level << 3 | mask).
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof ErrorCorrection
     */
    FINAL_FORMAT: [
      // L
      0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976,
      // M
      0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0,
      // Q
      0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed,
      // H
      0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b
    ],

    /**
     * A map of human-readable ECC levels.
     *
     * @public
     * @static
     * @type {Object.<string, number>}
     * @memberof ErrorCorrection
     */
    LEVELS: {
      L: 1,
      M: 2,
      Q: 3,
      H: 4
    }

  });

  var ErrorCorrection_1 = ErrorCorrection;

  /**
   * Contains Galois field information.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var Galois = lite.extend(null, {

    /**
     * The Galois field exponent table.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Galois
     */
    EXPONENT: [
      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26,
      0x4c, 0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0,
      0x9d, 0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23,
      0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1,
      0x5f, 0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0,
      0xfd, 0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2,
      0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce,
      0x81, 0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc,
      0x85, 0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54,
      0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73,
      0xe6, 0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff,
      0xe3, 0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41,
      0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6,
      0x51, 0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09,
      0x12, 0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16,
      0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x00
    ],

    /**
     * The Galois field log table.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Galois
     */
    LOG: [
      0xff, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee, 0x1b, 0x68, 0xc7, 0x4b,
      0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81, 0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71,
      0x05, 0x8a, 0x65, 0x2f, 0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,
      0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78, 0x4d, 0xe4, 0x72, 0xa6,
      0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd, 0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88,
      0x36, 0xd0, 0x94, 0xce, 0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,
      0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54, 0xfa, 0x85, 0xba, 0x3d,
      0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b, 0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57,
      0x07, 0x70, 0xc0, 0xf7, 0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,
      0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9, 0x23, 0x20, 0x89, 0x2e,
      0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd, 0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61,
      0xf2, 0x56, 0xd3, 0xab, 0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,
      0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec, 0x7f, 0x0c, 0x6f, 0xf6,
      0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa, 0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a,
      0xcb, 0x59, 0x5f, 0xb0, 0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,
      0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea, 0xa8, 0x50, 0x58, 0xaf
    ]

  });

  var Galois_1 = Galois;

  /**
   * Contains version pattern information.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var Version = lite.extend(null, {

    /**
     * The version pattern block.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Version
     */
    BLOCK: [
      0xc94, 0x5bc, 0xa99, 0x4d3, 0xbf6, 0x762, 0x847, 0x60d, 0x928, 0xb78, 0x45d, 0xa17, 0x532,
      0x9a6, 0x683, 0x8c9, 0x7ec, 0xec4, 0x1e1, 0xfab, 0x08e, 0xc1a, 0x33f, 0xd75, 0x250, 0x9d5,
      0x6f0, 0x8ba, 0x79f, 0xb0b, 0x42e, 0xa64, 0x541, 0xc69
    ]

  });

  var Version_1 = Version;

  /**
   * Generates information for a QR code frame based on a specific value to be encoded.
   *
   * @param {Frame~Options} options - the options to be used
   * @public
   * @class
   * @extends Nevis
   */
  var Frame = lite.extend(function(options) {
    var dataBlock, eccBlock, index, neccBlock1, neccBlock2;
    var valueLength = options.value.length;

    this._badness = [];
    this._level = ErrorCorrection_1.LEVELS[options.level];
    this._polynomial = [];
    this._value = options.value;
    this._version = 0;
    this._stringBuffer = [];

    while (this._version < 40) {
      this._version++;

      index = ((this._level - 1) * 4) + ((this._version - 1) * 16);

      neccBlock1 = ErrorCorrection_1.BLOCKS[index++];
      neccBlock2 = ErrorCorrection_1.BLOCKS[index++];
      dataBlock = ErrorCorrection_1.BLOCKS[index++];
      eccBlock = ErrorCorrection_1.BLOCKS[index];

      index = (dataBlock * (neccBlock1 + neccBlock2)) + neccBlock2 - 3 + (this._version <= 9);

      if (valueLength <= index) {
        break;
      }
    }

    this._dataBlock = dataBlock;
    this._eccBlock = eccBlock;
    this._neccBlock1 = neccBlock1;
    this._neccBlock2 = neccBlock2;

    /**
     * The data width is based on version.
     *
     * @public
     * @type {number}
     * @memberof Frame#
     */
    // FIXME: Ensure that it fits instead of being truncated.
    var width = this.width = 17 + (4 * this._version);

    /**
     * The image buffer.
     *
     * @public
     * @type {number[]}
     * @memberof Frame#
     */
    this.buffer = Frame._createArray(width * width);

    this._ecc = Frame._createArray(dataBlock + ((dataBlock + eccBlock) * (neccBlock1 + neccBlock2)) + neccBlock2);
    this._mask = Frame._createArray(((width * (width + 1)) + 1) / 2);

    this._insertFinders();
    this._insertAlignments();

    // Insert single foreground cell.
    this.buffer[8 + (width * (width - 8))] = 1;

    this._insertTimingGap();
    this._reverseMask();
    this._insertTimingRowAndColumn();
    this._insertVersion();
    this._syncMask();
    this._convertBitStream(valueLength);
    this._calculatePolynomial();
    this._appendEccToData();
    this._interleaveBlocks();
    this._pack();
    this._finish();
  }, {

    _addAlignment: function(x, y) {
      var i;
      var buffer = this.buffer;
      var width = this.width;

      buffer[x + (width * y)] = 1;

      for (i = -2; i < 2; i++) {
        buffer[x + i + (width * (y - 2))] = 1;
        buffer[x - 2 + (width * (y + i + 1))] = 1;
        buffer[x + 2 + (width * (y + i))] = 1;
        buffer[x + i + 1 + (width * (y + 2))] = 1;
      }

      for (i = 0; i < 2; i++) {
        this._setMask(x - 1, y + i);
        this._setMask(x + 1, y - i);
        this._setMask(x - i, y - 1);
        this._setMask(x + i, y + 1);
      }
    },

    _appendData: function(data, dataLength, ecc, eccLength) {
      var bit, i, j;
      var polynomial = this._polynomial;
      var stringBuffer = this._stringBuffer;

      for (i = 0; i < eccLength; i++) {
        stringBuffer[ecc + i] = 0;
      }

      for (i = 0; i < dataLength; i++) {
        bit = Galois_1.LOG[stringBuffer[data + i] ^ stringBuffer[ecc]];

        if (bit !== 255) {
          for (j = 1; j < eccLength; j++) {
            stringBuffer[ecc + j - 1] = stringBuffer[ecc + j] ^
              Galois_1.EXPONENT[Frame._modN(bit + polynomial[eccLength - j])];
          }
        } else {
          for (j = ecc; j < ecc + eccLength; j++) {
            stringBuffer[j] = stringBuffer[j + 1];
          }
        }

        stringBuffer[ecc + eccLength - 1] = bit === 255 ? 0 : Galois_1.EXPONENT[Frame._modN(bit + polynomial[0])];
      }
    },

    _appendEccToData: function() {
      var i;
      var data = 0;
      var dataBlock = this._dataBlock;
      var ecc = this._calculateMaxLength();
      var eccBlock = this._eccBlock;

      for (i = 0; i < this._neccBlock1; i++) {
        this._appendData(data, dataBlock, ecc, eccBlock);

        data += dataBlock;
        ecc += eccBlock;
      }

      for (i = 0; i < this._neccBlock2; i++) {
        this._appendData(data, dataBlock + 1, ecc, eccBlock);

        data += dataBlock + 1;
        ecc += eccBlock;
      }
    },

    _applyMask: function(mask) {
      var r3x, r3y, x, y;
      var buffer = this.buffer;
      var width = this.width;

      switch (mask) {
      case 0:
        for (y = 0; y < width; y++) {
          for (x = 0; x < width; x++) {
            if (!((x + y) & 1) && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 1:
        for (y = 0; y < width; y++) {
          for (x = 0; x < width; x++) {
            if (!(y & 1) && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 2:
        for (y = 0; y < width; y++) {
          for (r3x = 0, x = 0; x < width; x++, r3x++) {
            if (r3x === 3) {
              r3x = 0;
            }

            if (!r3x && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 3:
        for (r3y = 0, y = 0; y < width; y++, r3y++) {
          if (r3y === 3) {
            r3y = 0;
          }

          for (r3x = r3y, x = 0; x < width; x++, r3x++) {
            if (r3x === 3) {
              r3x = 0;
            }

            if (!r3x && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 4:
        for (y = 0; y < width; y++) {
          for (r3x = 0, r3y = (y >> 1) & 1, x = 0; x < width; x++, r3x++) {
            if (r3x === 3) {
              r3x = 0;
              r3y = !r3y;
            }

            if (!r3y && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 5:
        for (r3y = 0, y = 0; y < width; y++, r3y++) {
          if (r3y === 3) {
            r3y = 0;
          }

          for (r3x = 0, x = 0; x < width; x++, r3x++) {
            if (r3x === 3) {
              r3x = 0;
            }

            if (!((x & y & 1) + !(!r3x | !r3y)) && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 6:
        for (r3y = 0, y = 0; y < width; y++, r3y++) {
          if (r3y === 3) {
            r3y = 0;
          }

          for (r3x = 0, x = 0; x < width; x++, r3x++) {
            if (r3x === 3) {
              r3x = 0;
            }

            if (!((x & y & 1) + (r3x && r3x === r3y) & 1) && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      case 7:
        for (r3y = 0, y = 0; y < width; y++, r3y++) {
          if (r3y === 3) {
            r3y = 0;
          }

          for (r3x = 0, x = 0; x < width; x++, r3x++) {
            if (r3x === 3) {
              r3x = 0;
            }

            if (!((r3x && r3x === r3y) + (x + y & 1) & 1) && !this._isMasked(x, y)) {
              buffer[x + (y * width)] ^= 1;
            }
          }
        }

        break;
      }
    },

    _calculateMaxLength: function() {
      return (this._dataBlock * (this._neccBlock1 + this._neccBlock2)) + this._neccBlock2;
    },

    _calculatePolynomial: function() {
      var i, j;
      var eccBlock = this._eccBlock;
      var polynomial = this._polynomial;

      polynomial[0] = 1;

      for (i = 0; i < eccBlock; i++) {
        polynomial[i + 1] = 1;

        for (j = i; j > 0; j--) {
          polynomial[j] = polynomial[j] ? polynomial[j - 1] ^
            Galois_1.EXPONENT[Frame._modN(Galois_1.LOG[polynomial[j]] + i)] : polynomial[j - 1];
        }

        polynomial[0] = Galois_1.EXPONENT[Frame._modN(Galois_1.LOG[polynomial[0]] + i)];
      }

      // Use logs for generator polynomial to save calculation step.
      for (i = 0; i <= eccBlock; i++) {
        polynomial[i] = Galois_1.LOG[polynomial[i]];
      }
    },

    _checkBadness: function() {
      var b, b1, h, x, y;
      var bad = 0;
      var badness = this._badness;
      var buffer = this.buffer;
      var width = this.width;

      // Blocks of same colour.
      for (y = 0; y < width - 1; y++) {
        for (x = 0; x < width - 1; x++) {
          // All foreground colour.
          if ((buffer[x + (width * y)] &&
            buffer[x + 1 + (width * y)] &&
            buffer[x + (width * (y + 1))] &&
            buffer[x + 1 + (width * (y + 1))]) ||
            // All background colour.
            !(buffer[x + (width * y)] ||
            buffer[x + 1 + (width * y)] ||
            buffer[x + (width * (y + 1))] ||
            buffer[x + 1 + (width * (y + 1))])) {
            bad += Frame.N2;
          }
        }
      }

      var bw = 0;

      // X runs.
      for (y = 0; y < width; y++) {
        h = 0;

        badness[0] = 0;

        for (b = 0, x = 0; x < width; x++) {
          b1 = buffer[x + (width * y)];

          if (b === b1) {
            badness[h]++;
          } else {
            badness[++h] = 1;
          }

          b = b1;
          bw += b ? 1 : -1;
        }

        bad += this._getBadness(h);
      }

      if (bw < 0) {
        bw = -bw;
      }

      var count = 0;
      var big = bw;
      big += big << 2;
      big <<= 1;

      while (big > width * width) {
        big -= width * width;
        count++;
      }

      bad += count * Frame.N4;

      // Y runs.
      for (x = 0; x < width; x++) {
        h = 0;

        badness[0] = 0;

        for (b = 0, y = 0; y < width; y++) {
          b1 = buffer[x + (width * y)];

          if (b === b1) {
            badness[h]++;
          } else {
            badness[++h] = 1;
          }

          b = b1;
        }

        bad += this._getBadness(h);
      }

      return bad;
    },

    _convertBitStream: function(length) {
      var bit, i;
      var ecc = this._ecc;
      var version = this._version;

      // Convert string to bit stream. 8-bit data to QR-coded 8-bit data (numeric, alphanumeric, or kanji not supported).
      for (i = 0; i < length; i++) {
        ecc[i] = this._value.charCodeAt(i);
      }

      var stringBuffer = this._stringBuffer = ecc.slice();
      var maxLength = this._calculateMaxLength();

      if (length >= maxLength - 2) {
        length = maxLength - 2;

        if (version > 9) {
          length--;
        }
      }

      // Shift and re-pack to insert length prefix.
      var index = length;

      if (version > 9) {
        stringBuffer[index + 2] = 0;
        stringBuffer[index + 3] = 0;

        while (index--) {
          bit = stringBuffer[index];

          stringBuffer[index + 3] |= 255 & (bit << 4);
          stringBuffer[index + 2] = bit >> 4;
        }

        stringBuffer[2] |= 255 & (length << 4);
        stringBuffer[1] = length >> 4;
        stringBuffer[0] = 0x40 | (length >> 12);
      } else {
        stringBuffer[index + 1] = 0;
        stringBuffer[index + 2] = 0;

        while (index--) {
          bit = stringBuffer[index];

          stringBuffer[index + 2] |= 255 & (bit << 4);
          stringBuffer[index + 1] = bit >> 4;
        }

        stringBuffer[1] |= 255 & (length << 4);
        stringBuffer[0] = 0x40 | (length >> 4);
      }

      // Fill to end with pad pattern.
      index = length + 3 - (version < 10);

      while (index < maxLength) {
        stringBuffer[index++] = 0xec;
        stringBuffer[index++] = 0x11;
      }
    },

    _getBadness: function(length) {
      var i;
      var badRuns = 0;
      var badness = this._badness;

      for (i = 0; i <= length; i++) {
        if (badness[i] >= 5) {
          badRuns += Frame.N1 + badness[i] - 5;
        }
      }

      // FBFFFBF as in finder.
      for (i = 3; i < length - 1; i += 2) {
        if (badness[i - 2] === badness[i + 2] &&
          badness[i + 2] === badness[i - 1] &&
          badness[i - 1] === badness[i + 1] &&
          badness[i - 1] * 3 === badness[i] &&
          // Background around the foreground pattern? Not part of the specs.
          (badness[i - 3] === 0 || i + 3 > length ||
          badness[i - 3] * 3 >= badness[i] * 4 ||
          badness[i + 3] * 3 >= badness[i] * 4)) {
          badRuns += Frame.N3;
        }
      }

      return badRuns;
    },

    _finish: function() {
      // Save pre-mask copy of frame.
      this._stringBuffer = this.buffer.slice();

      var currentMask, i;
      var bit = 0;
      var mask = 30000;

      /*
       * Using for instead of while since in original Arduino code if an early mask was "good enough" it wouldn't try for
       * a better one since they get more complex and take longer.
       */
      for (i = 0; i < 8; i++) {
        // Returns foreground-background imbalance.
        this._applyMask(i);

        currentMask = this._checkBadness();

        // Is current mask better than previous best?
        if (currentMask < mask) {
          mask = currentMask;
          bit = i;
        }

        // Don't increment "i" to a void redoing mask.
        if (bit === 7) {
          break;
        }

        // Reset for next pass.
        this.buffer = this._stringBuffer.slice();
      }

      // Redo best mask as none were "good enough" (i.e. last wasn't bit).
      if (bit !== i) {
        this._applyMask(bit);
      }

      // Add in final mask/ECC level bytes.
      mask = ErrorCorrection_1.FINAL_FORMAT[bit + (this._level - 1 << 3)];

      var buffer = this.buffer;
      var width = this.width;

      // Low byte.
      for (i = 0; i < 8; i++, mask >>= 1) {
        if (mask & 1) {
          buffer[width - 1 - i + (width * 8)] = 1;

          if (i < 6) {
            buffer[8 + (width * i)] = 1;
          } else {
            buffer[8 + (width * (i + 1))] = 1;
          }
        }
      }

      // High byte.
      for (i = 0; i < 7; i++, mask >>= 1) {
        if (mask & 1) {
          buffer[8 + (width * (width - 7 + i))] = 1;

          if (i) {
            buffer[6 - i + (width * 8)] = 1;
          } else {
            buffer[7 + (width * 8)] = 1;
          }
        }
      }
    },

    _interleaveBlocks: function() {
      var i, j;
      var dataBlock = this._dataBlock;
      var ecc = this._ecc;
      var eccBlock = this._eccBlock;
      var k = 0;
      var maxLength = this._calculateMaxLength();
      var neccBlock1 = this._neccBlock1;
      var neccBlock2 = this._neccBlock2;
      var stringBuffer = this._stringBuffer;

      for (i = 0; i < dataBlock; i++) {
        for (j = 0; j < neccBlock1; j++) {
          ecc[k++] = stringBuffer[i + (j * dataBlock)];
        }

        for (j = 0; j < neccBlock2; j++) {
          ecc[k++] = stringBuffer[(neccBlock1 * dataBlock) + i + (j * (dataBlock + 1))];
        }
      }

      for (j = 0; j < neccBlock2; j++) {
        ecc[k++] = stringBuffer[(neccBlock1 * dataBlock) + i + (j * (dataBlock + 1))];
      }

      for (i = 0; i < eccBlock; i++) {
        for (j = 0; j < neccBlock1 + neccBlock2; j++) {
          ecc[k++] = stringBuffer[maxLength + i + (j * eccBlock)];
        }
      }

      this._stringBuffer = ecc;
    },

    _insertAlignments: function() {
      var i, x, y;
      var version = this._version;
      var width = this.width;

      if (version > 1) {
        i = Alignment_1.BLOCK[version];
        y = width - 7;

        for (;;) {
          x = width - 7;

          while (x > i - 3) {
            this._addAlignment(x, y);

            if (x < i) {
              break;
            }

            x -= i;
          }

          if (y <= i + 9) {
            break;
          }

          y -= i;

          this._addAlignment(6, y);
          this._addAlignment(y, 6);
        }
      }
    },

    _insertFinders: function() {
      var i, j, x, y;
      var buffer = this.buffer;
      var width = this.width;

      for (i = 0; i < 3; i++) {
        j = 0;
        y = 0;

        if (i === 1) {
          j = width - 7;
        }
        if (i === 2) {
          y = width - 7;
        }

        buffer[y + 3 + (width * (j + 3))] = 1;

        for (x = 0; x < 6; x++) {
          buffer[y + x + (width * j)] = 1;
          buffer[y + (width * (j + x + 1))] = 1;
          buffer[y + 6 + (width * (j + x))] = 1;
          buffer[y + x + 1 + (width * (j + 6))] = 1;
        }

        for (x = 1; x < 5; x++) {
          this._setMask(y + x, j + 1);
          this._setMask(y + 1, j + x + 1);
          this._setMask(y + 5, j + x);
          this._setMask(y + x + 1, j + 5);
        }

        for (x = 2; x < 4; x++) {
          buffer[y + x + (width * (j + 2))] = 1;
          buffer[y + 2 + (width * (j + x + 1))] = 1;
          buffer[y + 4 + (width * (j + x))] = 1;
          buffer[y + x + 1 + (width * (j + 4))] = 1;
        }
      }
    },

    _insertTimingGap: function() {
      var x, y;
      var width = this.width;

      for (y = 0; y < 7; y++) {
        this._setMask(7, y);
        this._setMask(width - 8, y);
        this._setMask(7, y + width - 7);
      }

      for (x = 0; x < 8; x++) {
        this._setMask(x, 7);
        this._setMask(x + width - 8, 7);
        this._setMask(x, width - 8);
      }
    },

    _insertTimingRowAndColumn: function() {
      var x;
      var buffer = this.buffer;
      var width = this.width;

      for (x = 0; x < width - 14; x++) {
        if (x & 1) {
          this._setMask(8 + x, 6);
          this._setMask(6, 8 + x);
        } else {
          buffer[8 + x + (width * 6)] = 1;
          buffer[6 + (width * (8 + x))] = 1;
        }
      }
    },

    _insertVersion: function() {
      var i, j, x, y;
      var buffer = this.buffer;
      var version = this._version;
      var width = this.width;

      if (version > 6) {
        i = Version_1.BLOCK[version - 7];
        j = 17;

        for (x = 0; x < 6; x++) {
          for (y = 0; y < 3; y++, j--) {
            if (1 & (j > 11 ? version >> j - 12 : i >> j)) {
              buffer[5 - x + (width * (2 - y + width - 11))] = 1;
              buffer[2 - y + width - 11 + (width * (5 - x))] = 1;
            } else {
              this._setMask(5 - x, 2 - y + width - 11);
              this._setMask(2 - y + width - 11, 5 - x);
            }
          }
        }
      }
    },

    _isMasked: function(x, y) {
      var bit = Frame._getMaskBit(x, y);

      return this._mask[bit] === 1;
    },

    _pack: function() {
      var bit, i, j;
      var k = 1;
      var v = 1;
      var width = this.width;
      var x = width - 1;
      var y = width - 1;

      // Interleaved data and ECC codes.
      var length = ((this._dataBlock + this._eccBlock) * (this._neccBlock1 + this._neccBlock2)) + this._neccBlock2;

      for (i = 0; i < length; i++) {
        bit = this._stringBuffer[i];

        for (j = 0; j < 8; j++, bit <<= 1) {
          if (0x80 & bit) {
            this.buffer[x + (width * y)] = 1;
          }

          // Find next fill position.
          do {
            if (v) {
              x--;
            } else {
              x++;

              if (k) {
                if (y !== 0) {
                  y--;
                } else {
                  x -= 2;
                  k = !k;

                  if (x === 6) {
                    x--;
                    y = 9;
                  }
                }
              } else if (y !== width - 1) {
                y++;
              } else {
                x -= 2;
                k = !k;

                if (x === 6) {
                  x--;
                  y -= 8;
                }
              }
            }

            v = !v;
          } while (this._isMasked(x, y));
        }
      }
    },

    _reverseMask: function() {
      var x, y;
      var width = this.width;

      for (x = 0; x < 9; x++) {
        this._setMask(x, 8);
      }

      for (x = 0; x < 8; x++) {
        this._setMask(x + width - 8, 8);
        this._setMask(8, x);
      }

      for (y = 0; y < 7; y++) {
        this._setMask(8, y + width - 7);
      }
    },

    _setMask: function(x, y) {
      var bit = Frame._getMaskBit(x, y);

      this._mask[bit] = 1;
    },

    _syncMask: function() {
      var x, y;
      var width = this.width;

      for (y = 0; y < width; y++) {
        for (x = 0; x <= y; x++) {
          if (this.buffer[x + (width * y)]) {
            this._setMask(x, y);
          }
        }
      }
    }

  }, {

    _createArray: function(length) {
      var i;
      var array = [];

      for (i = 0; i < length; i++) {
        array[i] = 0;
      }

      return array;
    },

    _getMaskBit: function(x, y) {
      var bit;

      if (x > y) {
        bit = x;
        x = y;
        y = bit;
      }

      bit = y;
      bit += y * y;
      bit >>= 1;
      bit += x;

      return bit;
    },

    _modN: function(x) {
      while (x >= 255) {
        x -= 255;
        x = (x >> 8) + (x & 255);
      }

      return x;
    },

    // *Badness* coefficients.
    N1: 3,
    N2: 3,
    N3: 40,
    N4: 10

  });

  var Frame_1 = Frame;

  /**
   * The options used by {@link Frame}.
   *
   * @typedef {Object} Frame~Options
   * @property {string} level - The ECC level to be used.
   * @property {string} value - The value to be encoded.
   */

  /**
   * An implementation of {@link Renderer} for working with <code>img</code> elements.
   *
   * This depends on {@link CanvasRenderer} being executed first as this implementation simply applies the data URL from
   * the rendered <code>canvas</code> element as the <code>src</code> for the <code>img</code> element being rendered.
   *
   * @public
   * @class
   * @extends Renderer
   */
  var ImageRenderer = Renderer_1.extend({

    /**
     * @override
     */
    draw: function() {
      this.element.src = this.qrious.toDataURL();
    },

    /**
     * @override
     */
    reset: function() {
      this.element.src = '';
    },

    /**
     * @override
     */
    resize: function() {
      var element = this.element;

      element.width = element.height = this.qrious.size;
    }

  });

  var ImageRenderer_1 = ImageRenderer;

  /**
   * Defines an available option while also configuring how values are applied to the target object.
   *
   * Optionally, a default value can be specified as well a value transformer for greater control over how the option
   * value is applied.
   *
   * If no value transformer is specified, then any specified option will be applied directly. All values are maintained
   * on the target object itself as a field using the option name prefixed with a single underscore.
   *
   * When an option is specified as modifiable, the {@link OptionManager} will be required to include a setter for the
   * property that is defined on the target object that uses the option name.
   *
   * @param {string} name - the name to be used
   * @param {boolean} [modifiable] - <code>true</code> if the property defined on target objects should include a setter;
   * otherwise <code>false</code>
   * @param {*} [defaultValue] - the default value to be used
   * @param {Option~ValueTransformer} [valueTransformer] - the value transformer to be used
   * @public
   * @class
   * @extends Nevis
   */
  var Option = lite.extend(function(name, modifiable, defaultValue, valueTransformer) {
    /**
     * The name for this {@link Option}.
     *
     * @public
     * @type {string}
     * @memberof Option#
     */
    this.name = name;

    /**
     * Whether a setter should be included on the property defined on target objects for this {@link Option}.
     *
     * @public
     * @type {boolean}
     * @memberof Option#
     */
    this.modifiable = Boolean(modifiable);

    /**
     * The default value for this {@link Option}.
     *
     * @public
     * @type {*}
     * @memberof Option#
     */
    this.defaultValue = defaultValue;

    this._valueTransformer = valueTransformer;
  }, {

    /**
     * Transforms the specified <code>value</code> so that it can be applied for this {@link Option}.
     *
     * If a value transformer has been specified for this {@link Option}, it will be called upon to transform
     * <code>value</code>. Otherwise, <code>value</code> will be returned directly.
     *
     * @param {*} value - the value to be transformed
     * @return {*} The transformed value or <code>value</code> if no value transformer is specified.
     * @public
     * @memberof Option#
     */
    transform: function(value) {
      var transformer = this._valueTransformer;
      if (typeof transformer === 'function') {
        return transformer(value, this);
      }

      return value;
    }

  });

  var Option_1 = Option;

  /**
   * Returns a transformed value for the specified <code>value</code> to be applied for the <code>option</code> provided.
   *
   * @callback Option~ValueTransformer
   * @param {*} value - the value to be transformed
   * @param {Option} option - the {@link Option} for which <code>value</code> is being transformed
   * @return {*} The transform value.
   */

  /**
   * Contains utility methods that are useful throughout the library.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var Utilities = lite.extend(null, {

    /**
     * Returns the absolute value of a given number.
     *
     * This method is simply a convenient shorthand for <code>Math.abs</code> while ensuring that nulls are returned as
     * <code>null</code> instead of zero.
     *
     * @param {number} value - the number whose absolute value is to be returned
     * @return {number} The absolute value of <code>value</code> or <code>null</code> if <code>value</code> is
     * <code>null</code>.
     * @public
     * @static
     * @memberof Utilities
     */
    abs: function(value) {
      return value != null ? Math.abs(value) : null;
    },

    /**
     * Returns whether the specified <code>object</code> has a property with the specified <code>name</code> as an own
     * (not inherited) property.
     *
     * @param {Object} object - the object on which the property is to be checked
     * @param {string} name - the name of the property to be checked
     * @return {boolean} <code>true</code> if <code>object</code> has an own property with <code>name</code>.
     * @public
     * @static
     * @memberof Utilities
     */
    hasOwn: function(object, name) {
      return Object.prototype.hasOwnProperty.call(object, name);
    },

    /**
     * A non-operation method that does absolutely nothing.
     *
     * @return {void}
     * @public
     * @static
     * @memberof Utilities
     */
    noop: function() {},

    /**
     * Transforms the specified <code>string</code> to upper case while remaining null-safe.
     *
     * @param {string} string - the string to be transformed to upper case
     * @return {string} <code>string</code> transformed to upper case if <code>string</code> is not <code>null</code>.
     * @public
     * @static
     * @memberof Utilities
     */
    toUpperCase: function(string) {
      return string != null ? string.toUpperCase() : null;
    }

  });

  var Utilities_1 = Utilities;

  /**
   * Manages multiple {@link Option} instances that are intended to be used by multiple implementations.
   *
   * Although the option definitions are shared between targets, the values are maintained on the targets themselves.
   *
   * @param {Option[]} options - the options to be used
   * @public
   * @class
   * @extends Nevis
   */
  var OptionManager = lite.extend(function(options) {
    /**
     * The available options for this {@link OptionManager}.
     *
     * @public
     * @type {Object.<string, Option>}
     * @memberof OptionManager#
     */
    this.options = {};

    options.forEach(function(option) {
      this.options[option.name] = option;
    }, this);
  }, {

    /**
     * Returns whether an option with the specified <code>name</code> is available.
     *
     * @param {string} name - the name of the {@link Option} whose existence is to be checked
     * @return {boolean} <code>true</code> if an {@link Option} exists with <code>name</code>; otherwise
     * <code>false</code>.
     * @public
     * @memberof OptionManager#
     */
    exists: function(name) {
      return this.options[name] != null;
    },

    /**
     * Returns the value of the option with the specified <code>name</code> on the <code>target</code> object provided.
     *
     * @param {string} name - the name of the {@link Option} whose value on <code>target</code> is to be returned
     * @param {Object} target - the object from which the value of the named {@link Option} is to be returned
     * @return {*} The value of the {@link Option} with <code>name</code> on <code>target</code>.
     * @public
     * @memberof OptionManager#
     */
    get: function(name, target) {
      return OptionManager._get(this.options[name], target);
    },

    /**
     * Returns a copy of all of the available options on the <code>target</code> object provided.
     *
     * @param {Object} target - the object from which the option name/value pairs are to be returned
     * @return {Object.<string, *>} A hash containing the name/value pairs of all options on <code>target</code>.
     * @public
     * @memberof OptionManager#
     */
    getAll: function(target) {
      var name;
      var options = this.options;
      var result = {};

      for (name in options) {
        if (Utilities_1.hasOwn(options, name)) {
          result[name] = OptionManager._get(options[name], target);
        }
      }

      return result;
    },

    /**
     * Initializes the available options for the <code>target</code> object provided and then applies the initial values
     * within the speciifed <code>options</code>.
     *
     * This method will throw an error if any of the names within <code>options</code> does not match an available option.
     *
     * This involves setting the default values and defining properties for all of the available options on
     * <code>target</code> before finally calling {@link OptionMananger#setAll} with <code>options</code> and
     * <code>target</code>. Any options that are configured to be modifiable will have a setter included in their defined
     * property that will allow its corresponding value to be modified.
     *
     * If a change handler is specified, it will be called whenever the value changes on <code>target</code> for a
     * modifiable option, but only when done so via the defined property's setter.
     *
     * @param {Object.<string, *>} options - the name/value pairs of the initial options to be set
     * @param {Object} target - the object on which the options are to be initialized
     * @param {Function} [changeHandler] - the function to be called whenever the value of an modifiable option changes on
     * <code>target</code>
     * @return {void}
     * @throws {Error} If <code>options</code> contains an invalid option name.
     * @public
     * @memberof OptionManager#
     */
    init: function(options, target, changeHandler) {
      if (typeof changeHandler !== 'function') {
        changeHandler = Utilities_1.noop;
      }

      var name, option;

      for (name in this.options) {
        if (Utilities_1.hasOwn(this.options, name)) {
          option = this.options[name];

          OptionManager._set(option, option.defaultValue, target);
          OptionManager._createAccessor(option, target, changeHandler);
        }
      }

      this._setAll(options, target, true);
    },

    /**
     * Sets the value of the option with the specified <code>name</code> on the <code>target</code> object provided to
     * <code>value</code>.
     *
     * This method will throw an error if <code>name</code> does not match an available option or matches an option that
     * cannot be modified.
     *
     * If <code>value</code> is <code>null</code> and the {@link Option} has a default value configured, then that default
     * value will be used instead. If the {@link Option} also has a value transformer configured, it will be used to
     * transform whichever value was determined to be used.
     *
     * This method returns whether the value of the underlying field on <code>target</code> was changed as a result.
     *
     * @param {string} name - the name of the {@link Option} whose value is to be set
     * @param {*} value - the value to be set for the named {@link Option} on <code>target</code>
     * @param {Object} target - the object on which <code>value</code> is to be set for the named {@link Option}
     * @return {boolean} <code>true</code> if the underlying field on <code>target</code> was changed; otherwise
     * <code>false</code>.
     * @throws {Error} If <code>name</code> is invalid or is for an option that cannot be modified.
     * @public
     * @memberof OptionManager#
     */
    set: function(name, value, target) {
      return this._set(name, value, target);
    },

    /**
     * Sets all of the specified <code>options</code> on the <code>target</code> object provided to their corresponding
     * values.
     *
     * This method will throw an error if any of the names within <code>options</code> does not match an available option
     * or matches an option that cannot be modified.
     *
     * If any value within <code>options</code> is <code>null</code> and the corresponding {@link Option} has a default
     * value configured, then that default value will be used instead. If an {@link Option} also has a value transformer
     * configured, it will be used to transform whichever value was determined to be used.
     *
     * This method returns whether the value for any of the underlying fields on <code>target</code> were changed as a
     * result.
     *
     * @param {Object.<string, *>} options - the name/value pairs of options to be set
     * @param {Object} target - the object on which the options are to be set
     * @return {boolean} <code>true</code> if any of the underlying fields on <code>target</code> were changed; otherwise
     * <code>false</code>.
     * @throws {Error} If <code>options</code> contains an invalid option name or an option that cannot be modiifed.
     * @public
     * @memberof OptionManager#
     */
    setAll: function(options, target) {
      return this._setAll(options, target);
    },

    _set: function(name, value, target, allowUnmodifiable) {
      var option = this.options[name];
      if (!option) {
        throw new Error('Invalid option: ' + name);
      }
      if (!option.modifiable && !allowUnmodifiable) {
        throw new Error('Option cannot be modified: ' + name);
      }

      return OptionManager._set(option, value, target);
    },

    _setAll: function(options, target, allowUnmodifiable) {
      if (!options) {
        return false;
      }

      var name;
      var changed = false;

      for (name in options) {
        if (Utilities_1.hasOwn(options, name) && this._set(name, options[name], target, allowUnmodifiable)) {
          changed = true;
        }
      }

      return changed;
    }

  }, {

    _createAccessor: function(option, target, changeHandler) {
      var descriptor = {
        get: function() {
          return OptionManager._get(option, target);
        }
      };

      if (option.modifiable) {
        descriptor.set = function(value) {
          if (OptionManager._set(option, value, target)) {
            changeHandler(value, option);
          }
        };
      }

      Object.defineProperty(target, option.name, descriptor);
    },

    _get: function(option, target) {
      return target['_' + option.name];
    },

    _set: function(option, value, target) {
      var fieldName = '_' + option.name;
      var oldValue = target[fieldName];
      var newValue = option.transform(value != null ? value : option.defaultValue);

      target[fieldName] = newValue;

      return newValue !== oldValue;
    }

  });

  var OptionManager_1 = OptionManager;

  /**
   * Called whenever the value of a modifiable {@link Option} is changed on a target object via the defined property's
   * setter.
   *
   * @callback OptionManager~ChangeHandler
   * @param {*} value - the new value for <code>option</code> on the target object
   * @param {Option} option - the modifable {@link Option} whose value has changed on the target object.
   * @return {void}
   */

  /**
   * A basic manager for {@link Service} implementations that are mapped to simple names.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var ServiceManager = lite.extend(function() {
    this._services = {};
  }, {

    /**
     * Returns the {@link Service} being managed with the specified <code>name</code>.
     *
     * @param {string} name - the name of the {@link Service} to be returned
     * @return {Service} The {@link Service} is being managed with <code>name</code>.
     * @throws {Error} If no {@link Service} is being managed with <code>name</code>.
     * @public
     * @memberof ServiceManager#
     */
    getService: function(name) {
      var service = this._services[name];
      if (!service) {
        throw new Error('Service is not being managed with name: ' + name);
      }

      return service;
    },

    /**
     * Sets the {@link Service} implementation to be managed for the specified <code>name</code> to the
     * <code>service</code> provided.
     *
     * @param {string} name - the name of the {@link Service} to be managed with <code>name</code>
     * @param {Service} service - the {@link Service} implementation to be managed
     * @return {void}
     * @throws {Error} If a {@link Service} is already being managed with the same <code>name</code>.
     * @public
     * @memberof ServiceManager#
     */
    setService: function(name, service) {
      if (this._services[name]) {
        throw new Error('Service is already managed with name: ' + name);
      }

      if (service) {
        this._services[name] = service;
      }
    }

  });

  var ServiceManager_1 = ServiceManager;

  var optionManager = new OptionManager_1([
    new Option_1('background', true, 'white'),
    new Option_1('backgroundAlpha', true, 1, Utilities_1.abs),
    new Option_1('element'),
    new Option_1('foreground', true, 'black'),
    new Option_1('foregroundAlpha', true, 1, Utilities_1.abs),
    new Option_1('level', true, 'L', Utilities_1.toUpperCase),
    new Option_1('mime', true, 'image/png'),
    new Option_1('padding', true, null, Utilities_1.abs),
    new Option_1('size', true, 100, Utilities_1.abs),
    new Option_1('value', true, '')
  ]);
  var serviceManager = new ServiceManager_1();

  /**
   * Enables configuration of a QR code generator which uses HTML5 <code>canvas</code> for rendering.
   *
   * @param {QRious~Options} [options] - the options to be used
   * @throws {Error} If any <code>options</code> are invalid.
   * @public
   * @class
   * @extends Nevis
   */
  var QRious = lite.extend(function(options) {
    optionManager.init(options, this, this.update.bind(this));

    var element = optionManager.get('element', this);
    var elementService = serviceManager.getService('element');
    var canvas = element && elementService.isCanvas(element) ? element : elementService.createCanvas();
    var image = element && elementService.isImage(element) ? element : elementService.createImage();

    this._canvasRenderer = new CanvasRenderer_1(this, canvas, true);
    this._imageRenderer = new ImageRenderer_1(this, image, image === element);

    this.update();
  }, {

    /**
     * Returns all of the options configured for this {@link QRious}.
     *
     * Any changes made to the returned object will not be reflected in the options themselves or their corresponding
     * underlying fields.
     *
     * @return {Object.<string, *>} A copy of the applied options.
     * @public
     * @memberof QRious#
     */
    get: function() {
      return optionManager.getAll(this);
    },

    /**
     * Sets all of the specified <code>options</code> and automatically updates this {@link QRious} if any of the
     * underlying fields are changed as a result.
     *
     * This is the preferred method for updating multiple options at one time to avoid unnecessary updates between
     * changes.
     *
     * @param {QRious~Options} options - the options to be set
     * @return {void}
     * @throws {Error} If any <code>options</code> are invalid or cannot be modified.
     * @public
     * @memberof QRious#
     */
    set: function(options) {
      if (optionManager.setAll(options, this)) {
        this.update();
      }
    },

    /**
     * Returns the image data URI for the generated QR code using the <code>mime</code> provided.
     *
     * @param {string} [mime] - the MIME type for the image
     * @return {string} The image data URI for the QR code.
     * @public
     * @memberof QRious#
     */
    toDataURL: function(mime) {
      return this.canvas.toDataURL(mime || this.mime);
    },

    /**
     * Updates this {@link QRious} by generating a new {@link Frame} and re-rendering the QR code.
     *
     * @return {void}
     * @protected
     * @memberof QRious#
     */
    update: function() {
      var frame = new Frame_1({
        level: this.level,
        value: this.value
      });

      this._canvasRenderer.render(frame);
      this._imageRenderer.render(frame);
    }

  }, {

    /**
     * Configures the <code>service</code> provided to be used by all {@link QRious} instances.
     *
     * @param {Service} service - the {@link Service} to be configured
     * @return {void}
     * @throws {Error} If a {@link Service} has already been configured with the same name.
     * @public
     * @static
     * @memberof QRious
     */
    use: function(service) {
      serviceManager.setService(service.getName(), service);
    }

  });

  Object.defineProperties(QRious.prototype, {

    canvas: {
      /**
       * Returns the <code>canvas</code> element being used to render the QR code for this {@link QRious}.
       *
       * @return {*} The <code>canvas</code> element.
       * @public
       * @memberof QRious#
       * @alias canvas
       */
      get: function() {
        return this._canvasRenderer.getElement();
      }
    },

    image: {
      /**
       * Returns the <code>img</code> element being used to render the QR code for this {@link QRious}.
       *
       * @return {*} The <code>img</code> element.
       * @public
       * @memberof QRious#
       * @alias image
       */
      get: function() {
        return this._imageRenderer.getElement();
      }
    }

  });

  var QRious_1$2 = QRious;

  /**
   * The options used by {@link QRious}.
   *
   * @typedef {Object} QRious~Options
   * @property {string} [background="white"] - The background color to be applied to the QR code.
   * @property {number} [backgroundAlpha=1] - The background alpha to be applied to the QR code.
   * @property {*} [element] - The element to be used to render the QR code which may either be an <code>canvas</code> or
   * <code>img</code>. The element(s) will be created if needed.
   * @property {string} [foreground="black"] - The foreground color to be applied to the QR code.
   * @property {number} [foregroundAlpha=1] - The foreground alpha to be applied to the QR code.
   * @property {string} [level="L"] - The error correction level to be applied to the QR code.
   * @property {string} [mime="image/png"] - The MIME type to be used to render the image for the QR code.
   * @property {number} [padding] - The padding for the QR code in pixels.
   * @property {number} [size=100] - The size of the QR code in pixels.
   * @property {string} [value=""] - The value to be encoded within the QR code.
   */

  var index = QRious_1$2;

  /**
   * Defines a service contract that must be met by all implementations.
   *
   * @public
   * @class
   * @extends Nevis
   */
  var Service = lite.extend({

    /**
     * Returns the name of this {@link Service}.
     *
     * @return {string} The service name.
     * @public
     * @abstract
     * @memberof Service#
     */
    getName: function() {}

  });

  var Service_1 = Service;

  /**
   * A service for working with elements.
   *
   * @public
   * @class
   * @extends Service
   */
  var ElementService = Service_1.extend({

    /**
     * Creates an instance of a canvas element.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @return {*} The newly created canvas element.
     * @public
     * @abstract
     * @memberof ElementService#
     */
    createCanvas: function() {},

    /**
     * Creates an instance of a image element.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @return {*} The newly created image element.
     * @public
     * @abstract
     * @memberof ElementService#
     */
    createImage: function() {},

    /**
     * @override
     */
    getName: function() {
      return 'element';
    },

    /**
     * Returns whether the specified <code>element</code> is a canvas.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @param {*} element - the element to be checked
     * @return {boolean} <code>true</code> if <code>element</code> is a canvas; otherwise <code>false</code>.
     * @public
     * @abstract
     * @memberof ElementService#
     */
    isCanvas: function(element) {},

    /**
     * Returns whether the specified <code>element</code> is an image.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @param {*} element - the element to be checked
     * @return {boolean} <code>true</code> if <code>element</code> is an image; otherwise <code>false</code>.
     * @public
     * @abstract
     * @memberof ElementService#
     */
    isImage: function(element) {}

  });

  var ElementService_1 = ElementService;

  /**
   * An implementation of {@link ElementService} intended for use within a browser environment.
   *
   * @public
   * @class
   * @extends ElementService
   */
  var BrowserElementService = ElementService_1.extend({

    /**
     * @override
     */
    createCanvas: function() {
      return document.createElement('canvas');
    },

    /**
     * @override
     */
    createImage: function() {
      return document.createElement('img');
    },

    /**
     * @override
     */
    isCanvas: function(element) {
      return element instanceof HTMLCanvasElement;
    },

    /**
     * @override
     */
    isImage: function(element) {
      return element instanceof HTMLImageElement;
    }

  });

  var BrowserElementService_1 = BrowserElementService;

  index.use(new BrowserElementService_1());

  var QRious_1 = index;

  return QRious_1;

})));

